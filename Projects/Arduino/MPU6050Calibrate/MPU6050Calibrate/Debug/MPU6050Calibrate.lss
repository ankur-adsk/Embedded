
MPU6050Calibrate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000394  00800100  000031a6  0000323a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001aa  00800494  00800494  000035ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000035ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000a78  00000000  00000000  000035fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000f73f  00000000  00000000  00004076  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001009  00000000  00000000  000137b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002418  00000000  00000000  000147be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000025d0  00000000  00000000  00016bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005197  00000000  00000000  000191a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b89c  00000000  00000000  0001e33f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000aa8  00000000  00000000  00029bdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 01 	jmp	0x26c	; 0x26c <__ctors_end>
       4:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
       8:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
       c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      10:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      14:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      18:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      1c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      20:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      24:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      28:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      2c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      30:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      34:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      38:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      3c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      40:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__vector_16>
      44:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      48:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__vector_18>
      4c:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_19>
      50:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      54:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      58:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      5c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      60:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__vector_24>
      64:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      68:	02 08       	sbc	r0, r2
      6a:	06 08       	sbc	r0, r6
      6c:	06 08       	sbc	r0, r6
      6e:	06 08       	sbc	r0, r6
      70:	06 08       	sbc	r0, r6
      72:	06 08       	sbc	r0, r6
      74:	06 08       	sbc	r0, r6
      76:	06 08       	sbc	r0, r6
      78:	14 07       	cpc	r17, r20
      7a:	06 08       	sbc	r0, r6
      7c:	06 08       	sbc	r0, r6
      7e:	06 08       	sbc	r0, r6
      80:	06 08       	sbc	r0, r6
      82:	06 08       	sbc	r0, r6
      84:	06 08       	sbc	r0, r6
      86:	06 08       	sbc	r0, r6
      88:	14 07       	cpc	r17, r20
      8a:	06 08       	sbc	r0, r6
      8c:	06 08       	sbc	r0, r6
      8e:	06 08       	sbc	r0, r6
      90:	06 08       	sbc	r0, r6
      92:	06 08       	sbc	r0, r6
      94:	06 08       	sbc	r0, r6
      96:	06 08       	sbc	r0, r6
      98:	1c 07       	cpc	r17, r28
      9a:	06 08       	sbc	r0, r6
      9c:	06 08       	sbc	r0, r6
      9e:	06 08       	sbc	r0, r6
      a0:	06 08       	sbc	r0, r6
      a2:	06 08       	sbc	r0, r6
      a4:	06 08       	sbc	r0, r6
      a6:	06 08       	sbc	r0, r6
      a8:	42 07       	cpc	r20, r18
      aa:	06 08       	sbc	r0, r6
      ac:	06 08       	sbc	r0, r6
      ae:	06 08       	sbc	r0, r6
      b0:	06 08       	sbc	r0, r6
      b2:	06 08       	sbc	r0, r6
      b4:	06 08       	sbc	r0, r6
      b6:	06 08       	sbc	r0, r6
      b8:	1c 07       	cpc	r17, r28
      ba:	06 08       	sbc	r0, r6
      bc:	06 08       	sbc	r0, r6
      be:	06 08       	sbc	r0, r6
      c0:	06 08       	sbc	r0, r6
      c2:	06 08       	sbc	r0, r6
      c4:	06 08       	sbc	r0, r6
      c6:	06 08       	sbc	r0, r6
      c8:	48 07       	cpc	r20, r24
      ca:	06 08       	sbc	r0, r6
      cc:	06 08       	sbc	r0, r6
      ce:	06 08       	sbc	r0, r6
      d0:	06 08       	sbc	r0, r6
      d2:	06 08       	sbc	r0, r6
      d4:	06 08       	sbc	r0, r6
      d6:	06 08       	sbc	r0, r6
      d8:	4e 07       	cpc	r20, r30
      da:	06 08       	sbc	r0, r6
      dc:	06 08       	sbc	r0, r6
      de:	06 08       	sbc	r0, r6
      e0:	06 08       	sbc	r0, r6
      e2:	06 08       	sbc	r0, r6
      e4:	06 08       	sbc	r0, r6
      e6:	06 08       	sbc	r0, r6
      e8:	60 07       	cpc	r22, r16
      ea:	06 08       	sbc	r0, r6
      ec:	06 08       	sbc	r0, r6
      ee:	06 08       	sbc	r0, r6
      f0:	06 08       	sbc	r0, r6
      f2:	06 08       	sbc	r0, r6
      f4:	06 08       	sbc	r0, r6
      f6:	06 08       	sbc	r0, r6
      f8:	8a 07       	cpc	r24, r26
      fa:	06 08       	sbc	r0, r6
      fc:	06 08       	sbc	r0, r6
      fe:	06 08       	sbc	r0, r6
     100:	06 08       	sbc	r0, r6
     102:	06 08       	sbc	r0, r6
     104:	06 08       	sbc	r0, r6
     106:	06 08       	sbc	r0, r6
     108:	54 07       	cpc	r21, r20
     10a:	06 08       	sbc	r0, r6
     10c:	06 08       	sbc	r0, r6
     10e:	06 08       	sbc	r0, r6
     110:	06 08       	sbc	r0, r6
     112:	06 08       	sbc	r0, r6
     114:	06 08       	sbc	r0, r6
     116:	06 08       	sbc	r0, r6
     118:	6e 07       	cpc	r22, r30
     11a:	06 08       	sbc	r0, r6
     11c:	06 08       	sbc	r0, r6
     11e:	06 08       	sbc	r0, r6
     120:	06 08       	sbc	r0, r6
     122:	06 08       	sbc	r0, r6
     124:	06 08       	sbc	r0, r6
     126:	06 08       	sbc	r0, r6
     128:	8d 07       	cpc	r24, r29
     12a:	06 08       	sbc	r0, r6
     12c:	06 08       	sbc	r0, r6
     12e:	06 08       	sbc	r0, r6
     130:	06 08       	sbc	r0, r6
     132:	06 08       	sbc	r0, r6
     134:	06 08       	sbc	r0, r6
     136:	06 08       	sbc	r0, r6
     138:	8d 07       	cpc	r24, r29
     13a:	06 08       	sbc	r0, r6
     13c:	06 08       	sbc	r0, r6
     13e:	06 08       	sbc	r0, r6
     140:	06 08       	sbc	r0, r6
     142:	06 08       	sbc	r0, r6
     144:	06 08       	sbc	r0, r6
     146:	06 08       	sbc	r0, r6
     148:	8d 07       	cpc	r24, r29
     14a:	06 08       	sbc	r0, r6
     14c:	06 08       	sbc	r0, r6
     14e:	06 08       	sbc	r0, r6
     150:	06 08       	sbc	r0, r6
     152:	06 08       	sbc	r0, r6
     154:	06 08       	sbc	r0, r6
     156:	06 08       	sbc	r0, r6
     158:	8d 07       	cpc	r24, r29
     15a:	06 08       	sbc	r0, r6
     15c:	06 08       	sbc	r0, r6
     15e:	06 08       	sbc	r0, r6
     160:	06 08       	sbc	r0, r6
     162:	06 08       	sbc	r0, r6
     164:	06 08       	sbc	r0, r6
     166:	06 08       	sbc	r0, r6
     168:	96 07       	cpc	r25, r22
     16a:	06 08       	sbc	r0, r6
     16c:	06 08       	sbc	r0, r6
     16e:	06 08       	sbc	r0, r6
     170:	06 08       	sbc	r0, r6
     172:	06 08       	sbc	r0, r6
     174:	06 08       	sbc	r0, r6
     176:	06 08       	sbc	r0, r6
     178:	c9 07       	cpc	r28, r25
     17a:	06 08       	sbc	r0, r6
     17c:	06 08       	sbc	r0, r6
     17e:	06 08       	sbc	r0, r6
     180:	06 08       	sbc	r0, r6
     182:	06 08       	sbc	r0, r6
     184:	06 08       	sbc	r0, r6
     186:	06 08       	sbc	r0, r6
     188:	96 07       	cpc	r25, r22
     18a:	06 08       	sbc	r0, r6
     18c:	06 08       	sbc	r0, r6
     18e:	06 08       	sbc	r0, r6
     190:	06 08       	sbc	r0, r6
     192:	06 08       	sbc	r0, r6
     194:	06 08       	sbc	r0, r6
     196:	06 08       	sbc	r0, r6
     198:	c9 07       	cpc	r28, r25
     19a:	06 08       	sbc	r0, r6
     19c:	06 08       	sbc	r0, r6
     19e:	06 08       	sbc	r0, r6
     1a0:	06 08       	sbc	r0, r6
     1a2:	06 08       	sbc	r0, r6
     1a4:	06 08       	sbc	r0, r6
     1a6:	06 08       	sbc	r0, r6
     1a8:	ae 07       	cpc	r26, r30
     1aa:	06 08       	sbc	r0, r6
     1ac:	06 08       	sbc	r0, r6
     1ae:	06 08       	sbc	r0, r6
     1b0:	06 08       	sbc	r0, r6
     1b2:	06 08       	sbc	r0, r6
     1b4:	06 08       	sbc	r0, r6
     1b6:	06 08       	sbc	r0, r6
     1b8:	cd 07       	cpc	r28, r29
     1ba:	06 08       	sbc	r0, r6
     1bc:	06 08       	sbc	r0, r6
     1be:	06 08       	sbc	r0, r6
     1c0:	06 08       	sbc	r0, r6
     1c2:	06 08       	sbc	r0, r6
     1c4:	06 08       	sbc	r0, r6
     1c6:	06 08       	sbc	r0, r6
     1c8:	cd 07       	cpc	r28, r29
     1ca:	06 08       	sbc	r0, r6
     1cc:	06 08       	sbc	r0, r6
     1ce:	06 08       	sbc	r0, r6
     1d0:	06 08       	sbc	r0, r6
     1d2:	06 08       	sbc	r0, r6
     1d4:	06 08       	sbc	r0, r6
     1d6:	06 08       	sbc	r0, r6
     1d8:	e2 07       	cpc	r30, r18
     1da:	06 08       	sbc	r0, r6
     1dc:	06 08       	sbc	r0, r6
     1de:	06 08       	sbc	r0, r6
     1e0:	06 08       	sbc	r0, r6
     1e2:	06 08       	sbc	r0, r6
     1e4:	06 08       	sbc	r0, r6
     1e6:	06 08       	sbc	r0, r6
     1e8:	fc 07       	cpc	r31, r28
     1ea:	06 08       	sbc	r0, r6
     1ec:	06 08       	sbc	r0, r6
     1ee:	06 08       	sbc	r0, r6
     1f0:	06 08       	sbc	r0, r6
     1f2:	06 08       	sbc	r0, r6
     1f4:	06 08       	sbc	r0, r6
     1f6:	06 08       	sbc	r0, r6
     1f8:	fc 07       	cpc	r31, r28

000001fa <__trampolines_end>:
     1fa:	53 65       	ori	r21, 0x53	; 83
     1fc:	6e 64       	ori	r22, 0x4E	; 78
     1fe:	20 61       	ori	r18, 0x10	; 16
     200:	6e 79       	andi	r22, 0x9E	; 158
     202:	20 63       	ori	r18, 0x30	; 48
     204:	68 61       	ori	r22, 0x18	; 24
     206:	72 61       	ori	r23, 0x12	; 18
     208:	63 74       	andi	r22, 0x43	; 67
     20a:	65 72       	andi	r22, 0x25	; 37
     20c:	20 74       	andi	r18, 0x40	; 64
     20e:	6f 20       	and	r6, r15
     210:	73 74       	andi	r23, 0x43	; 67
     212:	61 72       	andi	r22, 0x21	; 33
     214:	74 20       	and	r7, r4
     216:	73 6b       	ori	r23, 0xB3	; 179
     218:	65 74       	andi	r22, 0x45	; 69
     21a:	63 68       	ori	r22, 0x83	; 131
     21c:	2e 0a       	sbc	r2, r30
	...

0000021f <port_to_output_PGM>:
     21f:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000229 <digital_pin_to_port_PGM>:
     229:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     239:	03 03 03 03                                         ....

0000023d <digital_pin_to_bit_mask_PGM>:
     23d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     24d:	04 08 10 20                                         ... 

00000251 <digital_pin_to_timer_PGM>:
     251:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     261:	00 00 00 00 00                                      .....

00000266 <__ctors_start>:
     266:	f8 05       	cpc	r31, r8
     268:	93 0d       	add	r25, r3
     26a:	e4 12       	cpse	r14, r20

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d8 e0       	ldi	r29, 0x08	; 8
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	14 e0       	ldi	r17, 0x04	; 4
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	e6 ea       	ldi	r30, 0xA6	; 166
     280:	f1 e3       	ldi	r31, 0x31	; 49
     282:	02 c0       	rjmp	.+4      	; 0x288 <__do_copy_data+0x10>
     284:	05 90       	lpm	r0, Z+
     286:	0d 92       	st	X+, r0
     288:	a4 39       	cpi	r26, 0x94	; 148
     28a:	b1 07       	cpc	r27, r17
     28c:	d9 f7       	brne	.-10     	; 0x284 <__do_copy_data+0xc>

0000028e <__do_clear_bss>:
     28e:	26 e0       	ldi	r18, 0x06	; 6
     290:	a4 e9       	ldi	r26, 0x94	; 148
     292:	b4 e0       	ldi	r27, 0x04	; 4
     294:	01 c0       	rjmp	.+2      	; 0x298 <.do_clear_bss_start>

00000296 <.do_clear_bss_loop>:
     296:	1d 92       	st	X+, r1

00000298 <.do_clear_bss_start>:
     298:	ae 33       	cpi	r26, 0x3E	; 62
     29a:	b2 07       	cpc	r27, r18
     29c:	e1 f7       	brne	.-8      	; 0x296 <.do_clear_bss_loop>

0000029e <__do_global_ctors>:
     29e:	12 e0       	ldi	r17, 0x02	; 2
     2a0:	cc e6       	ldi	r28, 0x6C	; 108
     2a2:	d2 e0       	ldi	r29, 0x02	; 2
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <__do_global_ctors+0x10>
     2a6:	22 97       	sbiw	r28, 0x02	; 2
     2a8:	fe 01       	movw	r30, r28
     2aa:	0e 94 b0 18 	call	0x3160	; 0x3160 <__tablejump__>
     2ae:	c6 36       	cpi	r28, 0x66	; 102
     2b0:	d1 07       	cpc	r29, r17
     2b2:	c9 f7       	brne	.-14     	; 0x2a6 <__do_global_ctors+0x8>
     2b4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <main>
     2b8:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <_exit>

000002bc <__bad_interrupt>:
     2bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002c0 <_ZN7MPU6050C1Eh>:
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address) {
    devAddr = address;
     2c0:	fc 01       	movw	r30, r24
     2c2:	60 83       	st	Z, r22
     2c4:	08 95       	ret

000002c6 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
     2c6:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
     2c8:	06 2f       	mov	r16, r22
     2ca:	22 e0       	ldi	r18, 0x02	; 2
     2cc:	44 e0       	ldi	r20, 0x04	; 4
     2ce:	6b e1       	ldi	r22, 0x1B	; 27
     2d0:	fc 01       	movw	r30, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6I2Cdev9writeBitsEhhhhh>
}
     2d8:	0f 91       	pop	r16
     2da:	08 95       	ret

000002dc <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
     2dc:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
     2de:	06 2f       	mov	r16, r22
     2e0:	22 e0       	ldi	r18, 0x02	; 2
     2e2:	44 e0       	ldi	r20, 0x04	; 4
     2e4:	6c e1       	ldi	r22, 0x1C	; 28
     2e6:	fc 01       	movw	r30, r24
     2e8:	80 81       	ld	r24, Z
     2ea:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6I2Cdev9writeBitsEhhhhh>
}
     2ee:	0f 91       	pop	r16
     2f0:	08 95       	ret

000002f2 <_ZN7MPU605010getMotion6EPiS0_S0_S0_S0_S0_>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     2f2:	4f 92       	push	r4
     2f4:	5f 92       	push	r5
     2f6:	6f 92       	push	r6
     2f8:	7f 92       	push	r7
     2fa:	8f 92       	push	r8
     2fc:	9f 92       	push	r9
     2fe:	af 92       	push	r10
     300:	bf 92       	push	r11
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	ec 01       	movw	r28, r24
     314:	3b 01       	movw	r6, r22
     316:	4a 01       	movw	r8, r20
     318:	59 01       	movw	r10, r18
     31a:	28 01       	movw	r4, r16
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
     31c:	00 91 94 04 	lds	r16, 0x0494
     320:	10 91 95 04 	lds	r17, 0x0495
     324:	9c 01       	movw	r18, r24
     326:	2f 5f       	subi	r18, 0xFF	; 255
     328:	3f 4f       	sbci	r19, 0xFF	; 255
     32a:	4e e0       	ldi	r20, 0x0E	; 14
     32c:	6b e3       	ldi	r22, 0x3B	; 59
     32e:	88 81       	ld	r24, Y
     330:	0e 94 94 03 	call	0x728	; 0x728 <_ZN6I2Cdev9readBytesEhhhPhj>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	98 2f       	mov	r25, r24
     33a:	88 27       	eor	r24, r24
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	82 2b       	or	r24, r18
     340:	f3 01       	movw	r30, r6
     342:	91 83       	std	Z+1, r25	; 0x01
     344:	80 83       	st	Z, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     346:	8b 81       	ldd	r24, Y+3	; 0x03
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	98 2f       	mov	r25, r24
     34c:	88 27       	eor	r24, r24
     34e:	2c 81       	ldd	r18, Y+4	; 0x04
     350:	82 2b       	or	r24, r18
     352:	f4 01       	movw	r30, r8
     354:	91 83       	std	Z+1, r25	; 0x01
     356:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     358:	8d 81       	ldd	r24, Y+5	; 0x05
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	98 2f       	mov	r25, r24
     35e:	88 27       	eor	r24, r24
     360:	2e 81       	ldd	r18, Y+6	; 0x06
     362:	82 2b       	or	r24, r18
     364:	f5 01       	movw	r30, r10
     366:	91 83       	std	Z+1, r25	; 0x01
     368:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     36a:	89 85       	ldd	r24, Y+9	; 0x09
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	98 2f       	mov	r25, r24
     370:	88 27       	eor	r24, r24
     372:	2a 85       	ldd	r18, Y+10	; 0x0a
     374:	82 2b       	or	r24, r18
     376:	f2 01       	movw	r30, r4
     378:	91 83       	std	Z+1, r25	; 0x01
     37a:	80 83       	st	Z, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     37c:	8b 85       	ldd	r24, Y+11	; 0x0b
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	98 2f       	mov	r25, r24
     382:	88 27       	eor	r24, r24
     384:	2c 85       	ldd	r18, Y+12	; 0x0c
     386:	82 2b       	or	r24, r18
     388:	f7 01       	movw	r30, r14
     38a:	91 83       	std	Z+1, r25	; 0x01
     38c:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     38e:	8d 85       	ldd	r24, Y+13	; 0x0d
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	98 2f       	mov	r25, r24
     394:	88 27       	eor	r24, r24
     396:	2e 85       	ldd	r18, Y+14	; 0x0e
     398:	82 2b       	or	r24, r18
     39a:	f6 01       	movw	r30, r12
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	80 83       	st	Z, r24
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	cf 90       	pop	r12
     3b0:	bf 90       	pop	r11
     3b2:	af 90       	pop	r10
     3b4:	9f 90       	pop	r9
     3b6:	8f 90       	pop	r8
     3b8:	7f 90       	pop	r7
     3ba:	6f 90       	pop	r6
     3bc:	5f 90       	pop	r5
     3be:	4f 90       	pop	r4
     3c0:	08 95       	ret

000003c2 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
     3c2:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
     3c4:	46 e0       	ldi	r20, 0x06	; 6
     3c6:	6b e6       	ldi	r22, 0x6B	; 107
     3c8:	fc 01       	movw	r30, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN6I2Cdev8writeBitEhhhh>
     3d0:	08 95       	ret

000003d2 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
     3d2:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
     3d4:	06 2f       	mov	r16, r22
     3d6:	23 e0       	ldi	r18, 0x03	; 3
     3d8:	42 e0       	ldi	r20, 0x02	; 2
     3da:	6b e6       	ldi	r22, 0x6B	; 107
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6I2Cdev9writeBitsEhhhhh>
}
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ec 01       	movw	r28, r24
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	ce 01       	movw	r24, r28
     3f8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	ce 01       	movw	r24, r28
     400:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	ce 01       	movw	r24, r28
     408:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN7MPU605015setSleepEnabledEb>
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
     420:	e0 90 94 04 	lds	r14, 0x0494
     424:	f0 90 95 04 	lds	r15, 0x0495
     428:	8c 01       	movw	r16, r24
     42a:	0f 5f       	subi	r16, 0xFF	; 255
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	26 e0       	ldi	r18, 0x06	; 6
     430:	46 e0       	ldi	r20, 0x06	; 6
     432:	65 e7       	ldi	r22, 0x75	; 117
     434:	88 81       	ld	r24, Y
     436:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	08 95       	ret

0000044a <_ZN7MPU605014testConnectionEv>:
/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
    return getDeviceID() == 0x34;
     44a:	0e 94 09 02 	call	0x412	; 0x412 <_ZN7MPU605011getDeviceIDEv>
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	84 33       	cpi	r24, 0x34	; 52
     452:	09 f0       	breq	.+2      	; 0x456 <_ZN7MPU605014testConnectionEv+0xc>
     454:	90 e0       	ldi	r25, 0x00	; 0
}
     456:	89 2f       	mov	r24, r25
     458:	08 95       	ret

0000045a <_ZN7MPU605015getXAccelOffsetEv>:
    I2Cdev::writeByte(devAddr, MPU6050_RA_Z_FINE_GAIN, gain);
}

// XA_OFFS_* registers

int16_t MPU6050::getXAccelOffset() {
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
    I2Cdev::readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
     464:	00 91 94 04 	lds	r16, 0x0494
     468:	10 91 95 04 	lds	r17, 0x0495
     46c:	9c 01       	movw	r18, r24
     46e:	2f 5f       	subi	r18, 0xFF	; 255
     470:	3f 4f       	sbci	r19, 0xFF	; 255
     472:	42 e0       	ldi	r20, 0x02	; 2
     474:	66 e0       	ldi	r22, 0x06	; 6
     476:	88 81       	ld	r24, Y
     478:	0e 94 94 03 	call	0x728	; 0x728 <_ZN6I2Cdev9readBytesEhhhPhj>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	98 2f       	mov	r25, r24
     482:	88 27       	eor	r24, r24
     484:	2a 81       	ldd	r18, Y+2	; 0x02
}
     486:	82 2b       	or	r24, r18
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <_ZN7MPU605015setXAccelOffsetEi>:
void MPU6050::setXAccelOffset(int16_t offset) {
     492:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
     494:	66 e0       	ldi	r22, 0x06	; 6
     496:	fc 01       	movw	r30, r24
     498:	80 81       	ld	r24, Z
     49a:	0e 94 82 03 	call	0x704	; 0x704 <_ZN6I2Cdev9writeWordEhhj>
     49e:	08 95       	ret

000004a0 <_ZN7MPU605015getYAccelOffsetEv>:
}

// YA_OFFS_* register

int16_t MPU6050::getYAccelOffset() {
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ec 01       	movw	r28, r24
    I2Cdev::readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
     4aa:	00 91 94 04 	lds	r16, 0x0494
     4ae:	10 91 95 04 	lds	r17, 0x0495
     4b2:	9c 01       	movw	r18, r24
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	42 e0       	ldi	r20, 0x02	; 2
     4ba:	68 e0       	ldi	r22, 0x08	; 8
     4bc:	88 81       	ld	r24, Y
     4be:	0e 94 94 03 	call	0x728	; 0x728 <_ZN6I2Cdev9readBytesEhhhPhj>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	98 2f       	mov	r25, r24
     4c8:	88 27       	eor	r24, r24
     4ca:	2a 81       	ldd	r18, Y+2	; 0x02
}
     4cc:	82 2b       	or	r24, r18
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <_ZN7MPU605015setYAccelOffsetEi>:
void MPU6050::setYAccelOffset(int16_t offset) {
     4d8:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
     4da:	68 e0       	ldi	r22, 0x08	; 8
     4dc:	fc 01       	movw	r30, r24
     4de:	80 81       	ld	r24, Z
     4e0:	0e 94 82 03 	call	0x704	; 0x704 <_ZN6I2Cdev9writeWordEhhj>
     4e4:	08 95       	ret

000004e6 <_ZN7MPU605015getZAccelOffsetEv>:
}

// ZA_OFFS_* register

int16_t MPU6050::getZAccelOffset() {
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	ec 01       	movw	r28, r24
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
     4f0:	00 91 94 04 	lds	r16, 0x0494
     4f4:	10 91 95 04 	lds	r17, 0x0495
     4f8:	9c 01       	movw	r18, r24
     4fa:	2f 5f       	subi	r18, 0xFF	; 255
     4fc:	3f 4f       	sbci	r19, 0xFF	; 255
     4fe:	42 e0       	ldi	r20, 0x02	; 2
     500:	6a e0       	ldi	r22, 0x0A	; 10
     502:	88 81       	ld	r24, Y
     504:	0e 94 94 03 	call	0x728	; 0x728 <_ZN6I2Cdev9readBytesEhhhPhj>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	98 2f       	mov	r25, r24
     50e:	88 27       	eor	r24, r24
     510:	2a 81       	ldd	r18, Y+2	; 0x02
}
     512:	82 2b       	or	r24, r18
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	08 95       	ret

0000051e <_ZN7MPU605015setZAccelOffsetEi>:
void MPU6050::setZAccelOffset(int16_t offset) {
     51e:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
     520:	6a e0       	ldi	r22, 0x0A	; 10
     522:	fc 01       	movw	r30, r24
     524:	80 81       	ld	r24, Z
     526:	0e 94 82 03 	call	0x704	; 0x704 <_ZN6I2Cdev9writeWordEhhj>
     52a:	08 95       	ret

0000052c <_ZN7MPU605014getXGyroOffsetEv>:
}

// XG_OFFS_USR* registers

int16_t MPU6050::getXGyroOffset() {
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
     536:	00 91 94 04 	lds	r16, 0x0494
     53a:	10 91 95 04 	lds	r17, 0x0495
     53e:	9c 01       	movw	r18, r24
     540:	2f 5f       	subi	r18, 0xFF	; 255
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	42 e0       	ldi	r20, 0x02	; 2
     546:	63 e1       	ldi	r22, 0x13	; 19
     548:	88 81       	ld	r24, Y
     54a:	0e 94 94 03 	call	0x728	; 0x728 <_ZN6I2Cdev9readBytesEhhhPhj>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	98 2f       	mov	r25, r24
     554:	88 27       	eor	r24, r24
     556:	2a 81       	ldd	r18, Y+2	; 0x02
}
     558:	82 2b       	or	r24, r18
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	08 95       	ret

00000564 <_ZN7MPU605014setXGyroOffsetEi>:
void MPU6050::setXGyroOffset(int16_t offset) {
     564:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
     566:	63 e1       	ldi	r22, 0x13	; 19
     568:	fc 01       	movw	r30, r24
     56a:	80 81       	ld	r24, Z
     56c:	0e 94 82 03 	call	0x704	; 0x704 <_ZN6I2Cdev9writeWordEhhj>
     570:	08 95       	ret

00000572 <_ZN7MPU605014getYGyroOffsetEv>:
}

// YG_OFFS_USR* register

int16_t MPU6050::getYGyroOffset() {
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	ec 01       	movw	r28, r24
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
     57c:	00 91 94 04 	lds	r16, 0x0494
     580:	10 91 95 04 	lds	r17, 0x0495
     584:	9c 01       	movw	r18, r24
     586:	2f 5f       	subi	r18, 0xFF	; 255
     588:	3f 4f       	sbci	r19, 0xFF	; 255
     58a:	42 e0       	ldi	r20, 0x02	; 2
     58c:	65 e1       	ldi	r22, 0x15	; 21
     58e:	88 81       	ld	r24, Y
     590:	0e 94 94 03 	call	0x728	; 0x728 <_ZN6I2Cdev9readBytesEhhhPhj>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	98 2f       	mov	r25, r24
     59a:	88 27       	eor	r24, r24
     59c:	2a 81       	ldd	r18, Y+2	; 0x02
}
     59e:	82 2b       	or	r24, r18
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	08 95       	ret

000005aa <_ZN7MPU605014setYGyroOffsetEi>:
void MPU6050::setYGyroOffset(int16_t offset) {
     5aa:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
     5ac:	65 e1       	ldi	r22, 0x15	; 21
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	0e 94 82 03 	call	0x704	; 0x704 <_ZN6I2Cdev9writeWordEhhj>
     5b6:	08 95       	ret

000005b8 <_ZN7MPU605014getZGyroOffsetEv>:
}

// ZG_OFFS_USR* register

int16_t MPU6050::getZGyroOffset() {
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
     5c2:	00 91 94 04 	lds	r16, 0x0494
     5c6:	10 91 95 04 	lds	r17, 0x0495
     5ca:	9c 01       	movw	r18, r24
     5cc:	2f 5f       	subi	r18, 0xFF	; 255
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
     5d0:	42 e0       	ldi	r20, 0x02	; 2
     5d2:	67 e1       	ldi	r22, 0x17	; 23
     5d4:	88 81       	ld	r24, Y
     5d6:	0e 94 94 03 	call	0x728	; 0x728 <_ZN6I2Cdev9readBytesEhhhPhj>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	98 2f       	mov	r25, r24
     5e0:	88 27       	eor	r24, r24
     5e2:	2a 81       	ldd	r18, Y+2	; 0x02
}
     5e4:	82 2b       	or	r24, r18
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	08 95       	ret

000005f0 <_ZN7MPU605014setZGyroOffsetEi>:
void MPU6050::setZGyroOffset(int16_t offset) {
     5f0:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
     5f2:	67 e1       	ldi	r22, 0x17	; 23
     5f4:	fc 01       	movw	r30, r24
     5f6:	80 81       	ld	r24, Z
     5f8:	0e 94 82 03 	call	0x704	; 0x704 <_ZN6I2Cdev9writeWordEhhj>
     5fc:	08 95       	ret

000005fe <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	c6 2f       	mov	r28, r22
     60a:	04 2f       	mov	r16, r20
     60c:	f2 2e       	mov	r15, r18
     60e:	13 2f       	mov	r17, r19
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
     610:	68 2f       	mov	r22, r24
     612:	86 e9       	ldi	r24, 0x96	; 150
     614:	94 e0       	ldi	r25, 0x04	; 4
     616:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
     61a:	6c 2f       	mov	r22, r28
     61c:	86 e9       	ldi	r24, 0x96	; 150
     61e:	94 e0       	ldi	r25, 0x04	; 4
     620:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN7TwoWire5writeEh>
    #endif
    for (uint8_t i = 0; i < length; i++) {
     624:	00 23       	and	r16, r16
     626:	59 f0       	breq	.+22     	; 0x63e <_ZN6I2Cdev10writeBytesEhhhPh+0x40>
     628:	cf 2d       	mov	r28, r15
     62a:	d1 2f       	mov	r29, r17
     62c:	10 e0       	ldi	r17, 0x00	; 0
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t) data[i]);
     62e:	69 91       	ld	r22, Y+
     630:	86 e9       	ldi	r24, 0x96	; 150
     632:	94 e0       	ldi	r25, 0x04	; 4
     634:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN7TwoWire5writeEh>
        Wire.send((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
        Wire.write((uint8_t) regAddr); // send address
    #endif
    for (uint8_t i = 0; i < length; i++) {
     638:	1f 5f       	subi	r17, 0xFF	; 255
     63a:	10 13       	cpse	r17, r16
     63c:	f8 cf       	rjmp	.-16     	; 0x62e <_ZN6I2Cdev10writeBytesEhhhPh+0x30>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
     63e:	86 e9       	ldi	r24, 0x96	; 150
     640:	94 e0       	ldi	r25, 0x04	; 4
     642:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN7TwoWire15endTransmissionEv>
//        USCI_I2C_transmit(length,data);       // start transmitting

        I2C_writeBytesToAddress(devAddr, regAddr, length, data);

	#endif
    return status == 0;
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	81 11       	cpse	r24, r1
     64a:	90 e0       	ldi	r25, 0x00	; 0
}
     64c:	89 2f       	mov	r24, r25
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	08 95       	ret

0000065a <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	1f 92       	push	r1
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	49 83       	std	Y+1, r20	; 0x01
    return writeBytes(devAddr, regAddr, 1, &data);
     666:	9e 01       	movw	r18, r28
     668:	2f 5f       	subi	r18, 0xFF	; 255
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN6I2Cdev10writeBytesEhhhPh>
}
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <_ZN6I2Cdev10writeWordsEhhhPj>:
 * @param regAddr First register address to write to
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	16 2f       	mov	r17, r22
     686:	04 2f       	mov	r16, r20
     688:	e9 01       	movw	r28, r18
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
     68a:	68 2f       	mov	r22, r24
     68c:	86 e9       	ldi	r24, 0x96	; 150
     68e:	94 e0       	ldi	r25, 0x04	; 4
     690:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN7TwoWire17beginTransmissionEh>
        Wire.write(regAddr); // send address
     694:	61 2f       	mov	r22, r17
     696:	86 e9       	ldi	r24, 0x96	; 150
     698:	94 e0       	ldi	r25, 0x04	; 4
     69a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN7TwoWire5writeEh>
//		//Delay until transmission completes
//		while (I2C_isBusBusy()) ;
//todo implement

    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	00 0f       	add	r16, r16
     6a2:	11 1f       	adc	r17, r17
     6a4:	10 16       	cp	r1, r16
     6a6:	11 06       	cpc	r1, r17
     6a8:	fc f4       	brge	.+62     	; 0x6e8 <_ZN6I2Cdev10writeWordsEhhhPj+0x6e>
     6aa:	f1 2c       	mov	r15, r1
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t)(data[i++] >> 8)); // send MSB
            Wire.send((uint8_t)data[i]);          // send LSB
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t)(data[i++] >> 8)); // send MSB
     6ac:	ef 2d       	mov	r30, r15
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	ec 0f       	add	r30, r28
     6b6:	fd 1f       	adc	r31, r29
     6b8:	61 81       	ldd	r22, Z+1	; 0x01
     6ba:	86 e9       	ldi	r24, 0x96	; 150
     6bc:	94 e0       	ldi	r25, 0x04	; 4
     6be:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN7TwoWire5writeEh>
     6c2:	e1 e0       	ldi	r30, 0x01	; 1
     6c4:	ef 0d       	add	r30, r15
            Wire.write((uint8_t)data[i]);          // send LSB
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ec 0f       	add	r30, r28
     6ce:	fd 1f       	adc	r31, r29
     6d0:	60 81       	ld	r22, Z
     6d2:	86 e9       	ldi	r24, 0x96	; 150
     6d4:	94 e0       	ldi	r25, 0x04	; 4
     6d6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN7TwoWire5writeEh>
//		//Delay until transmission completes
//		while (I2C_isBusBusy()) ;
//todo implement

    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
     6da:	f3 94       	inc	r15
     6dc:	f3 94       	inc	r15
     6de:	8f 2d       	mov	r24, r15
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	80 17       	cp	r24, r16
     6e4:	91 07       	cpc	r25, r17
     6e6:	14 f3       	brlt	.-60     	; 0x6ac <_ZN6I2Cdev10writeWordsEhhhPj+0x32>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
     6e8:	86 e9       	ldi	r24, 0x96	; 150
     6ea:	94 e0       	ldi	r25, 0x04	; 4
     6ec:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN7TwoWire15endTransmissionEv>
//    	I2C_disable();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	81 11       	cpse	r24, r1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
}
     6f6:	89 2f       	mov	r24, r25
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	08 95       	ret

00000704 <_ZN6I2Cdev9writeWordEhhj>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	00 d0       	rcall	.+0      	; 0x70a <_ZN6I2Cdev9writeWordEhhj+0x6>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	5a 83       	std	Y+2, r21	; 0x02
     710:	49 83       	std	Y+1, r20	; 0x01
    return writeWords(devAddr, regAddr, 1, &data);
     712:	9e 01       	movw	r18, r28
     714:	2f 5f       	subi	r18, 0xFF	; 255
     716:	3f 4f       	sbci	r19, 0xFF	; 255
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6I2Cdev10writeWordsEhhhPj>
}
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <_ZN6I2Cdev9readBytesEhhhPhj>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
     728:	2f 92       	push	r2
     72a:	3f 92       	push	r3
     72c:	4f 92       	push	r4
     72e:	5f 92       	push	r5
     730:	6f 92       	push	r6
     732:	7f 92       	push	r7
     734:	8f 92       	push	r8
     736:	9f 92       	push	r9
     738:	af 92       	push	r10
     73a:	bf 92       	push	r11
     73c:	cf 92       	push	r12
     73e:	df 92       	push	r13
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	00 d0       	rcall	.+0      	; 0x74e <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
     74e:	00 d0       	rcall	.+0      	; 0x750 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
     750:	00 d0       	rcall	.+0      	; 0x752 <_ZN6I2Cdev9readBytesEhhhPhj+0x2a>
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	98 2e       	mov	r9, r24
     758:	69 83       	std	Y+1, r22	; 0x01
     75a:	84 2e       	mov	r8, r20
     75c:	59 01       	movw	r10, r18
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    uint32_t t1 = millis();
     75e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <millis>
     762:	6b 01       	movw	r12, r22
     764:	7c 01       	movw	r14, r24
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
     766:	88 20       	and	r8, r8
     768:	09 f4       	brne	.+2      	; 0x76c <_ZN6I2Cdev9readBytesEhhhPhj+0x44>
     76a:	5f c0       	rjmp	.+190    	; 0x82a <_ZN6I2Cdev9readBytesEhhhPhj+0x102>
     76c:	21 2c       	mov	r2, r1
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
     76e:	31 2c       	mov	r3, r1
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
                Wire.beginTransmission(devAddr);
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
     770:	88 2d       	mov	r24, r8
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	9b 83       	std	Y+3, r25	; 0x03
     776:	8a 83       	std	Y+2, r24	; 0x02
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
     778:	28 01       	movw	r4, r16
     77a:	61 2c       	mov	r6, r1
     77c:	71 2c       	mov	r7, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
     77e:	8c 82       	std	Y+4, r8	; 0x04
                Wire.beginTransmission(devAddr);
     780:	69 2d       	mov	r22, r9
     782:	86 e9       	ldi	r24, 0x96	; 150
     784:	94 e0       	ldi	r25, 0x04	; 4
     786:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
     78a:	69 81       	ldd	r22, Y+1	; 0x01
     78c:	86 e9       	ldi	r24, 0x96	; 150
     78e:	94 e0       	ldi	r25, 0x04	; 4
     790:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN7TwoWire5writeEh>
                Wire.endTransmission();
     794:	86 e9       	ldi	r24, 0x96	; 150
     796:	94 e0       	ldi	r25, 0x04	; 4
     798:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
     79c:	69 2d       	mov	r22, r9
     79e:	86 e9       	ldi	r24, 0x96	; 150
     7a0:	94 e0       	ldi	r25, 0x04	; 4
     7a2:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
     7a6:	4a 81       	ldd	r20, Y+2	; 0x02
     7a8:	5b 81       	ldd	r21, Y+3	; 0x03
     7aa:	42 19       	sub	r20, r2
     7ac:	51 09       	sbc	r21, r1
     7ae:	41 32       	cpi	r20, 0x21	; 33
     7b0:	51 05       	cpc	r21, r1
     7b2:	14 f0       	brlt	.+4      	; 0x7b8 <_ZN6I2Cdev9readBytesEhhhPhj+0x90>
     7b4:	40 e2       	ldi	r20, 0x20	; 32
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	69 2d       	mov	r22, r9
     7ba:	86 e9       	ldi	r24, 0x96	; 150
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	0e 94 d3 05 	call	0xba6	; 0xba6 <_ZN7TwoWire11requestFromEhh>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
     7c2:	0f c0       	rjmp	.+30     	; 0x7e2 <_ZN6I2Cdev9readBytesEhhhPhj+0xba>
                    data[count] = Wire.read();
     7c4:	f5 01       	movw	r30, r10
     7c6:	e3 0d       	add	r30, r3
     7c8:	f1 1d       	adc	r31, r1
     7ca:	37 fc       	sbrc	r3, 7
     7cc:	fa 95       	dec	r31
     7ce:	fe 83       	std	Y+6, r31	; 0x06
     7d0:	ed 83       	std	Y+5, r30	; 0x05
     7d2:	86 e9       	ldi	r24, 0x96	; 150
     7d4:	94 e0       	ldi	r25, 0x04	; 4
     7d6:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN7TwoWire4readEv>
     7da:	ed 81       	ldd	r30, Y+5	; 0x05
     7dc:	fe 81       	ldd	r31, Y+6	; 0x06
     7de:	80 83       	st	Z, r24
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
     7e0:	33 94       	inc	r3
     7e2:	86 e9       	ldi	r24, 0x96	; 150
     7e4:	94 e0       	ldi	r25, 0x04	; 4
     7e6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN7TwoWire9availableEv>
     7ea:	89 2b       	or	r24, r25
     7ec:	81 f0       	breq	.+32     	; 0x80e <_ZN6I2Cdev9readBytesEhhhPhj+0xe6>
     7ee:	01 15       	cp	r16, r1
     7f0:	11 05       	cpc	r17, r1
     7f2:	41 f3       	breq	.-48     	; 0x7c4 <_ZN6I2Cdev9readBytesEhhhPhj+0x9c>
     7f4:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <millis>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	8c 19       	sub	r24, r12
     7fe:	9d 09       	sbc	r25, r13
     800:	ae 09       	sbc	r26, r14
     802:	bf 09       	sbc	r27, r15
     804:	84 15       	cp	r24, r4
     806:	95 05       	cpc	r25, r5
     808:	a6 05       	cpc	r26, r6
     80a:	b7 05       	cpc	r27, r7
     80c:	d8 f2       	brcs	.-74     	; 0x7c4 <_ZN6I2Cdev9readBytesEhhhPhj+0x9c>
                        Serial.print(data[count], HEX);
                        if (count + 1 < length) Serial.print(" ");
                    #endif
                }
        
                Wire.endTransmission();
     80e:	86 e9       	ldi	r24, 0x96	; 150
     810:	94 e0       	ldi	r25, 0x04	; 4
     812:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN7TwoWire15endTransmissionEv>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
     816:	8c 81       	ldd	r24, Y+4	; 0x04
     818:	f0 e2       	ldi	r31, 0x20	; 32
     81a:	f8 15       	cp	r31, r8
     81c:	08 f4       	brcc	.+2      	; 0x820 <_ZN6I2Cdev9readBytesEhhhPhj+0xf8>
     81e:	80 e2       	ldi	r24, 0x20	; 32
     820:	28 0e       	add	r2, r24
     822:	28 14       	cp	r2, r8
     824:	08 f4       	brcc	.+2      	; 0x828 <_ZN6I2Cdev9readBytesEhhhPhj+0x100>
     826:	ac cf       	rjmp	.-168    	; 0x780 <_ZN6I2Cdev9readBytesEhhhPhj+0x58>
     828:	01 c0       	rjmp	.+2      	; 0x82c <_ZN6I2Cdev9readBytesEhhhPhj+0x104>
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
     82a:	31 2c       	mov	r3, r1
		count = length; //TODO implement something meaningful, for now just making sure no error is thrown
	
    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
     82c:	01 15       	cp	r16, r1
     82e:	11 05       	cpc	r17, r1
     830:	c9 f0       	breq	.+50     	; 0x864 <_ZN6I2Cdev9readBytesEhhhPhj+0x13c>
     832:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <millis>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	8c 19       	sub	r24, r12
     83c:	9d 09       	sbc	r25, r13
     83e:	ae 09       	sbc	r26, r14
     840:	bf 09       	sbc	r27, r15
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	80 17       	cp	r24, r16
     848:	91 07       	cpc	r25, r17
     84a:	a2 07       	cpc	r26, r18
     84c:	b3 07       	cpc	r27, r19
     84e:	50 f0       	brcs	.+20     	; 0x864 <_ZN6I2Cdev9readBytesEhhhPhj+0x13c>
     850:	91 2c       	mov	r9, r1
     852:	83 2d       	mov	r24, r3
     854:	99 27       	eor	r25, r25
     856:	87 fd       	sbrc	r24, 7
     858:	90 95       	com	r25
     85a:	88 15       	cp	r24, r8
     85c:	99 05       	cpc	r25, r9
     85e:	14 f4       	brge	.+4      	; 0x864 <_ZN6I2Cdev9readBytesEhhhPhj+0x13c>
     860:	33 24       	eor	r3, r3
     862:	3a 94       	dec	r3
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
     864:	83 2d       	mov	r24, r3
     866:	26 96       	adiw	r28, 0x06	; 6
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	bf 90       	pop	r11
     884:	af 90       	pop	r10
     886:	9f 90       	pop	r9
     888:	8f 90       	pop	r8
     88a:	7f 90       	pop	r7
     88c:	6f 90       	pop	r6
     88e:	5f 90       	pop	r5
     890:	4f 90       	pop	r4
     892:	3f 90       	pop	r3
     894:	2f 90       	pop	r2
     896:	08 95       	ret

00000898 <_ZN6I2Cdev8readByteEhhPhj>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
    return readBytes(devAddr, regAddr, 1, data, timeout);
     89c:	89 01       	movw	r16, r18
     89e:	9a 01       	movw	r18, r20
     8a0:	41 e0       	ldi	r20, 0x01	; 1
     8a2:	0e 94 94 03 	call	0x728	; 0x728 <_ZN6I2Cdev9readBytesEhhhPhj>
}
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	1f 92       	push	r1
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	c4 2e       	mov	r12, r20
     8c4:	d2 2e       	mov	r13, r18
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
     8c6:	97 01       	movw	r18, r14
     8c8:	ae 01       	movw	r20, r28
     8ca:	4f 5f       	subi	r20, 0xFF	; 255
     8cc:	5f 4f       	sbci	r21, 0xFF	; 255
     8ce:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN6I2Cdev8readByteEhhPhj>
     8d2:	88 23       	and	r24, r24
     8d4:	09 f1       	breq	.+66     	; 0x918 <__stack+0x19>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     8d6:	4c 2d       	mov	r20, r12
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	4d 19       	sub	r20, r13
     8dc:	51 09       	sbc	r21, r1
     8de:	4f 5f       	subi	r20, 0xFF	; 255
     8e0:	5f 4f       	sbci	r21, 0xFF	; 255
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	9b 01       	movw	r18, r22
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <_ZN6I2Cdev8readBitsEhhhhPhj+0x42>
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	da 94       	dec	r13
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <_ZN6I2Cdev8readBitsEhhhhPhj+0x3e>
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	31 09       	sbc	r19, r1
     8f6:	04 2e       	mov	r0, r20
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <_ZN6I2Cdev8readBitsEhhhhPhj+0x52>
     8fa:	22 0f       	add	r18, r18
     8fc:	33 1f       	adc	r19, r19
     8fe:	0a 94       	dec	r0
     900:	e2 f7       	brpl	.-8      	; 0x8fa <_ZN6I2Cdev8readBitsEhhhhPhj+0x4e>
        b &= mask;
     902:	99 81       	ldd	r25, Y+1	; 0x01
     904:	29 23       	and	r18, r25
        b >>= (bitStart - length + 1);
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	b9 01       	movw	r22, r18
     90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0x11>
     90c:	75 95       	asr	r23
     90e:	67 95       	ror	r22
     910:	4a 95       	dec	r20
     912:	e2 f7       	brpl	.-8      	; 0x90c <__stack+0xd>
     914:	f8 01       	movw	r30, r16
     916:	60 83       	st	Z, r22
        *data = b;
    }
    return count;
}
     918:	0f 90       	pop	r0
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	08 95       	ret

0000092c <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	1f 92       	push	r1
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	18 2f       	mov	r17, r24
     940:	06 2f       	mov	r16, r22
     942:	f4 2e       	mov	r15, r20
     944:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
     946:	20 91 94 04 	lds	r18, 0x0494
     94a:	30 91 95 04 	lds	r19, 0x0495
     94e:	ae 01       	movw	r20, r28
     950:	4f 5f       	subi	r20, 0xFF	; 255
     952:	5f 4f       	sbci	r21, 0xFF	; 255
     954:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN6I2Cdev8readByteEhhPhj>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
     958:	ee 20       	and	r14, r14
     95a:	59 f0       	breq	.+22     	; 0x972 <_ZN6I2Cdev8writeBitEhhhh+0x46>
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	a9 01       	movw	r20, r18
     962:	02 c0       	rjmp	.+4      	; 0x968 <_ZN6I2Cdev8writeBitEhhhh+0x3c>
     964:	44 0f       	add	r20, r20
     966:	55 1f       	adc	r21, r21
     968:	fa 94       	dec	r15
     96a:	e2 f7       	brpl	.-8      	; 0x964 <_ZN6I2Cdev8writeBitEhhhh+0x38>
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	48 2b       	or	r20, r24
     970:	0b c0       	rjmp	.+22     	; 0x988 <_ZN6I2Cdev8writeBitEhhhh+0x5c>
     972:	21 e0       	ldi	r18, 0x01	; 1
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	a9 01       	movw	r20, r18
     978:	02 c0       	rjmp	.+4      	; 0x97e <_ZN6I2Cdev8writeBitEhhhh+0x52>
     97a:	44 0f       	add	r20, r20
     97c:	55 1f       	adc	r21, r21
     97e:	fa 94       	dec	r15
     980:	e2 f7       	brpl	.-8      	; 0x97a <_ZN6I2Cdev8writeBitEhhhh+0x4e>
     982:	40 95       	com	r20
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	48 23       	and	r20, r24
     988:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
     98a:	60 2f       	mov	r22, r16
     98c:	81 2f       	mov	r24, r17
     98e:	0e 94 2d 03 	call	0x65a	; 0x65a <_ZN6I2Cdev9writeByteEhhh>
}
     992:	0f 90       	pop	r0
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	1f 92       	push	r1
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	f8 2e       	mov	r15, r24
     9b8:	e6 2e       	mov	r14, r22
     9ba:	d4 2e       	mov	r13, r20
     9bc:	12 2f       	mov	r17, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
     9be:	20 91 94 04 	lds	r18, 0x0494
     9c2:	30 91 95 04 	lds	r19, 0x0495
     9c6:	ae 01       	movw	r20, r28
     9c8:	4f 5f       	subi	r20, 0xFF	; 255
     9ca:	5f 4f       	sbci	r21, 0xFF	; 255
     9cc:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN6I2Cdev8readByteEhhPhj>
     9d0:	88 23       	and	r24, r24
     9d2:	59 f1       	breq	.+86     	; 0xa2a <_ZN6I2Cdev9writeBitsEhhhhh+0x88>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     9d4:	4d 2d       	mov	r20, r13
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	41 1b       	sub	r20, r17
     9da:	51 09       	sbc	r21, r1
     9dc:	4f 5f       	subi	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	9c 01       	movw	r18, r24
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <_ZN6I2Cdev9writeBitsEhhhhh+0x4a>
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	1a 95       	dec	r17
     9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x46>
     9f0:	21 50       	subi	r18, 0x01	; 1
     9f2:	31 09       	sbc	r19, r1
     9f4:	04 2e       	mov	r0, r20
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <_ZN6I2Cdev9writeBitsEhhhhh+0x5a>
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	0a 94       	dec	r0
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <_ZN6I2Cdev9writeBitsEhhhhh+0x56>
        data <<= (bitStart - length + 1); // shift data into correct position
     a00:	10 e0       	ldi	r17, 0x00	; 0
     a02:	c8 01       	movw	r24, r16
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <_ZN6I2Cdev9writeBitsEhhhhh+0x68>
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	4a 95       	dec	r20
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <_ZN6I2Cdev9writeBitsEhhhhh+0x64>
     a0e:	ac 01       	movw	r20, r24
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
     a10:	92 2f       	mov	r25, r18
     a12:	90 95       	com	r25
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	89 23       	and	r24, r25
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
     a18:	24 23       	and	r18, r20
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
     a1a:	48 2f       	mov	r20, r24
     a1c:	42 2b       	or	r20, r18
     a1e:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
     a20:	6e 2d       	mov	r22, r14
     a22:	8f 2d       	mov	r24, r15
     a24:	0e 94 2d 03 	call	0x65a	; 0x65a <_ZN6I2Cdev9writeByteEhhh>
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <_ZN6I2Cdev9writeBitsEhhhhh+0x8a>
    } else {
        return false;
     a2a:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     a2c:	0f 90       	pop	r0
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	08 95       	ret

00000a3e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     a3e:	80 91 c6 04 	lds	r24, 0x04C6
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	20 91 c7 04 	lds	r18, 0x04C7
}
     a48:	82 1b       	sub	r24, r18
     a4a:	91 09       	sbc	r25, r1
     a4c:	08 95       	ret

00000a4e <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     a4e:	20 91 c7 04 	lds	r18, 0x04C7
     a52:	80 91 c6 04 	lds	r24, 0x04C6
     a56:	28 17       	cp	r18, r24
     a58:	50 f4       	brcc	.+20     	; 0xa6e <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
     a5a:	e2 2f       	mov	r30, r18
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	e8 53       	subi	r30, 0x38	; 56
     a60:	fb 4f       	sbci	r31, 0xFB	; 251
     a62:	80 81       	ld	r24, Z
     a64:	90 e0       	ldi	r25, 0x00	; 0
    ++rxBufferIndex;
     a66:	2f 5f       	subi	r18, 0xFF	; 255
     a68:	20 93 c7 04 	sts	0x04C7, r18
     a6c:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	9f ef       	ldi	r25, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
     a72:	08 95       	ret

00000a74 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
     a74:	e0 91 c7 04 	lds	r30, 0x04C7
     a78:	80 91 c6 04 	lds	r24, 0x04C6
     a7c:	e8 17       	cp	r30, r24
     a7e:	30 f4       	brcc	.+12     	; 0xa8c <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	e8 53       	subi	r30, 0x38	; 56
     a84:	fb 4f       	sbci	r31, 0xFB	; 251
     a86:	80 81       	ld	r24, Z
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     a90:	08 95       	ret

00000a92 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     a92:	08 95       	ret

00000a94 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	8c 01       	movw	r16, r24
     aa6:	7b 01       	movw	r14, r22
     aa8:	6a 01       	movw	r12, r20
  if(transmitting){
     aaa:	80 91 a2 04 	lds	r24, 0x04A2
     aae:	88 23       	and	r24, r24
     ab0:	99 f0       	breq	.+38     	; 0xad8 <_ZN7TwoWire5writeEPKhj+0x44>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     ab2:	41 15       	cp	r20, r1
     ab4:	51 05       	cpc	r21, r1
     ab6:	a1 f0       	breq	.+40     	; 0xae0 <_ZN7TwoWire5writeEPKhj+0x4c>
     ab8:	eb 01       	movw	r28, r22
     aba:	e4 0e       	add	r14, r20
     abc:	f5 1e       	adc	r15, r21
      write(data[i]);
     abe:	69 91       	ld	r22, Y+
     ac0:	d8 01       	movw	r26, r16
     ac2:	ed 91       	ld	r30, X+
     ac4:	fc 91       	ld	r31, X
     ac6:	01 90       	ld	r0, Z+
     ac8:	f0 81       	ld	r31, Z
     aca:	e0 2d       	mov	r30, r0
     acc:	c8 01       	movw	r24, r16
     ace:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     ad0:	ce 15       	cp	r28, r14
     ad2:	df 05       	cpc	r29, r15
     ad4:	a1 f7       	brne	.-24     	; 0xabe <_ZN7TwoWire5writeEPKhj+0x2a>
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     ad8:	64 2f       	mov	r22, r20
     ada:	c7 01       	movw	r24, r14
     adc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <twi_transmit>
  }
  return quantity;
}
     ae0:	c6 01       	movw	r24, r12
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	08 95       	ret

00000af4 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	1f 92       	push	r1
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
     b00:	20 91 a2 04 	lds	r18, 0x04A2
     b04:	22 23       	and	r18, r18
     b06:	e1 f0       	breq	.+56     	; 0xb40 <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     b08:	20 91 a3 04 	lds	r18, 0x04A3
     b0c:	20 32       	cpi	r18, 0x20	; 32
     b0e:	40 f0       	brcs	.+16     	; 0xb20 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     b10:	21 e0       	ldi	r18, 0x01	; 1
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	fc 01       	movw	r30, r24
     b16:	33 83       	std	Z+3, r19	; 0x03
     b18:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	17 c0       	rjmp	.+46     	; 0xb4e <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     b20:	80 91 a4 04 	lds	r24, 0x04A4
     b24:	e8 2f       	mov	r30, r24
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	eb 55       	subi	r30, 0x5B	; 91
     b2a:	fb 4f       	sbci	r31, 0xFB	; 251
     b2c:	99 81       	ldd	r25, Y+1	; 0x01
     b2e:	90 83       	st	Z, r25
    ++txBufferIndex;
     b30:	8f 5f       	subi	r24, 0xFF	; 255
     b32:	80 93 a4 04 	sts	0x04A4, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     b36:	80 93 a3 04 	sts	0x04A3, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	07 c0       	rjmp	.+14     	; 0xb4e <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	ce 01       	movw	r24, r28
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	0e 94 c6 06 	call	0xd8c	; 0xd8c <twi_transmit>
  }
  return 1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
}
     b4e:	0f 90       	pop	r0
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     b56:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
     b58:	13 82       	std	Z+3, r1	; 0x03
     b5a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     b5c:	48 ee       	ldi	r20, 0xE8	; 232
     b5e:	53 e0       	ldi	r21, 0x03	; 3
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	44 83       	std	Z+4, r20	; 0x04
     b66:	55 83       	std	Z+5, r21	; 0x05
     b68:	66 83       	std	Z+6, r22	; 0x06
     b6a:	77 83       	std	Z+7, r23	; 0x07
     b6c:	80 e2       	ldi	r24, 0x20	; 32
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	80 83       	st	Z, r24
     b74:	08 95       	ret

00000b76 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     b76:	10 92 c7 04 	sts	0x04C7, r1
  rxBufferLength = 0;
     b7a:	10 92 c6 04 	sts	0x04C6, r1

  txBufferIndex = 0;
     b7e:	10 92 a4 04 	sts	0x04A4, r1
  txBufferLength = 0;
     b82:	10 92 a3 04 	sts	0x04A3, r1

  twi_init();
     b86:	0e 94 fd 05 	call	0xbfa	; 0xbfa <twi_init>
     b8a:	08 95       	ret

00000b8c <_ZN7TwoWire11requestFromEhhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
     b8c:	86 2f       	mov	r24, r22
     b8e:	41 32       	cpi	r20, 0x21	; 33
     b90:	08 f0       	brcs	.+2      	; 0xb94 <_ZN7TwoWire11requestFromEhhh+0x8>
     b92:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
     b94:	68 ec       	ldi	r22, 0xC8	; 200
     b96:	74 e0       	ldi	r23, 0x04	; 4
     b98:	0e 94 1b 06 	call	0xc36	; 0xc36 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     b9c:	10 92 c7 04 	sts	0x04C7, r1
  rxBufferLength = read;
     ba0:	80 93 c6 04 	sts	0x04C6, r24

  return read;
}
     ba4:	08 95       	ret

00000ba6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
     ba6:	21 e0       	ldi	r18, 0x01	; 1
     ba8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN7TwoWire11requestFromEhhh>
}
     bac:	08 95       	ret

00000bae <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 a2 04 	sts	0x04A2, r24
  // set address of targeted slave
  txAddress = address;
     bb4:	60 93 c5 04 	sts	0x04C5, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     bb8:	10 92 a4 04 	sts	0x04A4, r1
  txBufferLength = 0;
     bbc:	10 92 a3 04 	sts	0x04A3, r1
     bc0:	08 95       	ret

00000bc2 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
     bc2:	0f 93       	push	r16
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     bc4:	06 2f       	mov	r16, r22
     bc6:	21 e0       	ldi	r18, 0x01	; 1
     bc8:	40 91 a3 04 	lds	r20, 0x04A3
     bcc:	65 ea       	ldi	r22, 0xA5	; 165
     bce:	74 e0       	ldi	r23, 0x04	; 4
     bd0:	80 91 c5 04 	lds	r24, 0x04C5
     bd4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     bd8:	10 92 a4 04 	sts	0x04A4, r1
  txBufferLength = 0;
     bdc:	10 92 a3 04 	sts	0x04A3, r1
  // indicate that we are done transmitting
  transmitting = 0;
     be0:	10 92 a2 04 	sts	0x04A2, r1
  return ret;
}
     be4:	0f 91       	pop	r16
     be6:	08 95       	ret

00000be8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN7TwoWire15endTransmissionEh>
}
     bee:	08 95       	ret

00000bf0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     bf0:	86 e9       	ldi	r24, 0x96	; 150
     bf2:	94 e0       	ldi	r25, 0x04	; 4
     bf4:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7TwoWireC1Ev>
     bf8:	08 95       	ret

00000bfa <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     bfa:	10 92 55 05 	sts	0x0555, r1
  twi_sendStop = true;		// default value
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 53 05 	sts	0x0553, r24
  twi_inRepStart = false;
     c04:	10 92 52 05 	sts	0x0552, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	82 e1       	ldi	r24, 0x12	; 18
     c0c:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <digitalWrite>
  digitalWrite(SCL, 1);
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	83 e1       	ldi	r24, 0x13	; 19
     c14:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     c18:	e9 eb       	ldi	r30, 0xB9	; 185
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     c22:	80 81       	ld	r24, Z
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     c28:	88 e4       	ldi	r24, 0x48	; 72
     c2a:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     c2e:	85 e4       	ldi	r24, 0x45	; 69
     c30:	80 93 bc 00 	sts	0x00BC, r24
     c34:	08 95       	ret

00000c36 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     c36:	41 32       	cpi	r20, 0x21	; 33
     c38:	08 f0       	brcs	.+2      	; 0xc3c <twi_readFrom+0x6>
     c3a:	45 c0       	rjmp	.+138    	; 0xcc6 <twi_readFrom+0x90>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     c3c:	90 91 55 05 	lds	r25, 0x0555
     c40:	91 11       	cpse	r25, r1
     c42:	fc cf       	rjmp	.-8      	; 0xc3c <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	90 93 55 05 	sts	0x0555, r25
  twi_sendStop = sendStop;
     c4a:	20 93 53 05 	sts	0x0553, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	20 93 e8 04 	sts	0x04E8, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     c54:	10 92 2d 05 	sts	0x052D, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     c58:	24 0f       	add	r18, r20
     c5a:	20 93 2c 05 	sts	0x052C, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     c5e:	90 93 54 05 	sts	0x0554, r25
  twi_slarw |= address << 1;
     c62:	90 91 54 05 	lds	r25, 0x0554
     c66:	88 0f       	add	r24, r24
     c68:	89 2b       	or	r24, r25
     c6a:	80 93 54 05 	sts	0x0554, r24

  if (true == twi_inRepStart) {
     c6e:	80 91 52 05 	lds	r24, 0x0552
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	51 f4       	brne	.+20     	; 0xc8a <twi_readFrom+0x54>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     c76:	10 92 52 05 	sts	0x0552, r1
    TWDR = twi_slarw;
     c7a:	80 91 54 05 	lds	r24, 0x0554
     c7e:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     c82:	85 ec       	ldi	r24, 0xC5	; 197
     c84:	80 93 bc 00 	sts	0x00BC, r24
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <twi_readFrom+0x5a>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     c8a:	85 ee       	ldi	r24, 0xE5	; 229
     c8c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     c90:	80 91 55 05 	lds	r24, 0x0555
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	e1 f3       	breq	.-8      	; 0xc90 <twi_readFrom+0x5a>
    continue;
  }

  if (twi_masterBufferIndex < length)
     c98:	80 91 2d 05 	lds	r24, 0x052D
     c9c:	84 17       	cp	r24, r20
     c9e:	10 f4       	brcc	.+4      	; 0xca4 <twi_readFrom+0x6e>
    length = twi_masterBufferIndex;
     ca0:	40 91 2d 05 	lds	r20, 0x052D

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     ca4:	44 23       	and	r20, r20
     ca6:	89 f0       	breq	.+34     	; 0xcca <twi_readFrom+0x94>
     ca8:	ee e2       	ldi	r30, 0x2E	; 46
     caa:	f5 e0       	ldi	r31, 0x05	; 5
     cac:	a6 2f       	mov	r26, r22
     cae:	b7 2f       	mov	r27, r23
     cb0:	2f ef       	ldi	r18, 0xFF	; 255
     cb2:	24 0f       	add	r18, r20
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	21 5d       	subi	r18, 0xD1	; 209
     cb8:	3a 4f       	sbci	r19, 0xFA	; 250
    data[i] = twi_masterBuffer[i];
     cba:	91 91       	ld	r25, Z+
     cbc:	9d 93       	st	X+, r25

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     cbe:	e2 17       	cp	r30, r18
     cc0:	f3 07       	cpc	r31, r19
     cc2:	d9 f7       	brne	.-10     	; 0xcba <twi_readFrom+0x84>
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <twi_readFrom+0x98>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	08 95       	ret
  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
     cca:	84 2f       	mov	r24, r20
     ccc:	08 95       	ret
     cce:	84 2f       	mov	r24, r20
}
     cd0:	08 95       	ret

00000cd2 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
     cd2:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     cd4:	41 32       	cpi	r20, 0x21	; 33
     cd6:	08 f0       	brcs	.+2      	; 0xcda <twi_writeTo+0x8>
     cd8:	50 c0       	rjmp	.+160    	; 0xd7a <twi_writeTo+0xa8>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     cda:	90 91 55 05 	lds	r25, 0x0555
     cde:	91 11       	cpse	r25, r1
     ce0:	fc cf       	rjmp	.-8      	; 0xcda <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	90 93 55 05 	sts	0x0555, r25
  twi_sendStop = sendStop;
     ce8:	00 93 53 05 	sts	0x0553, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	90 93 e8 04 	sts	0x04E8, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     cf2:	10 92 2d 05 	sts	0x052D, r1
  twi_masterBufferLength = length;
     cf6:	40 93 2c 05 	sts	0x052C, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     cfa:	44 23       	and	r20, r20
     cfc:	69 f0       	breq	.+26     	; 0xd18 <twi_writeTo+0x46>
     cfe:	fb 01       	movw	r30, r22
     d00:	ae e2       	ldi	r26, 0x2E	; 46
     d02:	b5 e0       	ldi	r27, 0x05	; 5
     d04:	6f 5f       	subi	r22, 0xFF	; 255
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	41 50       	subi	r20, 0x01	; 1
     d0a:	64 0f       	add	r22, r20
     d0c:	71 1d       	adc	r23, r1
    twi_masterBuffer[i] = data[i];
     d0e:	91 91       	ld	r25, Z+
     d10:	9d 93       	st	X+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     d12:	e6 17       	cp	r30, r22
     d14:	f7 07       	cpc	r31, r23
     d16:	d9 f7       	brne	.-10     	; 0xd0e <twi_writeTo+0x3c>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     d18:	10 92 54 05 	sts	0x0554, r1
  twi_slarw |= address << 1;
     d1c:	90 91 54 05 	lds	r25, 0x0554
     d20:	88 0f       	add	r24, r24
     d22:	89 2b       	or	r24, r25
     d24:	80 93 54 05 	sts	0x0554, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     d28:	80 91 52 05 	lds	r24, 0x0552
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	51 f4       	brne	.+20     	; 0xd44 <twi_writeTo+0x72>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     d30:	10 92 52 05 	sts	0x0552, r1
    TWDR = twi_slarw;				
     d34:	80 91 54 05 	lds	r24, 0x0554
     d38:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     d3c:	85 ec       	ldi	r24, 0xC5	; 197
     d3e:	80 93 bc 00 	sts	0x00BC, r24
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <twi_writeTo+0x78>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
     d44:	85 ee       	ldi	r24, 0xE5	; 229
     d46:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     d4a:	22 23       	and	r18, r18
     d4c:	41 f0       	breq	.+16     	; 0xd5e <twi_writeTo+0x8c>
     d4e:	80 91 55 05 	lds	r24, 0x0555
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	21 f4       	brne	.+8      	; 0xd5e <twi_writeTo+0x8c>
     d56:	80 91 55 05 	lds	r24, 0x0555
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	e1 f3       	breq	.-8      	; 0xd56 <twi_writeTo+0x84>
    continue;
  }
  
  if (twi_error == 0xFF)
     d5e:	80 91 e8 04 	lds	r24, 0x04E8
     d62:	8f 3f       	cpi	r24, 0xFF	; 255
     d64:	61 f0       	breq	.+24     	; 0xd7e <twi_writeTo+0xac>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     d66:	80 91 e8 04 	lds	r24, 0x04E8
     d6a:	80 32       	cpi	r24, 0x20	; 32
     d6c:	51 f0       	breq	.+20     	; 0xd82 <twi_writeTo+0xb0>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     d6e:	80 91 e8 04 	lds	r24, 0x04E8
     d72:	80 33       	cpi	r24, 0x30	; 48
     d74:	41 f4       	brne	.+16     	; 0xd86 <twi_writeTo+0xb4>
    return 3;	// error: data send, nack received
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	07 c0       	rjmp	.+14     	; 0xd88 <twi_writeTo+0xb6>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	05 c0       	rjmp	.+10     	; 0xd88 <twi_writeTo+0xb6>
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	03 c0       	rjmp	.+6      	; 0xd88 <twi_writeTo+0xb6>
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <twi_writeTo+0xb6>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
     d86:	84 e0       	ldi	r24, 0x04	; 4
}
     d88:	0f 91       	pop	r16
     d8a:	08 95       	ret

00000d8c <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     d8c:	61 32       	cpi	r22, 0x21	; 33
     d8e:	a8 f4       	brcc	.+42     	; 0xdba <twi_transmit+0x2e>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     d90:	20 91 55 05 	lds	r18, 0x0555
     d94:	24 30       	cpi	r18, 0x04	; 4
     d96:	99 f4       	brne	.+38     	; 0xdbe <twi_transmit+0x32>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     d98:	60 93 0a 05 	sts	0x050A, r22
  for(i = 0; i < length; ++i){
     d9c:	66 23       	and	r22, r22
     d9e:	89 f0       	breq	.+34     	; 0xdc2 <twi_transmit+0x36>
     da0:	fc 01       	movw	r30, r24
     da2:	ac e0       	ldi	r26, 0x0C	; 12
     da4:	b5 e0       	ldi	r27, 0x05	; 5
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	61 50       	subi	r22, 0x01	; 1
     daa:	86 0f       	add	r24, r22
     dac:	91 1d       	adc	r25, r1
    twi_txBuffer[i] = data[i];
     dae:	21 91       	ld	r18, Z+
     db0:	2d 93       	st	X+, r18
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     db2:	e8 17       	cp	r30, r24
     db4:	f9 07       	cpc	r31, r25
     db6:	d9 f7       	brne	.-10     	; 0xdae <twi_transmit+0x22>
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <twi_transmit+0x3a>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	08 95       	ret
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	08 95       	ret
     dc6:	80 e0       	ldi	r24, 0x00	; 0
}
     dc8:	08 95       	ret

00000dca <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     dca:	85 ed       	ldi	r24, 0xD5	; 213
     dcc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     dd0:	ec eb       	ldi	r30, 0xBC	; 188
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	84 fd       	sbrc	r24, 4
     dd8:	fd cf       	rjmp	.-6      	; 0xdd4 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     dda:	10 92 55 05 	sts	0x0555, r1
     dde:	08 95       	ret

00000de0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     de0:	85 ec       	ldi	r24, 0xC5	; 197
     de2:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     de6:	10 92 55 05 	sts	0x0555, r1
     dea:	08 95       	ret

00000dec <__vector_24>:
}

ISR(TWI_vect)
{
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	4f 93       	push	r20
     dfc:	5f 93       	push	r21
     dfe:	6f 93       	push	r22
     e00:	7f 93       	push	r23
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	af 93       	push	r26
     e08:	bf 93       	push	r27
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
  switch(TW_STATUS){
     e0e:	80 91 b9 00 	lds	r24, 0x00B9
     e12:	88 7f       	andi	r24, 0xF8	; 248
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	89 3c       	cpi	r24, 0xC9	; 201
     e18:	91 05       	cpc	r25, r1
     e1a:	08 f0       	brcs	.+2      	; 0xe1e <__vector_24+0x32>
     e1c:	f7 c0       	rjmp	.+494    	; 0x100c <__vector_24+0x220>
     e1e:	fc 01       	movw	r30, r24
     e20:	ec 5c       	subi	r30, 0xCC	; 204
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     e28:	80 91 54 05 	lds	r24, 0x0554
     e2c:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     e30:	85 ec       	ldi	r24, 0xC5	; 197
     e32:	80 93 bc 00 	sts	0x00BC, r24
     e36:	ea c0       	rjmp	.+468    	; 0x100c <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     e38:	90 91 2d 05 	lds	r25, 0x052D
     e3c:	80 91 2c 05 	lds	r24, 0x052C
     e40:	98 17       	cp	r25, r24
     e42:	80 f4       	brcc	.+32     	; 0xe64 <__vector_24+0x78>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     e44:	e0 91 2d 05 	lds	r30, 0x052D
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	8e 0f       	add	r24, r30
     e4c:	80 93 2d 05 	sts	0x052D, r24
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	e2 5d       	subi	r30, 0xD2	; 210
     e54:	fa 4f       	sbci	r31, 0xFA	; 250
     e56:	80 81       	ld	r24, Z
     e58:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     e5c:	85 ec       	ldi	r24, 0xC5	; 197
     e5e:	80 93 bc 00 	sts	0x00BC, r24
     e62:	d4 c0       	rjmp	.+424    	; 0x100c <__vector_24+0x220>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
     e64:	80 91 53 05 	lds	r24, 0x0553
     e68:	88 23       	and	r24, r24
     e6a:	19 f0       	breq	.+6      	; 0xe72 <__vector_24+0x86>
          twi_stop();
     e6c:	0e 94 e5 06 	call	0xdca	; 0xdca <twi_stop>
     e70:	cd c0       	rjmp	.+410    	; 0x100c <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	80 93 52 05 	sts	0x0552, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     e78:	84 ea       	ldi	r24, 0xA4	; 164
     e7a:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
     e7e:	10 92 55 05 	sts	0x0555, r1
     e82:	c4 c0       	rjmp	.+392    	; 0x100c <__vector_24+0x220>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     e84:	80 e2       	ldi	r24, 0x20	; 32
     e86:	80 93 e8 04 	sts	0x04E8, r24
      twi_stop();
     e8a:	0e 94 e5 06 	call	0xdca	; 0xdca <twi_stop>
      break;
     e8e:	be c0       	rjmp	.+380    	; 0x100c <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     e90:	80 e3       	ldi	r24, 0x30	; 48
     e92:	80 93 e8 04 	sts	0x04E8, r24
      twi_stop();
     e96:	0e 94 e5 06 	call	0xdca	; 0xdca <twi_stop>
      break;
     e9a:	b8 c0       	rjmp	.+368    	; 0x100c <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     e9c:	88 e3       	ldi	r24, 0x38	; 56
     e9e:	80 93 e8 04 	sts	0x04E8, r24
      twi_releaseBus();
     ea2:	0e 94 f0 06 	call	0xde0	; 0xde0 <twi_releaseBus>
      break;
     ea6:	b2 c0       	rjmp	.+356    	; 0x100c <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     ea8:	e0 91 2d 05 	lds	r30, 0x052D
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	8e 0f       	add	r24, r30
     eb0:	80 93 2d 05 	sts	0x052D, r24
     eb4:	80 91 bb 00 	lds	r24, 0x00BB
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	e2 5d       	subi	r30, 0xD2	; 210
     ebc:	fa 4f       	sbci	r31, 0xFA	; 250
     ebe:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     ec0:	90 91 2d 05 	lds	r25, 0x052D
     ec4:	80 91 2c 05 	lds	r24, 0x052C
     ec8:	98 17       	cp	r25, r24
     eca:	20 f4       	brcc	.+8      	; 0xed4 <__vector_24+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     ecc:	85 ec       	ldi	r24, 0xC5	; 197
     ece:	80 93 bc 00 	sts	0x00BC, r24
     ed2:	9c c0       	rjmp	.+312    	; 0x100c <__vector_24+0x220>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     ed4:	85 e8       	ldi	r24, 0x85	; 133
     ed6:	80 93 bc 00 	sts	0x00BC, r24
     eda:	98 c0       	rjmp	.+304    	; 0x100c <__vector_24+0x220>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     edc:	e0 91 2d 05 	lds	r30, 0x052D
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	8e 0f       	add	r24, r30
     ee4:	80 93 2d 05 	sts	0x052D, r24
     ee8:	80 91 bb 00 	lds	r24, 0x00BB
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	e2 5d       	subi	r30, 0xD2	; 210
     ef0:	fa 4f       	sbci	r31, 0xFA	; 250
     ef2:	80 83       	st	Z, r24
	if (twi_sendStop)
     ef4:	80 91 53 05 	lds	r24, 0x0553
     ef8:	88 23       	and	r24, r24
     efa:	19 f0       	breq	.+6      	; 0xf02 <__vector_24+0x116>
          twi_stop();
     efc:	0e 94 e5 06 	call	0xdca	; 0xdca <twi_stop>
     f00:	85 c0       	rjmp	.+266    	; 0x100c <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 52 05 	sts	0x0552, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     f08:	84 ea       	ldi	r24, 0xA4	; 164
     f0a:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
     f0e:	10 92 55 05 	sts	0x0555, r1
     f12:	7c c0       	rjmp	.+248    	; 0x100c <__vector_24+0x220>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     f14:	0e 94 e5 06 	call	0xdca	; 0xdca <twi_stop>
      break;
     f18:	79 c0       	rjmp	.+242    	; 0x100c <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	80 93 55 05 	sts	0x0555, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     f20:	10 92 e9 04 	sts	0x04E9, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     f24:	85 ec       	ldi	r24, 0xC5	; 197
     f26:	80 93 bc 00 	sts	0x00BC, r24
     f2a:	70 c0       	rjmp	.+224    	; 0x100c <__vector_24+0x220>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     f2c:	80 91 e9 04 	lds	r24, 0x04E9
     f30:	80 32       	cpi	r24, 0x20	; 32
     f32:	80 f4       	brcc	.+32     	; 0xf54 <__vector_24+0x168>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     f34:	e0 91 e9 04 	lds	r30, 0x04E9
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	8e 0f       	add	r24, r30
     f3c:	80 93 e9 04 	sts	0x04E9, r24
     f40:	80 91 bb 00 	lds	r24, 0x00BB
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	e6 51       	subi	r30, 0x16	; 22
     f48:	fb 4f       	sbci	r31, 0xFB	; 251
     f4a:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     f4c:	85 ec       	ldi	r24, 0xC5	; 197
     f4e:	80 93 bc 00 	sts	0x00BC, r24
     f52:	5c c0       	rjmp	.+184    	; 0x100c <__vector_24+0x220>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     f54:	85 e8       	ldi	r24, 0x85	; 133
     f56:	80 93 bc 00 	sts	0x00BC, r24
     f5a:	58 c0       	rjmp	.+176    	; 0x100c <__vector_24+0x220>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     f5c:	80 91 e9 04 	lds	r24, 0x04E9
     f60:	80 32       	cpi	r24, 0x20	; 32
     f62:	30 f4       	brcc	.+12     	; 0xf70 <__vector_24+0x184>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     f64:	e0 91 e9 04 	lds	r30, 0x04E9
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	e6 51       	subi	r30, 0x16	; 22
     f6c:	fb 4f       	sbci	r31, 0xFB	; 251
     f6e:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     f70:	0e 94 e5 06 	call	0xdca	; 0xdca <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     f74:	60 91 e9 04 	lds	r22, 0x04E9
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	e0 91 4e 05 	lds	r30, 0x054E
     f7e:	f0 91 4f 05 	lds	r31, 0x054F
     f82:	8a ee       	ldi	r24, 0xEA	; 234
     f84:	94 e0       	ldi	r25, 0x04	; 4
     f86:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     f88:	10 92 e9 04 	sts	0x04E9, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     f8c:	0e 94 f0 06 	call	0xde0	; 0xde0 <twi_releaseBus>
      break;
     f90:	3d c0       	rjmp	.+122    	; 0x100c <__vector_24+0x220>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     f92:	85 e8       	ldi	r24, 0x85	; 133
     f94:	80 93 bc 00 	sts	0x00BC, r24
     f98:	39 c0       	rjmp	.+114    	; 0x100c <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	80 93 55 05 	sts	0x0555, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     fa0:	10 92 0b 05 	sts	0x050B, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     fa4:	10 92 0a 05 	sts	0x050A, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     fa8:	e0 91 50 05 	lds	r30, 0x0550
     fac:	f0 91 51 05 	lds	r31, 0x0551
     fb0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     fb2:	80 91 0a 05 	lds	r24, 0x050A
     fb6:	81 11       	cpse	r24, r1
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <__vector_24+0x1d8>
        twi_txBufferLength = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 0a 05 	sts	0x050A, r24
        twi_txBuffer[0] = 0x00;
     fc0:	10 92 0c 05 	sts	0x050C, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     fc4:	e0 91 0b 05 	lds	r30, 0x050B
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	8e 0f       	add	r24, r30
     fcc:	80 93 0b 05 	sts	0x050B, r24
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	e4 5f       	subi	r30, 0xF4	; 244
     fd4:	fa 4f       	sbci	r31, 0xFA	; 250
     fd6:	80 81       	ld	r24, Z
     fd8:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     fdc:	90 91 0b 05 	lds	r25, 0x050B
     fe0:	80 91 0a 05 	lds	r24, 0x050A
     fe4:	98 17       	cp	r25, r24
     fe6:	20 f4       	brcc	.+8      	; 0xff0 <__vector_24+0x204>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     fe8:	85 ec       	ldi	r24, 0xC5	; 197
     fea:	80 93 bc 00 	sts	0x00BC, r24
     fee:	0e c0       	rjmp	.+28     	; 0x100c <__vector_24+0x220>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     ff0:	85 e8       	ldi	r24, 0x85	; 133
     ff2:	80 93 bc 00 	sts	0x00BC, r24
     ff6:	0a c0       	rjmp	.+20     	; 0x100c <__vector_24+0x220>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     ff8:	85 ec       	ldi	r24, 0xC5	; 197
     ffa:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     ffe:	10 92 55 05 	sts	0x0555, r1
      break;
    1002:	04 c0       	rjmp	.+8      	; 0x100c <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1004:	10 92 e8 04 	sts	0x04E8, r1
      twi_stop();
    1008:	0e 94 e5 06 	call	0xdca	; 0xdca <twi_stop>
      break;
  }
}
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <_Z11meansensorsv>:
    while (1);
  }
}

///////////////////////////////////   FUNCTIONS   ////////////////////////////////////
void meansensors(){
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	64 97       	sbiw	r28, 0x14	; 20
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
  long i=0,buff_ax=0,buff_ay=0,buff_az=0,buff_gx=0,buff_gy=0,buff_gz=0;

  while (i<(buffersize+101)){
    105e:	80 91 0a 01 	lds	r24, 0x010A
    1062:	90 91 0b 01 	lds	r25, 0x010B
    1066:	8b 59       	subi	r24, 0x9B	; 155
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	18 16       	cp	r1, r24
    106c:	19 06       	cpc	r1, r25
    106e:	0c f4       	brge	.+2      	; 0x1072 <_Z11meansensorsv+0x44>
    1070:	18 c1       	rjmp	.+560    	; 0x12a2 <_Z11meansensorsv+0x274>
    1072:	4a c1       	rjmp	.+660    	; 0x1308 <_Z11meansensorsv+0x2da>
    // read raw accel/gyro measurements from device
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    1074:	0f 2e       	mov	r0, r31
    1076:	f0 e7       	ldi	r31, 0x70	; 112
    1078:	cf 2e       	mov	r12, r31
    107a:	f5 e0       	ldi	r31, 0x05	; 5
    107c:	df 2e       	mov	r13, r31
    107e:	f0 2d       	mov	r31, r0
    1080:	0f 2e       	mov	r0, r31
    1082:	f2 e7       	ldi	r31, 0x72	; 114
    1084:	ef 2e       	mov	r14, r31
    1086:	f5 e0       	ldi	r31, 0x05	; 5
    1088:	ff 2e       	mov	r15, r31
    108a:	f0 2d       	mov	r31, r0
    108c:	04 e7       	ldi	r16, 0x74	; 116
    108e:	15 e0       	ldi	r17, 0x05	; 5
    1090:	26 e7       	ldi	r18, 0x76	; 118
    1092:	35 e0       	ldi	r19, 0x05	; 5
    1094:	48 e7       	ldi	r20, 0x78	; 120
    1096:	55 e0       	ldi	r21, 0x05	; 5
    1098:	6a e7       	ldi	r22, 0x7A	; 122
    109a:	75 e0       	ldi	r23, 0x05	; 5
    109c:	8c e7       	ldi	r24, 0x7C	; 124
    109e:	95 e0       	ldi	r25, 0x05	; 5
    10a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN7MPU605010getMotion6EPiS0_S0_S0_S0_S0_>
    
    if (i>100 && i<=(buffersize+100)){ //First 100 measures are discarded
    10a4:	25 e6       	ldi	r18, 0x65	; 101
    10a6:	82 16       	cp	r8, r18
    10a8:	91 04       	cpc	r9, r1
    10aa:	a1 04       	cpc	r10, r1
    10ac:	b1 04       	cpc	r11, r1
    10ae:	0c f4       	brge	.+2      	; 0x10b2 <_Z11meansensorsv+0x84>
    10b0:	80 c0       	rjmp	.+256    	; 0x11b2 <_Z11meansensorsv+0x184>
    10b2:	80 91 0a 01 	lds	r24, 0x010A
    10b6:	90 91 0b 01 	lds	r25, 0x010B
    10ba:	8c 59       	subi	r24, 0x9C	; 156
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	aa 27       	eor	r26, r26
    10c0:	97 fd       	sbrc	r25, 7
    10c2:	a0 95       	com	r26
    10c4:	ba 2f       	mov	r27, r26
    10c6:	88 15       	cp	r24, r8
    10c8:	99 05       	cpc	r25, r9
    10ca:	aa 05       	cpc	r26, r10
    10cc:	bb 05       	cpc	r27, r11
    10ce:	0c f4       	brge	.+2      	; 0x10d2 <_Z11meansensorsv+0xa4>
    10d0:	70 c0       	rjmp	.+224    	; 0x11b2 <_Z11meansensorsv+0x184>
      buff_ax=buff_ax+ax;
    10d2:	80 91 7a 05 	lds	r24, 0x057A
    10d6:	90 91 7b 05 	lds	r25, 0x057B
    10da:	aa 27       	eor	r26, r26
    10dc:	97 fd       	sbrc	r25, 7
    10de:	a0 95       	com	r26
    10e0:	ba 2f       	mov	r27, r26
    10e2:	29 81       	ldd	r18, Y+1	; 0x01
    10e4:	3a 81       	ldd	r19, Y+2	; 0x02
    10e6:	4b 81       	ldd	r20, Y+3	; 0x03
    10e8:	5c 81       	ldd	r21, Y+4	; 0x04
    10ea:	28 0f       	add	r18, r24
    10ec:	39 1f       	adc	r19, r25
    10ee:	4a 1f       	adc	r20, r26
    10f0:	5b 1f       	adc	r21, r27
    10f2:	29 83       	std	Y+1, r18	; 0x01
    10f4:	3a 83       	std	Y+2, r19	; 0x02
    10f6:	4b 83       	std	Y+3, r20	; 0x03
    10f8:	5c 83       	std	Y+4, r21	; 0x04
      buff_ay=buff_ay+ay;
    10fa:	80 91 78 05 	lds	r24, 0x0578
    10fe:	90 91 79 05 	lds	r25, 0x0579
    1102:	aa 27       	eor	r26, r26
    1104:	97 fd       	sbrc	r25, 7
    1106:	a0 95       	com	r26
    1108:	ba 2f       	mov	r27, r26
    110a:	2d 81       	ldd	r18, Y+5	; 0x05
    110c:	3e 81       	ldd	r19, Y+6	; 0x06
    110e:	4f 81       	ldd	r20, Y+7	; 0x07
    1110:	58 85       	ldd	r21, Y+8	; 0x08
    1112:	28 0f       	add	r18, r24
    1114:	39 1f       	adc	r19, r25
    1116:	4a 1f       	adc	r20, r26
    1118:	5b 1f       	adc	r21, r27
    111a:	2d 83       	std	Y+5, r18	; 0x05
    111c:	3e 83       	std	Y+6, r19	; 0x06
    111e:	4f 83       	std	Y+7, r20	; 0x07
    1120:	58 87       	std	Y+8, r21	; 0x08
      buff_az=buff_az+az;
    1122:	80 91 76 05 	lds	r24, 0x0576
    1126:	90 91 77 05 	lds	r25, 0x0577
    112a:	aa 27       	eor	r26, r26
    112c:	97 fd       	sbrc	r25, 7
    112e:	a0 95       	com	r26
    1130:	ba 2f       	mov	r27, r26
    1132:	29 85       	ldd	r18, Y+9	; 0x09
    1134:	3a 85       	ldd	r19, Y+10	; 0x0a
    1136:	4b 85       	ldd	r20, Y+11	; 0x0b
    1138:	5c 85       	ldd	r21, Y+12	; 0x0c
    113a:	28 0f       	add	r18, r24
    113c:	39 1f       	adc	r19, r25
    113e:	4a 1f       	adc	r20, r26
    1140:	5b 1f       	adc	r21, r27
    1142:	29 87       	std	Y+9, r18	; 0x09
    1144:	3a 87       	std	Y+10, r19	; 0x0a
    1146:	4b 87       	std	Y+11, r20	; 0x0b
    1148:	5c 87       	std	Y+12, r21	; 0x0c
      buff_gx=buff_gx+gx;
    114a:	80 91 74 05 	lds	r24, 0x0574
    114e:	90 91 75 05 	lds	r25, 0x0575
    1152:	aa 27       	eor	r26, r26
    1154:	97 fd       	sbrc	r25, 7
    1156:	a0 95       	com	r26
    1158:	ba 2f       	mov	r27, r26
    115a:	2d 85       	ldd	r18, Y+13	; 0x0d
    115c:	3e 85       	ldd	r19, Y+14	; 0x0e
    115e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1160:	58 89       	ldd	r21, Y+16	; 0x10
    1162:	28 0f       	add	r18, r24
    1164:	39 1f       	adc	r19, r25
    1166:	4a 1f       	adc	r20, r26
    1168:	5b 1f       	adc	r21, r27
    116a:	2d 87       	std	Y+13, r18	; 0x0d
    116c:	3e 87       	std	Y+14, r19	; 0x0e
    116e:	4f 87       	std	Y+15, r20	; 0x0f
    1170:	58 8b       	std	Y+16, r21	; 0x10
      buff_gy=buff_gy+gy;
    1172:	80 91 72 05 	lds	r24, 0x0572
    1176:	90 91 73 05 	lds	r25, 0x0573
    117a:	aa 27       	eor	r26, r26
    117c:	97 fd       	sbrc	r25, 7
    117e:	a0 95       	com	r26
    1180:	ba 2f       	mov	r27, r26
    1182:	29 89       	ldd	r18, Y+17	; 0x11
    1184:	3a 89       	ldd	r19, Y+18	; 0x12
    1186:	4b 89       	ldd	r20, Y+19	; 0x13
    1188:	5c 89       	ldd	r21, Y+20	; 0x14
    118a:	28 0f       	add	r18, r24
    118c:	39 1f       	adc	r19, r25
    118e:	4a 1f       	adc	r20, r26
    1190:	5b 1f       	adc	r21, r27
    1192:	29 8b       	std	Y+17, r18	; 0x11
    1194:	3a 8b       	std	Y+18, r19	; 0x12
    1196:	4b 8b       	std	Y+19, r20	; 0x13
    1198:	5c 8b       	std	Y+20, r21	; 0x14
      buff_gz=buff_gz+gz;
    119a:	80 91 70 05 	lds	r24, 0x0570
    119e:	90 91 71 05 	lds	r25, 0x0571
    11a2:	aa 27       	eor	r26, r26
    11a4:	97 fd       	sbrc	r25, 7
    11a6:	a0 95       	com	r26
    11a8:	ba 2f       	mov	r27, r26
    11aa:	48 0e       	add	r4, r24
    11ac:	59 1e       	adc	r5, r25
    11ae:	6a 1e       	adc	r6, r26
    11b0:	7b 1e       	adc	r7, r27
    }
    if (i==(buffersize+100)){
    11b2:	c0 90 0a 01 	lds	r12, 0x010A
    11b6:	d0 90 0b 01 	lds	r13, 0x010B
    11ba:	96 01       	movw	r18, r12
    11bc:	2c 59       	subi	r18, 0x9C	; 156
    11be:	3f 4f       	sbci	r19, 0xFF	; 255
    11c0:	c9 01       	movw	r24, r18
    11c2:	aa 27       	eor	r26, r26
    11c4:	97 fd       	sbrc	r25, 7
    11c6:	a0 95       	com	r26
    11c8:	ba 2f       	mov	r27, r26
    11ca:	88 15       	cp	r24, r8
    11cc:	99 05       	cpc	r25, r9
    11ce:	aa 05       	cpc	r26, r10
    11d0:	bb 05       	cpc	r27, r11
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <_Z11meansensorsv+0x1a8>
    11d4:	4a c0       	rjmp	.+148    	; 0x126a <_Z11meansensorsv+0x23c>
      mean_ax=buff_ax/buffersize;
    11d6:	ee 24       	eor	r14, r14
    11d8:	d7 fc       	sbrc	r13, 7
    11da:	e0 94       	com	r14
    11dc:	fe 2c       	mov	r15, r14
    11de:	69 81       	ldd	r22, Y+1	; 0x01
    11e0:	7a 81       	ldd	r23, Y+2	; 0x02
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	a7 01       	movw	r20, r14
    11e8:	96 01       	movw	r18, r12
    11ea:	0e 94 8f 18 	call	0x311e	; 0x311e <__divmodsi4>
    11ee:	30 93 6f 05 	sts	0x056F, r19
    11f2:	20 93 6e 05 	sts	0x056E, r18
      mean_ay=buff_ay/buffersize;
    11f6:	6d 81       	ldd	r22, Y+5	; 0x05
    11f8:	7e 81       	ldd	r23, Y+6	; 0x06
    11fa:	8f 81       	ldd	r24, Y+7	; 0x07
    11fc:	98 85       	ldd	r25, Y+8	; 0x08
    11fe:	a7 01       	movw	r20, r14
    1200:	96 01       	movw	r18, r12
    1202:	0e 94 8f 18 	call	0x311e	; 0x311e <__divmodsi4>
    1206:	30 93 6d 05 	sts	0x056D, r19
    120a:	20 93 6c 05 	sts	0x056C, r18
      mean_az=buff_az/buffersize;
    120e:	69 85       	ldd	r22, Y+9	; 0x09
    1210:	7a 85       	ldd	r23, Y+10	; 0x0a
    1212:	8b 85       	ldd	r24, Y+11	; 0x0b
    1214:	9c 85       	ldd	r25, Y+12	; 0x0c
    1216:	a7 01       	movw	r20, r14
    1218:	96 01       	movw	r18, r12
    121a:	0e 94 8f 18 	call	0x311e	; 0x311e <__divmodsi4>
    121e:	30 93 6b 05 	sts	0x056B, r19
    1222:	20 93 6a 05 	sts	0x056A, r18
      mean_gx=buff_gx/buffersize;
    1226:	6d 85       	ldd	r22, Y+13	; 0x0d
    1228:	7e 85       	ldd	r23, Y+14	; 0x0e
    122a:	8f 85       	ldd	r24, Y+15	; 0x0f
    122c:	98 89       	ldd	r25, Y+16	; 0x10
    122e:	a7 01       	movw	r20, r14
    1230:	96 01       	movw	r18, r12
    1232:	0e 94 8f 18 	call	0x311e	; 0x311e <__divmodsi4>
    1236:	30 93 69 05 	sts	0x0569, r19
    123a:	20 93 68 05 	sts	0x0568, r18
      mean_gy=buff_gy/buffersize;
    123e:	69 89       	ldd	r22, Y+17	; 0x11
    1240:	7a 89       	ldd	r23, Y+18	; 0x12
    1242:	8b 89       	ldd	r24, Y+19	; 0x13
    1244:	9c 89       	ldd	r25, Y+20	; 0x14
    1246:	a7 01       	movw	r20, r14
    1248:	96 01       	movw	r18, r12
    124a:	0e 94 8f 18 	call	0x311e	; 0x311e <__divmodsi4>
    124e:	30 93 67 05 	sts	0x0567, r19
    1252:	20 93 66 05 	sts	0x0566, r18
      mean_gz=buff_gz/buffersize;
    1256:	c3 01       	movw	r24, r6
    1258:	b2 01       	movw	r22, r4
    125a:	a7 01       	movw	r20, r14
    125c:	96 01       	movw	r18, r12
    125e:	0e 94 8f 18 	call	0x311e	; 0x311e <__divmodsi4>
    1262:	30 93 65 05 	sts	0x0565, r19
    1266:	20 93 64 05 	sts	0x0564, r18
    }
    i++;
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	83 1a       	sub	r8, r19
    126e:	93 0a       	sbc	r9, r19
    1270:	a3 0a       	sbc	r10, r19
    1272:	b3 0a       	sbc	r11, r19
    delay(2); //Needed so we don't get repeated measures
    1274:	62 e0       	ldi	r22, 0x02	; 2
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <delay>

///////////////////////////////////   FUNCTIONS   ////////////////////////////////////
void meansensors(){
  long i=0,buff_ax=0,buff_ay=0,buff_az=0,buff_gx=0,buff_gy=0,buff_gz=0;

  while (i<(buffersize+101)){
    1280:	80 91 0a 01 	lds	r24, 0x010A
    1284:	90 91 0b 01 	lds	r25, 0x010B
    1288:	8b 59       	subi	r24, 0x9B	; 155
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	aa 27       	eor	r26, r26
    128e:	97 fd       	sbrc	r25, 7
    1290:	a0 95       	com	r26
    1292:	ba 2f       	mov	r27, r26
    1294:	88 16       	cp	r8, r24
    1296:	99 06       	cpc	r9, r25
    1298:	aa 06       	cpc	r10, r26
    129a:	bb 06       	cpc	r11, r27
    129c:	0c f4       	brge	.+2      	; 0x12a0 <_Z11meansensorsv+0x272>
    129e:	ea ce       	rjmp	.-556    	; 0x1074 <_Z11meansensorsv+0x46>
    12a0:	33 c0       	rjmp	.+102    	; 0x1308 <_Z11meansensorsv+0x2da>
    // read raw accel/gyro measurements from device
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    12a2:	0f 2e       	mov	r0, r31
    12a4:	f0 e7       	ldi	r31, 0x70	; 112
    12a6:	cf 2e       	mov	r12, r31
    12a8:	f5 e0       	ldi	r31, 0x05	; 5
    12aa:	df 2e       	mov	r13, r31
    12ac:	f0 2d       	mov	r31, r0
    12ae:	0f 2e       	mov	r0, r31
    12b0:	f2 e7       	ldi	r31, 0x72	; 114
    12b2:	ef 2e       	mov	r14, r31
    12b4:	f5 e0       	ldi	r31, 0x05	; 5
    12b6:	ff 2e       	mov	r15, r31
    12b8:	f0 2d       	mov	r31, r0
    12ba:	04 e7       	ldi	r16, 0x74	; 116
    12bc:	15 e0       	ldi	r17, 0x05	; 5
    12be:	26 e7       	ldi	r18, 0x76	; 118
    12c0:	35 e0       	ldi	r19, 0x05	; 5
    12c2:	48 e7       	ldi	r20, 0x78	; 120
    12c4:	55 e0       	ldi	r21, 0x05	; 5
    12c6:	6a e7       	ldi	r22, 0x7A	; 122
    12c8:	75 e0       	ldi	r23, 0x05	; 5
    12ca:	8c e7       	ldi	r24, 0x7C	; 124
    12cc:	95 e0       	ldi	r25, 0x05	; 5
    12ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN7MPU605010getMotion6EPiS0_S0_S0_S0_S0_>
  }
}

///////////////////////////////////   FUNCTIONS   ////////////////////////////////////
void meansensors(){
  long i=0,buff_ax=0,buff_ay=0,buff_az=0,buff_gx=0,buff_gy=0,buff_gz=0;
    12d2:	81 2c       	mov	r8, r1
    12d4:	91 2c       	mov	r9, r1
    12d6:	54 01       	movw	r10, r8
    12d8:	41 2c       	mov	r4, r1
    12da:	51 2c       	mov	r5, r1
    12dc:	32 01       	movw	r6, r4
    12de:	19 8a       	std	Y+17, r1	; 0x11
    12e0:	1a 8a       	std	Y+18, r1	; 0x12
    12e2:	1b 8a       	std	Y+19, r1	; 0x13
    12e4:	1c 8a       	std	Y+20, r1	; 0x14
    12e6:	1d 86       	std	Y+13, r1	; 0x0d
    12e8:	1e 86       	std	Y+14, r1	; 0x0e
    12ea:	1f 86       	std	Y+15, r1	; 0x0f
    12ec:	18 8a       	std	Y+16, r1	; 0x10
    12ee:	19 86       	std	Y+9, r1	; 0x09
    12f0:	1a 86       	std	Y+10, r1	; 0x0a
    12f2:	1b 86       	std	Y+11, r1	; 0x0b
    12f4:	1c 86       	std	Y+12, r1	; 0x0c
    12f6:	1d 82       	std	Y+5, r1	; 0x05
    12f8:	1e 82       	std	Y+6, r1	; 0x06
    12fa:	1f 82       	std	Y+7, r1	; 0x07
    12fc:	18 86       	std	Y+8, r1	; 0x08
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	1a 82       	std	Y+2, r1	; 0x02
    1302:	1b 82       	std	Y+3, r1	; 0x03
    1304:	1c 82       	std	Y+4, r1	; 0x04
    1306:	55 cf       	rjmp	.-342    	; 0x11b2 <_Z11meansensorsv+0x184>
      mean_gz=buff_gz/buffersize;
    }
    i++;
    delay(2); //Needed so we don't get repeated measures
  }
}
    1308:	64 96       	adiw	r28, 0x14	; 20
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	bf 90       	pop	r11
    1326:	af 90       	pop	r10
    1328:	9f 90       	pop	r9
    132a:	8f 90       	pop	r8
    132c:	7f 90       	pop	r7
    132e:	6f 90       	pop	r6
    1330:	5f 90       	pop	r5
    1332:	4f 90       	pop	r4
    1334:	08 95       	ret

00001336 <_Z16PrintCurrentMeanv>:

void PrintCurrentMean()
{
	Serial.print("\nCurrent Value of the means:\t");
    1336:	6c e2       	ldi	r22, 0x2C	; 44
    1338:	71 e0       	ldi	r23, 0x01	; 1
    133a:	83 e1       	ldi	r24, 0x13	; 19
    133c:	96 e0       	ldi	r25, 0x06	; 6
    133e:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print("\nmean_ax, mean_ay, mean_az, mean_gx, mean_gy, mean_gz:\n");
    1342:	6a e4       	ldi	r22, 0x4A	; 74
    1344:	71 e0       	ldi	r23, 0x01	; 1
    1346:	83 e1       	ldi	r24, 0x13	; 19
    1348:	96 e0       	ldi	r25, 0x06	; 6
    134a:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(mean_ax);
    134e:	60 91 6e 05 	lds	r22, 0x056E
    1352:	70 91 6f 05 	lds	r23, 0x056F
    1356:	4a e0       	ldi	r20, 0x0A	; 10
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	83 e1       	ldi	r24, 0x13	; 19
    135c:	96 e0       	ldi	r25, 0x06	; 6
    135e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    1362:	6d e1       	ldi	r22, 0x1D	; 29
    1364:	72 e0       	ldi	r23, 0x02	; 2
    1366:	83 e1       	ldi	r24, 0x13	; 19
    1368:	96 e0       	ldi	r25, 0x06	; 6
    136a:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(mean_ay);
    136e:	60 91 6c 05 	lds	r22, 0x056C
    1372:	70 91 6d 05 	lds	r23, 0x056D
    1376:	4a e0       	ldi	r20, 0x0A	; 10
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	83 e1       	ldi	r24, 0x13	; 19
    137c:	96 e0       	ldi	r25, 0x06	; 6
    137e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    1382:	6d e1       	ldi	r22, 0x1D	; 29
    1384:	72 e0       	ldi	r23, 0x02	; 2
    1386:	83 e1       	ldi	r24, 0x13	; 19
    1388:	96 e0       	ldi	r25, 0x06	; 6
    138a:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(mean_az);
    138e:	60 91 6a 05 	lds	r22, 0x056A
    1392:	70 91 6b 05 	lds	r23, 0x056B
    1396:	4a e0       	ldi	r20, 0x0A	; 10
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	83 e1       	ldi	r24, 0x13	; 19
    139c:	96 e0       	ldi	r25, 0x06	; 6
    139e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    13a2:	6d e1       	ldi	r22, 0x1D	; 29
    13a4:	72 e0       	ldi	r23, 0x02	; 2
    13a6:	83 e1       	ldi	r24, 0x13	; 19
    13a8:	96 e0       	ldi	r25, 0x06	; 6
    13aa:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(mean_gx);
    13ae:	60 91 68 05 	lds	r22, 0x0568
    13b2:	70 91 69 05 	lds	r23, 0x0569
    13b6:	4a e0       	ldi	r20, 0x0A	; 10
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	83 e1       	ldi	r24, 0x13	; 19
    13bc:	96 e0       	ldi	r25, 0x06	; 6
    13be:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    13c2:	6d e1       	ldi	r22, 0x1D	; 29
    13c4:	72 e0       	ldi	r23, 0x02	; 2
    13c6:	83 e1       	ldi	r24, 0x13	; 19
    13c8:	96 e0       	ldi	r25, 0x06	; 6
    13ca:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(mean_gy);
    13ce:	60 91 66 05 	lds	r22, 0x0566
    13d2:	70 91 67 05 	lds	r23, 0x0567
    13d6:	4a e0       	ldi	r20, 0x0A	; 10
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	83 e1       	ldi	r24, 0x13	; 19
    13dc:	96 e0       	ldi	r25, 0x06	; 6
    13de:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    13e2:	6d e1       	ldi	r22, 0x1D	; 29
    13e4:	72 e0       	ldi	r23, 0x02	; 2
    13e6:	83 e1       	ldi	r24, 0x13	; 19
    13e8:	96 e0       	ldi	r25, 0x06	; 6
    13ea:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.println(mean_gz);	
    13ee:	60 91 64 05 	lds	r22, 0x0564
    13f2:	70 91 65 05 	lds	r23, 0x0565
    13f6:	4a e0       	ldi	r20, 0x0A	; 10
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	83 e1       	ldi	r24, 0x13	; 19
    13fc:	96 e0       	ldi	r25, 0x06	; 6
    13fe:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_ZN5Print7printlnEii>
    1402:	08 95       	ret

00001404 <_Z19PrintCurrentOffsetsv>:
}

void PrintCurrentOffsets()
{
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
	Serial.print("\nCurrent Value of the offsets:\t");
    141c:	62 e8       	ldi	r22, 0x82	; 130
    141e:	71 e0       	ldi	r23, 0x01	; 1
    1420:	83 e1       	ldi	r24, 0x13	; 19
    1422:	96 e0       	ldi	r25, 0x06	; 6
    1424:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print("\nax_offset, ay_offset, az_offset, gx_offset, gy_offset, gz_offset:\n");
    1428:	62 ea       	ldi	r22, 0xA2	; 162
    142a:	71 e0       	ldi	r23, 0x01	; 1
    142c:	83 e1       	ldi	r24, 0x13	; 19
    142e:	96 e0       	ldi	r25, 0x06	; 6
    1430:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(ax_offset);
    1434:	60 91 60 05 	lds	r22, 0x0560
    1438:	70 91 61 05 	lds	r23, 0x0561
    143c:	4a e0       	ldi	r20, 0x0A	; 10
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	83 e1       	ldi	r24, 0x13	; 19
    1442:	96 e0       	ldi	r25, 0x06	; 6
    1444:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    1448:	6d e1       	ldi	r22, 0x1D	; 29
    144a:	72 e0       	ldi	r23, 0x02	; 2
    144c:	83 e1       	ldi	r24, 0x13	; 19
    144e:	96 e0       	ldi	r25, 0x06	; 6
    1450:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(ay_offset);
    1454:	60 91 5e 05 	lds	r22, 0x055E
    1458:	70 91 5f 05 	lds	r23, 0x055F
    145c:	4a e0       	ldi	r20, 0x0A	; 10
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	83 e1       	ldi	r24, 0x13	; 19
    1462:	96 e0       	ldi	r25, 0x06	; 6
    1464:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    1468:	6d e1       	ldi	r22, 0x1D	; 29
    146a:	72 e0       	ldi	r23, 0x02	; 2
    146c:	83 e1       	ldi	r24, 0x13	; 19
    146e:	96 e0       	ldi	r25, 0x06	; 6
    1470:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(az_offset);
    1474:	60 91 5c 05 	lds	r22, 0x055C
    1478:	70 91 5d 05 	lds	r23, 0x055D
    147c:	4a e0       	ldi	r20, 0x0A	; 10
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	83 e1       	ldi	r24, 0x13	; 19
    1482:	96 e0       	ldi	r25, 0x06	; 6
    1484:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    1488:	6d e1       	ldi	r22, 0x1D	; 29
    148a:	72 e0       	ldi	r23, 0x02	; 2
    148c:	83 e1       	ldi	r24, 0x13	; 19
    148e:	96 e0       	ldi	r25, 0x06	; 6
    1490:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(gx_offset);
    1494:	60 91 5a 05 	lds	r22, 0x055A
    1498:	70 91 5b 05 	lds	r23, 0x055B
    149c:	4a e0       	ldi	r20, 0x0A	; 10
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	83 e1       	ldi	r24, 0x13	; 19
    14a2:	96 e0       	ldi	r25, 0x06	; 6
    14a4:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    14a8:	6d e1       	ldi	r22, 0x1D	; 29
    14aa:	72 e0       	ldi	r23, 0x02	; 2
    14ac:	83 e1       	ldi	r24, 0x13	; 19
    14ae:	96 e0       	ldi	r25, 0x06	; 6
    14b0:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(gy_offset);
    14b4:	60 91 58 05 	lds	r22, 0x0558
    14b8:	70 91 59 05 	lds	r23, 0x0559
    14bc:	4a e0       	ldi	r20, 0x0A	; 10
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	83 e1       	ldi	r24, 0x13	; 19
    14c2:	96 e0       	ldi	r25, 0x06	; 6
    14c4:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    14c8:	6d e1       	ldi	r22, 0x1D	; 29
    14ca:	72 e0       	ldi	r23, 0x02	; 2
    14cc:	83 e1       	ldi	r24, 0x13	; 19
    14ce:	96 e0       	ldi	r25, 0x06	; 6
    14d0:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.println(gz_offset);
    14d4:	60 91 56 05 	lds	r22, 0x0556
    14d8:	70 91 57 05 	lds	r23, 0x0557
    14dc:	4a e0       	ldi	r20, 0x0A	; 10
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	83 e1       	ldi	r24, 0x13	; 19
    14e2:	96 e0       	ldi	r25, 0x06	; 6
    14e4:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_ZN5Print7printlnEii>
	
	Serial.print("\nCurrent Value of the offsets (as reported by the MPU):\t");
    14e8:	66 ee       	ldi	r22, 0xE6	; 230
    14ea:	71 e0       	ldi	r23, 0x01	; 1
    14ec:	83 e1       	ldi	r24, 0x13	; 19
    14ee:	96 e0       	ldi	r25, 0x06	; 6
    14f0:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	int16_t ax_offset_mpu, ay_offset_mpu, az_offset_mpu, gx_offset_mpu, gy_offset_mpu, gz_offset_mpu;
	
	ax_offset_mpu = accelgyro.getXAccelOffset();
    14f4:	8c e7       	ldi	r24, 0x7C	; 124
    14f6:	95 e0       	ldi	r25, 0x05	; 5
    14f8:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN7MPU605015getXAccelOffsetEv>
    14fc:	5c 01       	movw	r10, r24
	ay_offset_mpu = accelgyro.getYAccelOffset();
    14fe:	8c e7       	ldi	r24, 0x7C	; 124
    1500:	95 e0       	ldi	r25, 0x05	; 5
    1502:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN7MPU605015getYAccelOffsetEv>
    1506:	6c 01       	movw	r12, r24
	az_offset_mpu = accelgyro.getZAccelOffset();
    1508:	8c e7       	ldi	r24, 0x7C	; 124
    150a:	95 e0       	ldi	r25, 0x05	; 5
    150c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN7MPU605015getZAccelOffsetEv>
    1510:	7c 01       	movw	r14, r24

	gx_offset_mpu = accelgyro.getXGyroOffset();
    1512:	8c e7       	ldi	r24, 0x7C	; 124
    1514:	95 e0       	ldi	r25, 0x05	; 5
    1516:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN7MPU605014getXGyroOffsetEv>
    151a:	8c 01       	movw	r16, r24
	gy_offset_mpu = accelgyro.getYGyroOffset();
    151c:	8c e7       	ldi	r24, 0x7C	; 124
    151e:	95 e0       	ldi	r25, 0x05	; 5
    1520:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7MPU605014getYGyroOffsetEv>
    1524:	ec 01       	movw	r28, r24
	gz_offset_mpu = accelgyro.getZGyroOffset();
    1526:	8c e7       	ldi	r24, 0x7C	; 124
    1528:	95 e0       	ldi	r25, 0x05	; 5
    152a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN7MPU605014getZGyroOffsetEv>
    152e:	4c 01       	movw	r8, r24
	
	Serial.print(ax_offset_mpu);
    1530:	4a e0       	ldi	r20, 0x0A	; 10
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	b5 01       	movw	r22, r10
    1536:	83 e1       	ldi	r24, 0x13	; 19
    1538:	96 e0       	ldi	r25, 0x06	; 6
    153a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    153e:	6d e1       	ldi	r22, 0x1D	; 29
    1540:	72 e0       	ldi	r23, 0x02	; 2
    1542:	83 e1       	ldi	r24, 0x13	; 19
    1544:	96 e0       	ldi	r25, 0x06	; 6
    1546:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(ay_offset_mpu);
    154a:	4a e0       	ldi	r20, 0x0A	; 10
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	b6 01       	movw	r22, r12
    1550:	83 e1       	ldi	r24, 0x13	; 19
    1552:	96 e0       	ldi	r25, 0x06	; 6
    1554:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    1558:	6d e1       	ldi	r22, 0x1D	; 29
    155a:	72 e0       	ldi	r23, 0x02	; 2
    155c:	83 e1       	ldi	r24, 0x13	; 19
    155e:	96 e0       	ldi	r25, 0x06	; 6
    1560:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(az_offset_mpu);
    1564:	4a e0       	ldi	r20, 0x0A	; 10
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	b7 01       	movw	r22, r14
    156a:	83 e1       	ldi	r24, 0x13	; 19
    156c:	96 e0       	ldi	r25, 0x06	; 6
    156e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    1572:	6d e1       	ldi	r22, 0x1D	; 29
    1574:	72 e0       	ldi	r23, 0x02	; 2
    1576:	83 e1       	ldi	r24, 0x13	; 19
    1578:	96 e0       	ldi	r25, 0x06	; 6
    157a:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(gx_offset_mpu);
    157e:	4a e0       	ldi	r20, 0x0A	; 10
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	b8 01       	movw	r22, r16
    1584:	83 e1       	ldi	r24, 0x13	; 19
    1586:	96 e0       	ldi	r25, 0x06	; 6
    1588:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    158c:	6d e1       	ldi	r22, 0x1D	; 29
    158e:	72 e0       	ldi	r23, 0x02	; 2
    1590:	83 e1       	ldi	r24, 0x13	; 19
    1592:	96 e0       	ldi	r25, 0x06	; 6
    1594:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.print(gy_offset_mpu);
    1598:	4a e0       	ldi	r20, 0x0A	; 10
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	be 01       	movw	r22, r28
    159e:	83 e1       	ldi	r24, 0x13	; 19
    15a0:	96 e0       	ldi	r25, 0x06	; 6
    15a2:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
	Serial.print("\t");
    15a6:	6d e1       	ldi	r22, 0x1D	; 29
    15a8:	72 e0       	ldi	r23, 0x02	; 2
    15aa:	83 e1       	ldi	r24, 0x13	; 19
    15ac:	96 e0       	ldi	r25, 0x06	; 6
    15ae:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
	Serial.println(gz_offset_mpu);
    15b2:	4a e0       	ldi	r20, 0x0A	; 10
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	b4 01       	movw	r22, r8
    15b8:	83 e1       	ldi	r24, 0x13	; 19
    15ba:	96 e0       	ldi	r25, 0x06	; 6
    15bc:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_ZN5Print7printlnEii>
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	9f 90       	pop	r9
    15d6:	8f 90       	pop	r8
    15d8:	08 95       	ret

000015da <_Z11calibrationv>:
void calibration(){
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
  ax_offset=-mean_ax/8;
    15e6:	80 91 6e 05 	lds	r24, 0x056E
    15ea:	90 91 6f 05 	lds	r25, 0x056F
    15ee:	91 95       	neg	r25
    15f0:	81 95       	neg	r24
    15f2:	91 09       	sbc	r25, r1
    15f4:	0a f4       	brpl	.+2      	; 0x15f8 <_Z11calibrationv+0x1e>
    15f6:	07 96       	adiw	r24, 0x07	; 7
    15f8:	95 95       	asr	r25
    15fa:	87 95       	ror	r24
    15fc:	95 95       	asr	r25
    15fe:	87 95       	ror	r24
    1600:	95 95       	asr	r25
    1602:	87 95       	ror	r24
    1604:	90 93 61 05 	sts	0x0561, r25
    1608:	80 93 60 05 	sts	0x0560, r24
  ay_offset=-mean_ay/8;
    160c:	80 91 6c 05 	lds	r24, 0x056C
    1610:	90 91 6d 05 	lds	r25, 0x056D
    1614:	91 95       	neg	r25
    1616:	81 95       	neg	r24
    1618:	91 09       	sbc	r25, r1
    161a:	0a f4       	brpl	.+2      	; 0x161e <_Z11calibrationv+0x44>
    161c:	07 96       	adiw	r24, 0x07	; 7
    161e:	95 95       	asr	r25
    1620:	87 95       	ror	r24
    1622:	95 95       	asr	r25
    1624:	87 95       	ror	r24
    1626:	95 95       	asr	r25
    1628:	87 95       	ror	r24
    162a:	90 93 5f 05 	sts	0x055F, r25
    162e:	80 93 5e 05 	sts	0x055E, r24
  az_offset=(16384-mean_az)/8;
    1632:	80 91 6a 05 	lds	r24, 0x056A
    1636:	90 91 6b 05 	lds	r25, 0x056B
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e4       	ldi	r19, 0x40	; 64
    163e:	28 1b       	sub	r18, r24
    1640:	39 0b       	sbc	r19, r25
    1642:	c9 01       	movw	r24, r18
    1644:	99 23       	and	r25, r25
    1646:	0c f4       	brge	.+2      	; 0x164a <_Z11calibrationv+0x70>
    1648:	07 96       	adiw	r24, 0x07	; 7
    164a:	95 95       	asr	r25
    164c:	87 95       	ror	r24
    164e:	95 95       	asr	r25
    1650:	87 95       	ror	r24
    1652:	95 95       	asr	r25
    1654:	87 95       	ror	r24
    1656:	90 93 5d 05 	sts	0x055D, r25
    165a:	80 93 5c 05 	sts	0x055C, r24

  gx_offset=-mean_gx/4;
    165e:	80 91 68 05 	lds	r24, 0x0568
    1662:	90 91 69 05 	lds	r25, 0x0569
    1666:	91 95       	neg	r25
    1668:	81 95       	neg	r24
    166a:	91 09       	sbc	r25, r1
    166c:	0a f4       	brpl	.+2      	; 0x1670 <_Z11calibrationv+0x96>
    166e:	03 96       	adiw	r24, 0x03	; 3
    1670:	95 95       	asr	r25
    1672:	87 95       	ror	r24
    1674:	95 95       	asr	r25
    1676:	87 95       	ror	r24
    1678:	90 93 5b 05 	sts	0x055B, r25
    167c:	80 93 5a 05 	sts	0x055A, r24
  gy_offset=-mean_gy/4;
    1680:	80 91 66 05 	lds	r24, 0x0566
    1684:	90 91 67 05 	lds	r25, 0x0567
    1688:	91 95       	neg	r25
    168a:	81 95       	neg	r24
    168c:	91 09       	sbc	r25, r1
    168e:	0a f4       	brpl	.+2      	; 0x1692 <_Z11calibrationv+0xb8>
    1690:	03 96       	adiw	r24, 0x03	; 3
    1692:	95 95       	asr	r25
    1694:	87 95       	ror	r24
    1696:	95 95       	asr	r25
    1698:	87 95       	ror	r24
    169a:	90 93 59 05 	sts	0x0559, r25
    169e:	80 93 58 05 	sts	0x0558, r24
  gz_offset=-mean_gz/4;
    16a2:	80 91 64 05 	lds	r24, 0x0564
    16a6:	90 91 65 05 	lds	r25, 0x0565
    16aa:	91 95       	neg	r25
    16ac:	81 95       	neg	r24
    16ae:	91 09       	sbc	r25, r1
    16b0:	0a f4       	brpl	.+2      	; 0x16b4 <_Z11calibrationv+0xda>
    16b2:	03 96       	adiw	r24, 0x03	; 3
    16b4:	95 95       	asr	r25
    16b6:	87 95       	ror	r24
    16b8:	95 95       	asr	r25
    16ba:	87 95       	ror	r24
    16bc:	90 93 57 05 	sts	0x0557, r25
    16c0:	80 93 56 05 	sts	0x0556, r24
    meansensors();
    Serial.println("...");
	PrintCurrentMean();
	PrintCurrentOffsets();
	
    if (abs(mean_ax)<=acel_deadzone) ready++;
    16c4:	ee 24       	eor	r14, r14
    16c6:	e3 94       	inc	r14
    16c8:	f1 2c       	mov	r15, r1

  gx_offset=-mean_gx/4;
  gy_offset=-mean_gy/4;
  gz_offset=-mean_gz/4;
  while (1){
    int ready=0;
    16ca:	00 e0       	ldi	r16, 0x00	; 0
    16cc:	10 e0       	ldi	r17, 0x00	; 0
    else ax_offset=ax_offset-mean_ax/acel_deadzone;

    if (abs(mean_ay)<=acel_deadzone) ready++;
    else ay_offset=ay_offset-mean_ay/acel_deadzone;

    if (abs(16384-mean_az)<=acel_deadzone) ready++;
    16ce:	c0 e0       	ldi	r28, 0x00	; 0
    16d0:	d0 e4       	ldi	r29, 0x40	; 64
  gx_offset=-mean_gx/4;
  gy_offset=-mean_gy/4;
  gz_offset=-mean_gz/4;
  while (1){
    int ready=0;
    accelgyro.setXAccelOffset(ax_offset);
    16d2:	60 91 60 05 	lds	r22, 0x0560
    16d6:	70 91 61 05 	lds	r23, 0x0561
    16da:	8c e7       	ldi	r24, 0x7C	; 124
    16dc:	95 e0       	ldi	r25, 0x05	; 5
    16de:	0e 94 49 02 	call	0x492	; 0x492 <_ZN7MPU605015setXAccelOffsetEi>
    accelgyro.setYAccelOffset(ay_offset);
    16e2:	60 91 5e 05 	lds	r22, 0x055E
    16e6:	70 91 5f 05 	lds	r23, 0x055F
    16ea:	8c e7       	ldi	r24, 0x7C	; 124
    16ec:	95 e0       	ldi	r25, 0x05	; 5
    16ee:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN7MPU605015setYAccelOffsetEi>
    accelgyro.setZAccelOffset(az_offset);
    16f2:	60 91 5c 05 	lds	r22, 0x055C
    16f6:	70 91 5d 05 	lds	r23, 0x055D
    16fa:	8c e7       	ldi	r24, 0x7C	; 124
    16fc:	95 e0       	ldi	r25, 0x05	; 5
    16fe:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7MPU605015setZAccelOffsetEi>

    accelgyro.setXGyroOffset(gx_offset);
    1702:	60 91 5a 05 	lds	r22, 0x055A
    1706:	70 91 5b 05 	lds	r23, 0x055B
    170a:	8c e7       	ldi	r24, 0x7C	; 124
    170c:	95 e0       	ldi	r25, 0x05	; 5
    170e:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN7MPU605014setXGyroOffsetEi>
    accelgyro.setYGyroOffset(gy_offset);
    1712:	60 91 58 05 	lds	r22, 0x0558
    1716:	70 91 59 05 	lds	r23, 0x0559
    171a:	8c e7       	ldi	r24, 0x7C	; 124
    171c:	95 e0       	ldi	r25, 0x05	; 5
    171e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN7MPU605014setYGyroOffsetEi>
    accelgyro.setZGyroOffset(gz_offset);
    1722:	60 91 56 05 	lds	r22, 0x0556
    1726:	70 91 57 05 	lds	r23, 0x0557
    172a:	8c e7       	ldi	r24, 0x7C	; 124
    172c:	95 e0       	ldi	r25, 0x05	; 5
    172e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7MPU605014setZGyroOffsetEi>

    meansensors();
    1732:	0e 94 17 08 	call	0x102e	; 0x102e <_Z11meansensorsv>
    Serial.println("...");
    1736:	6e e3       	ldi	r22, 0x3E	; 62
    1738:	72 e0       	ldi	r23, 0x02	; 2
    173a:	83 e1       	ldi	r24, 0x13	; 19
    173c:	96 e0       	ldi	r25, 0x06	; 6
    173e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
	PrintCurrentMean();
    1742:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z16PrintCurrentMeanv>
	PrintCurrentOffsets();
    1746:	0e 94 02 0a 	call	0x1404	; 0x1404 <_Z19PrintCurrentOffsetsv>
	
    if (abs(mean_ax)<=acel_deadzone) ready++;
    174a:	80 91 6e 05 	lds	r24, 0x056E
    174e:	90 91 6f 05 	lds	r25, 0x056F
    1752:	e0 91 08 01 	lds	r30, 0x0108
    1756:	f0 91 09 01 	lds	r31, 0x0109
    175a:	9c 01       	movw	r18, r24
    175c:	99 23       	and	r25, r25
    175e:	24 f4       	brge	.+8      	; 0x1768 <_Z11calibrationv+0x18e>
    1760:	22 27       	eor	r18, r18
    1762:	33 27       	eor	r19, r19
    1764:	28 1b       	sub	r18, r24
    1766:	39 0b       	sbc	r19, r25
    1768:	e2 17       	cp	r30, r18
    176a:	f3 07       	cpc	r31, r19
    176c:	84 f4       	brge	.+32     	; 0x178e <_Z11calibrationv+0x1b4>
    else ax_offset=ax_offset-mean_ax/acel_deadzone;
    176e:	bf 01       	movw	r22, r30
    1770:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    1774:	80 91 60 05 	lds	r24, 0x0560
    1778:	90 91 61 05 	lds	r25, 0x0561
    177c:	86 1b       	sub	r24, r22
    177e:	97 0b       	sbc	r25, r23
    1780:	90 93 61 05 	sts	0x0561, r25
    1784:	80 93 60 05 	sts	0x0560, r24

  gx_offset=-mean_gx/4;
  gy_offset=-mean_gy/4;
  gz_offset=-mean_gz/4;
  while (1){
    int ready=0;
    1788:	20 2f       	mov	r18, r16
    178a:	31 2f       	mov	r19, r17
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <_Z11calibrationv+0x1b8>
    meansensors();
    Serial.println("...");
	PrintCurrentMean();
	PrintCurrentOffsets();
	
    if (abs(mean_ax)<=acel_deadzone) ready++;
    178e:	2e 2d       	mov	r18, r14
    1790:	3f 2d       	mov	r19, r15
    else ax_offset=ax_offset-mean_ax/acel_deadzone;

    if (abs(mean_ay)<=acel_deadzone) ready++;
    1792:	80 91 6c 05 	lds	r24, 0x056C
    1796:	90 91 6d 05 	lds	r25, 0x056D
    179a:	ac 01       	movw	r20, r24
    179c:	99 23       	and	r25, r25
    179e:	24 f4       	brge	.+8      	; 0x17a8 <_Z11calibrationv+0x1ce>
    17a0:	44 27       	eor	r20, r20
    17a2:	55 27       	eor	r21, r21
    17a4:	48 1b       	sub	r20, r24
    17a6:	59 0b       	sbc	r21, r25
    17a8:	e4 17       	cp	r30, r20
    17aa:	f5 07       	cpc	r31, r21
    17ac:	1c f0       	brlt	.+6      	; 0x17b4 <_Z11calibrationv+0x1da>
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	0d c0       	rjmp	.+26     	; 0x17ce <_Z11calibrationv+0x1f4>
    else ay_offset=ay_offset-mean_ay/acel_deadzone;
    17b4:	bf 01       	movw	r22, r30
    17b6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    17ba:	80 91 5e 05 	lds	r24, 0x055E
    17be:	90 91 5f 05 	lds	r25, 0x055F
    17c2:	86 1b       	sub	r24, r22
    17c4:	97 0b       	sbc	r25, r23
    17c6:	90 93 5f 05 	sts	0x055F, r25
    17ca:	80 93 5e 05 	sts	0x055E, r24

    if (abs(16384-mean_az)<=acel_deadzone) ready++;
    17ce:	40 91 6a 05 	lds	r20, 0x056A
    17d2:	50 91 6b 05 	lds	r21, 0x056B
    17d6:	ce 01       	movw	r24, r28
    17d8:	84 1b       	sub	r24, r20
    17da:	95 0b       	sbc	r25, r21
    17dc:	18 16       	cp	r1, r24
    17de:	19 06       	cpc	r1, r25
    17e0:	14 f0       	brlt	.+4      	; 0x17e6 <_Z11calibrationv+0x20c>
    17e2:	50 54       	subi	r21, 0x40	; 64
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <_Z11calibrationv+0x20e>
    17e6:	ac 01       	movw	r20, r24
    17e8:	e4 17       	cp	r30, r20
    17ea:	f5 07       	cpc	r31, r21
    17ec:	1c f0       	brlt	.+6      	; 0x17f4 <_Z11calibrationv+0x21a>
    17ee:	2f 5f       	subi	r18, 0xFF	; 255
    17f0:	3f 4f       	sbci	r19, 0xFF	; 255
    17f2:	0d c0       	rjmp	.+26     	; 0x180e <_Z11calibrationv+0x234>
    else az_offset=az_offset+(16384-mean_az)/acel_deadzone;
    17f4:	bf 01       	movw	r22, r30
    17f6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    17fa:	80 91 5c 05 	lds	r24, 0x055C
    17fe:	90 91 5d 05 	lds	r25, 0x055D
    1802:	68 0f       	add	r22, r24
    1804:	79 1f       	adc	r23, r25
    1806:	70 93 5d 05 	sts	0x055D, r23
    180a:	60 93 5c 05 	sts	0x055C, r22

    if (abs(mean_gx)<=giro_deadzone) ready++;
    180e:	80 91 68 05 	lds	r24, 0x0568
    1812:	90 91 69 05 	lds	r25, 0x0569
    1816:	e0 91 06 01 	lds	r30, 0x0106
    181a:	f0 91 07 01 	lds	r31, 0x0107
    181e:	ac 01       	movw	r20, r24
    1820:	99 23       	and	r25, r25
    1822:	24 f4       	brge	.+8      	; 0x182c <_Z11calibrationv+0x252>
    1824:	44 27       	eor	r20, r20
    1826:	55 27       	eor	r21, r21
    1828:	48 1b       	sub	r20, r24
    182a:	59 0b       	sbc	r21, r25
    182c:	e4 17       	cp	r30, r20
    182e:	f5 07       	cpc	r31, r21
    1830:	1c f0       	brlt	.+6      	; 0x1838 <_Z11calibrationv+0x25e>
    1832:	2f 5f       	subi	r18, 0xFF	; 255
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <_Z11calibrationv+0x27c>
    else gx_offset=gx_offset-mean_gx/(giro_deadzone+1);
    1838:	bf 01       	movw	r22, r30
    183a:	6f 5f       	subi	r22, 0xFF	; 255
    183c:	7f 4f       	sbci	r23, 0xFF	; 255
    183e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    1842:	80 91 5a 05 	lds	r24, 0x055A
    1846:	90 91 5b 05 	lds	r25, 0x055B
    184a:	86 1b       	sub	r24, r22
    184c:	97 0b       	sbc	r25, r23
    184e:	90 93 5b 05 	sts	0x055B, r25
    1852:	80 93 5a 05 	sts	0x055A, r24

    if (abs(mean_gy)<=giro_deadzone) ready++;
    1856:	80 91 66 05 	lds	r24, 0x0566
    185a:	90 91 67 05 	lds	r25, 0x0567
    185e:	ac 01       	movw	r20, r24
    1860:	99 23       	and	r25, r25
    1862:	24 f4       	brge	.+8      	; 0x186c <_Z11calibrationv+0x292>
    1864:	44 27       	eor	r20, r20
    1866:	55 27       	eor	r21, r21
    1868:	48 1b       	sub	r20, r24
    186a:	59 0b       	sbc	r21, r25
    186c:	e4 17       	cp	r30, r20
    186e:	f5 07       	cpc	r31, r21
    1870:	1c f0       	brlt	.+6      	; 0x1878 <_Z11calibrationv+0x29e>
    1872:	2f 5f       	subi	r18, 0xFF	; 255
    1874:	3f 4f       	sbci	r19, 0xFF	; 255
    1876:	0f c0       	rjmp	.+30     	; 0x1896 <_Z11calibrationv+0x2bc>
    else gy_offset=gy_offset-mean_gy/(giro_deadzone+1);
    1878:	bf 01       	movw	r22, r30
    187a:	6f 5f       	subi	r22, 0xFF	; 255
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    1882:	80 91 58 05 	lds	r24, 0x0558
    1886:	90 91 59 05 	lds	r25, 0x0559
    188a:	86 1b       	sub	r24, r22
    188c:	97 0b       	sbc	r25, r23
    188e:	90 93 59 05 	sts	0x0559, r25
    1892:	80 93 58 05 	sts	0x0558, r24

    if (abs(mean_gz)<=giro_deadzone) ready++;
    1896:	80 91 64 05 	lds	r24, 0x0564
    189a:	90 91 65 05 	lds	r25, 0x0565
    189e:	ac 01       	movw	r20, r24
    18a0:	99 23       	and	r25, r25
    18a2:	24 f4       	brge	.+8      	; 0x18ac <_Z11calibrationv+0x2d2>
    18a4:	44 27       	eor	r20, r20
    18a6:	55 27       	eor	r21, r21
    18a8:	48 1b       	sub	r20, r24
    18aa:	59 0b       	sbc	r21, r25
    18ac:	e4 17       	cp	r30, r20
    18ae:	f5 07       	cpc	r31, r21
    18b0:	1c f0       	brlt	.+6      	; 0x18b8 <_Z11calibrationv+0x2de>
    18b2:	2f 5f       	subi	r18, 0xFF	; 255
    18b4:	3f 4f       	sbci	r19, 0xFF	; 255
    18b6:	0f c0       	rjmp	.+30     	; 0x18d6 <_Z11calibrationv+0x2fc>
    else gz_offset=gz_offset-mean_gz/(giro_deadzone+1);
    18b8:	bf 01       	movw	r22, r30
    18ba:	6f 5f       	subi	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodhi4>
    18c2:	80 91 56 05 	lds	r24, 0x0556
    18c6:	90 91 57 05 	lds	r25, 0x0557
    18ca:	86 1b       	sub	r24, r22
    18cc:	97 0b       	sbc	r25, r23
    18ce:	90 93 57 05 	sts	0x0557, r25
    18d2:	80 93 56 05 	sts	0x0556, r24

    if (ready==6) break;
    18d6:	26 30       	cpi	r18, 0x06	; 6
    18d8:	31 05       	cpc	r19, r1
    18da:	09 f0       	breq	.+2      	; 0x18de <_Z11calibrationv+0x304>
    18dc:	fa ce       	rjmp	.-524    	; 0x16d2 <_Z11calibrationv+0xf8>
  }
}
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	08 95       	ret

000018ec <loop>:
  
}

///////////////////////////////////   LOOP   ////////////////////////////////////
void loop() {
  if (state==0){
    18ec:	80 91 62 05 	lds	r24, 0x0562
    18f0:	90 91 63 05 	lds	r25, 0x0563
    18f4:	89 2b       	or	r24, r25
    18f6:	b9 f4       	brne	.+46     	; 0x1926 <loop+0x3a>
    Serial.println("\nReading sensors for first time...");
    18f8:	6f e1       	ldi	r22, 0x1F	; 31
    18fa:	72 e0       	ldi	r23, 0x02	; 2
    18fc:	83 e1       	ldi	r24, 0x13	; 19
    18fe:	96 e0       	ldi	r25, 0x06	; 6
    1900:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
    meansensors();
    1904:	0e 94 17 08 	call	0x102e	; 0x102e <_Z11meansensorsv>
    state++;
    1908:	80 91 62 05 	lds	r24, 0x0562
    190c:	90 91 63 05 	lds	r25, 0x0563
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	90 93 63 05 	sts	0x0563, r25
    1916:	80 93 62 05 	sts	0x0562, r24
    delay(1000);
    191a:	68 ee       	ldi	r22, 0xE8	; 232
    191c:	73 e0       	ldi	r23, 0x03	; 3
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <delay>
  }

  if (state==1) {
    1926:	80 91 62 05 	lds	r24, 0x0562
    192a:	90 91 63 05 	lds	r25, 0x0563
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	b9 f4       	brne	.+46     	; 0x1960 <loop+0x74>
    Serial.println("\nCalculating offsets...");
    1932:	62 e4       	ldi	r22, 0x42	; 66
    1934:	72 e0       	ldi	r23, 0x02	; 2
    1936:	83 e1       	ldi	r24, 0x13	; 19
    1938:	96 e0       	ldi	r25, 0x06	; 6
    193a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
    calibration();
    193e:	0e 94 ed 0a 	call	0x15da	; 0x15da <_Z11calibrationv>
    state++;
    1942:	80 91 62 05 	lds	r24, 0x0562
    1946:	90 91 63 05 	lds	r25, 0x0563
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	90 93 63 05 	sts	0x0563, r25
    1950:	80 93 62 05 	sts	0x0562, r24
    delay(1000);
    1954:	68 ee       	ldi	r22, 0xE8	; 232
    1956:	73 e0       	ldi	r23, 0x03	; 3
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <delay>
  }

  if (state==2) {
    1960:	80 91 62 05 	lds	r24, 0x0562
    1964:	90 91 63 05 	lds	r25, 0x0563
    1968:	02 97       	sbiw	r24, 0x02	; 2
    196a:	09 f0       	breq	.+2      	; 0x196e <loop+0x82>
    196c:	db c0       	rjmp	.+438    	; 0x1b24 <loop+0x238>
    meansensors();
    196e:	0e 94 17 08 	call	0x102e	; 0x102e <_Z11meansensorsv>
    Serial.println("\nFINISHED!");
    1972:	6a e5       	ldi	r22, 0x5A	; 90
    1974:	72 e0       	ldi	r23, 0x02	; 2
    1976:	83 e1       	ldi	r24, 0x13	; 19
    1978:	96 e0       	ldi	r25, 0x06	; 6
    197a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
    Serial.print("\nSensor readings with offsets:\t");
    197e:	65 e6       	ldi	r22, 0x65	; 101
    1980:	72 e0       	ldi	r23, 0x02	; 2
    1982:	83 e1       	ldi	r24, 0x13	; 19
    1984:	96 e0       	ldi	r25, 0x06	; 6
    1986:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(mean_ax); 
    198a:	60 91 6e 05 	lds	r22, 0x056E
    198e:	70 91 6f 05 	lds	r23, 0x056F
    1992:	4a e0       	ldi	r20, 0x0A	; 10
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	83 e1       	ldi	r24, 0x13	; 19
    1998:	96 e0       	ldi	r25, 0x06	; 6
    199a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    199e:	6d e1       	ldi	r22, 0x1D	; 29
    19a0:	72 e0       	ldi	r23, 0x02	; 2
    19a2:	83 e1       	ldi	r24, 0x13	; 19
    19a4:	96 e0       	ldi	r25, 0x06	; 6
    19a6:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(mean_ay); 
    19aa:	60 91 6c 05 	lds	r22, 0x056C
    19ae:	70 91 6d 05 	lds	r23, 0x056D
    19b2:	4a e0       	ldi	r20, 0x0A	; 10
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	83 e1       	ldi	r24, 0x13	; 19
    19b8:	96 e0       	ldi	r25, 0x06	; 6
    19ba:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    19be:	6d e1       	ldi	r22, 0x1D	; 29
    19c0:	72 e0       	ldi	r23, 0x02	; 2
    19c2:	83 e1       	ldi	r24, 0x13	; 19
    19c4:	96 e0       	ldi	r25, 0x06	; 6
    19c6:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(mean_az); 
    19ca:	60 91 6a 05 	lds	r22, 0x056A
    19ce:	70 91 6b 05 	lds	r23, 0x056B
    19d2:	4a e0       	ldi	r20, 0x0A	; 10
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	83 e1       	ldi	r24, 0x13	; 19
    19d8:	96 e0       	ldi	r25, 0x06	; 6
    19da:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    19de:	6d e1       	ldi	r22, 0x1D	; 29
    19e0:	72 e0       	ldi	r23, 0x02	; 2
    19e2:	83 e1       	ldi	r24, 0x13	; 19
    19e4:	96 e0       	ldi	r25, 0x06	; 6
    19e6:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(mean_gx); 
    19ea:	60 91 68 05 	lds	r22, 0x0568
    19ee:	70 91 69 05 	lds	r23, 0x0569
    19f2:	4a e0       	ldi	r20, 0x0A	; 10
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	83 e1       	ldi	r24, 0x13	; 19
    19f8:	96 e0       	ldi	r25, 0x06	; 6
    19fa:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    19fe:	6d e1       	ldi	r22, 0x1D	; 29
    1a00:	72 e0       	ldi	r23, 0x02	; 2
    1a02:	83 e1       	ldi	r24, 0x13	; 19
    1a04:	96 e0       	ldi	r25, 0x06	; 6
    1a06:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(mean_gy); 
    1a0a:	60 91 66 05 	lds	r22, 0x0566
    1a0e:	70 91 67 05 	lds	r23, 0x0567
    1a12:	4a e0       	ldi	r20, 0x0A	; 10
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	83 e1       	ldi	r24, 0x13	; 19
    1a18:	96 e0       	ldi	r25, 0x06	; 6
    1a1a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    1a1e:	6d e1       	ldi	r22, 0x1D	; 29
    1a20:	72 e0       	ldi	r23, 0x02	; 2
    1a22:	83 e1       	ldi	r24, 0x13	; 19
    1a24:	96 e0       	ldi	r25, 0x06	; 6
    1a26:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.println(mean_gz);
    1a2a:	60 91 64 05 	lds	r22, 0x0564
    1a2e:	70 91 65 05 	lds	r23, 0x0565
    1a32:	4a e0       	ldi	r20, 0x0A	; 10
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	83 e1       	ldi	r24, 0x13	; 19
    1a38:	96 e0       	ldi	r25, 0x06	; 6
    1a3a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_ZN5Print7printlnEii>
    Serial.print("Your offsets:\t");
    1a3e:	65 e8       	ldi	r22, 0x85	; 133
    1a40:	72 e0       	ldi	r23, 0x02	; 2
    1a42:	83 e1       	ldi	r24, 0x13	; 19
    1a44:	96 e0       	ldi	r25, 0x06	; 6
    1a46:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(ax_offset); 
    1a4a:	60 91 60 05 	lds	r22, 0x0560
    1a4e:	70 91 61 05 	lds	r23, 0x0561
    1a52:	4a e0       	ldi	r20, 0x0A	; 10
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	83 e1       	ldi	r24, 0x13	; 19
    1a58:	96 e0       	ldi	r25, 0x06	; 6
    1a5a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    1a5e:	6d e1       	ldi	r22, 0x1D	; 29
    1a60:	72 e0       	ldi	r23, 0x02	; 2
    1a62:	83 e1       	ldi	r24, 0x13	; 19
    1a64:	96 e0       	ldi	r25, 0x06	; 6
    1a66:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(ay_offset); 
    1a6a:	60 91 5e 05 	lds	r22, 0x055E
    1a6e:	70 91 5f 05 	lds	r23, 0x055F
    1a72:	4a e0       	ldi	r20, 0x0A	; 10
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	83 e1       	ldi	r24, 0x13	; 19
    1a78:	96 e0       	ldi	r25, 0x06	; 6
    1a7a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    1a7e:	6d e1       	ldi	r22, 0x1D	; 29
    1a80:	72 e0       	ldi	r23, 0x02	; 2
    1a82:	83 e1       	ldi	r24, 0x13	; 19
    1a84:	96 e0       	ldi	r25, 0x06	; 6
    1a86:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(az_offset); 
    1a8a:	60 91 5c 05 	lds	r22, 0x055C
    1a8e:	70 91 5d 05 	lds	r23, 0x055D
    1a92:	4a e0       	ldi	r20, 0x0A	; 10
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	83 e1       	ldi	r24, 0x13	; 19
    1a98:	96 e0       	ldi	r25, 0x06	; 6
    1a9a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    1a9e:	6d e1       	ldi	r22, 0x1D	; 29
    1aa0:	72 e0       	ldi	r23, 0x02	; 2
    1aa2:	83 e1       	ldi	r24, 0x13	; 19
    1aa4:	96 e0       	ldi	r25, 0x06	; 6
    1aa6:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(gx_offset); 
    1aaa:	60 91 5a 05 	lds	r22, 0x055A
    1aae:	70 91 5b 05 	lds	r23, 0x055B
    1ab2:	4a e0       	ldi	r20, 0x0A	; 10
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	83 e1       	ldi	r24, 0x13	; 19
    1ab8:	96 e0       	ldi	r25, 0x06	; 6
    1aba:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    1abe:	6d e1       	ldi	r22, 0x1D	; 29
    1ac0:	72 e0       	ldi	r23, 0x02	; 2
    1ac2:	83 e1       	ldi	r24, 0x13	; 19
    1ac4:	96 e0       	ldi	r25, 0x06	; 6
    1ac6:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.print(gy_offset); 
    1aca:	60 91 58 05 	lds	r22, 0x0558
    1ace:	70 91 59 05 	lds	r23, 0x0559
    1ad2:	4a e0       	ldi	r20, 0x0A	; 10
    1ad4:	50 e0       	ldi	r21, 0x00	; 0
    1ad6:	83 e1       	ldi	r24, 0x13	; 19
    1ad8:	96 e0       	ldi	r25, 0x06	; 6
    1ada:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    Serial.print("\t");
    1ade:	6d e1       	ldi	r22, 0x1D	; 29
    1ae0:	72 e0       	ldi	r23, 0x02	; 2
    1ae2:	83 e1       	ldi	r24, 0x13	; 19
    1ae4:	96 e0       	ldi	r25, 0x06	; 6
    1ae6:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    Serial.println(gz_offset); 
    1aea:	60 91 56 05 	lds	r22, 0x0556
    1aee:	70 91 57 05 	lds	r23, 0x0557
    1af2:	4a e0       	ldi	r20, 0x0A	; 10
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	83 e1       	ldi	r24, 0x13	; 19
    1af8:	96 e0       	ldi	r25, 0x06	; 6
    1afa:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_ZN5Print7printlnEii>
    Serial.println("\nData is printed as: acelX acelY acelZ giroX giroY giroZ");
    1afe:	64 e9       	ldi	r22, 0x94	; 148
    1b00:	72 e0       	ldi	r23, 0x02	; 2
    1b02:	83 e1       	ldi	r24, 0x13	; 19
    1b04:	96 e0       	ldi	r25, 0x06	; 6
    1b06:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
    Serial.println("Check that your sensor readings are close to 0 0 16384 0 0 0");
    1b0a:	6d ec       	ldi	r22, 0xCD	; 205
    1b0c:	72 e0       	ldi	r23, 0x02	; 2
    1b0e:	83 e1       	ldi	r24, 0x13	; 19
    1b10:	96 e0       	ldi	r25, 0x06	; 6
    1b12:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
    Serial.println("If calibration was succesful write down your offsets so you can set them in your projects using something similar to mpu.setXAccelOffset(youroffset)");
    1b16:	6a e0       	ldi	r22, 0x0A	; 10
    1b18:	73 e0       	ldi	r23, 0x03	; 3
    1b1a:	83 e1       	ldi	r24, 0x13	; 19
    1b1c:	96 e0       	ldi	r25, 0x06	; 6
    1b1e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
    1b22:	ff cf       	rjmp	.-2      	; 0x1b22 <loop+0x236>
    1b24:	08 95       	ret

00001b26 <_GLOBAL__sub_I_buffersize>:
// default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
//MPU6050 accelgyro;
MPU6050 accelgyro(0x68); // <-- use for AD0 high
    1b26:	68 e6       	ldi	r22, 0x68	; 104
    1b28:	8c e7       	ldi	r24, 0x7C	; 124
    1b2a:	95 e0       	ldi	r25, 0x05	; 5
    1b2c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_ZN7MPU6050C1Eh>
    1b30:	08 95       	ret

00001b32 <setup>:
void meansensors();
void calibration();
///////////////////////////////////   SETUP   ////////////////////////////////////
void setup() {
  // join I2C bus (I2Cdev library doesn't do this automatically)
  Wire.begin();
    1b32:	86 e9       	ldi	r24, 0x96	; 150
    1b34:	94 e0       	ldi	r25, 0x04	; 4
    1b36:	0e 94 bb 05 	call	0xb76	; 0xb76 <_ZN7TwoWire5beginEv>
  // COMMENT NEXT LINE IF YOU ARE USING ARDUINO DUE
  TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz). Leonardo measured 250kHz.
    1b3a:	88 e1       	ldi	r24, 0x18	; 24
    1b3c:	80 93 b8 00 	sts	0x00B8, r24

  // initialize serial communication
  Serial.begin(115200);
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	52 ec       	ldi	r21, 0xC2	; 194
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	83 e1       	ldi	r24, 0x13	; 19
    1b4a:	96 e0       	ldi	r25, 0x06	; 6
    1b4c:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN14HardwareSerial5beginEm>

  // initialize device
  accelgyro.initialize();
    1b50:	8c e7       	ldi	r24, 0x7C	; 124
    1b52:	95 e0       	ldi	r25, 0x05	; 5
    1b54:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN7MPU605010initializeEv>

  // wait for ready
  while (Serial.available() && Serial.read()); // empty buffer
    1b58:	83 e1       	ldi	r24, 0x13	; 19
    1b5a:	96 e0       	ldi	r25, 0x06	; 6
    1b5c:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN14HardwareSerial9availableEv>
    1b60:	89 2b       	or	r24, r25
    1b62:	99 f0       	breq	.+38     	; 0x1b8a <setup+0x58>
    1b64:	83 e1       	ldi	r24, 0x13	; 19
    1b66:	96 e0       	ldi	r25, 0x06	; 6
    1b68:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN14HardwareSerial4readEv>
    1b6c:	89 2b       	or	r24, r25
    1b6e:	a1 f7       	brne	.-24     	; 0x1b58 <setup+0x26>
    1b70:	0c c0       	rjmp	.+24     	; 0x1b8a <setup+0x58>
  while (!Serial.available()){
    Serial.println(F("Send any character to start sketch.\n"));
    1b72:	6a ef       	ldi	r22, 0xFA	; 250
    1b74:	71 e0       	ldi	r23, 0x01	; 1
    1b76:	83 e1       	ldi	r24, 0x13	; 19
    1b78:	96 e0       	ldi	r25, 0x06	; 6
    1b7a:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5Print7printlnEPK19__FlashStringHelper>
    delay(1500);
    1b7e:	6c ed       	ldi	r22, 0xDC	; 220
    1b80:	75 e0       	ldi	r23, 0x05	; 5
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <delay>
  // initialize device
  accelgyro.initialize();

  // wait for ready
  while (Serial.available() && Serial.read()); // empty buffer
  while (!Serial.available()){
    1b8a:	83 e1       	ldi	r24, 0x13	; 19
    1b8c:	96 e0       	ldi	r25, 0x06	; 6
    1b8e:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN14HardwareSerial9availableEv>
    1b92:	89 2b       	or	r24, r25
    1b94:	71 f3       	breq	.-36     	; 0x1b72 <setup+0x40>
    Serial.println(F("Send any character to start sketch.\n"));
    delay(1500);
  }                
  while (Serial.available() && Serial.read()); // empty buffer again
    1b96:	83 e1       	ldi	r24, 0x13	; 19
    1b98:	96 e0       	ldi	r25, 0x06	; 6
    1b9a:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN14HardwareSerial9availableEv>
    1b9e:	89 2b       	or	r24, r25
    1ba0:	31 f0       	breq	.+12     	; 0x1bae <setup+0x7c>
    1ba2:	83 e1       	ldi	r24, 0x13	; 19
    1ba4:	96 e0       	ldi	r25, 0x06	; 6
    1ba6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN14HardwareSerial4readEv>
    1baa:	89 2b       	or	r24, r25
    1bac:	a1 f7       	brne	.-24     	; 0x1b96 <setup+0x64>

  // start message
  Serial.println("\nMPU6050 Calibration Sketch");
    1bae:	67 ed       	ldi	r22, 0xD7	; 215
    1bb0:	73 e0       	ldi	r23, 0x03	; 3
    1bb2:	83 e1       	ldi	r24, 0x13	; 19
    1bb4:	96 e0       	ldi	r25, 0x06	; 6
    1bb6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
  delay(2000);
    1bba:	60 ed       	ldi	r22, 0xD0	; 208
    1bbc:	77 e0       	ldi	r23, 0x07	; 7
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <delay>
  Serial.println("\nYour MPU6050 should be placed in horizontal position, with package letters facing up. \nDon't touch it until you see a finish message.\n");
    1bc6:	63 ef       	ldi	r22, 0xF3	; 243
    1bc8:	73 e0       	ldi	r23, 0x03	; 3
    1bca:	83 e1       	ldi	r24, 0x13	; 19
    1bcc:	96 e0       	ldi	r25, 0x06	; 6
    1bce:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
  delay(3000);
    1bd2:	68 eb       	ldi	r22, 0xB8	; 184
    1bd4:	7b e0       	ldi	r23, 0x0B	; 11
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <delay>
  // verify connection
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
    1bde:	8c e7       	ldi	r24, 0x7C	; 124
    1be0:	95 e0       	ldi	r25, 0x05	; 5
    1be2:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN7MPU605014testConnectionEv>
    1be6:	88 23       	and	r24, r24
    1be8:	19 f0       	breq	.+6      	; 0x1bf0 <setup+0xbe>
    1bea:	6f e9       	ldi	r22, 0x9F	; 159
    1bec:	73 e0       	ldi	r23, 0x03	; 3
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <setup+0xc2>
    1bf0:	6d eb       	ldi	r22, 0xBD	; 189
    1bf2:	73 e0       	ldi	r23, 0x03	; 3
    1bf4:	83 e1       	ldi	r24, 0x13	; 19
    1bf6:	96 e0       	ldi	r25, 0x06	; 6
    1bf8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print7printlnEPKc>
  delay(1000);
    1bfc:	68 ee       	ldi	r22, 0xE8	; 232
    1bfe:	73 e0       	ldi	r23, 0x03	; 3
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <delay>
  // reset offsets
  accelgyro.setXAccelOffset(0);
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	8c e7       	ldi	r24, 0x7C	; 124
    1c0e:	95 e0       	ldi	r25, 0x05	; 5
    1c10:	0e 94 49 02 	call	0x492	; 0x492 <_ZN7MPU605015setXAccelOffsetEi>
  accelgyro.setYAccelOffset(0);
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	8c e7       	ldi	r24, 0x7C	; 124
    1c1a:	95 e0       	ldi	r25, 0x05	; 5
    1c1c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN7MPU605015setYAccelOffsetEi>
  accelgyro.setZAccelOffset(0);
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	8c e7       	ldi	r24, 0x7C	; 124
    1c26:	95 e0       	ldi	r25, 0x05	; 5
    1c28:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7MPU605015setZAccelOffsetEi>
  accelgyro.setXGyroOffset(0);
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	8c e7       	ldi	r24, 0x7C	; 124
    1c32:	95 e0       	ldi	r25, 0x05	; 5
    1c34:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN7MPU605014setXGyroOffsetEi>
  accelgyro.setYGyroOffset(0);
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	8c e7       	ldi	r24, 0x7C	; 124
    1c3e:	95 e0       	ldi	r25, 0x05	; 5
    1c40:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN7MPU605014setYGyroOffsetEi>
  accelgyro.setZGyroOffset(0);
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	8c e7       	ldi	r24, 0x7C	; 124
    1c4a:	95 e0       	ldi	r25, 0x05	; 5
    1c4c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7MPU605014setZGyroOffsetEi>
    1c50:	08 95       	ret

00001c52 <main>:
  }
}

int main(void)
{
	init();
    1c52:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <init>

	#if defined(USBCON)
	USBDevice.attach();
	#endif
	
	setup();
    1c56:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <setup>
	
	for (;;) {
		loop();
    1c5a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <loop>
		if (serialEventRun) serialEventRun();
    1c5e:	8c e0       	ldi	r24, 0x0C	; 12
    1c60:	9f e0       	ldi	r25, 0x0F	; 15
    1c62:	89 2b       	or	r24, r25
    1c64:	29 f0       	breq	.+10     	; 0x1c70 <main+0x1e>
    1c66:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <_Z14serialEventRunv>
	#endif
	
	setup();
	
	for (;;) {
		loop();
    1c6a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <loop>
    1c6e:	fb cf       	rjmp	.-10     	; 0x1c66 <main+0x14>
    1c70:	0e 94 76 0c 	call	0x18ec	; 0x18ec <loop>
    1c74:	fd cf       	rjmp	.-6      	; 0x1c70 <main+0x1e>

00001c76 <_ZN5PrintC1Ev>:
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <_ZN5PrintC1Ev+0x6>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	2f e8       	ldi	r18, 0x8F	; 143
    1c8a:	34 e0       	ldi	r19, 0x04	; 4
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	31 83       	std	Z+1, r19	; 0x01
    1c90:	20 83       	st	Z, r18
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	fc 01       	movw	r30, r24
    1c98:	13 82       	std	Z+3, r1	; 0x03
    1c9a:	12 82       	std	Z+2, r1	; 0x02
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <_ZN6StreamC1Ev>:
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <_ZN6StreamC1Ev+0x6>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN5PrintC1Ev>
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc0:	20 e1       	ldi	r18, 0x10	; 16
    1cc2:	31 e0       	ldi	r19, 0x01	; 1
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	31 83       	std	Z+1, r19	; 0x01
    1cc8:	20 83       	st	Z, r18
    1cca:	29 81       	ldd	r18, Y+1	; 0x01
    1ccc:	3a 81       	ldd	r19, Y+2	; 0x02
    1cce:	88 ee       	ldi	r24, 0xE8	; 232
    1cd0:	93 e0       	ldi	r25, 0x03	; 3
    1cd2:	a0 e0       	ldi	r26, 0x00	; 0
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	84 83       	std	Z+4, r24	; 0x04
    1cda:	95 83       	std	Z+5, r25	; 0x05
    1cdc:	a6 83       	std	Z+6, r26	; 0x06
    1cde:	b7 83       	std	Z+7, r27	; 0x07
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	08 95       	ret

00001cea <_Z10store_charhP11ring_buffer>:
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <_Z10store_charhP11ring_buffer+0x6>
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <_Z10store_charhP11ring_buffer+0x8>
    1cf2:	1f 92       	push	r1
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
    1cfa:	7d 83       	std	Y+5, r23	; 0x05
    1cfc:	6c 83       	std	Y+4, r22	; 0x04
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	9d 81       	ldd	r25, Y+5	; 0x05
    1d02:	80 5c       	subi	r24, 0xC0	; 192
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	fc 01       	movw	r30, r24
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	8f 73       	andi	r24, 0x3F	; 63
    1d10:	99 27       	eor	r25, r25
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	29 81       	ldd	r18, Y+1	; 0x01
    1d18:	3a 81       	ldd	r19, Y+2	; 0x02
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	8e 5b       	subi	r24, 0xBE	; 190
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	fc 01       	movw	r30, r24
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	28 17       	cp	r18, r24
    1d2c:	39 07       	cpc	r19, r25
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <_Z10store_charhP11ring_buffer+0x48>
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	44 23       	and	r20, r20
    1d34:	b9 f0       	breq	.+46     	; 0x1d64 <_Z10store_charhP11ring_buffer+0x7a>
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3a:	80 5c       	subi	r24, 0xC0	; 192
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	fc 01       	movw	r30, r24
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	2c 81       	ldd	r18, Y+4	; 0x04
    1d46:	3d 81       	ldd	r19, Y+5	; 0x05
    1d48:	82 0f       	add	r24, r18
    1d4a:	93 1f       	adc	r25, r19
    1d4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4e:	fc 01       	movw	r30, r24
    1d50:	20 83       	st	Z, r18
    1d52:	29 81       	ldd	r18, Y+1	; 0x01
    1d54:	3a 81       	ldd	r19, Y+2	; 0x02
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5a:	80 5c       	subi	r24, 0xC0	; 192
    1d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5e:	fc 01       	movw	r30, r24
    1d60:	31 83       	std	Z+1, r19	; 0x01
    1d62:	20 83       	st	Z, r18
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <_Z11serialEventv>:
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <__vector_18>:
    1d82:	1f 92       	push	r1
    1d84:	0f 92       	push	r0
    1d86:	00 90 5f 00 	lds	r0, 0x005F
    1d8a:	0f 92       	push	r0
    1d8c:	11 24       	eor	r1, r1
    1d8e:	2f 93       	push	r18
    1d90:	3f 93       	push	r19
    1d92:	4f 93       	push	r20
    1d94:	5f 93       	push	r21
    1d96:	6f 93       	push	r22
    1d98:	7f 93       	push	r23
    1d9a:	8f 93       	push	r24
    1d9c:	9f 93       	push	r25
    1d9e:	af 93       	push	r26
    1da0:	bf 93       	push	r27
    1da2:	ef 93       	push	r30
    1da4:	ff 93       	push	r31
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <__vector_18+0x2a>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	80 ec       	ldi	r24, 0xC0	; 192
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	fc 01       	movw	r30, r24
    1db6:	80 81       	ld	r24, Z
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	84 70       	andi	r24, 0x04	; 4
    1dbe:	99 27       	eor	r25, r25
    1dc0:	21 e0       	ldi	r18, 0x01	; 1
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <__vector_18+0x46>
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	22 23       	and	r18, r18
    1dca:	59 f0       	breq	.+22     	; 0x1de2 <__vector_18+0x60>
    1dcc:	86 ec       	ldi	r24, 0xC6	; 198
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	80 81       	ld	r24, Z
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	6b e8       	ldi	r22, 0x8B	; 139
    1dd8:	75 e0       	ldi	r23, 0x05	; 5
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_Z10store_charhP11ring_buffer>
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <__vector_18+0x6a>
    1de2:	86 ec       	ldi	r24, 0xC6	; 198
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	fc 01       	movw	r30, r24
    1de8:	80 81       	ld	r24, Z
    1dea:	8a 83       	std	Y+2, r24	; 0x02
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	ff 91       	pop	r31
    1df6:	ef 91       	pop	r30
    1df8:	bf 91       	pop	r27
    1dfa:	af 91       	pop	r26
    1dfc:	9f 91       	pop	r25
    1dfe:	8f 91       	pop	r24
    1e00:	7f 91       	pop	r23
    1e02:	6f 91       	pop	r22
    1e04:	5f 91       	pop	r21
    1e06:	4f 91       	pop	r20
    1e08:	3f 91       	pop	r19
    1e0a:	2f 91       	pop	r18
    1e0c:	0f 90       	pop	r0
    1e0e:	00 92 5f 00 	sts	0x005F, r0
    1e12:	0f 90       	pop	r0
    1e14:	1f 90       	pop	r1
    1e16:	18 95       	reti

00001e18 <_Z14serialEventRunv>:
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	83 e1       	ldi	r24, 0x13	; 19
    1e22:	96 e0       	ldi	r25, 0x06	; 6
    1e24:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN14HardwareSerial9availableEv>
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <_Z14serialEventRunv+0x18>
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	22 23       	and	r18, r18
    1e32:	11 f0       	breq	.+4      	; 0x1e38 <_Z14serialEventRunv+0x20>
    1e34:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_Z11serialEventv>
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <__vector_19>:
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	00 90 5f 00 	lds	r0, 0x005F
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	2f 93       	push	r18
    1e4c:	3f 93       	push	r19
    1e4e:	4f 93       	push	r20
    1e50:	8f 93       	push	r24
    1e52:	9f 93       	push	r25
    1e54:	ef 93       	push	r30
    1e56:	ff 93       	push	r31
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	1f 92       	push	r1
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	20 91 0f 06 	lds	r18, 0x060F
    1e66:	30 91 10 06 	lds	r19, 0x0610
    1e6a:	80 91 11 06 	lds	r24, 0x0611
    1e6e:	90 91 12 06 	lds	r25, 0x0612
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	28 17       	cp	r18, r24
    1e76:	39 07       	cpc	r19, r25
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <__vector_19+0x3e>
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	44 23       	and	r20, r20
    1e7e:	51 f0       	breq	.+20     	; 0x1e94 <__vector_19+0x56>
    1e80:	81 ec       	ldi	r24, 0xC1	; 193
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	21 ec       	ldi	r18, 0xC1	; 193
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	f9 01       	movw	r30, r18
    1e8a:	20 81       	ld	r18, Z
    1e8c:	2f 7d       	andi	r18, 0xDF	; 223
    1e8e:	fc 01       	movw	r30, r24
    1e90:	20 83       	st	Z, r18
    1e92:	19 c0       	rjmp	.+50     	; 0x1ec6 <__vector_19+0x88>
    1e94:	80 91 11 06 	lds	r24, 0x0611
    1e98:	90 91 12 06 	lds	r25, 0x0612
    1e9c:	81 53       	subi	r24, 0x31	; 49
    1e9e:	9a 4f       	sbci	r25, 0xFA	; 250
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	80 81       	ld	r24, Z
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	80 91 11 06 	lds	r24, 0x0611
    1eaa:	90 91 12 06 	lds	r25, 0x0612
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	8f 73       	andi	r24, 0x3F	; 63
    1eb2:	99 27       	eor	r25, r25
    1eb4:	90 93 12 06 	sts	0x0612, r25
    1eb8:	80 93 11 06 	sts	0x0611, r24
    1ebc:	86 ec       	ldi	r24, 0xC6	; 198
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	29 81       	ldd	r18, Y+1	; 0x01
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	20 83       	st	Z, r18
    1ec6:	0f 90       	pop	r0
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	ff 91       	pop	r31
    1ece:	ef 91       	pop	r30
    1ed0:	9f 91       	pop	r25
    1ed2:	8f 91       	pop	r24
    1ed4:	4f 91       	pop	r20
    1ed6:	3f 91       	pop	r19
    1ed8:	2f 91       	pop	r18
    1eda:	0f 90       	pop	r0
    1edc:	00 92 5f 00 	sts	0x005F, r0
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    1ee6:	8f 92       	push	r8
    1ee8:	9f 92       	push	r9
    1eea:	af 92       	push	r10
    1eec:	bf 92       	push	r11
    1eee:	cf 92       	push	r12
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	62 97       	sbiw	r28, 0x12	; 18
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	7c 83       	std	Y+4, r23	; 0x04
    1f14:	6b 83       	std	Y+3, r22	; 0x03
    1f16:	5e 83       	std	Y+6, r21	; 0x06
    1f18:	4d 83       	std	Y+5, r20	; 0x05
    1f1a:	38 87       	std	Y+8, r19	; 0x08
    1f1c:	2f 83       	std	Y+7, r18	; 0x07
    1f1e:	1a 87       	std	Y+10, r17	; 0x0a
    1f20:	09 87       	std	Y+9, r16	; 0x09
    1f22:	fc 86       	std	Y+12, r15	; 0x0c
    1f24:	eb 86       	std	Y+11, r14	; 0x0b
    1f26:	de 86       	std	Y+14, r13	; 0x0e
    1f28:	cd 86       	std	Y+13, r12	; 0x0d
    1f2a:	b8 8a       	std	Y+16, r11	; 0x10
    1f2c:	af 86       	std	Y+15, r10	; 0x0f
    1f2e:	9a 8a       	std	Y+18, r9	; 0x12
    1f30:	89 8a       	std	Y+17, r8	; 0x11
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <_ZN6StreamC1Ev>
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	2f e7       	ldi	r18, 0x7F	; 127
    1f40:	34 e0       	ldi	r19, 0x04	; 4
    1f42:	fc 01       	movw	r30, r24
    1f44:	31 83       	std	Z+1, r19	; 0x01
    1f46:	20 83       	st	Z, r18
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f50:	fc 01       	movw	r30, r24
    1f52:	35 87       	std	Z+13, r19	; 0x0d
    1f54:	24 87       	std	Z+12, r18	; 0x0c
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f5e:	fc 01       	movw	r30, r24
    1f60:	37 87       	std	Z+15, r19	; 0x0f
    1f62:	26 87       	std	Z+14, r18	; 0x0e
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	2f 81       	ldd	r18, Y+7	; 0x07
    1f6a:	38 85       	ldd	r19, Y+8	; 0x08
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	31 8b       	std	Z+17, r19	; 0x11
    1f70:	20 8b       	std	Z+16, r18	; 0x10
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	29 85       	ldd	r18, Y+9	; 0x09
    1f78:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	33 8b       	std	Z+19, r19	; 0x13
    1f7e:	22 8b       	std	Z+18, r18	; 0x12
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f86:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f88:	fc 01       	movw	r30, r24
    1f8a:	35 8b       	std	Z+21, r19	; 0x15
    1f8c:	24 8b       	std	Z+20, r18	; 0x14
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f94:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f96:	fc 01       	movw	r30, r24
    1f98:	37 8b       	std	Z+23, r19	; 0x17
    1f9a:	26 8b       	std	Z+22, r18	; 0x16
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	2f 85       	ldd	r18, Y+15	; 0x0f
    1fa2:	38 89       	ldd	r19, Y+16	; 0x10
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	31 8f       	std	Z+25, r19	; 0x19
    1fa8:	20 8f       	std	Z+24, r18	; 0x18
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	29 89       	ldd	r18, Y+17	; 0x11
    1fb0:	3a 89       	ldd	r19, Y+18	; 0x12
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	33 8f       	std	Z+27, r19	; 0x1b
    1fb6:	22 8f       	std	Z+26, r18	; 0x1a
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	29 a1       	ldd	r18, Y+33	; 0x21
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	24 8f       	std	Z+28, r18	; 0x1c
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	2a a1       	ldd	r18, Y+34	; 0x22
    1fc8:	fc 01       	movw	r30, r24
    1fca:	25 8f       	std	Z+29, r18	; 0x1d
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	2b a1       	ldd	r18, Y+35	; 0x23
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	26 8f       	std	Z+30, r18	; 0x1e
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	2c a1       	ldd	r18, Y+36	; 0x24
    1fdc:	fc 01       	movw	r30, r24
    1fde:	27 8f       	std	Z+31, r18	; 0x1f
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	2d a1       	ldd	r18, Y+37	; 0x25
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	20 a3       	std	Z+32, r18	; 0x20
    1fea:	62 96       	adiw	r28, 0x12	; 18
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	ff 90       	pop	r15
    2000:	ef 90       	pop	r14
    2002:	df 90       	pop	r13
    2004:	cf 90       	pop	r12
    2006:	bf 90       	pop	r11
    2008:	af 90       	pop	r10
    200a:	9f 90       	pop	r9
    200c:	8f 90       	pop	r8
    200e:	08 95       	ret

00002010 <_ZN14HardwareSerial5beginEm>:
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	61 97       	sbiw	r28, 0x11	; 17
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	9d 83       	std	Y+5, r25	; 0x05
    2026:	8c 83       	std	Y+4, r24	; 0x04
    2028:	4e 83       	std	Y+6, r20	; 0x06
    202a:	5f 83       	std	Y+7, r21	; 0x07
    202c:	68 87       	std	Y+8, r22	; 0x08
    202e:	79 87       	std	Y+9, r23	; 0x09
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	8b 83       	std	Y+3, r24	; 0x03
    2034:	8e 81       	ldd	r24, Y+6	; 0x06
    2036:	9f 81       	ldd	r25, Y+7	; 0x07
    2038:	a8 85       	ldd	r26, Y+8	; 0x08
    203a:	b9 85       	ldd	r27, Y+9	; 0x09
    203c:	81 15       	cp	r24, r1
    203e:	21 ee       	ldi	r18, 0xE1	; 225
    2040:	92 07       	cpc	r25, r18
    2042:	a1 05       	cpc	r26, r1
    2044:	b1 05       	cpc	r27, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <_ZN14HardwareSerial5beginEm+0x3a>
    2048:	1b 82       	std	Y+3, r1	; 0x03
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	88 23       	and	r24, r24
    204e:	61 f1       	breq	.+88     	; 0x20a8 <_ZN14HardwareSerial5beginEm+0x98>
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	9d 81       	ldd	r25, Y+5	; 0x05
    2054:	fc 01       	movw	r30, r24
    2056:	84 89       	ldd	r24, Z+20	; 0x14
    2058:	95 89       	ldd	r25, Z+21	; 0x15
    205a:	2c 81       	ldd	r18, Y+4	; 0x04
    205c:	3d 81       	ldd	r19, Y+5	; 0x05
    205e:	f9 01       	movw	r30, r18
    2060:	20 a1       	ldd	r18, Z+32	; 0x20
    2062:	42 2f       	mov	r20, r18
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	21 e0       	ldi	r18, 0x01	; 1
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <_ZN14HardwareSerial5beginEm+0x60>
    206c:	22 0f       	add	r18, r18
    206e:	33 1f       	adc	r19, r19
    2070:	4a 95       	dec	r20
    2072:	e2 f7       	brpl	.-8      	; 0x206c <_ZN14HardwareSerial5beginEm+0x5c>
    2074:	fc 01       	movw	r30, r24
    2076:	20 83       	st	Z, r18
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	99 e0       	ldi	r25, 0x09	; 9
    207c:	ad e3       	ldi	r26, 0x3D	; 61
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	2e 81       	ldd	r18, Y+6	; 0x06
    2082:	3f 81       	ldd	r19, Y+7	; 0x07
    2084:	48 85       	ldd	r20, Y+8	; 0x08
    2086:	59 85       	ldd	r21, Y+9	; 0x09
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 6d 18 	call	0x30da	; 0x30da <__udivmodsi4>
    2090:	da 01       	movw	r26, r20
    2092:	c9 01       	movw	r24, r18
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	a1 09       	sbc	r26, r1
    2098:	b1 09       	sbc	r27, r1
    209a:	b6 95       	lsr	r27
    209c:	a7 95       	ror	r26
    209e:	97 95       	ror	r25
    20a0:	87 95       	ror	r24
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	1e c0       	rjmp	.+60     	; 0x20e4 <_ZN14HardwareSerial5beginEm+0xd4>
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	fc 01       	movw	r30, r24
    20ae:	84 89       	ldd	r24, Z+20	; 0x14
    20b0:	95 89       	ldd	r25, Z+21	; 0x15
    20b2:	fc 01       	movw	r30, r24
    20b4:	10 82       	st	Z, r1
    20b6:	80 e8       	ldi	r24, 0x80	; 128
    20b8:	94 e8       	ldi	r25, 0x84	; 132
    20ba:	ae e1       	ldi	r26, 0x1E	; 30
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	2e 81       	ldd	r18, Y+6	; 0x06
    20c0:	3f 81       	ldd	r19, Y+7	; 0x07
    20c2:	48 85       	ldd	r20, Y+8	; 0x08
    20c4:	59 85       	ldd	r21, Y+9	; 0x09
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 6d 18 	call	0x30da	; 0x30da <__udivmodsi4>
    20ce:	da 01       	movw	r26, r20
    20d0:	c9 01       	movw	r24, r18
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	a1 09       	sbc	r26, r1
    20d6:	b1 09       	sbc	r27, r1
    20d8:	b6 95       	lsr	r27
    20da:	a7 95       	ror	r26
    20dc:	97 95       	ror	r25
    20de:	87 95       	ror	r24
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	81 15       	cp	r24, r1
    20ea:	f0 e1       	ldi	r31, 0x10	; 16
    20ec:	9f 07       	cpc	r25, r31
    20ee:	28 f0       	brcs	.+10     	; 0x20fa <_ZN14HardwareSerial5beginEm+0xea>
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	88 23       	and	r24, r24
    20f4:	11 f0       	breq	.+4      	; 0x20fa <_ZN14HardwareSerial5beginEm+0xea>
    20f6:	1b 82       	std	Y+3, r1	; 0x03
    20f8:	a8 cf       	rjmp	.-176    	; 0x204a <_ZN14HardwareSerial5beginEm+0x3a>
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	9d 81       	ldd	r25, Y+5	; 0x05
    20fe:	fc 01       	movw	r30, r24
    2100:	80 89       	ldd	r24, Z+16	; 0x10
    2102:	91 89       	ldd	r25, Z+17	; 0x11
    2104:	29 81       	ldd	r18, Y+1	; 0x01
    2106:	3a 81       	ldd	r19, Y+2	; 0x02
    2108:	23 2f       	mov	r18, r19
    210a:	33 27       	eor	r19, r19
    210c:	fc 01       	movw	r30, r24
    210e:	20 83       	st	Z, r18
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	fc 01       	movw	r30, r24
    2116:	82 89       	ldd	r24, Z+18	; 0x12
    2118:	93 89       	ldd	r25, Z+19	; 0x13
    211a:	29 81       	ldd	r18, Y+1	; 0x01
    211c:	fc 01       	movw	r30, r24
    211e:	20 83       	st	Z, r18
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	fc 01       	movw	r30, r24
    2126:	11 a2       	std	Z+33, r1	; 0x21
    2128:	8c 81       	ldd	r24, Y+4	; 0x04
    212a:	9d 81       	ldd	r25, Y+5	; 0x05
    212c:	fc 01       	movw	r30, r24
    212e:	86 89       	ldd	r24, Z+22	; 0x16
    2130:	97 89       	ldd	r25, Z+23	; 0x17
    2132:	2c 81       	ldd	r18, Y+4	; 0x04
    2134:	3d 81       	ldd	r19, Y+5	; 0x05
    2136:	f9 01       	movw	r30, r18
    2138:	26 89       	ldd	r18, Z+22	; 0x16
    213a:	37 89       	ldd	r19, Z+23	; 0x17
    213c:	f9 01       	movw	r30, r18
    213e:	20 81       	ld	r18, Z
    2140:	62 2f       	mov	r22, r18
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	f9 01       	movw	r30, r18
    2148:	24 8d       	ldd	r18, Z+28	; 0x1c
    214a:	42 2f       	mov	r20, r18
    214c:	50 e0       	ldi	r21, 0x00	; 0
    214e:	21 e0       	ldi	r18, 0x01	; 1
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <_ZN14HardwareSerial5beginEm+0x148>
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	4a 95       	dec	r20
    215a:	e2 f7       	brpl	.-8      	; 0x2154 <_ZN14HardwareSerial5beginEm+0x144>
    215c:	26 2b       	or	r18, r22
    215e:	fc 01       	movw	r30, r24
    2160:	20 83       	st	Z, r18
    2162:	8c 81       	ldd	r24, Y+4	; 0x04
    2164:	9d 81       	ldd	r25, Y+5	; 0x05
    2166:	fc 01       	movw	r30, r24
    2168:	86 89       	ldd	r24, Z+22	; 0x16
    216a:	97 89       	ldd	r25, Z+23	; 0x17
    216c:	2c 81       	ldd	r18, Y+4	; 0x04
    216e:	3d 81       	ldd	r19, Y+5	; 0x05
    2170:	f9 01       	movw	r30, r18
    2172:	26 89       	ldd	r18, Z+22	; 0x16
    2174:	37 89       	ldd	r19, Z+23	; 0x17
    2176:	f9 01       	movw	r30, r18
    2178:	20 81       	ld	r18, Z
    217a:	62 2f       	mov	r22, r18
    217c:	2c 81       	ldd	r18, Y+4	; 0x04
    217e:	3d 81       	ldd	r19, Y+5	; 0x05
    2180:	f9 01       	movw	r30, r18
    2182:	25 8d       	ldd	r18, Z+29	; 0x1d
    2184:	42 2f       	mov	r20, r18
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	21 e0       	ldi	r18, 0x01	; 1
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <_ZN14HardwareSerial5beginEm+0x182>
    218e:	22 0f       	add	r18, r18
    2190:	33 1f       	adc	r19, r19
    2192:	4a 95       	dec	r20
    2194:	e2 f7       	brpl	.-8      	; 0x218e <_ZN14HardwareSerial5beginEm+0x17e>
    2196:	26 2b       	or	r18, r22
    2198:	fc 01       	movw	r30, r24
    219a:	20 83       	st	Z, r18
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	9d 81       	ldd	r25, Y+5	; 0x05
    21a0:	fc 01       	movw	r30, r24
    21a2:	86 89       	ldd	r24, Z+22	; 0x16
    21a4:	97 89       	ldd	r25, Z+23	; 0x17
    21a6:	2c 81       	ldd	r18, Y+4	; 0x04
    21a8:	3d 81       	ldd	r19, Y+5	; 0x05
    21aa:	f9 01       	movw	r30, r18
    21ac:	26 89       	ldd	r18, Z+22	; 0x16
    21ae:	37 89       	ldd	r19, Z+23	; 0x17
    21b0:	f9 01       	movw	r30, r18
    21b2:	20 81       	ld	r18, Z
    21b4:	62 2f       	mov	r22, r18
    21b6:	2c 81       	ldd	r18, Y+4	; 0x04
    21b8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ba:	f9 01       	movw	r30, r18
    21bc:	26 8d       	ldd	r18, Z+30	; 0x1e
    21be:	42 2f       	mov	r20, r18
    21c0:	50 e0       	ldi	r21, 0x00	; 0
    21c2:	21 e0       	ldi	r18, 0x01	; 1
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <_ZN14HardwareSerial5beginEm+0x1bc>
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	4a 95       	dec	r20
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <_ZN14HardwareSerial5beginEm+0x1b8>
    21d0:	26 2b       	or	r18, r22
    21d2:	fc 01       	movw	r30, r24
    21d4:	20 83       	st	Z, r18
    21d6:	8c 81       	ldd	r24, Y+4	; 0x04
    21d8:	9d 81       	ldd	r25, Y+5	; 0x05
    21da:	fc 01       	movw	r30, r24
    21dc:	86 89       	ldd	r24, Z+22	; 0x16
    21de:	97 89       	ldd	r25, Z+23	; 0x17
    21e0:	2c 81       	ldd	r18, Y+4	; 0x04
    21e2:	3d 81       	ldd	r19, Y+5	; 0x05
    21e4:	f9 01       	movw	r30, r18
    21e6:	26 89       	ldd	r18, Z+22	; 0x16
    21e8:	37 89       	ldd	r19, Z+23	; 0x17
    21ea:	f9 01       	movw	r30, r18
    21ec:	20 81       	ld	r18, Z
    21ee:	62 2f       	mov	r22, r18
    21f0:	2c 81       	ldd	r18, Y+4	; 0x04
    21f2:	3d 81       	ldd	r19, Y+5	; 0x05
    21f4:	f9 01       	movw	r30, r18
    21f6:	27 8d       	ldd	r18, Z+31	; 0x1f
    21f8:	42 2f       	mov	r20, r18
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	21 e0       	ldi	r18, 0x01	; 1
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	04 2e       	mov	r0, r20
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <_ZN14HardwareSerial5beginEm+0x1f8>
    2204:	22 0f       	add	r18, r18
    2206:	33 1f       	adc	r19, r19
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <_ZN14HardwareSerial5beginEm+0x1f4>
    220c:	20 95       	com	r18
    220e:	26 23       	and	r18, r22
    2210:	fc 01       	movw	r30, r24
    2212:	20 83       	st	Z, r18
    2214:	61 96       	adiw	r28, 0x11	; 17
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <_ZN14HardwareSerial9availableEv>:
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	00 d0       	rcall	.+0      	; 0x222c <_ZN14HardwareSerial9availableEv+0x6>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	fc 01       	movw	r30, r24
    223a:	84 85       	ldd	r24, Z+12	; 0x0c
    223c:	95 85       	ldd	r25, Z+13	; 0x0d
    223e:	80 5c       	subi	r24, 0xC0	; 192
    2240:	9f 4f       	sbci	r25, 0xFF	; 255
    2242:	fc 01       	movw	r30, r24
    2244:	20 81       	ld	r18, Z
    2246:	31 81       	ldd	r19, Z+1	; 0x01
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	fc 01       	movw	r30, r24
    224e:	84 85       	ldd	r24, Z+12	; 0x0c
    2250:	95 85       	ldd	r25, Z+13	; 0x0d
    2252:	8e 5b       	subi	r24, 0xBE	; 190
    2254:	9f 4f       	sbci	r25, 0xFF	; 255
    2256:	fc 01       	movw	r30, r24
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	a9 01       	movw	r20, r18
    225e:	48 1b       	sub	r20, r24
    2260:	59 0b       	sbc	r21, r25
    2262:	ca 01       	movw	r24, r20
    2264:	8f 73       	andi	r24, 0x3F	; 63
    2266:	99 27       	eor	r25, r25
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	08 95       	ret

00002272 <_ZN14HardwareSerial4peekEv>:
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	00 d0       	rcall	.+0      	; 0x2278 <_ZN14HardwareSerial4peekEv+0x6>
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	fc 01       	movw	r30, r24
    2286:	84 85       	ldd	r24, Z+12	; 0x0c
    2288:	95 85       	ldd	r25, Z+13	; 0x0d
    228a:	80 5c       	subi	r24, 0xC0	; 192
    228c:	9f 4f       	sbci	r25, 0xFF	; 255
    228e:	fc 01       	movw	r30, r24
    2290:	20 81       	ld	r18, Z
    2292:	31 81       	ldd	r19, Z+1	; 0x01
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	fc 01       	movw	r30, r24
    229a:	84 85       	ldd	r24, Z+12	; 0x0c
    229c:	95 85       	ldd	r25, Z+13	; 0x0d
    229e:	8e 5b       	subi	r24, 0xBE	; 190
    22a0:	9f 4f       	sbci	r25, 0xFF	; 255
    22a2:	fc 01       	movw	r30, r24
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	28 17       	cp	r18, r24
    22ac:	39 07       	cpc	r19, r25
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <_ZN14HardwareSerial4peekEv+0x40>
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	44 23       	and	r20, r20
    22b4:	19 f0       	breq	.+6      	; 0x22bc <_ZN14HardwareSerial4peekEv+0x4a>
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	15 c0       	rjmp	.+42     	; 0x22e6 <_ZN14HardwareSerial4peekEv+0x74>
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	fc 01       	movw	r30, r24
    22c2:	24 85       	ldd	r18, Z+12	; 0x0c
    22c4:	35 85       	ldd	r19, Z+13	; 0x0d
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	fc 01       	movw	r30, r24
    22cc:	84 85       	ldd	r24, Z+12	; 0x0c
    22ce:	95 85       	ldd	r25, Z+13	; 0x0d
    22d0:	8e 5b       	subi	r24, 0xBE	; 190
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	fc 01       	movw	r30, r24
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	82 0f       	add	r24, r18
    22dc:	93 1f       	adc	r25, r19
    22de:	fc 01       	movw	r30, r24
    22e0:	80 81       	ld	r24, Z
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	08 95       	ret

000022f0 <_ZN14HardwareSerial4readEv>:
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <_ZN14HardwareSerial4readEv+0x6>
    22f6:	1f 92       	push	r1
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	9b 83       	std	Y+3, r25	; 0x03
    22fe:	8a 83       	std	Y+2, r24	; 0x02
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	9b 81       	ldd	r25, Y+3	; 0x03
    2304:	fc 01       	movw	r30, r24
    2306:	84 85       	ldd	r24, Z+12	; 0x0c
    2308:	95 85       	ldd	r25, Z+13	; 0x0d
    230a:	80 5c       	subi	r24, 0xC0	; 192
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	fc 01       	movw	r30, r24
    2310:	20 81       	ld	r18, Z
    2312:	31 81       	ldd	r19, Z+1	; 0x01
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	9b 81       	ldd	r25, Y+3	; 0x03
    2318:	fc 01       	movw	r30, r24
    231a:	84 85       	ldd	r24, Z+12	; 0x0c
    231c:	95 85       	ldd	r25, Z+13	; 0x0d
    231e:	8e 5b       	subi	r24, 0xBE	; 190
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	fc 01       	movw	r30, r24
    2324:	80 81       	ld	r24, Z
    2326:	91 81       	ldd	r25, Z+1	; 0x01
    2328:	41 e0       	ldi	r20, 0x01	; 1
    232a:	28 17       	cp	r18, r24
    232c:	39 07       	cpc	r19, r25
    232e:	09 f0       	breq	.+2      	; 0x2332 <_ZN14HardwareSerial4readEv+0x42>
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	44 23       	and	r20, r20
    2334:	19 f0       	breq	.+6      	; 0x233c <_ZN14HardwareSerial4readEv+0x4c>
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	9f ef       	ldi	r25, 0xFF	; 255
    233a:	2f c0       	rjmp	.+94     	; 0x239a <_ZN14HardwareSerial4readEv+0xaa>
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	9b 81       	ldd	r25, Y+3	; 0x03
    2340:	fc 01       	movw	r30, r24
    2342:	24 85       	ldd	r18, Z+12	; 0x0c
    2344:	35 85       	ldd	r19, Z+13	; 0x0d
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	9b 81       	ldd	r25, Y+3	; 0x03
    234a:	fc 01       	movw	r30, r24
    234c:	84 85       	ldd	r24, Z+12	; 0x0c
    234e:	95 85       	ldd	r25, Z+13	; 0x0d
    2350:	8e 5b       	subi	r24, 0xBE	; 190
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	fc 01       	movw	r30, r24
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	82 0f       	add	r24, r18
    235c:	93 1f       	adc	r25, r19
    235e:	fc 01       	movw	r30, r24
    2360:	80 81       	ld	r24, Z
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	9b 81       	ldd	r25, Y+3	; 0x03
    2368:	fc 01       	movw	r30, r24
    236a:	84 85       	ldd	r24, Z+12	; 0x0c
    236c:	95 85       	ldd	r25, Z+13	; 0x0d
    236e:	2a 81       	ldd	r18, Y+2	; 0x02
    2370:	3b 81       	ldd	r19, Y+3	; 0x03
    2372:	f9 01       	movw	r30, r18
    2374:	24 85       	ldd	r18, Z+12	; 0x0c
    2376:	35 85       	ldd	r19, Z+13	; 0x0d
    2378:	2e 5b       	subi	r18, 0xBE	; 190
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	f9 01       	movw	r30, r18
    237e:	20 81       	ld	r18, Z
    2380:	31 81       	ldd	r19, Z+1	; 0x01
    2382:	2f 5f       	subi	r18, 0xFF	; 255
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	2f 73       	andi	r18, 0x3F	; 63
    2388:	33 27       	eor	r19, r19
    238a:	8e 5b       	subi	r24, 0xBE	; 190
    238c:	9f 4f       	sbci	r25, 0xFF	; 255
    238e:	fc 01       	movw	r30, r24
    2390:	31 83       	std	Z+1, r19	; 0x01
    2392:	20 83       	st	Z, r18
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	88 2f       	mov	r24, r24
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <_ZN14HardwareSerial5flushEv>:
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <_ZN14HardwareSerial5flushEv+0x6>
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	00 00       	nop
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	fc 01       	movw	r30, r24
    23bc:	81 a1       	ldd	r24, Z+33	; 0x21
    23be:	88 23       	and	r24, r24
    23c0:	79 f0       	breq	.+30     	; 0x23e0 <_ZN14HardwareSerial5flushEv+0x3a>
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	fc 01       	movw	r30, r24
    23c8:	84 89       	ldd	r24, Z+20	; 0x14
    23ca:	95 89       	ldd	r25, Z+21	; 0x15
    23cc:	fc 01       	movw	r30, r24
    23ce:	80 81       	ld	r24, Z
    23d0:	88 2f       	mov	r24, r24
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	80 74       	andi	r24, 0x40	; 64
    23d6:	99 27       	eor	r25, r25
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	11 f4       	brne	.+4      	; 0x23e0 <_ZN14HardwareSerial5flushEv+0x3a>
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <_ZN14HardwareSerial5flushEv+0x3c>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	88 23       	and	r24, r24
    23e4:	41 f7       	brne	.-48     	; 0x23b6 <_ZN14HardwareSerial5flushEv+0x10>
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	fc 01       	movw	r30, r24
    23ec:	11 a2       	std	Z+33, r1	; 0x21
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	08 95       	ret

000023f8 <_ZN14HardwareSerial5writeEh>:
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <_ZN14HardwareSerial5writeEh+0x6>
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <_ZN14HardwareSerial5writeEh+0x8>
    2400:	1f 92       	push	r1
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
    240a:	6d 83       	std	Y+5, r22	; 0x05
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	fc 01       	movw	r30, r24
    2412:	86 85       	ldd	r24, Z+14	; 0x0e
    2414:	97 85       	ldd	r25, Z+15	; 0x0f
    2416:	80 5c       	subi	r24, 0xC0	; 192
    2418:	9f 4f       	sbci	r25, 0xFF	; 255
    241a:	fc 01       	movw	r30, r24
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	8f 73       	andi	r24, 0x3F	; 63
    2424:	99 27       	eor	r25, r25
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	00 00       	nop
    242c:	29 81       	ldd	r18, Y+1	; 0x01
    242e:	3a 81       	ldd	r19, Y+2	; 0x02
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	fc 01       	movw	r30, r24
    2436:	86 85       	ldd	r24, Z+14	; 0x0e
    2438:	97 85       	ldd	r25, Z+15	; 0x0f
    243a:	8e 5b       	subi	r24, 0xBE	; 190
    243c:	9f 4f       	sbci	r25, 0xFF	; 255
    243e:	fc 01       	movw	r30, r24
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	41 e0       	ldi	r20, 0x01	; 1
    2446:	28 17       	cp	r18, r24
    2448:	39 07       	cpc	r19, r25
    244a:	09 f0       	breq	.+2      	; 0x244e <_ZN14HardwareSerial5writeEh+0x56>
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	44 23       	and	r20, r20
    2450:	69 f7       	brne	.-38     	; 0x242c <_ZN14HardwareSerial5writeEh+0x34>
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	9c 81       	ldd	r25, Y+4	; 0x04
    2456:	fc 01       	movw	r30, r24
    2458:	26 85       	ldd	r18, Z+14	; 0x0e
    245a:	37 85       	ldd	r19, Z+15	; 0x0f
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	fc 01       	movw	r30, r24
    2462:	86 85       	ldd	r24, Z+14	; 0x0e
    2464:	97 85       	ldd	r25, Z+15	; 0x0f
    2466:	80 5c       	subi	r24, 0xC0	; 192
    2468:	9f 4f       	sbci	r25, 0xFF	; 255
    246a:	fc 01       	movw	r30, r24
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	82 0f       	add	r24, r18
    2472:	93 1f       	adc	r25, r19
    2474:	2d 81       	ldd	r18, Y+5	; 0x05
    2476:	fc 01       	movw	r30, r24
    2478:	20 83       	st	Z, r18
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	fc 01       	movw	r30, r24
    2480:	86 85       	ldd	r24, Z+14	; 0x0e
    2482:	97 85       	ldd	r25, Z+15	; 0x0f
    2484:	29 81       	ldd	r18, Y+1	; 0x01
    2486:	3a 81       	ldd	r19, Y+2	; 0x02
    2488:	80 5c       	subi	r24, 0xC0	; 192
    248a:	9f 4f       	sbci	r25, 0xFF	; 255
    248c:	fc 01       	movw	r30, r24
    248e:	31 83       	std	Z+1, r19	; 0x01
    2490:	20 83       	st	Z, r18
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	fc 01       	movw	r30, r24
    2498:	86 89       	ldd	r24, Z+22	; 0x16
    249a:	97 89       	ldd	r25, Z+23	; 0x17
    249c:	2b 81       	ldd	r18, Y+3	; 0x03
    249e:	3c 81       	ldd	r19, Y+4	; 0x04
    24a0:	f9 01       	movw	r30, r18
    24a2:	26 89       	ldd	r18, Z+22	; 0x16
    24a4:	37 89       	ldd	r19, Z+23	; 0x17
    24a6:	f9 01       	movw	r30, r18
    24a8:	20 81       	ld	r18, Z
    24aa:	62 2f       	mov	r22, r18
    24ac:	2b 81       	ldd	r18, Y+3	; 0x03
    24ae:	3c 81       	ldd	r19, Y+4	; 0x04
    24b0:	f9 01       	movw	r30, r18
    24b2:	27 8d       	ldd	r18, Z+31	; 0x1f
    24b4:	42 2f       	mov	r20, r18
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	21 e0       	ldi	r18, 0x01	; 1
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	04 2e       	mov	r0, r20
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <_ZN14HardwareSerial5writeEh+0xcc>
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	0a 94       	dec	r0
    24c6:	e2 f7       	brpl	.-8      	; 0x24c0 <_ZN14HardwareSerial5writeEh+0xc8>
    24c8:	26 2b       	or	r18, r22
    24ca:	fc 01       	movw	r30, r24
    24cc:	20 83       	st	Z, r18
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	21 e0       	ldi	r18, 0x01	; 1
    24d4:	fc 01       	movw	r30, r24
    24d6:	21 a3       	std	Z+33, r18	; 0x21
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	9c 81       	ldd	r25, Y+4	; 0x04
    24dc:	fc 01       	movw	r30, r24
    24de:	84 89       	ldd	r24, Z+20	; 0x14
    24e0:	95 89       	ldd	r25, Z+21	; 0x15
    24e2:	2b 81       	ldd	r18, Y+3	; 0x03
    24e4:	3c 81       	ldd	r19, Y+4	; 0x04
    24e6:	f9 01       	movw	r30, r18
    24e8:	24 89       	ldd	r18, Z+20	; 0x14
    24ea:	35 89       	ldd	r19, Z+21	; 0x15
    24ec:	f9 01       	movw	r30, r18
    24ee:	20 81       	ld	r18, Z
    24f0:	20 64       	ori	r18, 0x40	; 64
    24f2:	fc 01       	movw	r30, r24
    24f4:	20 83       	st	Z, r18
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	08 95       	ret

0000250a <_Z41__static_initialization_and_destruction_0ii>:
    250a:	8f 92       	push	r8
    250c:	9f 92       	push	r9
    250e:	af 92       	push	r10
    2510:	bf 92       	push	r11
    2512:	cf 92       	push	r12
    2514:	df 92       	push	r13
    2516:	ef 92       	push	r14
    2518:	ff 92       	push	r15
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	00 d0       	rcall	.+0      	; 0x2524 <_Z41__static_initialization_and_destruction_0ii+0x1a>
    2524:	00 d0       	rcall	.+0      	; 0x2526 <_Z41__static_initialization_and_destruction_0ii+0x1c>
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	89 83       	std	Y+1, r24	; 0x01
    252e:	7c 83       	std	Y+4, r23	; 0x04
    2530:	6b 83       	std	Y+3, r22	; 0x03
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	81 30       	cpi	r24, 0x01	; 1
    2538:	91 05       	cpc	r25, r1
    253a:	a9 f5       	brne	.+106    	; 0x25a6 <_Z41__static_initialization_and_destruction_0ii+0x9c>
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	9c 81       	ldd	r25, Y+4	; 0x04
    2540:	8f 3f       	cpi	r24, 0xFF	; 255
    2542:	2f ef       	ldi	r18, 0xFF	; 255
    2544:	92 07       	cpc	r25, r18
    2546:	79 f5       	brne	.+94     	; 0x25a6 <_Z41__static_initialization_and_destruction_0ii+0x9c>
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	8f 93       	push	r24
    254c:	85 e0       	ldi	r24, 0x05	; 5
    254e:	8f 93       	push	r24
    2550:	87 e0       	ldi	r24, 0x07	; 7
    2552:	8f 93       	push	r24
    2554:	83 e0       	ldi	r24, 0x03	; 3
    2556:	8f 93       	push	r24
    2558:	84 e0       	ldi	r24, 0x04	; 4
    255a:	8f 93       	push	r24
    255c:	0f 2e       	mov	r0, r31
    255e:	f6 ec       	ldi	r31, 0xC6	; 198
    2560:	8f 2e       	mov	r8, r31
    2562:	91 2c       	mov	r9, r1
    2564:	f0 2d       	mov	r31, r0
    2566:	0f 2e       	mov	r0, r31
    2568:	f2 ec       	ldi	r31, 0xC2	; 194
    256a:	af 2e       	mov	r10, r31
    256c:	b1 2c       	mov	r11, r1
    256e:	f0 2d       	mov	r31, r0
    2570:	0f 2e       	mov	r0, r31
    2572:	f1 ec       	ldi	r31, 0xC1	; 193
    2574:	cf 2e       	mov	r12, r31
    2576:	d1 2c       	mov	r13, r1
    2578:	f0 2d       	mov	r31, r0
    257a:	0f 2e       	mov	r0, r31
    257c:	f0 ec       	ldi	r31, 0xC0	; 192
    257e:	ef 2e       	mov	r14, r31
    2580:	f1 2c       	mov	r15, r1
    2582:	f0 2d       	mov	r31, r0
    2584:	04 ec       	ldi	r16, 0xC4	; 196
    2586:	10 e0       	ldi	r17, 0x00	; 0
    2588:	25 ec       	ldi	r18, 0xC5	; 197
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	4f ec       	ldi	r20, 0xCF	; 207
    258e:	55 e0       	ldi	r21, 0x05	; 5
    2590:	6b e8       	ldi	r22, 0x8B	; 139
    2592:	75 e0       	ldi	r23, 0x05	; 5
    2594:	83 e1       	ldi	r24, 0x13	; 19
    2596:	96 e0       	ldi	r25, 0x06	; 6
    2598:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	1f 91       	pop	r17
    25b4:	0f 91       	pop	r16
    25b6:	ff 90       	pop	r15
    25b8:	ef 90       	pop	r14
    25ba:	df 90       	pop	r13
    25bc:	cf 90       	pop	r12
    25be:	bf 90       	pop	r11
    25c0:	af 90       	pop	r10
    25c2:	9f 90       	pop	r9
    25c4:	8f 90       	pop	r8
    25c6:	08 95       	ret

000025c8 <_GLOBAL__sub_I_rx_buffer>:
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	6f ef       	ldi	r22, 0xFF	; 255
    25d2:	7f ef       	ldi	r23, 0xFF	; 255
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 85 12 	call	0x250a	; 0x250a <_Z41__static_initialization_and_destruction_0ii>
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	08 95       	ret

000025e2 <__cxa_pure_virtual>:
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	08 95       	ret

000025f0 <_ZN5Print5writeEPKc>:
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <_ZN5Print5writeEPKc+0xa>
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <_ZN5Print5writeEPKc+0xc>
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	7c 83       	std	Y+4, r23	; 0x04
    2606:	6b 83       	std	Y+3, r22	; 0x03
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	19 f4       	brne	.+6      	; 0x2616 <_ZN5Print5writeEPKc+0x26>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	15 c0       	rjmp	.+42     	; 0x2640 <_ZN5Print5writeEPKc+0x50>
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	fc 01       	movw	r30, r24
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	02 96       	adiw	r24, 0x02	; 2
    2622:	fc 01       	movw	r30, r24
    2624:	00 81       	ld	r16, Z
    2626:	11 81       	ldd	r17, Z+1	; 0x01
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	0e 94 c8 18 	call	0x3190	; 0x3190 <strlen>
    2630:	ac 01       	movw	r20, r24
    2632:	2b 81       	ldd	r18, Y+3	; 0x03
    2634:	3c 81       	ldd	r19, Y+4	; 0x04
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	b9 01       	movw	r22, r18
    263c:	f8 01       	movw	r30, r16
    263e:	09 95       	icall
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	08 95       	ret

00002652 <_ZN5Print5writeEPKhj>:
    2652:	cf 93       	push	r28
    2654:	df 93       	push	r29
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	28 97       	sbiw	r28, 0x08	; 8
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	9c 83       	std	Y+4, r25	; 0x04
    2668:	8b 83       	std	Y+3, r24	; 0x03
    266a:	7e 83       	std	Y+6, r23	; 0x06
    266c:	6d 83       	std	Y+5, r22	; 0x05
    266e:	58 87       	std	Y+8, r21	; 0x08
    2670:	4f 83       	std	Y+7, r20	; 0x07
    2672:	1a 82       	std	Y+2, r1	; 0x02
    2674:	19 82       	std	Y+1, r1	; 0x01
    2676:	1c c0       	rjmp	.+56     	; 0x26b0 <_ZN5Print5writeEPKhj+0x5e>
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	fc 01       	movw	r30, r24
    267e:	80 81       	ld	r24, Z
    2680:	91 81       	ldd	r25, Z+1	; 0x01
    2682:	fc 01       	movw	r30, r24
    2684:	20 81       	ld	r18, Z
    2686:	31 81       	ldd	r19, Z+1	; 0x01
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	9e 81       	ldd	r25, Y+6	; 0x06
    268c:	ac 01       	movw	r20, r24
    268e:	4f 5f       	subi	r20, 0xFF	; 255
    2690:	5f 4f       	sbci	r21, 0xFF	; 255
    2692:	5e 83       	std	Y+6, r21	; 0x06
    2694:	4d 83       	std	Y+5, r20	; 0x05
    2696:	fc 01       	movw	r30, r24
    2698:	40 81       	ld	r20, Z
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	64 2f       	mov	r22, r20
    26a0:	f9 01       	movw	r30, r18
    26a2:	09 95       	icall
    26a4:	29 81       	ldd	r18, Y+1	; 0x01
    26a6:	3a 81       	ldd	r19, Y+2	; 0x02
    26a8:	82 0f       	add	r24, r18
    26aa:	93 1f       	adc	r25, r19
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	8f 81       	ldd	r24, Y+7	; 0x07
    26b2:	98 85       	ldd	r25, Y+8	; 0x08
    26b4:	9c 01       	movw	r18, r24
    26b6:	21 50       	subi	r18, 0x01	; 1
    26b8:	31 09       	sbc	r19, r1
    26ba:	38 87       	std	Y+8, r19	; 0x08
    26bc:	2f 83       	std	Y+7, r18	; 0x07
    26be:	21 e0       	ldi	r18, 0x01	; 1
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <_ZN5Print5writeEPKhj+0x74>
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	22 23       	and	r18, r18
    26c8:	b9 f6       	brne	.-82     	; 0x2678 <_ZN5Print5writeEPKhj+0x26>
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	28 96       	adiw	r28, 0x08	; 8
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <_ZN5Print5printEPK19__FlashStringHelper>:
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	2c 97       	sbiw	r28, 0x0c	; 12
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	9a 87       	std	Y+10, r25	; 0x0a
    26f6:	89 87       	std	Y+9, r24	; 0x09
    26f8:	7c 87       	std	Y+12, r23	; 0x0c
    26fa:	6b 87       	std	Y+11, r22	; 0x0b
    26fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    26fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	1c 82       	std	Y+4, r1	; 0x04
    2706:	1b 82       	std	Y+3, r1	; 0x03
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	9c 01       	movw	r18, r24
    270e:	2f 5f       	subi	r18, 0xFF	; 255
    2710:	3f 4f       	sbci	r19, 0xFF	; 255
    2712:	3a 83       	std	Y+2, r19	; 0x02
    2714:	29 83       	std	Y+1, r18	; 0x01
    2716:	9e 83       	std	Y+6, r25	; 0x06
    2718:	8d 83       	std	Y+5, r24	; 0x05
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	9e 81       	ldd	r25, Y+6	; 0x06
    271e:	fc 01       	movw	r30, r24
    2720:	84 91       	lpm	r24, Z
    2722:	8f 83       	std	Y+7, r24	; 0x07
    2724:	8f 81       	ldd	r24, Y+7	; 0x07
    2726:	88 87       	std	Y+8, r24	; 0x08
    2728:	88 85       	ldd	r24, Y+8	; 0x08
    272a:	88 23       	and	r24, r24
    272c:	09 f4       	brne	.+2      	; 0x2730 <_ZN5Print5printEPK19__FlashStringHelper+0x50>
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <_ZN5Print5printEPK19__FlashStringHelper+0x78>
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	fc 01       	movw	r30, r24
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	fc 01       	movw	r30, r24
    273c:	20 81       	ld	r18, Z
    273e:	31 81       	ldd	r19, Z+1	; 0x01
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	68 85       	ldd	r22, Y+8	; 0x08
    2746:	f9 01       	movw	r30, r18
    2748:	09 95       	icall
    274a:	2b 81       	ldd	r18, Y+3	; 0x03
    274c:	3c 81       	ldd	r19, Y+4	; 0x04
    274e:	82 0f       	add	r24, r18
    2750:	93 1f       	adc	r25, r19
    2752:	9c 83       	std	Y+4, r25	; 0x04
    2754:	8b 83       	std	Y+3, r24	; 0x03
    2756:	d8 cf       	rjmp	.-80     	; 0x2708 <_ZN5Print5printEPK19__FlashStringHelper+0x28>
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	2c 96       	adiw	r28, 0x0c	; 12
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	08 95       	ret

0000276e <_ZN5Print5printEPKc>:
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	00 d0       	rcall	.+0      	; 0x2774 <_ZN5Print5printEPKc+0x6>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <_ZN5Print5printEPKc+0x8>
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	9a 83       	std	Y+2, r25	; 0x02
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	7c 83       	std	Y+4, r23	; 0x04
    2780:	6b 83       	std	Y+3, r22	; 0x03
    2782:	2b 81       	ldd	r18, Y+3	; 0x03
    2784:	3c 81       	ldd	r19, Y+4	; 0x04
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	b9 01       	movw	r22, r18
    278c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN5Print5writeEPKc>
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	08 95       	ret

0000279e <_ZN5Print5printEc>:
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <_ZN5Print5printEc+0x6>
    27a4:	1f 92       	push	r1
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	6b 83       	std	Y+3, r22	; 0x03
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	fc 01       	movw	r30, r24
    27b6:	80 81       	ld	r24, Z
    27b8:	91 81       	ldd	r25, Z+1	; 0x01
    27ba:	fc 01       	movw	r30, r24
    27bc:	20 81       	ld	r18, Z
    27be:	31 81       	ldd	r19, Z+1	; 0x01
    27c0:	4b 81       	ldd	r20, Y+3	; 0x03
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	9a 81       	ldd	r25, Y+2	; 0x02
    27c6:	64 2f       	mov	r22, r20
    27c8:	f9 01       	movw	r30, r18
    27ca:	09 95       	icall
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	08 95       	ret

000027d8 <_ZN5Print5printEii>:
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	00 d0       	rcall	.+0      	; 0x27de <_ZN5Print5printEii+0x6>
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <_ZN5Print5printEii+0x8>
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <_ZN5Print5printEii+0xa>
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	7c 83       	std	Y+4, r23	; 0x04
    27ec:	6b 83       	std	Y+3, r22	; 0x03
    27ee:	5e 83       	std	Y+6, r21	; 0x06
    27f0:	4d 83       	std	Y+5, r20	; 0x05
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	aa 27       	eor	r26, r26
    27f8:	97 fd       	sbrc	r25, 7
    27fa:	a0 95       	com	r26
    27fc:	ba 2f       	mov	r27, r26
    27fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2800:	3e 81       	ldd	r19, Y+6	; 0x06
    2802:	e9 81       	ldd	r30, Y+1	; 0x01
    2804:	fa 81       	ldd	r31, Y+2	; 0x02
    2806:	ac 01       	movw	r20, r24
    2808:	bd 01       	movw	r22, r26
    280a:	cf 01       	movw	r24, r30
    280c:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN5Print5printEli>
    2810:	26 96       	adiw	r28, 0x06	; 6
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	08 95       	ret

00002822 <_ZN5Print5printEli>:
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	2a 97       	sbiw	r28, 0x0a	; 10
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	9c 83       	std	Y+4, r25	; 0x04
    2838:	8b 83       	std	Y+3, r24	; 0x03
    283a:	4d 83       	std	Y+5, r20	; 0x05
    283c:	5e 83       	std	Y+6, r21	; 0x06
    283e:	6f 83       	std	Y+7, r22	; 0x07
    2840:	78 87       	std	Y+8, r23	; 0x08
    2842:	3a 87       	std	Y+10, r19	; 0x0a
    2844:	29 87       	std	Y+9, r18	; 0x09
    2846:	89 85       	ldd	r24, Y+9	; 0x09
    2848:	9a 85       	ldd	r25, Y+10	; 0x0a
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	79 f4       	brne	.+30     	; 0x286c <_ZN5Print5printEli+0x4a>
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	9c 81       	ldd	r25, Y+4	; 0x04
    2852:	fc 01       	movw	r30, r24
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	fc 01       	movw	r30, r24
    285a:	20 81       	ld	r18, Z
    285c:	31 81       	ldd	r19, Z+1	; 0x01
    285e:	4d 81       	ldd	r20, Y+5	; 0x05
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	64 2f       	mov	r22, r20
    2866:	f9 01       	movw	r30, r18
    2868:	09 95       	icall
    286a:	4c c0       	rjmp	.+152    	; 0x2904 <_ZN5Print5printEli+0xe2>
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2870:	8a 30       	cpi	r24, 0x0A	; 10
    2872:	91 05       	cpc	r25, r1
    2874:	d9 f5       	brne	.+118    	; 0x28ec <_ZN5Print5printEli+0xca>
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	af 81       	ldd	r26, Y+7	; 0x07
    287c:	b8 85       	ldd	r27, Y+8	; 0x08
    287e:	bb 23       	and	r27, r27
    2880:	44 f5       	brge	.+80     	; 0x28d2 <_ZN5Print5printEli+0xb0>
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	9c 81       	ldd	r25, Y+4	; 0x04
    2886:	6d e2       	ldi	r22, 0x2D	; 45
    2888:	0e 94 cf 13 	call	0x279e	; 0x279e <_ZN5Print5printEc>
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	af 81       	ldd	r26, Y+7	; 0x07
    2896:	b8 85       	ldd	r27, Y+8	; 0x08
    2898:	b0 95       	com	r27
    289a:	a0 95       	com	r26
    289c:	90 95       	com	r25
    289e:	81 95       	neg	r24
    28a0:	9f 4f       	sbci	r25, 0xFF	; 255
    28a2:	af 4f       	sbci	r26, 0xFF	; 255
    28a4:	bf 4f       	sbci	r27, 0xFF	; 255
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	9e 83       	std	Y+6, r25	; 0x06
    28aa:	af 83       	std	Y+7, r26	; 0x07
    28ac:	b8 87       	std	Y+8, r27	; 0x08
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	af 81       	ldd	r26, Y+7	; 0x07
    28b4:	b8 85       	ldd	r27, Y+8	; 0x08
    28b6:	eb 81       	ldd	r30, Y+3	; 0x03
    28b8:	fc 81       	ldd	r31, Y+4	; 0x04
    28ba:	2a e0       	ldi	r18, 0x0A	; 10
    28bc:	ac 01       	movw	r20, r24
    28be:	bd 01       	movw	r22, r26
    28c0:	cf 01       	movw	r24, r30
    28c2:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN5Print11printNumberEmh>
    28c6:	9c 01       	movw	r18, r24
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
    28cc:	82 0f       	add	r24, r18
    28ce:	93 1f       	adc	r25, r19
    28d0:	19 c0       	rjmp	.+50     	; 0x2904 <_ZN5Print5printEli+0xe2>
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
    28d4:	9e 81       	ldd	r25, Y+6	; 0x06
    28d6:	af 81       	ldd	r26, Y+7	; 0x07
    28d8:	b8 85       	ldd	r27, Y+8	; 0x08
    28da:	eb 81       	ldd	r30, Y+3	; 0x03
    28dc:	fc 81       	ldd	r31, Y+4	; 0x04
    28de:	2a e0       	ldi	r18, 0x0A	; 10
    28e0:	ac 01       	movw	r20, r24
    28e2:	bd 01       	movw	r22, r26
    28e4:	cf 01       	movw	r24, r30
    28e6:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN5Print11printNumberEmh>
    28ea:	0c c0       	rjmp	.+24     	; 0x2904 <_ZN5Print5printEli+0xe2>
    28ec:	29 85       	ldd	r18, Y+9	; 0x09
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	9e 81       	ldd	r25, Y+6	; 0x06
    28f2:	af 81       	ldd	r26, Y+7	; 0x07
    28f4:	b8 85       	ldd	r27, Y+8	; 0x08
    28f6:	eb 81       	ldd	r30, Y+3	; 0x03
    28f8:	fc 81       	ldd	r31, Y+4	; 0x04
    28fa:	ac 01       	movw	r20, r24
    28fc:	bd 01       	movw	r22, r26
    28fe:	cf 01       	movw	r24, r30
    2900:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN5Print11printNumberEmh>
    2904:	2a 96       	adiw	r28, 0x0a	; 10
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	08 95       	ret

00002916 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	00 d0       	rcall	.+0      	; 0x291c <_ZN5Print7printlnEPK19__FlashStringHelper+0x6>
    291c:	00 d0       	rcall	.+0      	; 0x291e <_ZN5Print7printlnEPK19__FlashStringHelper+0x8>
    291e:	00 d0       	rcall	.+0      	; 0x2920 <_ZN5Print7printlnEPK19__FlashStringHelper+0xa>
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	9c 83       	std	Y+4, r25	; 0x04
    2926:	8b 83       	std	Y+3, r24	; 0x03
    2928:	7e 83       	std	Y+6, r23	; 0x06
    292a:	6d 83       	std	Y+5, r22	; 0x05
    292c:	2d 81       	ldd	r18, Y+5	; 0x05
    292e:	3e 81       	ldd	r19, Y+6	; 0x06
    2930:	8b 81       	ldd	r24, Y+3	; 0x03
    2932:	9c 81       	ldd	r25, Y+4	; 0x04
    2934:	b9 01       	movw	r22, r18
    2936:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_ZN5Print5printEPK19__FlashStringHelper>
    293a:	9a 83       	std	Y+2, r25	; 0x02
    293c:	89 83       	std	Y+1, r24	; 0x01
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	0e 94 b4 14 	call	0x2968	; 0x2968 <_ZN5Print7printlnEv>
    2946:	29 81       	ldd	r18, Y+1	; 0x01
    2948:	3a 81       	ldd	r19, Y+2	; 0x02
    294a:	82 0f       	add	r24, r18
    294c:	93 1f       	adc	r25, r19
    294e:	9a 83       	std	Y+2, r25	; 0x02
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	9a 81       	ldd	r25, Y+2	; 0x02
    2956:	26 96       	adiw	r28, 0x06	; 6
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	08 95       	ret

00002968 <_ZN5Print7printlnEv>:
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	00 d0       	rcall	.+0      	; 0x296e <_ZN5Print7printlnEv+0x6>
    296e:	00 d0       	rcall	.+0      	; 0x2970 <_ZN5Print7printlnEv+0x8>
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	9c 83       	std	Y+4, r25	; 0x04
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	6d e0       	ldi	r22, 0x0D	; 13
    297e:	0e 94 cf 13 	call	0x279e	; 0x279e <_ZN5Print5printEc>
    2982:	9a 83       	std	Y+2, r25	; 0x02
    2984:	89 83       	std	Y+1, r24	; 0x01
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	6a e0       	ldi	r22, 0x0A	; 10
    298c:	0e 94 cf 13 	call	0x279e	; 0x279e <_ZN5Print5printEc>
    2990:	29 81       	ldd	r18, Y+1	; 0x01
    2992:	3a 81       	ldd	r19, Y+2	; 0x02
    2994:	82 0f       	add	r24, r18
    2996:	93 1f       	adc	r25, r19
    2998:	9a 83       	std	Y+2, r25	; 0x02
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	9a 81       	ldd	r25, Y+2	; 0x02
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	08 95       	ret

000029ae <_ZN5Print7printlnEPKc>:
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <_ZN5Print7printlnEPKc+0x6>
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <_ZN5Print7printlnEPKc+0x8>
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <_ZN5Print7printlnEPKc+0xa>
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	9c 83       	std	Y+4, r25	; 0x04
    29be:	8b 83       	std	Y+3, r24	; 0x03
    29c0:	7e 83       	std	Y+6, r23	; 0x06
    29c2:	6d 83       	std	Y+5, r22	; 0x05
    29c4:	2d 81       	ldd	r18, Y+5	; 0x05
    29c6:	3e 81       	ldd	r19, Y+6	; 0x06
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	9c 81       	ldd	r25, Y+4	; 0x04
    29cc:	b9 01       	movw	r22, r18
    29ce:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN5Print5printEPKc>
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	9c 81       	ldd	r25, Y+4	; 0x04
    29da:	0e 94 b4 14 	call	0x2968	; 0x2968 <_ZN5Print7printlnEv>
    29de:	29 81       	ldd	r18, Y+1	; 0x01
    29e0:	3a 81       	ldd	r19, Y+2	; 0x02
    29e2:	82 0f       	add	r24, r18
    29e4:	93 1f       	adc	r25, r19
    29e6:	9a 83       	std	Y+2, r25	; 0x02
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	9a 81       	ldd	r25, Y+2	; 0x02
    29ee:	26 96       	adiw	r28, 0x06	; 6
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	08 95       	ret

00002a00 <_ZN5Print7printlnEii>:
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	28 97       	sbiw	r28, 0x08	; 8
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	9c 83       	std	Y+4, r25	; 0x04
    2a16:	8b 83       	std	Y+3, r24	; 0x03
    2a18:	7e 83       	std	Y+6, r23	; 0x06
    2a1a:	6d 83       	std	Y+5, r22	; 0x05
    2a1c:	58 87       	std	Y+8, r21	; 0x08
    2a1e:	4f 83       	std	Y+7, r20	; 0x07
    2a20:	4f 81       	ldd	r20, Y+7	; 0x07
    2a22:	58 85       	ldd	r21, Y+8	; 0x08
    2a24:	2d 81       	ldd	r18, Y+5	; 0x05
    2a26:	3e 81       	ldd	r19, Y+6	; 0x06
    2a28:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2c:	b9 01       	movw	r22, r18
    2a2e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN5Print5printEii>
    2a32:	9a 83       	std	Y+2, r25	; 0x02
    2a34:	89 83       	std	Y+1, r24	; 0x01
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	0e 94 b4 14 	call	0x2968	; 0x2968 <_ZN5Print7printlnEv>
    2a3e:	29 81       	ldd	r18, Y+1	; 0x01
    2a40:	3a 81       	ldd	r19, Y+2	; 0x02
    2a42:	82 0f       	add	r24, r18
    2a44:	93 1f       	adc	r25, r19
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4e:	28 96       	adiw	r28, 0x08	; 8
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	08 95       	ret

00002a60 <_ZN5Print11printNumberEmh>:
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	e3 97       	sbiw	r28, 0x33	; 51
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	9a a7       	std	Y+42, r25	; 0x2a
    2a76:	89 a7       	std	Y+41, r24	; 0x29
    2a78:	4b a7       	std	Y+43, r20	; 0x2b
    2a7a:	5c a7       	std	Y+44, r21	; 0x2c
    2a7c:	6d a7       	std	Y+45, r22	; 0x2d
    2a7e:	7e a7       	std	Y+46, r23	; 0x2e
    2a80:	2f a7       	std	Y+47, r18	; 0x2f
    2a82:	80 e2       	ldi	r24, 0x20	; 32
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9e 01       	movw	r18, r28
    2a88:	28 5f       	subi	r18, 0xF8	; 248
    2a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8c:	82 0f       	add	r24, r18
    2a8e:	93 1f       	adc	r25, r19
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	fc 01       	movw	r30, r24
    2a9a:	10 82       	st	Z, r1
    2a9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a9e:	82 30       	cpi	r24, 0x02	; 2
    2aa0:	10 f4       	brcc	.+4      	; 0x2aa6 <_ZN5Print11printNumberEmh+0x46>
    2aa2:	8a e0       	ldi	r24, 0x0A	; 10
    2aa4:	8f a7       	std	Y+47, r24	; 0x2f
    2aa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aa8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aaa:	ad a5       	ldd	r26, Y+45	; 0x2d
    2aac:	be a5       	ldd	r27, Y+46	; 0x2e
    2aae:	8b 83       	std	Y+3, r24	; 0x03
    2ab0:	9c 83       	std	Y+4, r25	; 0x04
    2ab2:	ad 83       	std	Y+5, r26	; 0x05
    2ab4:	be 83       	std	Y+6, r27	; 0x06
    2ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ac2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ac4:	ad a5       	ldd	r26, Y+45	; 0x2d
    2ac6:	be a5       	ldd	r27, Y+46	; 0x2e
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	0e 94 6d 18 	call	0x30da	; 0x30da <__udivmodsi4>
    2ad0:	da 01       	movw	r26, r20
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	8b a7       	std	Y+43, r24	; 0x2b
    2ad6:	9c a7       	std	Y+44, r25	; 0x2c
    2ad8:	ad a7       	std	Y+45, r26	; 0x2d
    2ada:	be a7       	std	Y+46, r27	; 0x2e
    2adc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ade:	2b a5       	ldd	r18, Y+43	; 0x2b
    2ae0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae2:	28 9f       	mul	r18, r24
    2ae4:	80 2d       	mov	r24, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	f9 2f       	mov	r31, r25
    2aea:	f8 1b       	sub	r31, r24
    2aec:	8f 2f       	mov	r24, r31
    2aee:	8f 83       	std	Y+7, r24	; 0x07
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	9a 81       	ldd	r25, Y+2	; 0x02
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9a 83       	std	Y+2, r25	; 0x02
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	8f 81       	ldd	r24, Y+7	; 0x07
    2afc:	8a 30       	cpi	r24, 0x0A	; 10
    2afe:	24 f4       	brge	.+8      	; 0x2b08 <_ZN5Print11printNumberEmh+0xa8>
    2b00:	8f 81       	ldd	r24, Y+7	; 0x07
    2b02:	80 5d       	subi	r24, 0xD0	; 208
    2b04:	28 2f       	mov	r18, r24
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <_ZN5Print11printNumberEmh+0xae>
    2b08:	8f 81       	ldd	r24, Y+7	; 0x07
    2b0a:	89 5c       	subi	r24, 0xC9	; 201
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	fc 01       	movw	r30, r24
    2b14:	20 83       	st	Z, r18
    2b16:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b18:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1a:	ad a5       	ldd	r26, Y+45	; 0x2d
    2b1c:	be a5       	ldd	r27, Y+46	; 0x2e
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	a1 05       	cpc	r26, r1
    2b22:	b1 05       	cpc	r27, r1
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <_ZN5Print11printNumberEmh+0xc8>
    2b26:	bf cf       	rjmp	.-130    	; 0x2aa6 <_ZN5Print11printNumberEmh+0x46>
    2b28:	29 81       	ldd	r18, Y+1	; 0x01
    2b2a:	3a 81       	ldd	r19, Y+2	; 0x02
    2b2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b30:	b9 01       	movw	r22, r18
    2b32:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN5Print5writeEPKc>
    2b36:	e3 96       	adiw	r28, 0x33	; 51
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	08 95       	ret

00002b48 <__vector_16>:
    2b48:	1f 92       	push	r1
    2b4a:	0f 92       	push	r0
    2b4c:	00 90 5f 00 	lds	r0, 0x005F
    2b50:	0f 92       	push	r0
    2b52:	11 24       	eor	r1, r1
    2b54:	8f 93       	push	r24
    2b56:	9f 93       	push	r25
    2b58:	af 93       	push	r26
    2b5a:	bf 93       	push	r27
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	25 97       	sbiw	r28, 0x05	; 5
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	80 91 39 06 	lds	r24, 0x0639
    2b6e:	90 91 3a 06 	lds	r25, 0x063A
    2b72:	a0 91 3b 06 	lds	r26, 0x063B
    2b76:	b0 91 3c 06 	lds	r27, 0x063C
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	ab 83       	std	Y+3, r26	; 0x03
    2b80:	bc 83       	std	Y+4, r27	; 0x04
    2b82:	80 91 3d 06 	lds	r24, 0x063D
    2b86:	8d 83       	std	Y+5, r24	; 0x05
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b8e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	a1 1d       	adc	r26, r1
    2b94:	b1 1d       	adc	r27, r1
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	ab 83       	std	Y+3, r26	; 0x03
    2b9c:	bc 83       	std	Y+4, r27	; 0x04
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	8d 5f       	subi	r24, 0xFD	; 253
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	8d 37       	cpi	r24, 0x7D	; 125
    2ba8:	70 f0       	brcs	.+28     	; 0x2bc6 <__vector_16+0x7e>
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	8d 57       	subi	r24, 0x7D	; 125
    2bae:	8d 83       	std	Y+5, r24	; 0x05
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb4:	ab 81       	ldd	r26, Y+3	; 0x03
    2bb6:	bc 81       	ldd	r27, Y+4	; 0x04
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	a1 1d       	adc	r26, r1
    2bbc:	b1 1d       	adc	r27, r1
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	9a 83       	std	Y+2, r25	; 0x02
    2bc2:	ab 83       	std	Y+3, r26	; 0x03
    2bc4:	bc 83       	std	Y+4, r27	; 0x04
    2bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc8:	80 93 3d 06 	sts	0x063D, r24
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
    2bce:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd0:	ab 81       	ldd	r26, Y+3	; 0x03
    2bd2:	bc 81       	ldd	r27, Y+4	; 0x04
    2bd4:	80 93 39 06 	sts	0x0639, r24
    2bd8:	90 93 3a 06 	sts	0x063A, r25
    2bdc:	a0 93 3b 06 	sts	0x063B, r26
    2be0:	b0 93 3c 06 	sts	0x063C, r27
    2be4:	80 91 35 06 	lds	r24, 0x0635
    2be8:	90 91 36 06 	lds	r25, 0x0636
    2bec:	a0 91 37 06 	lds	r26, 0x0637
    2bf0:	b0 91 38 06 	lds	r27, 0x0638
    2bf4:	01 96       	adiw	r24, 0x01	; 1
    2bf6:	a1 1d       	adc	r26, r1
    2bf8:	b1 1d       	adc	r27, r1
    2bfa:	80 93 35 06 	sts	0x0635, r24
    2bfe:	90 93 36 06 	sts	0x0636, r25
    2c02:	a0 93 37 06 	sts	0x0637, r26
    2c06:	b0 93 38 06 	sts	0x0638, r27
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	bf 91       	pop	r27
    2c1a:	af 91       	pop	r26
    2c1c:	9f 91       	pop	r25
    2c1e:	8f 91       	pop	r24
    2c20:	0f 90       	pop	r0
    2c22:	00 92 5f 00 	sts	0x005F, r0
    2c26:	0f 90       	pop	r0
    2c28:	1f 90       	pop	r1
    2c2a:	18 95       	reti

00002c2c <millis>:
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <millis+0x6>
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <millis+0x8>
    2c34:	1f 92       	push	r1
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	8f e5       	ldi	r24, 0x5F	; 95
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	80 81       	ld	r24, Z
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	f8 94       	cli
    2c46:	80 91 39 06 	lds	r24, 0x0639
    2c4a:	90 91 3a 06 	lds	r25, 0x063A
    2c4e:	a0 91 3b 06 	lds	r26, 0x063B
    2c52:	b0 91 3c 06 	lds	r27, 0x063C
    2c56:	8a 83       	std	Y+2, r24	; 0x02
    2c58:	9b 83       	std	Y+3, r25	; 0x03
    2c5a:	ac 83       	std	Y+4, r26	; 0x04
    2c5c:	bd 83       	std	Y+5, r27	; 0x05
    2c5e:	8f e5       	ldi	r24, 0x5F	; 95
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	29 81       	ldd	r18, Y+1	; 0x01
    2c64:	fc 01       	movw	r30, r24
    2c66:	20 83       	st	Z, r18
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6c:	ac 81       	ldd	r26, Y+4	; 0x04
    2c6e:	bd 81       	ldd	r27, Y+5	; 0x05
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	08 95       	ret

00002c84 <micros>:
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	00 d0       	rcall	.+0      	; 0x2c8a <micros+0x6>
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <micros+0x8>
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <micros+0xa>
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
    2c92:	8f e5       	ldi	r24, 0x5F	; 95
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	fc 01       	movw	r30, r24
    2c98:	80 81       	ld	r24, Z
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	f8 94       	cli
    2c9e:	80 91 35 06 	lds	r24, 0x0635
    2ca2:	90 91 36 06 	lds	r25, 0x0636
    2ca6:	a0 91 37 06 	lds	r26, 0x0637
    2caa:	b0 91 38 06 	lds	r27, 0x0638
    2cae:	89 83       	std	Y+1, r24	; 0x01
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	ab 83       	std	Y+3, r26	; 0x03
    2cb4:	bc 83       	std	Y+4, r27	; 0x04
    2cb6:	86 e4       	ldi	r24, 0x46	; 70
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	fc 01       	movw	r30, r24
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8e 83       	std	Y+6, r24	; 0x06
    2cc0:	85 e3       	ldi	r24, 0x35	; 53
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	80 81       	ld	r24, Z
    2cc8:	88 2f       	mov	r24, r24
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	81 70       	andi	r24, 0x01	; 1
    2cce:	99 27       	eor	r25, r25
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	71 f0       	breq	.+28     	; 0x2cf0 <micros+0x6c>
    2cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2cd8:	59 f0       	breq	.+22     	; 0x2cf0 <micros+0x6c>
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cde:	ab 81       	ldd	r26, Y+3	; 0x03
    2ce0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ce2:	01 96       	adiw	r24, 0x01	; 1
    2ce4:	a1 1d       	adc	r26, r1
    2ce6:	b1 1d       	adc	r27, r1
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	ab 83       	std	Y+3, r26	; 0x03
    2cee:	bc 83       	std	Y+4, r27	; 0x04
    2cf0:	8f e5       	ldi	r24, 0x5F	; 95
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	2d 81       	ldd	r18, Y+5	; 0x05
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	20 83       	st	Z, r18
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	ab 81       	ldd	r26, Y+3	; 0x03
    2d00:	bc 81       	ldd	r27, Y+4	; 0x04
    2d02:	22 27       	eor	r18, r18
    2d04:	38 2f       	mov	r19, r24
    2d06:	49 2f       	mov	r20, r25
    2d08:	5a 2f       	mov	r21, r26
    2d0a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d0c:	88 2f       	mov	r24, r24
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 e0       	ldi	r26, 0x00	; 0
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	82 0f       	add	r24, r18
    2d16:	93 1f       	adc	r25, r19
    2d18:	a4 1f       	adc	r26, r20
    2d1a:	b5 1f       	adc	r27, r21
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	aa 1f       	adc	r26, r26
    2d22:	bb 1f       	adc	r27, r27
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	aa 1f       	adc	r26, r26
    2d2a:	bb 1f       	adc	r27, r27
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	26 96       	adiw	r28, 0x06	; 6
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	08 95       	ret

00002d42 <delay>:
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <delay+0x6>
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <delay+0x8>
    2d4a:	00 d0       	rcall	.+0      	; 0x2d4c <delay+0xa>
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	6b 83       	std	Y+3, r22	; 0x03
    2d52:	7c 83       	std	Y+4, r23	; 0x04
    2d54:	8d 83       	std	Y+5, r24	; 0x05
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	0e 94 42 16 	call	0x2c84	; 0x2c84 <micros>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9a 83       	std	Y+2, r25	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01
    2d64:	20 c0       	rjmp	.+64     	; 0x2da6 <delay+0x64>
    2d66:	0e 94 42 16 	call	0x2c84	; 0x2c84 <micros>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	9c 01       	movw	r18, r24
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	a9 01       	movw	r20, r18
    2d76:	48 1b       	sub	r20, r24
    2d78:	59 0b       	sbc	r21, r25
    2d7a:	ca 01       	movw	r24, r20
    2d7c:	88 3e       	cpi	r24, 0xE8	; 232
    2d7e:	53 e0       	ldi	r21, 0x03	; 3
    2d80:	95 07       	cpc	r25, r21
    2d82:	88 f0       	brcs	.+34     	; 0x2da6 <delay+0x64>
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	9c 81       	ldd	r25, Y+4	; 0x04
    2d88:	ad 81       	ldd	r26, Y+5	; 0x05
    2d8a:	be 81       	ldd	r27, Y+6	; 0x06
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	a1 09       	sbc	r26, r1
    2d90:	b1 09       	sbc	r27, r1
    2d92:	8b 83       	std	Y+3, r24	; 0x03
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	ad 83       	std	Y+5, r26	; 0x05
    2d98:	be 83       	std	Y+6, r27	; 0x06
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9e:	88 51       	subi	r24, 0x18	; 24
    2da0:	9c 4f       	sbci	r25, 0xFC	; 252
    2da2:	9a 83       	std	Y+2, r25	; 0x02
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	9c 81       	ldd	r25, Y+4	; 0x04
    2daa:	ad 81       	ldd	r26, Y+5	; 0x05
    2dac:	be 81       	ldd	r27, Y+6	; 0x06
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	a1 05       	cpc	r26, r1
    2db2:	b1 05       	cpc	r27, r1
    2db4:	c1 f6       	brne	.-80     	; 0x2d66 <delay+0x24>
    2db6:	26 96       	adiw	r28, 0x06	; 6
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	08 95       	ret

00002dc8 <init>:
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	78 94       	sei
    2dd2:	84 e4       	ldi	r24, 0x44	; 68
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	24 e4       	ldi	r18, 0x44	; 68
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	f9 01       	movw	r30, r18
    2ddc:	20 81       	ld	r18, Z
    2dde:	22 60       	ori	r18, 0x02	; 2
    2de0:	fc 01       	movw	r30, r24
    2de2:	20 83       	st	Z, r18
    2de4:	84 e4       	ldi	r24, 0x44	; 68
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	24 e4       	ldi	r18, 0x44	; 68
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	f9 01       	movw	r30, r18
    2dee:	20 81       	ld	r18, Z
    2df0:	21 60       	ori	r18, 0x01	; 1
    2df2:	fc 01       	movw	r30, r24
    2df4:	20 83       	st	Z, r18
    2df6:	85 e4       	ldi	r24, 0x45	; 69
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	25 e4       	ldi	r18, 0x45	; 69
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	f9 01       	movw	r30, r18
    2e00:	20 81       	ld	r18, Z
    2e02:	22 60       	ori	r18, 0x02	; 2
    2e04:	fc 01       	movw	r30, r24
    2e06:	20 83       	st	Z, r18
    2e08:	85 e4       	ldi	r24, 0x45	; 69
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	25 e4       	ldi	r18, 0x45	; 69
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	f9 01       	movw	r30, r18
    2e12:	20 81       	ld	r18, Z
    2e14:	21 60       	ori	r18, 0x01	; 1
    2e16:	fc 01       	movw	r30, r24
    2e18:	20 83       	st	Z, r18
    2e1a:	8e e6       	ldi	r24, 0x6E	; 110
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	2e e6       	ldi	r18, 0x6E	; 110
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	f9 01       	movw	r30, r18
    2e24:	20 81       	ld	r18, Z
    2e26:	21 60       	ori	r18, 0x01	; 1
    2e28:	fc 01       	movw	r30, r24
    2e2a:	20 83       	st	Z, r18
    2e2c:	81 e8       	ldi	r24, 0x81	; 129
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	fc 01       	movw	r30, r24
    2e32:	10 82       	st	Z, r1
    2e34:	81 e8       	ldi	r24, 0x81	; 129
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	21 e8       	ldi	r18, 0x81	; 129
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	f9 01       	movw	r30, r18
    2e3e:	20 81       	ld	r18, Z
    2e40:	22 60       	ori	r18, 0x02	; 2
    2e42:	fc 01       	movw	r30, r24
    2e44:	20 83       	st	Z, r18
    2e46:	81 e8       	ldi	r24, 0x81	; 129
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	21 e8       	ldi	r18, 0x81	; 129
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	f9 01       	movw	r30, r18
    2e50:	20 81       	ld	r18, Z
    2e52:	21 60       	ori	r18, 0x01	; 1
    2e54:	fc 01       	movw	r30, r24
    2e56:	20 83       	st	Z, r18
    2e58:	80 e8       	ldi	r24, 0x80	; 128
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	20 e8       	ldi	r18, 0x80	; 128
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	f9 01       	movw	r30, r18
    2e62:	20 81       	ld	r18, Z
    2e64:	21 60       	ori	r18, 0x01	; 1
    2e66:	fc 01       	movw	r30, r24
    2e68:	20 83       	st	Z, r18
    2e6a:	81 eb       	ldi	r24, 0xB1	; 177
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	21 eb       	ldi	r18, 0xB1	; 177
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	f9 01       	movw	r30, r18
    2e74:	20 81       	ld	r18, Z
    2e76:	24 60       	ori	r18, 0x04	; 4
    2e78:	fc 01       	movw	r30, r24
    2e7a:	20 83       	st	Z, r18
    2e7c:	80 eb       	ldi	r24, 0xB0	; 176
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	20 eb       	ldi	r18, 0xB0	; 176
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	f9 01       	movw	r30, r18
    2e86:	20 81       	ld	r18, Z
    2e88:	21 60       	ori	r18, 0x01	; 1
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	20 83       	st	Z, r18
    2e8e:	8a e7       	ldi	r24, 0x7A	; 122
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	2a e7       	ldi	r18, 0x7A	; 122
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	f9 01       	movw	r30, r18
    2e98:	20 81       	ld	r18, Z
    2e9a:	24 60       	ori	r18, 0x04	; 4
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	20 83       	st	Z, r18
    2ea0:	8a e7       	ldi	r24, 0x7A	; 122
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	2a e7       	ldi	r18, 0x7A	; 122
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	f9 01       	movw	r30, r18
    2eaa:	20 81       	ld	r18, Z
    2eac:	22 60       	ori	r18, 0x02	; 2
    2eae:	fc 01       	movw	r30, r24
    2eb0:	20 83       	st	Z, r18
    2eb2:	8a e7       	ldi	r24, 0x7A	; 122
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	2a e7       	ldi	r18, 0x7A	; 122
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	f9 01       	movw	r30, r18
    2ebc:	20 81       	ld	r18, Z
    2ebe:	21 60       	ori	r18, 0x01	; 1
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	20 83       	st	Z, r18
    2ec4:	8a e7       	ldi	r24, 0x7A	; 122
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	2a e7       	ldi	r18, 0x7A	; 122
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	f9 01       	movw	r30, r18
    2ece:	20 81       	ld	r18, Z
    2ed0:	20 68       	ori	r18, 0x80	; 128
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	20 83       	st	Z, r18
    2ed6:	81 ec       	ldi	r24, 0xC1	; 193
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	fc 01       	movw	r30, r24
    2edc:	10 82       	st	Z, r1
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	08 95       	ret

00002ee4 <turnOffPWM>:
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
    2ee8:	1f 92       	push	r1
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	83 30       	cpi	r24, 0x03	; 3
    2ef8:	91 05       	cpc	r25, r1
    2efa:	a1 f0       	breq	.+40     	; 0x2f24 <turnOffPWM+0x40>
    2efc:	84 30       	cpi	r24, 0x04	; 4
    2efe:	91 05       	cpc	r25, r1
    2f00:	3c f4       	brge	.+14     	; 0x2f10 <turnOffPWM+0x2c>
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	91 05       	cpc	r25, r1
    2f06:	11 f1       	breq	.+68     	; 0x2f4c <turnOffPWM+0x68>
    2f08:	82 30       	cpi	r24, 0x02	; 2
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	49 f1       	breq	.+82     	; 0x2f60 <turnOffPWM+0x7c>
    2f0e:	46 c0       	rjmp	.+140    	; 0x2f9c <turnOffPWM+0xb8>
    2f10:	86 30       	cpi	r24, 0x06	; 6
    2f12:	91 05       	cpc	r25, r1
    2f14:	79 f1       	breq	.+94     	; 0x2f74 <turnOffPWM+0x90>
    2f16:	87 30       	cpi	r24, 0x07	; 7
    2f18:	91 05       	cpc	r25, r1
    2f1a:	b1 f1       	breq	.+108    	; 0x2f88 <turnOffPWM+0xa4>
    2f1c:	84 30       	cpi	r24, 0x04	; 4
    2f1e:	91 05       	cpc	r25, r1
    2f20:	59 f0       	breq	.+22     	; 0x2f38 <turnOffPWM+0x54>
    2f22:	3c c0       	rjmp	.+120    	; 0x2f9c <turnOffPWM+0xb8>
    2f24:	80 e8       	ldi	r24, 0x80	; 128
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	20 e8       	ldi	r18, 0x80	; 128
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	f9 01       	movw	r30, r18
    2f2e:	20 81       	ld	r18, Z
    2f30:	2f 77       	andi	r18, 0x7F	; 127
    2f32:	fc 01       	movw	r30, r24
    2f34:	20 83       	st	Z, r18
    2f36:	32 c0       	rjmp	.+100    	; 0x2f9c <turnOffPWM+0xb8>
    2f38:	80 e8       	ldi	r24, 0x80	; 128
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	20 e8       	ldi	r18, 0x80	; 128
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	f9 01       	movw	r30, r18
    2f42:	20 81       	ld	r18, Z
    2f44:	2f 7d       	andi	r18, 0xDF	; 223
    2f46:	fc 01       	movw	r30, r24
    2f48:	20 83       	st	Z, r18
    2f4a:	28 c0       	rjmp	.+80     	; 0x2f9c <turnOffPWM+0xb8>
    2f4c:	84 e4       	ldi	r24, 0x44	; 68
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	24 e4       	ldi	r18, 0x44	; 68
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	f9 01       	movw	r30, r18
    2f56:	20 81       	ld	r18, Z
    2f58:	2f 77       	andi	r18, 0x7F	; 127
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	20 83       	st	Z, r18
    2f5e:	1e c0       	rjmp	.+60     	; 0x2f9c <turnOffPWM+0xb8>
    2f60:	84 e4       	ldi	r24, 0x44	; 68
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	24 e4       	ldi	r18, 0x44	; 68
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	f9 01       	movw	r30, r18
    2f6a:	20 81       	ld	r18, Z
    2f6c:	2f 7d       	andi	r18, 0xDF	; 223
    2f6e:	fc 01       	movw	r30, r24
    2f70:	20 83       	st	Z, r18
    2f72:	14 c0       	rjmp	.+40     	; 0x2f9c <turnOffPWM+0xb8>
    2f74:	80 eb       	ldi	r24, 0xB0	; 176
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	20 eb       	ldi	r18, 0xB0	; 176
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	f9 01       	movw	r30, r18
    2f7e:	20 81       	ld	r18, Z
    2f80:	2f 77       	andi	r18, 0x7F	; 127
    2f82:	fc 01       	movw	r30, r24
    2f84:	20 83       	st	Z, r18
    2f86:	0a c0       	rjmp	.+20     	; 0x2f9c <turnOffPWM+0xb8>
    2f88:	80 eb       	ldi	r24, 0xB0	; 176
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	20 eb       	ldi	r18, 0xB0	; 176
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	f9 01       	movw	r30, r18
    2f92:	20 81       	ld	r18, Z
    2f94:	2f 7d       	andi	r18, 0xDF	; 223
    2f96:	fc 01       	movw	r30, r24
    2f98:	20 83       	st	Z, r18
    2f9a:	00 00       	nop
    2f9c:	0f 90       	pop	r0
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
    2fa2:	08 95       	ret

00002fa4 <digitalWrite>:
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	65 97       	sbiw	r28, 0x15	; 21
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	8c 8b       	std	Y+20, r24	; 0x14
    2fba:	6d 8b       	std	Y+21, r22	; 0x15
    2fbc:	8c 89       	ldd	r24, Y+20	; 0x14
    2fbe:	88 2f       	mov	r24, r24
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	8f 5a       	subi	r24, 0xAF	; 175
    2fc4:	9d 4f       	sbci	r25, 0xFD	; 253
    2fc6:	9a 83       	std	Y+2, r25	; 0x02
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fce:	fc 01       	movw	r30, r24
    2fd0:	84 91       	lpm	r24, Z
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	8c 83       	std	Y+4, r24	; 0x04
    2fd8:	8c 89       	ldd	r24, Y+20	; 0x14
    2fda:	88 2f       	mov	r24, r24
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	83 5c       	subi	r24, 0xC3	; 195
    2fe0:	9d 4f       	sbci	r25, 0xFD	; 253
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	fc 01       	movw	r30, r24
    2fec:	84 91       	lpm	r24, Z
    2fee:	8f 83       	std	Y+7, r24	; 0x07
    2ff0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff2:	88 87       	std	Y+8, r24	; 0x08
    2ff4:	8c 89       	ldd	r24, Y+20	; 0x14
    2ff6:	88 2f       	mov	r24, r24
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	87 5d       	subi	r24, 0xD7	; 215
    2ffc:	9d 4f       	sbci	r25, 0xFD	; 253
    2ffe:	9a 87       	std	Y+10, r25	; 0x0a
    3000:	89 87       	std	Y+9, r24	; 0x09
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	fc 01       	movw	r30, r24
    3008:	84 91       	lpm	r24, Z
    300a:	8b 87       	std	Y+11, r24	; 0x0b
    300c:	8b 85       	ldd	r24, Y+11	; 0x0b
    300e:	8c 87       	std	Y+12, r24	; 0x0c
    3010:	8c 85       	ldd	r24, Y+12	; 0x0c
    3012:	88 23       	and	r24, r24
    3014:	09 f4       	brne	.+2      	; 0x3018 <digitalWrite+0x74>
    3016:	44 c0       	rjmp	.+136    	; 0x30a0 <digitalWrite+0xfc>
    3018:	8c 81       	ldd	r24, Y+4	; 0x04
    301a:	88 23       	and	r24, r24
    301c:	19 f0       	breq	.+6      	; 0x3024 <digitalWrite+0x80>
    301e:	8c 81       	ldd	r24, Y+4	; 0x04
    3020:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <turnOffPWM>
    3024:	8c 85       	ldd	r24, Y+12	; 0x0c
    3026:	88 2f       	mov	r24, r24
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	81 5e       	subi	r24, 0xE1	; 225
    3030:	9d 4f       	sbci	r25, 0xFD	; 253
    3032:	9e 87       	std	Y+14, r25	; 0x0e
    3034:	8d 87       	std	Y+13, r24	; 0x0d
    3036:	8d 85       	ldd	r24, Y+13	; 0x0d
    3038:	9e 85       	ldd	r25, Y+14	; 0x0e
    303a:	fc 01       	movw	r30, r24
    303c:	25 91       	lpm	r18, Z+
    303e:	34 91       	lpm	r19, Z
    3040:	cf 01       	movw	r24, r30
    3042:	38 8b       	std	Y+16, r19	; 0x10
    3044:	2f 87       	std	Y+15, r18	; 0x0f
    3046:	9e 87       	std	Y+14, r25	; 0x0e
    3048:	8d 87       	std	Y+13, r24	; 0x0d
    304a:	8f 85       	ldd	r24, Y+15	; 0x0f
    304c:	98 89       	ldd	r25, Y+16	; 0x10
    304e:	9a 8b       	std	Y+18, r25	; 0x12
    3050:	89 8b       	std	Y+17, r24	; 0x11
    3052:	8f e5       	ldi	r24, 0x5F	; 95
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	fc 01       	movw	r30, r24
    3058:	80 81       	ld	r24, Z
    305a:	8b 8b       	std	Y+19, r24	; 0x13
    305c:	f8 94       	cli
    305e:	8d 89       	ldd	r24, Y+21	; 0x15
    3060:	88 23       	and	r24, r24
    3062:	71 f4       	brne	.+28     	; 0x3080 <digitalWrite+0xdc>
    3064:	89 89       	ldd	r24, Y+17	; 0x11
    3066:	9a 89       	ldd	r25, Y+18	; 0x12
    3068:	fc 01       	movw	r30, r24
    306a:	80 81       	ld	r24, Z
    306c:	98 2f       	mov	r25, r24
    306e:	88 85       	ldd	r24, Y+8	; 0x08
    3070:	80 95       	com	r24
    3072:	89 23       	and	r24, r25
    3074:	28 2f       	mov	r18, r24
    3076:	89 89       	ldd	r24, Y+17	; 0x11
    3078:	9a 89       	ldd	r25, Y+18	; 0x12
    307a:	fc 01       	movw	r30, r24
    307c:	20 83       	st	Z, r18
    307e:	0b c0       	rjmp	.+22     	; 0x3096 <digitalWrite+0xf2>
    3080:	89 89       	ldd	r24, Y+17	; 0x11
    3082:	9a 89       	ldd	r25, Y+18	; 0x12
    3084:	fc 01       	movw	r30, r24
    3086:	90 81       	ld	r25, Z
    3088:	88 85       	ldd	r24, Y+8	; 0x08
    308a:	29 2f       	mov	r18, r25
    308c:	28 2b       	or	r18, r24
    308e:	89 89       	ldd	r24, Y+17	; 0x11
    3090:	9a 89       	ldd	r25, Y+18	; 0x12
    3092:	fc 01       	movw	r30, r24
    3094:	20 83       	st	Z, r18
    3096:	8f e5       	ldi	r24, 0x5F	; 95
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	2b 89       	ldd	r18, Y+19	; 0x13
    309c:	fc 01       	movw	r30, r24
    309e:	20 83       	st	Z, r18
    30a0:	65 96       	adiw	r28, 0x15	; 21
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	de bf       	out	0x3e, r29	; 62
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	08 95       	ret

000030b2 <__divmodhi4>:
    30b2:	97 fb       	bst	r25, 7
    30b4:	07 2e       	mov	r0, r23
    30b6:	16 f4       	brtc	.+4      	; 0x30bc <__divmodhi4+0xa>
    30b8:	00 94       	com	r0
    30ba:	07 d0       	rcall	.+14     	; 0x30ca <__divmodhi4_neg1>
    30bc:	77 fd       	sbrc	r23, 7
    30be:	09 d0       	rcall	.+18     	; 0x30d2 <__divmodhi4_neg2>
    30c0:	0e 94 b4 18 	call	0x3168	; 0x3168 <__udivmodhi4>
    30c4:	07 fc       	sbrc	r0, 7
    30c6:	05 d0       	rcall	.+10     	; 0x30d2 <__divmodhi4_neg2>
    30c8:	3e f4       	brtc	.+14     	; 0x30d8 <__divmodhi4_exit>

000030ca <__divmodhi4_neg1>:
    30ca:	90 95       	com	r25
    30cc:	81 95       	neg	r24
    30ce:	9f 4f       	sbci	r25, 0xFF	; 255
    30d0:	08 95       	ret

000030d2 <__divmodhi4_neg2>:
    30d2:	70 95       	com	r23
    30d4:	61 95       	neg	r22
    30d6:	7f 4f       	sbci	r23, 0xFF	; 255

000030d8 <__divmodhi4_exit>:
    30d8:	08 95       	ret

000030da <__udivmodsi4>:
    30da:	a1 e2       	ldi	r26, 0x21	; 33
    30dc:	1a 2e       	mov	r1, r26
    30de:	aa 1b       	sub	r26, r26
    30e0:	bb 1b       	sub	r27, r27
    30e2:	fd 01       	movw	r30, r26
    30e4:	0d c0       	rjmp	.+26     	; 0x3100 <__udivmodsi4_ep>

000030e6 <__udivmodsi4_loop>:
    30e6:	aa 1f       	adc	r26, r26
    30e8:	bb 1f       	adc	r27, r27
    30ea:	ee 1f       	adc	r30, r30
    30ec:	ff 1f       	adc	r31, r31
    30ee:	a2 17       	cp	r26, r18
    30f0:	b3 07       	cpc	r27, r19
    30f2:	e4 07       	cpc	r30, r20
    30f4:	f5 07       	cpc	r31, r21
    30f6:	20 f0       	brcs	.+8      	; 0x3100 <__udivmodsi4_ep>
    30f8:	a2 1b       	sub	r26, r18
    30fa:	b3 0b       	sbc	r27, r19
    30fc:	e4 0b       	sbc	r30, r20
    30fe:	f5 0b       	sbc	r31, r21

00003100 <__udivmodsi4_ep>:
    3100:	66 1f       	adc	r22, r22
    3102:	77 1f       	adc	r23, r23
    3104:	88 1f       	adc	r24, r24
    3106:	99 1f       	adc	r25, r25
    3108:	1a 94       	dec	r1
    310a:	69 f7       	brne	.-38     	; 0x30e6 <__udivmodsi4_loop>
    310c:	60 95       	com	r22
    310e:	70 95       	com	r23
    3110:	80 95       	com	r24
    3112:	90 95       	com	r25
    3114:	9b 01       	movw	r18, r22
    3116:	ac 01       	movw	r20, r24
    3118:	bd 01       	movw	r22, r26
    311a:	cf 01       	movw	r24, r30
    311c:	08 95       	ret

0000311e <__divmodsi4>:
    311e:	05 2e       	mov	r0, r21
    3120:	97 fb       	bst	r25, 7
    3122:	1e f4       	brtc	.+6      	; 0x312a <__divmodsi4+0xc>
    3124:	00 94       	com	r0
    3126:	0e 94 a6 18 	call	0x314c	; 0x314c <__negsi2>
    312a:	57 fd       	sbrc	r21, 7
    312c:	07 d0       	rcall	.+14     	; 0x313c <__divmodsi4_neg2>
    312e:	0e 94 6d 18 	call	0x30da	; 0x30da <__udivmodsi4>
    3132:	07 fc       	sbrc	r0, 7
    3134:	03 d0       	rcall	.+6      	; 0x313c <__divmodsi4_neg2>
    3136:	4e f4       	brtc	.+18     	; 0x314a <__divmodsi4_exit>
    3138:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__negsi2>

0000313c <__divmodsi4_neg2>:
    313c:	50 95       	com	r21
    313e:	40 95       	com	r20
    3140:	30 95       	com	r19
    3142:	21 95       	neg	r18
    3144:	3f 4f       	sbci	r19, 0xFF	; 255
    3146:	4f 4f       	sbci	r20, 0xFF	; 255
    3148:	5f 4f       	sbci	r21, 0xFF	; 255

0000314a <__divmodsi4_exit>:
    314a:	08 95       	ret

0000314c <__negsi2>:
    314c:	90 95       	com	r25
    314e:	80 95       	com	r24
    3150:	70 95       	com	r23
    3152:	61 95       	neg	r22
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	8f 4f       	sbci	r24, 0xFF	; 255
    3158:	9f 4f       	sbci	r25, 0xFF	; 255
    315a:	08 95       	ret

0000315c <__tablejump2__>:
    315c:	ee 0f       	add	r30, r30
    315e:	ff 1f       	adc	r31, r31

00003160 <__tablejump__>:
    3160:	05 90       	lpm	r0, Z+
    3162:	f4 91       	lpm	r31, Z
    3164:	e0 2d       	mov	r30, r0
    3166:	09 94       	ijmp

00003168 <__udivmodhi4>:
    3168:	aa 1b       	sub	r26, r26
    316a:	bb 1b       	sub	r27, r27
    316c:	51 e1       	ldi	r21, 0x11	; 17
    316e:	07 c0       	rjmp	.+14     	; 0x317e <__udivmodhi4_ep>

00003170 <__udivmodhi4_loop>:
    3170:	aa 1f       	adc	r26, r26
    3172:	bb 1f       	adc	r27, r27
    3174:	a6 17       	cp	r26, r22
    3176:	b7 07       	cpc	r27, r23
    3178:	10 f0       	brcs	.+4      	; 0x317e <__udivmodhi4_ep>
    317a:	a6 1b       	sub	r26, r22
    317c:	b7 0b       	sbc	r27, r23

0000317e <__udivmodhi4_ep>:
    317e:	88 1f       	adc	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	5a 95       	dec	r21
    3184:	a9 f7       	brne	.-22     	; 0x3170 <__udivmodhi4_loop>
    3186:	80 95       	com	r24
    3188:	90 95       	com	r25
    318a:	bc 01       	movw	r22, r24
    318c:	cd 01       	movw	r24, r26
    318e:	08 95       	ret

00003190 <strlen>:
    3190:	fc 01       	movw	r30, r24
    3192:	01 90       	ld	r0, Z+
    3194:	00 20       	and	r0, r0
    3196:	e9 f7       	brne	.-6      	; 0x3192 <strlen+0x2>
    3198:	80 95       	com	r24
    319a:	90 95       	com	r25
    319c:	8e 0f       	add	r24, r30
    319e:	9f 1f       	adc	r25, r31
    31a0:	08 95       	ret

000031a2 <_exit>:
    31a2:	f8 94       	cli

000031a4 <__stop_program>:
    31a4:	ff cf       	rjmp	.-2      	; 0x31a4 <__stop_program>
