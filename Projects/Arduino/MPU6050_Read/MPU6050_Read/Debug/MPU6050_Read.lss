
MPU6050_Read.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00005e96  00005f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000207  0080015a  0080015a  00005f84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005f84  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000af0  00000000  00000000  00005fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00011da2  00000000  00000000  00006aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011c8  00000000  00000000  00018846  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002716  00000000  00000000  00019a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000028b4  00000000  00000000  0001c124  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000064bb  00000000  00000000  0001e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ca7a  00000000  00000000  00024e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b40  00000000  00000000  0003190d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__ctors_end>
       4:	0c 94 c0 28 	jmp	0x5180	; 0x5180 <__vector_1>
       8:	0c 94 f6 28 	jmp	0x51ec	; 0x51ec <__vector_2>
       c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      10:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      14:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      18:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      1c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      20:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      24:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      28:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      2c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      30:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      34:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      38:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      3c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      40:	0c 94 2c 29 	jmp	0x5258	; 0x5258 <__vector_16>
      44:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      48:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__vector_18>
      4c:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__vector_19>
      50:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      54:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      58:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      5c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      60:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__vector_24>
      64:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      68:	a5 13       	cpse	r26, r21
      6a:	a9 13       	cpse	r26, r25
      6c:	a9 13       	cpse	r26, r25
      6e:	a9 13       	cpse	r26, r25
      70:	a9 13       	cpse	r26, r25
      72:	a9 13       	cpse	r26, r25
      74:	a9 13       	cpse	r26, r25
      76:	a9 13       	cpse	r26, r25
      78:	b7 12       	cpse	r11, r23
      7a:	a9 13       	cpse	r26, r25
      7c:	a9 13       	cpse	r26, r25
      7e:	a9 13       	cpse	r26, r25
      80:	a9 13       	cpse	r26, r25
      82:	a9 13       	cpse	r26, r25
      84:	a9 13       	cpse	r26, r25
      86:	a9 13       	cpse	r26, r25
      88:	b7 12       	cpse	r11, r23
      8a:	a9 13       	cpse	r26, r25
      8c:	a9 13       	cpse	r26, r25
      8e:	a9 13       	cpse	r26, r25
      90:	a9 13       	cpse	r26, r25
      92:	a9 13       	cpse	r26, r25
      94:	a9 13       	cpse	r26, r25
      96:	a9 13       	cpse	r26, r25
      98:	bf 12       	cpse	r11, r31
      9a:	a9 13       	cpse	r26, r25
      9c:	a9 13       	cpse	r26, r25
      9e:	a9 13       	cpse	r26, r25
      a0:	a9 13       	cpse	r26, r25
      a2:	a9 13       	cpse	r26, r25
      a4:	a9 13       	cpse	r26, r25
      a6:	a9 13       	cpse	r26, r25
      a8:	e5 12       	cpse	r14, r21
      aa:	a9 13       	cpse	r26, r25
      ac:	a9 13       	cpse	r26, r25
      ae:	a9 13       	cpse	r26, r25
      b0:	a9 13       	cpse	r26, r25
      b2:	a9 13       	cpse	r26, r25
      b4:	a9 13       	cpse	r26, r25
      b6:	a9 13       	cpse	r26, r25
      b8:	bf 12       	cpse	r11, r31
      ba:	a9 13       	cpse	r26, r25
      bc:	a9 13       	cpse	r26, r25
      be:	a9 13       	cpse	r26, r25
      c0:	a9 13       	cpse	r26, r25
      c2:	a9 13       	cpse	r26, r25
      c4:	a9 13       	cpse	r26, r25
      c6:	a9 13       	cpse	r26, r25
      c8:	eb 12       	cpse	r14, r27
      ca:	a9 13       	cpse	r26, r25
      cc:	a9 13       	cpse	r26, r25
      ce:	a9 13       	cpse	r26, r25
      d0:	a9 13       	cpse	r26, r25
      d2:	a9 13       	cpse	r26, r25
      d4:	a9 13       	cpse	r26, r25
      d6:	a9 13       	cpse	r26, r25
      d8:	f1 12       	cpse	r15, r17
      da:	a9 13       	cpse	r26, r25
      dc:	a9 13       	cpse	r26, r25
      de:	a9 13       	cpse	r26, r25
      e0:	a9 13       	cpse	r26, r25
      e2:	a9 13       	cpse	r26, r25
      e4:	a9 13       	cpse	r26, r25
      e6:	a9 13       	cpse	r26, r25
      e8:	03 13       	cpse	r16, r19
      ea:	a9 13       	cpse	r26, r25
      ec:	a9 13       	cpse	r26, r25
      ee:	a9 13       	cpse	r26, r25
      f0:	a9 13       	cpse	r26, r25
      f2:	a9 13       	cpse	r26, r25
      f4:	a9 13       	cpse	r26, r25
      f6:	a9 13       	cpse	r26, r25
      f8:	2d 13       	cpse	r18, r29
      fa:	a9 13       	cpse	r26, r25
      fc:	a9 13       	cpse	r26, r25
      fe:	a9 13       	cpse	r26, r25
     100:	a9 13       	cpse	r26, r25
     102:	a9 13       	cpse	r26, r25
     104:	a9 13       	cpse	r26, r25
     106:	a9 13       	cpse	r26, r25
     108:	f7 12       	cpse	r15, r23
     10a:	a9 13       	cpse	r26, r25
     10c:	a9 13       	cpse	r26, r25
     10e:	a9 13       	cpse	r26, r25
     110:	a9 13       	cpse	r26, r25
     112:	a9 13       	cpse	r26, r25
     114:	a9 13       	cpse	r26, r25
     116:	a9 13       	cpse	r26, r25
     118:	11 13       	cpse	r17, r17
     11a:	a9 13       	cpse	r26, r25
     11c:	a9 13       	cpse	r26, r25
     11e:	a9 13       	cpse	r26, r25
     120:	a9 13       	cpse	r26, r25
     122:	a9 13       	cpse	r26, r25
     124:	a9 13       	cpse	r26, r25
     126:	a9 13       	cpse	r26, r25
     128:	30 13       	cpse	r19, r16
     12a:	a9 13       	cpse	r26, r25
     12c:	a9 13       	cpse	r26, r25
     12e:	a9 13       	cpse	r26, r25
     130:	a9 13       	cpse	r26, r25
     132:	a9 13       	cpse	r26, r25
     134:	a9 13       	cpse	r26, r25
     136:	a9 13       	cpse	r26, r25
     138:	30 13       	cpse	r19, r16
     13a:	a9 13       	cpse	r26, r25
     13c:	a9 13       	cpse	r26, r25
     13e:	a9 13       	cpse	r26, r25
     140:	a9 13       	cpse	r26, r25
     142:	a9 13       	cpse	r26, r25
     144:	a9 13       	cpse	r26, r25
     146:	a9 13       	cpse	r26, r25
     148:	30 13       	cpse	r19, r16
     14a:	a9 13       	cpse	r26, r25
     14c:	a9 13       	cpse	r26, r25
     14e:	a9 13       	cpse	r26, r25
     150:	a9 13       	cpse	r26, r25
     152:	a9 13       	cpse	r26, r25
     154:	a9 13       	cpse	r26, r25
     156:	a9 13       	cpse	r26, r25
     158:	30 13       	cpse	r19, r16
     15a:	a9 13       	cpse	r26, r25
     15c:	a9 13       	cpse	r26, r25
     15e:	a9 13       	cpse	r26, r25
     160:	a9 13       	cpse	r26, r25
     162:	a9 13       	cpse	r26, r25
     164:	a9 13       	cpse	r26, r25
     166:	a9 13       	cpse	r26, r25
     168:	39 13       	cpse	r19, r25
     16a:	a9 13       	cpse	r26, r25
     16c:	a9 13       	cpse	r26, r25
     16e:	a9 13       	cpse	r26, r25
     170:	a9 13       	cpse	r26, r25
     172:	a9 13       	cpse	r26, r25
     174:	a9 13       	cpse	r26, r25
     176:	a9 13       	cpse	r26, r25
     178:	6c 13       	cpse	r22, r28
     17a:	a9 13       	cpse	r26, r25
     17c:	a9 13       	cpse	r26, r25
     17e:	a9 13       	cpse	r26, r25
     180:	a9 13       	cpse	r26, r25
     182:	a9 13       	cpse	r26, r25
     184:	a9 13       	cpse	r26, r25
     186:	a9 13       	cpse	r26, r25
     188:	39 13       	cpse	r19, r25
     18a:	a9 13       	cpse	r26, r25
     18c:	a9 13       	cpse	r26, r25
     18e:	a9 13       	cpse	r26, r25
     190:	a9 13       	cpse	r26, r25
     192:	a9 13       	cpse	r26, r25
     194:	a9 13       	cpse	r26, r25
     196:	a9 13       	cpse	r26, r25
     198:	6c 13       	cpse	r22, r28
     19a:	a9 13       	cpse	r26, r25
     19c:	a9 13       	cpse	r26, r25
     19e:	a9 13       	cpse	r26, r25
     1a0:	a9 13       	cpse	r26, r25
     1a2:	a9 13       	cpse	r26, r25
     1a4:	a9 13       	cpse	r26, r25
     1a6:	a9 13       	cpse	r26, r25
     1a8:	51 13       	cpse	r21, r17
     1aa:	a9 13       	cpse	r26, r25
     1ac:	a9 13       	cpse	r26, r25
     1ae:	a9 13       	cpse	r26, r25
     1b0:	a9 13       	cpse	r26, r25
     1b2:	a9 13       	cpse	r26, r25
     1b4:	a9 13       	cpse	r26, r25
     1b6:	a9 13       	cpse	r26, r25
     1b8:	70 13       	cpse	r23, r16
     1ba:	a9 13       	cpse	r26, r25
     1bc:	a9 13       	cpse	r26, r25
     1be:	a9 13       	cpse	r26, r25
     1c0:	a9 13       	cpse	r26, r25
     1c2:	a9 13       	cpse	r26, r25
     1c4:	a9 13       	cpse	r26, r25
     1c6:	a9 13       	cpse	r26, r25
     1c8:	70 13       	cpse	r23, r16
     1ca:	a9 13       	cpse	r26, r25
     1cc:	a9 13       	cpse	r26, r25
     1ce:	a9 13       	cpse	r26, r25
     1d0:	a9 13       	cpse	r26, r25
     1d2:	a9 13       	cpse	r26, r25
     1d4:	a9 13       	cpse	r26, r25
     1d6:	a9 13       	cpse	r26, r25
     1d8:	85 13       	cpse	r24, r21
     1da:	a9 13       	cpse	r26, r25
     1dc:	a9 13       	cpse	r26, r25
     1de:	a9 13       	cpse	r26, r25
     1e0:	a9 13       	cpse	r26, r25
     1e2:	a9 13       	cpse	r26, r25
     1e4:	a9 13       	cpse	r26, r25
     1e6:	a9 13       	cpse	r26, r25
     1e8:	9f 13       	cpse	r25, r31
     1ea:	a9 13       	cpse	r26, r25
     1ec:	a9 13       	cpse	r26, r25
     1ee:	a9 13       	cpse	r26, r25
     1f0:	a9 13       	cpse	r26, r25
     1f2:	a9 13       	cpse	r26, r25
     1f4:	a9 13       	cpse	r26, r25
     1f6:	a9 13       	cpse	r26, r25
     1f8:	9f 13       	cpse	r25, r31

000001fa <__trampolines_end>:
     1fa:	46 49       	sbci	r20, 0x96	; 150
     1fc:	46 4f       	sbci	r20, 0xF6	; 246
     1fe:	20 6f       	ori	r18, 0xF0	; 240
     200:	76 65       	ori	r23, 0x56	; 86
     202:	72 66       	ori	r23, 0x62	; 98
     204:	6c 6f       	ori	r22, 0xFC	; 252
     206:	77 21       	and	r23, r7
	...

00000209 <_ZZ5setupE3__c_9>:
     209:	29 00                                               ).

0000020b <_ZZ5setupE3__c_8>:
     20b:	44 4d 50 20 49 6e 69 74 69 61 6c 69 7a 61 74 69     DMP Initializati
     21b:	6f 6e 20 66 61 69 6c 65 64 20 28 63 6f 64 65 20     on failed (code 
	...

0000022c <_ZZ5setupE3__c_7>:
     22c:	44 4d 50 20 72 65 61 64 79 21 20 57 61 69 74 69     DMP ready! Waiti
     23c:	6e 67 20 66 6f 72 20 66 69 72 73 74 20 69 6e 74     ng for first int
     24c:	65 72 72 75 70 74 2e 2e 2e 00                       errupt....

00000256 <_ZZ5setupE3__c_6>:
     256:	45 6e 61 62 6c 69 6e 67 20 69 6e 74 65 72 72 75     Enabling interru
     266:	70 74 20 64 65 74 65 63 74 69 6f 6e 20 28 41 72     pt detection (Ar
     276:	64 75 69 6e 6f 20 65 78 74 65 72 6e 61 6c 20 69     duino external i
     286:	6e 74 65 72 72 75 70 74 20 30 29 2e 2e 2e 00        nterrupt 0)....

00000295 <_ZZ5setupE3__c_5>:
     295:	45 6e 61 62 6c 69 6e 67 20 44 4d 50 2e 2e 2e 00     Enabling DMP....

000002a5 <_ZZ5setupE3__c_4>:
     2a5:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 44 4d 50     Initializing DMP
     2b5:	2e 2e 2e 00                                         ....

000002b9 <_ZZ5setupE3__c_3>:
     2b9:	0a 53 65 6e 64 20 61 6e 79 20 63 68 61 72 61 63     .Send any charac
     2c9:	74 65 72 20 74 6f 20 62 65 67 69 6e 20 44 4d 50     ter to begin DMP
     2d9:	20 70 72 6f 67 72 61 6d 6d 69 6e 67 20 61 6e 64      programming and
     2e9:	20 64 65 6d 6f 3a 20 00                              demo: .

000002f1 <_ZZ5setupE3__c_2>:
     2f1:	4d 50 55 36 30 35 30 20 63 6f 6e 6e 65 63 74 69     MPU6050 connecti
     301:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

0000030b <_ZZ5setupE3__c_1>:
     30b:	4d 50 55 36 30 35 30 20 63 6f 6e 6e 65 63 74 69     MPU6050 connecti
     31b:	6f 6e 20 73 75 63 63 65 73 73 66 75 6c 00           on successful.

00000329 <_ZZ5setupE3__c_0>:
     329:	54 65 73 74 69 6e 67 20 64 65 76 69 63 65 20 63     Testing device c
     339:	6f 6e 6e 65 63 74 69 6f 6e 73 2e 2e 2e 00           onnections....

00000347 <_ZZ5setupE3__c>:
     347:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
     357:	20 64 65 76 69 63 65 73 2e 2e 2e 00                  devices....

00000363 <_ZZN7MPU605013dmpInitializeEvE3__c_66>:
     363:	45 52 52 4f 52 21 20 44 4d 50 20 63 6f 64 65 20     ERROR! DMP code 
     373:	76 65 72 69 66 69 63 61 74 69 6f 6e 20 66 61 69     verification fai
     383:	6c 65 64 2e 00                                      led..

00000388 <_ZZN7MPU605013dmpInitializeEvE3__c_65>:
     388:	45 52 52 4f 52 21 20 44 4d 50 20 63 6f 6e 66 69     ERROR! DMP confi
     398:	67 75 72 61 74 69 6f 6e 20 76 65 72 69 66 69 63     guration verific
     3a8:	61 74 69 6f 6e 20 66 61 69 6c 65 64 2e 00           ation failed..

000003b6 <_ZZN7MPU605013dmpInitializeEvE3__c_64>:
     3b6:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 20 61     Resetting FIFO a
     3c6:	6e 64 20 63 6c 65 61 72 69 6e 67 20 49 4e 54 20     nd clearing INT 
     3d6:	73 74 61 74 75 73 20 6f 6e 65 20 6c 61 73 74 20     status one last 
     3e6:	74 69 6d 65 2e 2e 2e 00                             time....

000003ee <_ZZN7MPU605013dmpInitializeEvE3__c_63>:
     3ee:	53 65 74 74 69 6e 67 20 75 70 20 69 6e 74 65 72     Setting up inter
     3fe:	6e 61 6c 20 34 32 2d 62 79 74 65 20 28 64 65 66     nal 42-byte (def
     40e:	61 75 6c 74 29 20 44 4d 50 20 70 61 63 6b 65 74     ault) DMP packet
     41e:	20 62 75 66 66 65 72 2e 2e 2e 00                     buffer....

00000429 <_ZZN7MPU605013dmpInitializeEvE3__c_62>:
     429:	44 69 73 61 62 6c 69 6e 67 20 44 4d 50 20 28 79     Disabling DMP (y
     439:	6f 75 20 74 75 72 6e 20 69 74 20 6f 6e 20 6c 61     ou turn it on la
     449:	74 65 72 29 2e 2e 2e 00                             ter)....

00000451 <_ZZN7MPU605013dmpInitializeEvE3__c_61>:
     451:	44 4d 50 20 69 73 20 67 6f 6f 64 20 74 6f 20 67     DMP is good to g
     461:	6f 21 20 46 69 6e 61 6c 6c 79 2e 00                 o! Finally..

0000046d <_ZZN7MPU605013dmpInitializeEvE3__c_60>:
     46d:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     47d:	6d 6f 72 79 20 75 70 64 61 74 65 20 37 2f 37 20     mory update 7/7 
     48d:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     49d:	6e 29 2e 2e 2e 00                                   n)....

000004a3 <_ZZN7MPU605013dmpInitializeEvE3__c_59>:
     4a3:	43 75 72 72 65 6e 74 20 69 6e 74 65 72 72 75 70     Current interrup
     4b3:	74 20 73 74 61 74 75 73 3d 00                       t status=.

000004bd <_ZZN7MPU605013dmpInitializeEvE3__c_58>:
     4bd:	52 65 61 64 69 6e 67 20 69 6e 74 65 72 72 75 70     Reading interrup
     4cd:	74 20 73 74 61 74 75 73 2e 2e 2e 00                 t status....

000004d9 <_ZZN7MPU605013dmpInitializeEvE3__c_57>:
     4d9:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 64 61 74     Reading FIFO dat
     4e9:	61 2e 2e 2e 00                                      a....

000004ee <_ZZN7MPU605013dmpInitializeEvE3__c_56>:
     4ee:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     4fe:	6e 74 3d 00                                         nt=.

00000502 <_ZZN7MPU605013dmpInitializeEvE3__c_55>:
     502:	57 61 69 74 69 6e 67 20 66 6f 72 20 46 49 46 4f     Waiting for FIFO
     512:	20 63 6f 75 6e 74 20 3e 20 32 2e 2e 2e 00            count > 2....

00000520 <_ZZN7MPU605013dmpInitializeEvE3__c_54>:
     520:	52 65 61 64 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Reading final me
     530:	6d 6f 72 79 20 75 70 64 61 74 65 20 36 2f 37 20     mory update 6/7 
     540:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     550:	6e 29 2e 2e 2e 00                                   n)....

00000556 <_ZZN7MPU605013dmpInitializeEvE3__c_53>:
     556:	43 75 72 72 65 6e 74 20 69 6e 74 65 72 72 75 70     Current interrup
     566:	74 20 73 74 61 74 75 73 3d 00                       t status=.

00000570 <_ZZN7MPU605013dmpInitializeEvE3__c_52>:
     570:	52 65 61 64 69 6e 67 20 69 6e 74 65 72 72 75 70     Reading interrup
     580:	74 20 73 74 61 74 75 73 2e 2e 2e 00                 t status....

0000058c <_ZZN7MPU605013dmpInitializeEvE3__c_51>:
     58c:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 64 61 74     Reading FIFO dat
     59c:	61 2e 2e 2e 00                                      a....

000005a1 <_ZZN7MPU605013dmpInitializeEvE3__c_50>:
     5a1:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     5b1:	6e 74 3d 00                                         nt=.

000005b5 <_ZZN7MPU605013dmpInitializeEvE3__c_49>:
     5b5:	57 61 69 74 69 6e 67 20 66 6f 72 20 46 49 46 4f     Waiting for FIFO
     5c5:	20 63 6f 75 6e 74 20 3e 20 32 2e 2e 2e 00            count > 2....

000005d3 <_ZZN7MPU605013dmpInitializeEvE3__c_48>:
     5d3:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     5e3:	6d 6f 72 79 20 75 70 64 61 74 65 20 35 2f 37 20     mory update 5/7 
     5f3:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     603:	6e 29 2e 2e 2e 00                                   n)....

00000609 <_ZZN7MPU605013dmpInitializeEvE3__c_47>:
     609:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     619:	6d 6f 72 79 20 75 70 64 61 74 65 20 34 2f 37 20     mory update 4/7 
     629:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     639:	6e 29 2e 2e 2e 00                                   n)....

0000063f <_ZZN7MPU605013dmpInitializeEvE3__c_46>:
     63f:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     64f:	6d 6f 72 79 20 75 70 64 61 74 65 20 33 2f 37 20     mory update 3/7 
     65f:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     66f:	6e 29 2e 2e 2e 00                                   n)....

00000675 <_ZZN7MPU605013dmpInitializeEvE3__c_45>:
     675:	52 65 73 65 74 74 69 6e 67 20 44 4d 50 2e 2e 2e     Resetting DMP...
	...

00000686 <_ZZN7MPU605013dmpInitializeEvE3__c_44>:
     686:	45 6e 61 62 6c 69 6e 67 20 44 4d 50 2e 2e 2e 00     Enabling DMP....

00000696 <_ZZN7MPU605013dmpInitializeEvE3__c_43>:
     696:	45 6e 61 62 6c 69 6e 67 20 46 49 46 4f 2e 2e 2e     Enabling FIFO...
	...

000006a7 <_ZZN7MPU605013dmpInitializeEvE3__c_42>:
     6a7:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 2e 2e     Resetting FIFO..
     6b7:	2e 00                                               ..

000006b9 <_ZZN7MPU605013dmpInitializeEvE3__c_41>:
     6b9:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     6c9:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 64 75     ion detection du
     6d9:	72 61 74 69 6f 6e 20 74 6f 20 30 2e 2e 2e 00        ration to 0....

000006e8 <_ZZN7MPU605013dmpInitializeEvE3__c_40>:
     6e8:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     6f8:	65 74 65 63 74 69 6f 6e 20 64 75 72 61 74 69 6f     etection duratio
     708:	6e 20 74 6f 20 38 30 2e 2e 2e 00                    n to 80....

00000713 <_ZZN7MPU605013dmpInitializeEvE3__c_39>:
     713:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     723:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 74 68     ion detection th
     733:	72 65 73 68 6f 6c 64 20 74 6f 20 31 35 36 2e 2e     reshold to 156..
     743:	2e 00                                               ..

00000745 <_ZZN7MPU605013dmpInitializeEvE3__c_38>:
     745:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     755:	65 74 65 63 74 69 6f 6e 20 74 68 72 65 73 68 6f     etection thresho
     765:	6c 64 20 74 6f 20 32 2e 2e 2e 00                    ld to 2....

00000770 <_ZZN7MPU605013dmpInitializeEvE3__c_37>:
     770:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     780:	6e 74 3d 00                                         nt=.

00000784 <_ZZN7MPU605013dmpInitializeEvE3__c_36>:
     784:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 63 6f 75     Reading FIFO cou
     794:	6e 74 2e 2e 2e 00                                   nt....

0000079a <_ZZN7MPU605013dmpInitializeEvE3__c_35>:
     79a:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 2e 2e     Resetting FIFO..
     7aa:	2e 00                                               ..

000007ac <_ZZN7MPU605013dmpInitializeEvE3__c_34>:
     7ac:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     7bc:	6d 6f 72 79 20 75 70 64 61 74 65 20 32 2f 37 20     mory update 2/7 
     7cc:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     7dc:	6e 29 2e 2e 2e 00                                   n)....

000007e2 <_ZZN7MPU605013dmpInitializeEvE3__c_33>:
     7e2:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     7f2:	6d 6f 72 79 20 75 70 64 61 74 65 20 31 2f 37 20     mory update 1/7 
     802:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     812:	6e 29 2e 2e 2e 00                                   n)....

00000818 <_ZZN7MPU605013dmpInitializeEvE3__c_32>:
     818:	53 65 74 74 69 6e 67 20 58 2f 59 2f 5a 20 67 79     Setting X/Y/Z gy
     828:	72 6f 20 6f 66 66 73 65 74 20 54 43 73 20 74 6f     ro offset TCs to
     838:	20 70 72 65 76 69 6f 75 73 20 76 61 6c 75 65 73      previous values
     848:	2e 2e 2e 00                                         ....

0000084c <_ZZN7MPU605013dmpInitializeEvE3__c_31>:
     84c:	43 6c 65 61 72 69 6e 67 20 4f 54 50 20 42 61 6e     Clearing OTP Ban
     85c:	6b 20 66 6c 61 67 2e 2e 2e 00                       k flag....

00000866 <_ZZN7MPU605013dmpInitializeEvE3__c_30>:
     866:	53 65 74 74 69 6e 67 20 44 4d 50 20 63 6f 6e 66     Setting DMP conf
     876:	69 67 75 72 61 74 69 6f 6e 20 62 79 74 65 73 20     iguration bytes 
     886:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     896:	6e 29 2e 2e 2e 00                                   n)....

0000089c <_ZZN7MPU605013dmpInitializeEvE3__c_29>:
     89c:	53 65 74 74 69 6e 67 20 67 79 72 6f 20 73 65 6e     Setting gyro sen
     8ac:	73 69 74 69 76 69 74 79 20 74 6f 20 2b 2f 2d 20     sitivity to +/- 
     8bc:	32 30 30 30 20 64 65 67 2f 73 65 63 2e 2e 2e 00     2000 deg/sec....

000008cc <_ZZN7MPU605013dmpInitializeEvE3__c_28>:
     8cc:	53 65 74 74 69 6e 67 20 44 4c 50 46 20 62 61 6e     Setting DLPF ban
     8dc:	64 77 69 64 74 68 20 74 6f 20 34 32 48 7a 2e 2e     dwidth to 42Hz..
     8ec:	2e 00                                               ..

000008ee <_ZZN7MPU605013dmpInitializeEvE3__c_27>:
     8ee:	53 65 74 74 69 6e 67 20 65 78 74 65 72 6e 61 6c     Setting external
     8fe:	20 66 72 61 6d 65 20 73 79 6e 63 20 74 6f 20 54      frame sync to T
     90e:	45 4d 50 5f 4f 55 54 5f 4c 5b 30 5d 2e 2e 2e 00     EMP_OUT_L[0]....

0000091e <_ZZN7MPU605013dmpInitializeEvE3__c_26>:
     91e:	53 65 74 74 69 6e 67 20 73 61 6d 70 6c 65 20 72     Setting sample r
     92e:	61 74 65 20 74 6f 20 32 30 30 48 7a 2e 2e 2e 00     ate to 200Hz....

0000093e <_ZZN7MPU605013dmpInitializeEvE3__c_25>:
     93e:	53 65 74 74 69 6e 67 20 44 4d 50 20 61 6e 64 20     Setting DMP and 
     94e:	46 49 46 4f 5f 4f 46 4c 4f 57 20 69 6e 74 65 72     FIFO_OFLOW inter
     95e:	72 75 70 74 73 20 65 6e 61 62 6c 65 64 2e 2e 2e     rupts enabled...
	...

0000096f <_ZZN7MPU605013dmpInitializeEvE3__c_24>:
     96f:	53 65 74 74 69 6e 67 20 63 6c 6f 63 6b 20 73 6f     Setting clock so
     97f:	75 72 63 65 20 74 6f 20 5a 20 47 79 72 6f 2e 2e     urce to Z Gyro..
     98f:	2e 00                                               ..

00000991 <_ZZN7MPU605013dmpInitializeEvE3__c_23>:
     991:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 6e     Success! DMP con
     9a1:	66 69 67 75 72 61 74 69 6f 6e 20 77 72 69 74 74     figuration writt
     9b1:	65 6e 20 61 6e 64 20 76 65 72 69 66 69 65 64 2e     en and verified.
	...

000009c2 <_ZZN7MPU605013dmpInitializeEvE3__c_22>:
     9c2:	20 62 79 74 65 73 20 69 6e 20 63 6f 6e 66 69 67      bytes in config
     9d2:	20 64 65 66 29 00                                    def).

000009d8 <_ZZN7MPU605013dmpInitializeEvE3__c_21>:
     9d8:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 6e 66     Writing DMP conf
     9e8:	69 67 75 72 61 74 69 6f 6e 20 74 6f 20 4d 50 55     iguration to MPU
     9f8:	20 6d 65 6d 6f 72 79 20 62 61 6e 6b 73 20 28 00      memory banks (.

00000a08 <_ZZN7MPU605013dmpInitializeEvE3__c_20>:
     a08:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 64     Success! DMP cod
     a18:	65 20 77 72 69 74 74 65 6e 20 61 6e 64 20 76 65     e written and ve
     a28:	72 69 66 69 65 64 2e 00                             rified..

00000a30 <_ZZN7MPU605013dmpInitializeEvE3__c_19>:
     a30:	20 62 79 74 65 73 29 00                              bytes).

00000a38 <_ZZN7MPU605013dmpInitializeEvE3__c_18>:
     a38:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 64 65     Writing DMP code
     a48:	20 74 6f 20 4d 50 55 20 6d 65 6d 6f 72 79 20 62      to MPU memory b
     a58:	61 6e 6b 73 20 28 00                                anks (.

00000a5f <_ZZN7MPU605013dmpInitializeEvE3__c_17>:
     a5f:	52 65 73 65 74 74 69 6e 67 20 49 32 43 20 4d 61     Resetting I2C Ma
     a6f:	73 74 65 72 20 63 6f 6e 74 72 6f 6c 2e 2e 2e 00     ster control....

00000a7f <_ZZN7MPU605013dmpInitializeEvE3__c_16>:
     a7f:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     a8f:	61 64 64 72 65 73 73 20 74 6f 20 30 78 36 38 20     address to 0x68 
     a9f:	28 73 65 6c 66 29 2e 2e 2e 00                       (self)....

00000aa9 <_ZZN7MPU605013dmpInitializeEvE3__c_15>:
     aa9:	44 69 73 61 62 6c 69 6e 67 20 49 32 43 20 4d 61     Disabling I2C Ma
     ab9:	73 74 65 72 20 6d 6f 64 65 2e 2e 2e 00              ster mode....

00000ac6 <_ZZN7MPU605013dmpInitializeEvE3__c_14>:
     ac6:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     ad6:	61 64 64 72 65 73 73 20 74 6f 20 30 78 37 46 2e     address to 0x7F.
     ae6:	2e 2e 00                                            ...

00000ae9 <_ZZN7MPU605013dmpInitializeEvE3__c_13>:
     ae9:	5a 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     Z gyro offset = 
	...

00000afa <_ZZN7MPU605013dmpInitializeEvE3__c_12>:
     afa:	59 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     Y gyro offset = 
	...

00000b0b <_ZZN7MPU605013dmpInitializeEvE3__c_11>:
     b0b:	58 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     X gyro offset = 
	...

00000b1c <_ZZN7MPU605013dmpInitializeEvE3__c_10>:
     b1c:	52 65 61 64 69 6e 67 20 67 79 72 6f 20 6f 66 66     Reading gyro off
     b2c:	73 65 74 20 54 43 20 76 61 6c 75 65 73 2e 2e 2e     set TC values...
	...

00000b3d <_ZZN7MPU605013dmpInitializeEvE3__c_9>:
     b3d:	69 6e 76 61 6c 69 64 21 00                          invalid!.

00000b46 <_ZZN7MPU605013dmpInitializeEvE3__c_8>:
     b46:	76 61 6c 69 64 21 00                                valid!.

00000b4d <_ZZN7MPU605013dmpInitializeEvE3__c_7>:
     b4d:	4f 54 50 20 62 61 6e 6b 20 69 73 20 00              OTP bank is .

00000b5a <_ZZN7MPU605013dmpInitializeEvE3__c_6>:
     b5a:	52 65 61 64 69 6e 67 20 4f 54 50 20 62 61 6e 6b     Reading OTP bank
     b6a:	20 76 61 6c 69 64 20 66 6c 61 67 2e 2e 2e 00         valid flag....

00000b79 <_ZZN7MPU605013dmpInitializeEvE3__c_5>:
     b79:	52 65 73 65 74 74 69 6e 67 20 6d 65 6d 6f 72 79     Resetting memory
     b89:	20 62 61 6e 6b 20 73 65 6c 65 63 74 69 6f 6e 20      bank selection 
     b99:	74 6f 20 30 2e 2e 2e 00                             to 0....

00000ba1 <_ZZN7MPU605013dmpInitializeEvE3__c_4>:
     ba1:	52 65 76 69 73 69 6f 6e 20 40 20 75 73 65 72 5b     Revision @ user[
     bb1:	31 36 5d 5b 36 5d 20 3d 20 00                       16][6] = .

00000bbb <_ZZN7MPU605013dmpInitializeEvE3__c_3>:
     bbb:	43 68 65 63 6b 69 6e 67 20 68 61 72 64 77 61 72     Checking hardwar
     bcb:	65 20 72 65 76 69 73 69 6f 6e 2e 2e 2e 00           e revision....

00000bd9 <_ZZN7MPU605013dmpInitializeEvE3__c_2>:
     bd9:	53 65 6c 65 63 74 69 6e 67 20 6d 65 6d 6f 72 79     Selecting memory
     be9:	20 62 79 74 65 20 36 2e 2e 2e 00                     byte 6....

00000bf4 <_ZZN7MPU605013dmpInitializeEvE3__c_1>:
     bf4:	53 65 6c 65 63 74 69 6e 67 20 75 73 65 72 20 62     Selecting user b
     c04:	61 6e 6b 20 31 36 2e 2e 2e 00                       ank 16....

00000c0e <_ZZN7MPU605013dmpInitializeEvE3__c_0>:
     c0e:	44 69 73 61 62 6c 69 6e 67 20 73 6c 65 65 70 20     Disabling sleep 
     c1e:	6d 6f 64 65 2e 2e 2e 00                             mode....

00000c26 <_ZZN7MPU605013dmpInitializeEvE3__c>:
     c26:	0a 0a 52 65 73 65 74 74 69 6e 67 20 4d 50 55 36     ..Resetting MPU6
     c36:	30 35 30 2e 2e 2e 00                                050....

00000c3d <_ZL10dmpUpdates>:
     c3d:	01 b2 02 ff ff 01 90 04 09 23 a1 35 01 6a 02 06     .........#.5.j..
     c4d:	00 01 60 08 00 00 00 00 00 00 00 00 00 60 04 40     ..`..........`.@
     c5d:	00 00 00 01 62 02 00 00 00 60 04 00 40 00 00        ....b....`..@..

00000c6c <_ZL9dmpConfig>:
     c6c:	03 7b 03 4c cd 6c 03 ab 03 36 56 76 00 68 04 02     .{.L.l...6Vv.h..
     c7c:	cb 47 a2 02 18 04 00 05 8b c1 01 0c 04 00 00 00     .G..............
     c8c:	00 03 7f 06 0c c9 2c 97 97 97 03 89 03 26 46 66     ......,......&Ff
     c9c:	00 6c 02 20 00 02 40 04 00 00 00 00 02 44 04 00     .l. ..@......D..
     cac:	00 00 00 02 48 04 00 00 00 00 02 4c 04 00 00 00     ....H......L....
     cbc:	00 02 50 04 00 00 00 00 02 54 04 00 00 00 00 02     ..P......T......
     ccc:	58 04 00 00 00 00 02 5c 04 00 00 00 00 02 bc 04     X......\........
     cdc:	00 00 00 00 01 ec 04 00 00 40 00 03 7f 06 0c c9     .........@......
     cec:	2c 97 97 97 04 02 03 0d 35 5d 04 09 04 87 2d 35     ,.......5]....-5
     cfc:	3d 00 a3 01 00 00 00 00 01 07 86 01 fe 07 41 05     =.............A.
     d0c:	f1 20 28 30 38 07 7e 01 30 07 46 01 9a 07 47 04     . (08.~.0.F...G.
     d1c:	f1 28 30 38 07 6c 04 f1 28 30 38 02 16 02 00 01     .(08.l..(08.....

00000d2c <_ZL9dmpMemory>:
     d2c:	fb 00 00 3e 00 0b 00 36 00 01 00 02 00 03 00 00     ...>...6........
     d3c:	00 65 00 54 ff ef 00 00 fa 80 00 0b 12 82 00 01     .e.T............
     d4c:	00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     d5c:	00 28 00 00 ff ff 45 81 ff ff fa 72 00 00 00 00     .(....E....r....
     d6c:	00 00 03 e8 00 00 00 01 00 01 7f ff ff fe 80 01     ................
     d7c:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     d8c:	00 3e 03 30 40 00 00 00 02 ca e3 09 3e 80 00 00     .>.0@.......>...
     d9c:	20 00 00 00 00 00 00 00 40 00 00 00 60 00 00 00      .......@...`...
     dac:	41 ff 00 00 00 00 0b 2a 00 00 16 55 00 00 21 82     A......*...U..!.
     dbc:	fd 87 26 50 fd 80 00 00 00 1f 00 00 00 05 80 00     ..&P............
     dcc:	00 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00     ................
     ddc:	40 00 00 00 00 00 04 6f 00 02 65 32 00 00 5e c0     @......o..e2..^.
     dec:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     dfc:	fb 8c 6f 5d fd 5d 08 d9 00 7c 73 3b 00 6c 12 cc     ..o].]...|s;.l..
     e0c:	32 00 13 9d 32 00 d0 d6 32 00 08 00 40 00 01 f4     2...2...2...@...
     e1c:	ff e6 80 79 02 00 00 00 00 00 d0 d6 00 00 27 10     ...y..........'.
     e2c:	fb 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     e3c:	00 00 00 01 00 00 00 00 00 00 01 00 01 00 00 00     ................
     e4c:	00 00 fa 36 ff bc 30 8e 00 05 fb f0 ff d9 5b c8     ...6..0.......[.
     e5c:	ff d0 9a be 00 00 10 a9 ff f4 1e b2 00 ce bb f7     ................
     e6c:	00 00 00 01 00 00 00 04 00 02 00 02 02 00 00 0c     ................
     e7c:	ff c2 80 00 00 01 80 00 00 cf 80 00 40 00 00 00     ............@...
     e8c:	00 00 00 01 00 00 00 00 00 00 06 00 00 00 00 14     ................
	...
     ed0:	03 3f 68 b6 79 35 28 bc c6 7e d1 6c 80 00 00 00     .?h.y5(..~.l....
     ee0:	40 00 00 00 00 00 b2 6a 00 00 00 00 00 00 00 00     @......j........
     ef0:	00 00 00 00 00 00 3f f0 00 00 00 30 00 00 00 00     ......?....0....
	...
     f1c:	00 00 25 4d 00 2f 70 6d 00 00 05 ae 00 0c 02 d0     ..%M./pm........
     f2c:	00 00 00 00 00 65 00 54 ff ef 00 00 00 00 00 00     .....e.T........
     f3c:	00 00 01 00 00 44 00 00 00 00 0c 00 00 00 01 00     .....D..........
     f4c:	00 00 00 00 00 65 00 00 00 54 00 00 ff ef 00 00     .....e...T......
	...
     f6c:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     f7c:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     f8c:	00 00 00 01 00 00 00 02 00 00 00 00 00 00 00 00     ................
	...
     fbc:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     fe8:	40 00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00     @...............
	...
    102c:	d8 dc ba a2 f1 de b2 b8 b4 a8 81 91 f7 4a 90 7f     .............J..
    103c:	91 6a f3 f9 db a8 f9 b0 ba a0 80 f2 ce 81 f3 c2     .j..............
    104c:	f1 c1 f2 c3 f3 cc a2 b2 80 f1 c6 d8 80 ba a7 df     ................
    105c:	df df f2 a7 c3 cb c5 b6 f0 87 a2 94 24 48 70 3c     ............$Hp<
    106c:	95 40 68 34 58 9b 78 a2 f1 83 92 2d 55 7d d8 b1     .@h4X.x....-U}..
    107c:	b4 b8 a1 d0 91 80 f2 70 f3 70 f2 7c 80 a8 f1 01     .......p.p.|....
    108c:	b0 98 87 d9 43 d8 86 c9 88 ba a1 f2 0e b8 97 80     ....C...........
    109c:	f1 a9 df df df aa df df df f2 aa c5 cd c7 a9 0c     ................
    10ac:	c9 2c 97 97 97 97 f1 a9 89 26 46 66 b0 b4 ba 80     .,.......&Ff....
    10bc:	ac de f2 ca f1 b2 8c 02 a9 b6 98 00 89 0e 16 1e     ................
    10cc:	b8 a9 b4 99 2c 54 7c b0 8a a8 96 36 56 76 f1 b9     ....,T|....6Vv..
    10dc:	af b4 b0 83 c0 b8 a8 97 11 b1 8f 98 b9 af f0 24     ...............$
    10ec:	08 44 10 64 18 f1 a3 29 55 7d af 83 b5 93 af f0     .D.d...)U}......
    10fc:	00 28 50 f1 a3 86 9f 61 a6 da de df d9 fa a3 86     .(P....a........
    110c:	96 db 31 a6 d9 f8 df ba a6 8f c2 c5 c7 b2 8c c1     ..1.............
    111c:	b8 a2 df df df a3 df df df d8 d8 f1 b8 a8 b2 86     ................
    112c:	b4 98 0d 35 5d b8 aa 98 b0 87 2d 35 3d b2 b6 ba     ...5].....-5=...
    113c:	af 8c 96 19 8f 9f a7 0e 16 1e b4 9a b8 aa 87 2c     ...............,
    114c:	54 7c b9 a3 de df df a3 b1 80 f2 c4 cd c9 f1 b8     T|..............
    115c:	a9 b4 99 83 0d 35 5d 89 b9 a3 2d 55 7d b5 93 a3     .....5]...-U}...
    116c:	0e 16 1e a9 2c 54 7c b8 b4 b0 f1 97 83 a8 11 84     ....,T|.........
    117c:	a5 09 98 a3 83 f0 da 24 08 44 10 64 18 d8 f1 a5     .......$.D.d....
    118c:	29 55 7d a5 85 95 02 1a 2e 3a 56 5a 40 48 f9 f3     )U}......:VZ@H..
    119c:	a3 d9 f8 f0 98 83 24 08 44 10 64 18 97 82 a8 f1     ......$.D.d.....
    11ac:	11 f0 98 a2 24 08 44 10 64 18 da f3 de d8 83 a5     ....$.D.d.......
    11bc:	94 01 d9 a3 02 f1 a2 c3 c5 c7 d8 f1 84 92 a2 4d     ...............M
    11cc:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
    11dc:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 93 a3 4d     2.p].:.Xy.:.x..M
    11ec:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
    11fc:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 a8 8a 9a     2.p].:.Xy.:.x...
    120c:	f0 28 50 78 9e f3 88 18 f1 9f 1d 98 a8 d9 08 d8     .(Px............
    121c:	c8 9f 12 9e f3 15 a8 da 12 10 d8 f1 af c8 97 87     ................
    122c:	34 b5 b9 94 a4 21 f3 d9 22 d8 f2 2d f3 d9 2a d8     4....!.."..-..*.
    123c:	f2 35 f3 d9 32 d8 81 a4 60 60 61 d9 61 d8 6c 68     .5..2...``a.a.lh
    124c:	69 d9 69 d8 74 70 71 d9 71 d8 b1 a3 84 19 3d 5d     i.i.tpq.q.....=]
    125c:	a3 83 1a 3e 5e 93 10 30 81 10 11 b8 b0 af 8f 94     ...>^..0........
    126c:	f2 da 3e d8 b4 9a a8 87 29 da f8 d8 87 9a 35 da     ..>.....).....5.
    127c:	f8 d8 87 9a 3d da f8 d8 b1 b9 a4 98 85 02 2e 56     ....=..........V
    128c:	a5 81 00 0c 14 a3 97 b0 8a f1 2d d9 28 d8 4d d9     ..........-.(.M.
    129c:	48 d8 6d d9 68 d8 b1 84 0d da 0e d8 a3 29 83 da     H.m.h........)..
    12ac:	2c 0e d8 a3 84 49 83 da 2c 4c 0e d8 b8 b0 a8 8a     ,....I..,L......
    12bc:	9a f5 20 aa da df d8 a8 40 aa d0 da de d8 a8 60     .. .....@......`
    12cc:	aa da d0 df d8 f1 97 86 a8 31 9b 06 99 07 ab 97     .........1......
    12dc:	28 88 9b f0 0c 20 14 40 b8 b0 b4 a8 8c 9c f0 04     (.... .@........
    12ec:	28 51 79 1d 30 14 38 b2 82 ab d0 98 2c 50 50 78     (Qy.0.8.....,PPx
    12fc:	78 9b f1 1a b0 f0 8a 9c a8 29 51 79 8b 29 51 79     x........)Qy.)Qy
    130c:	8a 24 70 59 8b 20 58 71 8a 44 69 38 8b 39 40 68     .$pY. Xq.Di8.9@h
    131c:	8a 64 48 31 8b 30 49 60 a5 88 20 09 71 58 44 68     .dH1.0I`.. .qXDh
    132c:	11 39 64 49 30 19 f1 ac 00 2c 54 7c f0 8c a8 04     .9dI0....,T|....
    133c:	28 50 78 f1 88 97 26 a8 59 98 ac 8c 02 26 46 66     (Px...&.Y....&Ff
    134c:	f0 89 9c a8 29 51 79 24 70 59 44 69 38 64 48 31     ....)Qy$pYDi8dH1
    135c:	a9 88 09 20 59 70 ab 11 38 40 69 a8 19 31 48 60     ... Yp..8@i..1H`
    136c:	8c a8 3c 41 5c 20 7c 00 f1 87 98 19 86 a8 6e 76     ..<A\ |.......nv
    137c:	7e a9 99 88 2d 55 7d 9e b9 a3 8a 22 8a 6e 8a 56     ~...-U}....".n.V
    138c:	8a 5e 9f b1 83 06 26 46 66 0e 2e 4e 6e 9d b8 ad     .^....&Ff..Nn...
    139c:	00 2c 54 7c f2 b1 8c b4 99 b9 a3 2d 55 7d 81 91     .,T|.......-U}..
    13ac:	ac 38 ad 3a b5 83 91 ac 2d d9 28 d8 4d d9 48 d8     .8.:....-.(.M.H.
    13bc:	6d d9 68 d8 8c 9d ae 29 d9 04 ae d8 51 d9 04 ae     m.h....)....Q...
    13cc:	d8 79 d9 04 d8 81 f3 9d ad 00 8d ae 19 81 ad d9     .y..............
    13dc:	01 d8 f2 ae da 26 d8 8e 91 29 83 a7 d9 ad ad ad     .....&...)......
    13ec:	ad f3 2a d8 d8 f1 b0 ac 89 91 3e 5e 76 f3 ac 2e     ..*.......>^v...
    13fc:	2e f1 b1 8c 5a 9c ac 2c 28 28 28 9c ac 30 18 a8     ....Z..,(((..0..
    140c:	98 81 28 34 3c 97 24 a7 28 34 3c 9c 24 f2 b0 89     ..(4<.$.(4<.$...
    141c:	ac 91 2c 4c 6c 8a 9b 2d d9 d8 d8 51 d9 d8 d8 79     ..,Ll..-...Q...y
    142c:	d9 d8 d8 f1 9e 88 a3 31 da d8 d8 91 2d d9 28 d8     .......1....-.(.
    143c:	4d d9 48 d8 6d d9 68 d8 b1 83 93 35 3d 80 25 da     M.H.m.h....5=.%.
    144c:	d8 d8 85 69 da d8 d8 b4 93 81 a3 28 34 3c f3 ab     ...i.......(4<..
    145c:	8b f8 a3 91 b6 09 b4 d9 ab de fa b0 87 9c b9 a3     ................
    146c:	dd f1 a3 a3 a3 a3 95 f1 a3 a3 a3 9d f1 a3 a3 a3     ................
    147c:	a3 f2 a3 b4 90 80 f2 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    148c:	a3 b2 a3 a3 a3 a3 a3 a3 b0 87 b5 99 f1 a3 a3 a3     ................
    149c:	98 f1 a3 a3 a3 a3 97 a3 a3 a3 a3 f3 9b a3 a3 dc     ................
    14ac:	b9 a7 f1 26 26 26 d8 d8 ff                          ...&&&...

000014b5 <port_to_mode_PGM>:
    14b5:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000014bf <port_to_output_PGM>:
    14bf:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000014c9 <digital_pin_to_port_PGM>:
    14c9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    14d9:	03 03 03 03                                         ....

000014dd <digital_pin_to_bit_mask_PGM>:
    14dd:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    14ed:	04 08 10 20                                         ... 

000014f1 <digital_pin_to_timer_PGM>:
    14f1:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
    1501:	00 00 00 00 00                                      .....

00001506 <__ctors_start>:
    1506:	9b 11       	cpse	r25, r11
    1508:	16 1c       	adc	r1, r6
    150a:	20 23       	and	r18, r16

0000150c <__ctors_end>:
    150c:	11 24       	eor	r1, r1
    150e:	1f be       	out	0x3f, r1	; 63
    1510:	cf ef       	ldi	r28, 0xFF	; 255
    1512:	d8 e0       	ldi	r29, 0x08	; 8
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	cd bf       	out	0x3d, r28	; 61

00001518 <__do_copy_data>:
    1518:	11 e0       	ldi	r17, 0x01	; 1
    151a:	a0 e0       	ldi	r26, 0x00	; 0
    151c:	b1 e0       	ldi	r27, 0x01	; 1
    151e:	e6 e9       	ldi	r30, 0x96	; 150
    1520:	fe e5       	ldi	r31, 0x5E	; 94
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <__do_copy_data+0x10>
    1524:	05 90       	lpm	r0, Z+
    1526:	0d 92       	st	X+, r0
    1528:	aa 35       	cpi	r26, 0x5A	; 90
    152a:	b1 07       	cpc	r27, r17
    152c:	d9 f7       	brne	.-10     	; 0x1524 <__do_copy_data+0xc>

0000152e <__do_clear_bss>:
    152e:	23 e0       	ldi	r18, 0x03	; 3
    1530:	aa e5       	ldi	r26, 0x5A	; 90
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <.do_clear_bss_start>

00001536 <.do_clear_bss_loop>:
    1536:	1d 92       	st	X+, r1

00001538 <.do_clear_bss_start>:
    1538:	a1 36       	cpi	r26, 0x61	; 97
    153a:	b2 07       	cpc	r27, r18
    153c:	e1 f7       	brne	.-8      	; 0x1536 <.do_clear_bss_loop>

0000153e <__do_global_ctors>:
    153e:	15 e1       	ldi	r17, 0x15	; 21
    1540:	cc e0       	ldi	r28, 0x0C	; 12
    1542:	d5 e1       	ldi	r29, 0x15	; 21
    1544:	04 c0       	rjmp	.+8      	; 0x154e <__do_global_ctors+0x10>
    1546:	22 97       	sbiw	r28, 0x02	; 2
    1548:	fe 01       	movw	r30, r28
    154a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <__tablejump__>
    154e:	c6 30       	cpi	r28, 0x06	; 6
    1550:	d1 07       	cpc	r29, r17
    1552:	c9 f7       	brne	.-14     	; 0x1546 <__do_global_ctors+0x8>
    1554:	0e 94 04 1c 	call	0x3808	; 0x3808 <main>
    1558:	0c 94 49 2f 	jmp	0x5e92	; 0x5e92 <_exit>

0000155c <__bad_interrupt>:
    155c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001560 <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
    1560:	28 e6       	ldi	r18, 0x68	; 104
    1562:	fc 01       	movw	r30, r24
    1564:	20 83       	st	Z, r18
    1566:	08 95       	ret

00001568 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
    1568:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
    156a:	69 e1       	ldi	r22, 0x19	; 25
    156c:	fc 01       	movw	r30, r24
    156e:	80 81       	ld	r24, Z
    1570:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    1574:	08 95       	ret

00001576 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
    1576:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
    1578:	06 2f       	mov	r16, r22
    157a:	23 e0       	ldi	r18, 0x03	; 3
    157c:	45 e0       	ldi	r20, 0x05	; 5
    157e:	6a e1       	ldi	r22, 0x1A	; 26
    1580:	fc 01       	movw	r30, r24
    1582:	80 81       	ld	r24, Z
    1584:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
    158c:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
    158e:	06 2f       	mov	r16, r22
    1590:	23 e0       	ldi	r18, 0x03	; 3
    1592:	42 e0       	ldi	r20, 0x02	; 2
    1594:	6a e1       	ldi	r22, 0x1A	; 26
    1596:	fc 01       	movw	r30, r24
    1598:	80 81       	ld	r24, Z
    159a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
    15a2:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
    15a4:	06 2f       	mov	r16, r22
    15a6:	22 e0       	ldi	r18, 0x02	; 2
    15a8:	44 e0       	ldi	r20, 0x04	; 4
    15aa:	6b e1       	ldi	r22, 0x1B	; 27
    15ac:	fc 01       	movw	r30, r24
    15ae:	80 81       	ld	r24, Z
    15b0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    15b4:	0f 91       	pop	r16
    15b6:	08 95       	ret

000015b8 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
    15b8:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
    15ba:	06 2f       	mov	r16, r22
    15bc:	22 e0       	ldi	r18, 0x02	; 2
    15be:	44 e0       	ldi	r20, 0x04	; 4
    15c0:	6c e1       	ldi	r22, 0x1C	; 28
    15c2:	fc 01       	movw	r30, r24
    15c4:	80 81       	ld	r24, Z
    15c6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    15ca:	0f 91       	pop	r16
    15cc:	08 95       	ret

000015ce <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set free-fall event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
    15ce:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
    15d0:	6f e1       	ldi	r22, 0x1F	; 31
    15d2:	fc 01       	movw	r30, r24
    15d4:	80 81       	ld	r24, Z
    15d6:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    15da:	08 95       	ret

000015dc <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
    15dc:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
    15de:	60 e2       	ldi	r22, 0x20	; 32
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    15e8:	08 95       	ret

000015ea <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
    15ea:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
    15ec:	61 e2       	ldi	r22, 0x21	; 33
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    15f6:	08 95       	ret

000015f8 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
    15f8:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
    15fa:	62 e2       	ldi	r22, 0x22	; 34
    15fc:	fc 01       	movw	r30, r24
    15fe:	80 81       	ld	r24, Z
    1600:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    1604:	08 95       	ret

00001606 <_ZN7MPU605015setSlaveAddressEhh>:
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
    if (num > 3) return;
    1606:	64 30       	cpi	r22, 0x04	; 4
    1608:	40 f4       	brcc	.+16     	; 0x161a <_ZN7MPU605015setSlaveAddressEhh+0x14>
    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
    160a:	26 2f       	mov	r18, r22
    160c:	22 0f       	add	r18, r18
    160e:	62 0f       	add	r22, r18
    1610:	6b 5d       	subi	r22, 0xDB	; 219
    1612:	fc 01       	movw	r30, r24
    1614:	80 81       	ld	r24, Z
    1616:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    161a:	08 95       	ret

0000161c <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
    161c:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
    161e:	68 e3       	ldi	r22, 0x38	; 56
    1620:	fc 01       	movw	r30, r24
    1622:	80 81       	ld	r24, Z
    1624:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    1628:	08 95       	ret

0000162a <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	ec 01       	movw	r28, r24
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
    1630:	20 91 5a 01 	lds	r18, 0x015A
    1634:	30 91 5b 01 	lds	r19, 0x015B
    1638:	ac 01       	movw	r20, r24
    163a:	4f 5f       	subi	r20, 0xFF	; 255
    163c:	5f 4f       	sbci	r21, 0xFF	; 255
    163e:	6a e3       	ldi	r22, 0x3A	; 58
    1640:	88 81       	ld	r24, Y
    1642:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN6I2Cdev8readByteEhhPhj>
    return buffer[0];
}
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret

0000164e <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
    164e:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
    1650:	46 e0       	ldi	r20, 0x06	; 6
    1652:	6a e6       	ldi	r22, 0x6A	; 106
    1654:	fc 01       	movw	r30, r24
    1656:	80 81       	ld	r24, Z
    1658:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6I2Cdev8writeBitEhhhh>
    165c:	08 95       	ret

0000165e <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
    165e:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
    1660:	45 e0       	ldi	r20, 0x05	; 5
    1662:	6a e6       	ldi	r22, 0x6A	; 106
    1664:	fc 01       	movw	r30, r24
    1666:	80 81       	ld	r24, Z
    1668:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6I2Cdev8writeBitEhhhh>
    166c:	08 95       	ret

0000166e <_ZN7MPU60509resetFIFOEv>:
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
    166e:	21 e0       	ldi	r18, 0x01	; 1
    1670:	42 e0       	ldi	r20, 0x02	; 2
    1672:	6a e6       	ldi	r22, 0x6A	; 106
    1674:	fc 01       	movw	r30, r24
    1676:	80 81       	ld	r24, Z
    1678:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6I2Cdev8writeBitEhhhh>
    167c:	08 95       	ret

0000167e <_ZN7MPU605014resetI2CMasterEv>:
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
    167e:	21 e0       	ldi	r18, 0x01	; 1
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	6a e6       	ldi	r22, 0x6A	; 106
    1684:	fc 01       	movw	r30, r24
    1686:	80 81       	ld	r24, Z
    1688:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6I2Cdev8writeBitEhhhh>
    168c:	08 95       	ret

0000168e <_ZN7MPU60505resetEv>:
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
    168e:	21 e0       	ldi	r18, 0x01	; 1
    1690:	47 e0       	ldi	r20, 0x07	; 7
    1692:	6b e6       	ldi	r22, 0x6B	; 107
    1694:	fc 01       	movw	r30, r24
    1696:	80 81       	ld	r24, Z
    1698:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6I2Cdev8writeBitEhhhh>
    169c:	08 95       	ret

0000169e <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
    169e:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
    16a0:	46 e0       	ldi	r20, 0x06	; 6
    16a2:	6b e6       	ldi	r22, 0x6B	; 107
    16a4:	fc 01       	movw	r30, r24
    16a6:	80 81       	ld	r24, Z
    16a8:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6I2Cdev8writeBitEhhhh>
    16ac:	08 95       	ret

000016ae <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
    16ae:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
    16b0:	06 2f       	mov	r16, r22
    16b2:	23 e0       	ldi	r18, 0x03	; 3
    16b4:	42 e0       	ldi	r20, 0x02	; 2
    16b6:	6b e6       	ldi	r22, 0x6B	; 107
    16b8:	fc 01       	movw	r30, r24
    16ba:	80 81       	ld	r24, Z
    16bc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    16c0:	0f 91       	pop	r16
    16c2:	08 95       	ret

000016c4 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	ce 01       	movw	r24, r28
    16d4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	ce 01       	movw	r24, r28
    16dc:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	ce 01       	movw	r24, r28
    16e4:	0e 94 4f 0b 	call	0x169e	; 0x169e <_ZN7MPU605015setSleepEnabledEb>
}
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	08 95       	ret

000016ee <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	ec 01       	movw	r28, r24
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
    16f8:	00 91 5a 01 	lds	r16, 0x015A
    16fc:	10 91 5b 01 	lds	r17, 0x015B
    1700:	9c 01       	movw	r18, r24
    1702:	2f 5f       	subi	r18, 0xFF	; 255
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	42 e0       	ldi	r20, 0x02	; 2
    1708:	62 e7       	ldi	r22, 0x72	; 114
    170a:	88 81       	ld	r24, Y
    170c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN6I2Cdev9readBytesEhhhPhj>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	98 2f       	mov	r25, r24
    1716:	88 27       	eor	r24, r24
    1718:	2a 81       	ldd	r18, Y+2	; 0x02
}
    171a:	82 2b       	or	r24, r18
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret

00001726 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	9b 01       	movw	r18, r22
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
    172c:	00 91 5a 01 	lds	r16, 0x015A
    1730:	10 91 5b 01 	lds	r17, 0x015B
    1734:	64 e7       	ldi	r22, 0x74	; 116
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN6I2Cdev9readBytesEhhhPhj>
}
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	08 95       	ret

00001744 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
    1752:	e0 90 5a 01 	lds	r14, 0x015A
    1756:	f0 90 5b 01 	lds	r15, 0x015B
    175a:	8c 01       	movw	r16, r24
    175c:	0f 5f       	subi	r16, 0xFF	; 255
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	26 e0       	ldi	r18, 0x06	; 6
    1762:	46 e0       	ldi	r20, 0x06	; 6
    1764:	65 e7       	ldi	r22, 0x75	; 117
    1766:	88 81       	ld	r24, Y
    1768:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	08 95       	ret

0000177c <_ZN7MPU605014testConnectionEv>:
/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
    return getDeviceID() == 0x34;
    177c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN7MPU605011getDeviceIDEv>
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	84 33       	cpi	r24, 0x34	; 52
    1784:	09 f0       	breq	.+2      	; 0x1788 <_ZN7MPU605014testConnectionEv+0xc>
    1786:	90 e0       	ldi	r25, 0x00	; 0
}
    1788:	89 2f       	mov	r24, r25
    178a:	08 95       	ret

0000178c <_ZN7MPU605015getOTPBankValidEv>:

// ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========

// XG_OFFS_TC register

uint8_t MPU6050::getOTPBankValid() {
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	ec 01       	movw	r28, r24
    I2Cdev::readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
    1796:	00 91 5a 01 	lds	r16, 0x015A
    179a:	10 91 5b 01 	lds	r17, 0x015B
    179e:	9c 01       	movw	r18, r24
    17a0:	2f 5f       	subi	r18, 0xFF	; 255
    17a2:	3f 4f       	sbci	r19, 0xFF	; 255
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	88 81       	ld	r24, Y
    17aa:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN6I2Cdev7readBitEhhhPhj>
    return buffer[0];
}
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <_ZN7MPU605015setOTPBankValidEb>:
void MPU6050::setOTPBankValid(bool enabled) {
    17ba:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	fc 01       	movw	r30, r24
    17c2:	80 81       	ld	r24, Z
    17c4:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6I2Cdev8writeBitEhhhh>
    17c8:	08 95       	ret

000017ca <_ZN7MPU605016getXGyroOffsetTCEv>:
}
int8_t MPU6050::getXGyroOffsetTC() {
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
    17d8:	e0 90 5a 01 	lds	r14, 0x015A
    17dc:	f0 90 5b 01 	lds	r15, 0x015B
    17e0:	8c 01       	movw	r16, r24
    17e2:	0f 5f       	subi	r16, 0xFF	; 255
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	26 e0       	ldi	r18, 0x06	; 6
    17e8:	46 e0       	ldi	r20, 0x06	; 6
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	88 81       	ld	r24, Y
    17ee:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	08 95       	ret

00001802 <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
    1802:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
    1804:	06 2f       	mov	r16, r22
    1806:	26 e0       	ldi	r18, 0x06	; 6
    1808:	46 e0       	ldi	r20, 0x06	; 6
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	fc 01       	movw	r30, r24
    180e:	80 81       	ld	r24, Z
    1810:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    1814:	0f 91       	pop	r16
    1816:	08 95       	ret

00001818 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
    1826:	e0 90 5a 01 	lds	r14, 0x015A
    182a:	f0 90 5b 01 	lds	r15, 0x015B
    182e:	8c 01       	movw	r16, r24
    1830:	0f 5f       	subi	r16, 0xFF	; 255
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	26 e0       	ldi	r18, 0x06	; 6
    1836:	46 e0       	ldi	r20, 0x06	; 6
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	88 81       	ld	r24, Y
    183c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	08 95       	ret

00001850 <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
    1850:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
    1852:	06 2f       	mov	r16, r22
    1854:	26 e0       	ldi	r18, 0x06	; 6
    1856:	46 e0       	ldi	r20, 0x06	; 6
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	fc 01       	movw	r30, r24
    185c:	80 81       	ld	r24, Z
    185e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
    1874:	e0 90 5a 01 	lds	r14, 0x015A
    1878:	f0 90 5b 01 	lds	r15, 0x015B
    187c:	8c 01       	movw	r16, r24
    187e:	0f 5f       	subi	r16, 0xFF	; 255
    1880:	1f 4f       	sbci	r17, 0xFF	; 255
    1882:	26 e0       	ldi	r18, 0x06	; 6
    1884:	46 e0       	ldi	r20, 0x06	; 6
    1886:	62 e0       	ldi	r22, 0x02	; 2
    1888:	88 81       	ld	r24, Y
    188a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	08 95       	ret

0000189e <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
    189e:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
    18a0:	06 2f       	mov	r16, r22
    18a2:	26 e0       	ldi	r18, 0x06	; 6
    18a4:	46 e0       	ldi	r20, 0x06	; 6
    18a6:	62 e0       	ldi	r22, 0x02	; 2
    18a8:	fc 01       	movw	r30, r24
    18aa:	80 81       	ld	r24, Z
    18ac:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    18b0:	0f 91       	pop	r16
    18b2:	08 95       	ret

000018b4 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
    18b4:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
    18b6:	47 e0       	ldi	r20, 0x07	; 7
    18b8:	6a e6       	ldi	r22, 0x6A	; 106
    18ba:	fc 01       	movw	r30, r24
    18bc:	80 81       	ld	r24, Z
    18be:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6I2Cdev8writeBitEhhhh>
    18c2:	08 95       	ret

000018c4 <_ZN7MPU60508resetDMPEv>:
}
void MPU6050::resetDMP() {
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
    18c4:	21 e0       	ldi	r18, 0x01	; 1
    18c6:	43 e0       	ldi	r20, 0x03	; 3
    18c8:	6a e6       	ldi	r22, 0x6A	; 106
    18ca:	fc 01       	movw	r30, r24
    18cc:	80 81       	ld	r24, Z
    18ce:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6I2Cdev8writeBitEhhhh>
    18d2:	08 95       	ret

000018d4 <_ZN7MPU605013setMemoryBankEhbb>:
}

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
    bank &= 0x1F;
    18d4:	6f 71       	andi	r22, 0x1F	; 31
    if (userBank) bank |= 0x20;
    18d6:	21 11       	cpse	r18, r1
    18d8:	60 62       	ori	r22, 0x20	; 32
    if (prefetchEnabled) bank |= 0x40;
    18da:	41 11       	cpse	r20, r1
    18dc:	60 64       	ori	r22, 0x40	; 64
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
    18de:	46 2f       	mov	r20, r22
    18e0:	6d e6       	ldi	r22, 0x6D	; 109
    18e2:	fc 01       	movw	r30, r24
    18e4:	80 81       	ld	r24, Z
    18e6:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    18ea:	08 95       	ret

000018ec <_ZN7MPU605021setMemoryStartAddressEh>:
}

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
    18ec:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
    18ee:	6e e6       	ldi	r22, 0x6E	; 110
    18f0:	fc 01       	movw	r30, r24
    18f2:	80 81       	ld	r24, Z
    18f4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    18f8:	08 95       	ret

000018fa <_ZN7MPU605014readMemoryByteEv>:
}

// MEM_R_W register

uint8_t MPU6050::readMemoryByte() {
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	ec 01       	movw	r28, r24
    I2Cdev::readByte(devAddr, MPU6050_RA_MEM_R_W, buffer);
    1900:	20 91 5a 01 	lds	r18, 0x015A
    1904:	30 91 5b 01 	lds	r19, 0x015B
    1908:	ac 01       	movw	r20, r24
    190a:	4f 5f       	subi	r20, 0xFF	; 255
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	6f e6       	ldi	r22, 0x6F	; 111
    1910:	88 81       	ld	r24, Y
    1912:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN6I2Cdev8readByteEhhPhj>
    return buffer[0];
}
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <_ZN7MPU605015readMemoryBlockEPhjhh>:
void MPU6050::writeMemoryByte(uint8_t data) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
    191e:	4f 92       	push	r4
    1920:	5f 92       	push	r5
    1922:	6f 92       	push	r6
    1924:	7f 92       	push	r7
    1926:	8f 92       	push	r8
    1928:	9f 92       	push	r9
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	6c 01       	movw	r12, r24
    1940:	5b 01       	movw	r10, r22
    1942:	7a 01       	movw	r14, r20
    1944:	52 2e       	mov	r5, r18
    1946:	60 2e       	mov	r6, r16
    setMemoryBank(bank);
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	65 2d       	mov	r22, r5
    194e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
    1952:	60 2f       	mov	r22, r16
    1954:	c6 01       	movw	r24, r12
    1956:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
    195a:	e1 14       	cp	r14, r1
    195c:	f1 04       	cpc	r15, r1
    195e:	d9 f1       	breq	.+118    	; 0x19d6 <_ZN7MPU605015readMemoryBlockEPhjhh+0xb8>
    1960:	c0 e0       	ldi	r28, 0x00	; 0
    1962:	d0 e0       	ldi	r29, 0x00	; 0
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
    1964:	68 94       	set
    1966:	44 24       	eor	r4, r4
    1968:	44 f8       	bld	r4, 4

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    196a:	81 2c       	mov	r8, r1
    196c:	99 24       	eor	r9, r9
    196e:	93 94       	inc	r9
    for (uint16_t i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
    1970:	ce 01       	movw	r24, r28
    1972:	40 96       	adiw	r24, 0x10	; 16
    1974:	e8 16       	cp	r14, r24
    1976:	f9 06       	cpc	r15, r25
    1978:	18 f4       	brcc	.+6      	; 0x1980 <_ZN7MPU605015readMemoryBlockEPhjhh+0x62>
    197a:	7e 2c       	mov	r7, r14
    197c:	7c 1a       	sub	r7, r28
    197e:	01 c0       	rjmp	.+2      	; 0x1982 <_ZN7MPU605015readMemoryBlockEPhjhh+0x64>
    setMemoryBank(bank);
    setMemoryStartAddress(address);
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
    1980:	74 2c       	mov	r7, r4

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    1982:	27 2d       	mov	r18, r7
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	c4 01       	movw	r24, r8
    1988:	86 19       	sub	r24, r6
    198a:	91 09       	sbc	r25, r1
    198c:	82 17       	cp	r24, r18
    198e:	93 07       	cpc	r25, r19
    1990:	14 f4       	brge	.+4      	; 0x1996 <_ZN7MPU605015readMemoryBlockEPhjhh+0x78>
    1992:	76 2c       	mov	r7, r6
    1994:	71 94       	neg	r7

        // read the chunk of data as specified
        I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
    1996:	00 91 5a 01 	lds	r16, 0x015A
    199a:	10 91 5b 01 	lds	r17, 0x015B
    199e:	95 01       	movw	r18, r10
    19a0:	2c 0f       	add	r18, r28
    19a2:	3d 1f       	adc	r19, r29
    19a4:	47 2d       	mov	r20, r7
    19a6:	6f e6       	ldi	r22, 0x6F	; 111
    19a8:	f6 01       	movw	r30, r12
    19aa:	80 81       	ld	r24, Z
    19ac:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN6I2Cdev9readBytesEhhhPhj>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
    19b0:	c7 0d       	add	r28, r7
    19b2:	d1 1d       	adc	r29, r1

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
    19b4:	ce 15       	cp	r28, r14
    19b6:	df 05       	cpc	r29, r15
    19b8:	70 f4       	brcc	.+28     	; 0x19d6 <_ZN7MPU605015readMemoryBlockEPhjhh+0xb8>
        
        // increase byte index by [chunkSize]
        i += chunkSize;

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
    19ba:	67 0c       	add	r6, r7

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
            if (address == 0) bank++;
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <_ZN7MPU605015readMemoryBlockEPhjhh+0xa2>
    19be:	53 94       	inc	r5
            setMemoryBank(bank);
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	65 2d       	mov	r22, r5
    19c6:	c6 01       	movw	r24, r12
    19c8:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
    19cc:	66 2d       	mov	r22, r6
    19ce:	c6 01       	movw	r24, r12
    19d0:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN7MPU605021setMemoryStartAddressEh>
    19d4:	cd cf       	rjmp	.-102    	; 0x1970 <_ZN7MPU605015readMemoryBlockEPhjhh+0x52>
        }
    }
}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	7f 90       	pop	r7
    19f0:	6f 90       	pop	r6
    19f2:	5f 90       	pop	r5
    19f4:	4f 90       	pop	r4
    19f6:	08 95       	ret

000019f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
    19f8:	2f 92       	push	r2
    19fa:	3f 92       	push	r3
    19fc:	4f 92       	push	r4
    19fe:	5f 92       	push	r5
    1a00:	6f 92       	push	r6
    1a02:	7f 92       	push	r7
    1a04:	8f 92       	push	r8
    1a06:	9f 92       	push	r9
    1a08:	af 92       	push	r10
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x26>
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x28>
    1a20:	1f 92       	push	r1
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	4c 01       	movw	r8, r24
    1a28:	2b 01       	movw	r4, r22
    1a2a:	3a 01       	movw	r6, r20
    1a2c:	29 83       	std	Y+1, r18	; 0x01
    1a2e:	d0 2e       	mov	r13, r16
    1a30:	eb 82       	std	Y+3, r14	; 0x03
    1a32:	ca 82       	std	Y+2, r12	; 0x02
    setMemoryBank(bank);
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	69 81       	ldd	r22, Y+1	; 0x01
    1a3a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
    1a3e:	60 2f       	mov	r22, r16
    1a40:	c4 01       	movw	r24, r8
    1a42:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer;
    uint8_t *progBuffer;
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    1a46:	eb 80       	ldd	r14, Y+3	; 0x03
    1a48:	ee 20       	and	r14, r14
    1a4a:	29 f0       	breq	.+10     	; 0x1a56 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x5e>
    1a4c:	80 e1       	ldi	r24, 0x10	; 16
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <malloc>
    1a54:	1c 01       	movw	r2, r24
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	88 23       	and	r24, r24
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x6e>
    1a5c:	80 e1       	ldi	r24, 0x10	; 16
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <malloc>
    1a64:	5c 01       	movw	r10, r24
    for (i = 0; i < dataSize;) {
    1a66:	61 14       	cp	r6, r1
    1a68:	71 04       	cpc	r7, r1
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x76>
    1a6c:	82 c0       	rjmp	.+260    	; 0x1b72 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x17a>
    1a6e:	1d 82       	std	Y+5, r1	; 0x05
    1a70:	1c 82       	std	Y+4, r1	; 0x04

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    1a72:	e1 2c       	mov	r14, r1
    1a74:	ff 24       	eor	r15, r15
    1a76:	f3 94       	inc	r15
    for (i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7c:	40 96       	adiw	r24, 0x10	; 16
    1a7e:	68 16       	cp	r6, r24
    1a80:	79 06       	cpc	r7, r25
    1a82:	20 f4       	brcc	.+8      	; 0x1a8c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x94>
    1a84:	c6 2c       	mov	r12, r6
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	c9 1a       	sub	r12, r25
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x9a>
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    for (i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
    1a8c:	68 94       	set
    1a8e:	cc 24       	eor	r12, r12
    1a90:	c4 f8       	bld	r12, 4

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    1a92:	2c 2d       	mov	r18, r12
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	c7 01       	movw	r24, r14
    1a98:	8d 19       	sub	r24, r13
    1a9a:	91 09       	sbc	r25, r1
    1a9c:	82 17       	cp	r24, r18
    1a9e:	93 07       	cpc	r25, r19
    1aa0:	14 f4       	brge	.+4      	; 0x1aa6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xae>
    1aa2:	cd 2c       	mov	r12, r13
    1aa4:	c1 94       	neg	r12
        
        if (useProgMem) {
    1aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa8:	ee 23       	and	r30, r30
    1aaa:	89 f0       	breq	.+34     	; 0x1ace <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xd6>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    1aac:	cc 20       	and	r12, r12
    1aae:	99 f0       	breq	.+38     	; 0x1ad6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xde>
    1ab0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab4:	e4 0d       	add	r30, r4
    1ab6:	f5 1d       	adc	r31, r5
    1ab8:	9a 2d       	mov	r25, r10
    1aba:	aa 2d       	mov	r26, r10
    1abc:	bb 2d       	mov	r27, r11
    1abe:	84 91       	lpm	r24, Z
    1ac0:	8d 93       	st	X+, r24
    1ac2:	31 96       	adiw	r30, 0x01	; 1
    1ac4:	8a 2f       	mov	r24, r26
    1ac6:	89 1b       	sub	r24, r25
    1ac8:	8c 15       	cp	r24, r12
    1aca:	c8 f3       	brcs	.-14     	; 0x1abe <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xc6>
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xde>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
    1ace:	ac 80       	ldd	r10, Y+4	; 0x04
    1ad0:	bd 80       	ldd	r11, Y+5	; 0x05
    1ad2:	a4 0c       	add	r10, r4
    1ad4:	b5 1c       	adc	r11, r5
        }

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
    1ad6:	95 01       	movw	r18, r10
    1ad8:	4c 2d       	mov	r20, r12
    1ada:	6f e6       	ldi	r22, 0x6F	; 111
    1adc:	f4 01       	movw	r30, r8
    1ade:	80 81       	ld	r24, Z
    1ae0:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
    1ae4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae6:	ff 23       	and	r31, r31
    1ae8:	59 f1       	breq	.+86     	; 0x1b40 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x148>
    1aea:	21 14       	cp	r2, r1
    1aec:	31 04       	cpc	r3, r1
    1aee:	41 f1       	breq	.+80     	; 0x1b40 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x148>
            setMemoryBank(bank);
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	69 81       	ldd	r22, Y+1	; 0x01
    1af6:	c4 01       	movw	r24, r8
    1af8:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
    1afc:	6d 2d       	mov	r22, r13
    1afe:	c4 01       	movw	r24, r8
    1b00:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
    1b04:	00 91 5a 01 	lds	r16, 0x015A
    1b08:	10 91 5b 01 	lds	r17, 0x015B
    1b0c:	91 01       	movw	r18, r2
    1b0e:	4c 2d       	mov	r20, r12
    1b10:	6f e6       	ldi	r22, 0x6F	; 111
    1b12:	f4 01       	movw	r30, r8
    1b14:	80 81       	ld	r24, Z
    1b16:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN6I2Cdev9readBytesEhhhPhj>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
    1b1a:	4c 2d       	mov	r20, r12
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	b1 01       	movw	r22, r2
    1b20:	c5 01       	movw	r24, r10
    1b22:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <memcmp>
    1b26:	89 2b       	or	r24, r25
    1b28:	59 f0       	breq	.+22     	; 0x1b40 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x148>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
    1b2a:	c1 01       	movw	r24, r2
    1b2c:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <free>
                if (useProgMem) free(progBuffer);
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	ff 23       	and	r31, r31
    1b34:	61 f1       	breq	.+88     	; 0x1b8e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x196>
    1b36:	c5 01       	movw	r24, r10
    1b38:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <free>
                return false; // uh oh.
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	2a c0       	rjmp	.+84     	; 0x1b94 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19c>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	8c 0d       	add	r24, r12
    1b46:	91 1d       	adc	r25, r1
    1b48:	9d 83       	std	Y+5, r25	; 0x05
    1b4a:	8c 83       	std	Y+4, r24	; 0x04

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
    1b4c:	86 15       	cp	r24, r6
    1b4e:	97 05       	cpc	r25, r7
    1b50:	80 f4       	brcc	.+32     	; 0x1b72 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x17a>

        // increase byte index by [chunkSize]
        i += chunkSize;

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
    1b52:	dc 0c       	add	r13, r12

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
            if (address == 0) bank++;
    1b54:	19 f4       	brne	.+6      	; 0x1b5c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x164>
    1b56:	99 81       	ldd	r25, Y+1	; 0x01
    1b58:	9f 5f       	subi	r25, 0xFF	; 255
    1b5a:	99 83       	std	Y+1, r25	; 0x01
            setMemoryBank(bank);
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	69 81       	ldd	r22, Y+1	; 0x01
    1b62:	c4 01       	movw	r24, r8
    1b64:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
    1b68:	6d 2d       	mov	r22, r13
    1b6a:	c4 01       	movw	r24, r8
    1b6c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN7MPU605021setMemoryStartAddressEh>
    1b70:	83 cf       	rjmp	.-250    	; 0x1a78 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x80>
        }
    }
    if (verify) free(verifyBuffer);
    1b72:	eb 81       	ldd	r30, Y+3	; 0x03
    1b74:	ee 23       	and	r30, r30
    1b76:	19 f0       	breq	.+6      	; 0x1b7e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x186>
    1b78:	c1 01       	movw	r24, r2
    1b7a:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <free>
    if (useProgMem) free(progBuffer);
    1b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b80:	ff 23       	and	r31, r31
    1b82:	39 f0       	breq	.+14     	; 0x1b92 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19a>
    1b84:	c5 01       	movw	r24, r10
    1b86:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <free>
    return true;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19c>
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
                if (useProgMem) free(progBuffer);
                return false; // uh oh.
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19c>
            setMemoryStartAddress(address);
        }
    }
    if (verify) free(verifyBuffer);
    if (useProgMem) free(progBuffer);
    return true;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	bf 90       	pop	r11
    1bb0:	af 90       	pop	r10
    1bb2:	9f 90       	pop	r9
    1bb4:	8f 90       	pop	r8
    1bb6:	7f 90       	pop	r7
    1bb8:	6f 90       	pop	r6
    1bba:	5f 90       	pop	r5
    1bbc:	4f 90       	pop	r4
    1bbe:	3f 90       	pop	r3
    1bc0:	2f 90       	pop	r2
    1bc2:	08 95       	ret

00001bc4 <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
    1bc4:	cf 92       	push	r12
    1bc6:	ef 92       	push	r14
    1bc8:	0f 93       	push	r16
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
    1bca:	cc 24       	eor	r12, r12
    1bcc:	c3 94       	inc	r12
    1bce:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
}
    1bd2:	0f 91       	pop	r16
    1bd4:	ef 90       	pop	r14
    1bd6:	cf 90       	pop	r12
    1bd8:	08 95       	ret

00001bda <_ZN7MPU605024writeDMPConfigurationSetEPKhjb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
    1bda:	2f 92       	push	r2
    1bdc:	3f 92       	push	r3
    1bde:	4f 92       	push	r4
    1be0:	5f 92       	push	r5
    1be2:	6f 92       	push	r6
    1be4:	7f 92       	push	r7
    1be6:	8f 92       	push	r8
    1be8:	9f 92       	push	r9
    1bea:	af 92       	push	r10
    1bec:	bf 92       	push	r11
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x26>
    1c00:	1f 92       	push	r1
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	1c 01       	movw	r2, r24
    1c08:	7b 83       	std	Y+3, r23	; 0x03
    1c0a:	6a 83       	std	Y+2, r22	; 0x02
    1c0c:	3a 01       	movw	r6, r20
    1c0e:	29 83       	std	Y+1, r18	; 0x01
    uint8_t *progBuffer, success, special;
    uint16_t i, j;
    if (useProgMem) {
    1c10:	22 23       	and	r18, r18
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x3c>
    1c14:	81 c0       	rjmp	.+258    	; 0x1d18 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x13e>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
    1c16:	88 e0       	ldi	r24, 0x08	; 8
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <malloc>
    1c1e:	4c 01       	movw	r8, r24
    1c20:	7b c0       	rjmp	.+246    	; 0x1d18 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x13e>
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
    1c22:	e1 2c       	mov	r14, r1
    1c24:	f1 2c       	mov	r15, r1
        if (useProgMem) {
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	88 23       	and	r24, r24
    1c2a:	d1 f0       	breq	.+52     	; 0x1c60 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x86>
            bank = pgm_read_byte(data + i++);
    1c2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c30:	ee 0d       	add	r30, r14
    1c32:	ff 1d       	adc	r31, r15
    1c34:	d4 90       	lpm	r13, Z
    1c36:	f7 01       	movw	r30, r14
    1c38:	31 96       	adiw	r30, 0x01	; 1
            offset = pgm_read_byte(data + i++);
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	e8 0f       	add	r30, r24
    1c40:	f9 1f       	adc	r31, r25
    1c42:	04 91       	lpm	r16, Z
            length = pgm_read_byte(data + i++);
    1c44:	57 01       	movw	r10, r14
    1c46:	93 e0       	ldi	r25, 0x03	; 3
    1c48:	a9 0e       	add	r10, r25
    1c4a:	b1 1c       	adc	r11, r1
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
        if (useProgMem) {
            bank = pgm_read_byte(data + i++);
            offset = pgm_read_byte(data + i++);
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	32 96       	adiw	r30, 0x02	; 2
            length = pgm_read_byte(data + i++);
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	e8 0f       	add	r30, r24
    1c56:	f9 1f       	adc	r31, r25
    1c58:	14 91       	lpm	r17, Z
            offset = data[i++];
            length = data[i++];
        }

        // write data or perform special action
        if (length > 0) {
    1c5a:	11 11       	cpse	r17, r1
    1c5c:	72 c0       	rjmp	.+228    	; 0x1d42 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x168>
    1c5e:	3a c0       	rjmp	.+116    	; 0x1cd4 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xfa>
        if (useProgMem) {
            bank = pgm_read_byte(data + i++);
            offset = pgm_read_byte(data + i++);
            length = pgm_read_byte(data + i++);
        } else {
            bank = data[i++];
    1c60:	ea 81       	ldd	r30, Y+2	; 0x02
    1c62:	fb 81       	ldd	r31, Y+3	; 0x03
    1c64:	ee 0d       	add	r30, r14
    1c66:	ff 1d       	adc	r31, r15
    1c68:	d0 80       	ld	r13, Z
            offset = data[i++];
    1c6a:	01 81       	ldd	r16, Z+1	; 0x01
            length = data[i++];
    1c6c:	57 01       	movw	r10, r14
    1c6e:	93 e0       	ldi	r25, 0x03	; 3
    1c70:	a9 0e       	add	r10, r25
    1c72:	b1 1c       	adc	r11, r1
    1c74:	12 81       	ldd	r17, Z+2	; 0x02
        }

        // write data or perform special action
        if (length > 0) {
    1c76:	11 11       	cpse	r17, r1
    1c78:	68 c0       	rjmp	.+208    	; 0x1d4a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x170>
    1c7a:	35 c0       	rjmp	.+106    	; 0x1ce6 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x10c>
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
    1c7c:	61 2f       	mov	r22, r17
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	c4 01       	movw	r24, r8
    1c82:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <realloc>
    1c86:	4c 01       	movw	r8, r24
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    1c88:	81 2f       	mov	r24, r17
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	89 f0       	breq	.+34     	; 0x1cb2 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xd8>
    1c90:	d4 01       	movw	r26, r8
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	4a 81       	ldd	r20, Y+2	; 0x02
    1c98:	5b 81       	ldd	r21, Y+3	; 0x03
    1c9a:	4a 0d       	add	r20, r10
    1c9c:	5b 1d       	adc	r21, r11
    1c9e:	fa 01       	movw	r30, r20
    1ca0:	e2 0f       	add	r30, r18
    1ca2:	f3 1f       	adc	r31, r19
    1ca4:	e4 91       	lpm	r30, Z
    1ca6:	ed 93       	st	X+, r30
    1ca8:	2f 5f       	subi	r18, 0xFF	; 255
    1caa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cac:	28 17       	cp	r18, r24
    1cae:	39 07       	cpc	r19, r25
    1cb0:	b0 f3       	brcs	.-20     	; 0x1c9e <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xc4>
            } else {
                progBuffer = (uint8_t *)data + i;
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
    1cb2:	41 2e       	mov	r4, r17
    1cb4:	51 2c       	mov	r5, r1
    1cb6:	c1 2c       	mov	r12, r1
    1cb8:	ee 24       	eor	r14, r14
    1cba:	e3 94       	inc	r14
    1cbc:	2d 2d       	mov	r18, r13
    1cbe:	a2 01       	movw	r20, r4
    1cc0:	b4 01       	movw	r22, r8
    1cc2:	c1 01       	movw	r24, r2
    1cc4:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
            i += length;
    1cc8:	72 01       	movw	r14, r4
    1cca:	ea 0c       	add	r14, r10
    1ccc:	fb 1c       	adc	r15, r11
                // unknown special command
                success = false;
            }
        }
        
        if (!success) {
    1cce:	81 11       	cpse	r24, r1
    1cd0:	28 c0       	rjmp	.+80     	; 0x1d22 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x148>
    1cd2:	1a c0       	rjmp	.+52     	; 0x1d08 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x12e>
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
                special = pgm_read_byte(data + i++);
    1cd4:	e4 e0       	ldi	r30, 0x04	; 4
    1cd6:	ee 0e       	add	r14, r30
    1cd8:	f1 1c       	adc	r15, r1
    1cda:	ea 81       	ldd	r30, Y+2	; 0x02
    1cdc:	fb 81       	ldd	r31, Y+3	; 0x03
    1cde:	ea 0d       	add	r30, r10
    1ce0:	fb 1d       	adc	r31, r11
    1ce2:	84 91       	lpm	r24, Z
    1ce4:	08 c0       	rjmp	.+16     	; 0x1cf6 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x11c>
            } else {
                special = data[i++];
    1ce6:	f4 e0       	ldi	r31, 0x04	; 4
    1ce8:	ef 0e       	add	r14, r31
    1cea:	f1 1c       	adc	r15, r1
    1cec:	ea 81       	ldd	r30, Y+2	; 0x02
    1cee:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf0:	ea 0d       	add	r30, r10
    1cf2:	fb 1d       	adc	r31, r11
    1cf4:	80 81       	ld	r24, Z
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	39 f4       	brne	.+14     	; 0x1d08 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x12e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
    1cfa:	42 e3       	ldi	r20, 0x32	; 50
    1cfc:	68 e3       	ldi	r22, 0x38	; 56
    1cfe:	f1 01       	movw	r30, r2
    1d00:	80 81       	ld	r24, Z
    1d02:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    1d06:	0d c0       	rjmp	.+26     	; 0x1d22 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x148>
                success = false;
            }
        }
        
        if (!success) {
            if (useProgMem) free(progBuffer);
    1d08:	f9 81       	ldd	r31, Y+1	; 0x01
    1d0a:	ff 23       	and	r31, r31
    1d0c:	b1 f0       	breq	.+44     	; 0x1d3a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x160>
    1d0e:	c4 01       	movw	r24, r8
    1d10:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <free>
            return false; // uh oh
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	1e c0       	rjmp	.+60     	; 0x1d54 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x17a>
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
    1d18:	61 14       	cp	r6, r1
    1d1a:	71 04       	cpc	r7, r1
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x146>
    1d1e:	81 cf       	rjmp	.-254    	; 0x1c22 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x48>
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x150>
    1d22:	e6 14       	cp	r14, r6
    1d24:	f7 04       	cpc	r15, r7
    1d26:	08 f4       	brcc	.+2      	; 0x1d2a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x150>
    1d28:	7e cf       	rjmp	.-260    	; 0x1c26 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x4c>
        if (!success) {
            if (useProgMem) free(progBuffer);
            return false; // uh oh
        }
    }
    if (useProgMem) free(progBuffer);
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	88 23       	and	r24, r24
    1d2e:	39 f0       	breq	.+14     	; 0x1d3e <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x164>
    1d30:	c4 01       	movw	r24, r8
    1d32:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <free>
    return true;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	0d c0       	rjmp	.+26     	; 0x1d54 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x17a>
            }
        }
        
        if (!success) {
            if (useProgMem) free(progBuffer);
            return false; // uh oh
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	0b c0       	rjmp	.+22     	; 0x1d54 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x17a>
        }
    }
    if (useProgMem) free(progBuffer);
    return true;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	09 c0       	rjmp	.+18     	; 0x1d54 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x17a>
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
    1d42:	13 30       	cpi	r17, 0x03	; 3
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x16e>
    1d46:	a0 cf       	rjmp	.-192    	; 0x1c88 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xae>
    1d48:	99 cf       	rjmp	.-206    	; 0x1c7c <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xa2>
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
            } else {
                progBuffer = (uint8_t *)data + i;
    1d4a:	8a 80       	ldd	r8, Y+2	; 0x02
    1d4c:	9b 80       	ldd	r9, Y+3	; 0x03
    1d4e:	8a 0c       	add	r8, r10
    1d50:	9b 1c       	adc	r9, r11
    1d52:	af cf       	rjmp	.-162    	; 0x1cb2 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xd8>
            return false; // uh oh
        }
    }
    if (useProgMem) free(progBuffer);
    return true;
}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	ff 90       	pop	r15
    1d64:	ef 90       	pop	r14
    1d66:	df 90       	pop	r13
    1d68:	cf 90       	pop	r12
    1d6a:	bf 90       	pop	r11
    1d6c:	af 90       	pop	r10
    1d6e:	9f 90       	pop	r9
    1d70:	8f 90       	pop	r8
    1d72:	7f 90       	pop	r7
    1d74:	6f 90       	pop	r6
    1d76:	5f 90       	pop	r5
    1d78:	4f 90       	pop	r4
    1d7a:	3f 90       	pop	r3
    1d7c:	2f 90       	pop	r2
    1d7e:	08 95       	ret

00001d80 <_ZN7MPU605028writeProgDMPConfigurationSetEPKhj>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
    return writeDMPConfigurationSet(data, dataSize, true);
    1d80:	21 e0       	ldi	r18, 0x01	; 1
    1d82:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_ZN7MPU605024writeDMPConfigurationSetEPKhjb>
}
    1d86:	08 95       	ret

00001d88 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
    1d88:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
    1d8a:	60 e7       	ldi	r22, 0x70	; 112
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	80 81       	ld	r24, Z
    1d90:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    1d94:	08 95       	ret

00001d96 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
    1d96:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
    1d98:	61 e7       	ldi	r22, 0x71	; 113
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	80 81       	ld	r24, Z
    1d9e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    1da2:	08 95       	ret

00001da4 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	c6 2f       	mov	r28, r22
    1db0:	04 2f       	mov	r16, r20
    1db2:	f2 2e       	mov	r15, r18
    1db4:	13 2f       	mov	r17, r19
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
    1db6:	68 2f       	mov	r22, r24
    1db8:	8c e5       	ldi	r24, 0x5C	; 92
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
    1dc0:	6c 2f       	mov	r22, r28
    1dc2:	8c e5       	ldi	r24, 0x5C	; 92
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN7TwoWire5writeEh>
    #endif
    for (uint8_t i = 0; i < length; i++) {
    1dca:	00 23       	and	r16, r16
    1dcc:	59 f0       	breq	.+22     	; 0x1de4 <_ZN6I2Cdev10writeBytesEhhhPh+0x40>
    1dce:	cf 2d       	mov	r28, r15
    1dd0:	d1 2f       	mov	r29, r17
    1dd2:	10 e0       	ldi	r17, 0x00	; 0
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t) data[i]);
    1dd4:	69 91       	ld	r22, Y+
    1dd6:	8c e5       	ldi	r24, 0x5C	; 92
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN7TwoWire5writeEh>
        Wire.send((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
        Wire.write((uint8_t) regAddr); // send address
    #endif
    for (uint8_t i = 0; i < length; i++) {
    1dde:	1f 5f       	subi	r17, 0xFF	; 255
    1de0:	10 13       	cpse	r17, r16
    1de2:	f8 cf       	rjmp	.-16     	; 0x1dd4 <_ZN6I2Cdev10writeBytesEhhhPh+0x30>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
    1de4:	8c e5       	ldi	r24, 0x5C	; 92
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	0e 94 97 11 	call	0x232e	; 0x232e <_ZN7TwoWire15endTransmissionEv>
//        USCI_I2C_transmit(length,data);       // start transmitting

        I2C_writeBytesToAddress(devAddr, regAddr, length, data);

	#endif
    return status == 0;
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	81 11       	cpse	r24, r1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
}
    1df2:	89 2f       	mov	r24, r25
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	ff 90       	pop	r15
    1dfe:	08 95       	ret

00001e00 <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	1f 92       	push	r1
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	49 83       	std	Y+1, r20	; 0x01
    return writeBytes(devAddr, regAddr, 1, &data);
    1e0c:	9e 01       	movw	r18, r28
    1e0e:	2f 5f       	subi	r18, 0xFF	; 255
    1e10:	3f 4f       	sbci	r19, 0xFF	; 255
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <_ZN6I2Cdev10writeBytesEhhhPh>
}
    1e18:	0f 90       	pop	r0
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <_ZN6I2Cdev9readBytesEhhhPhj>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    1e20:	2f 92       	push	r2
    1e22:	3f 92       	push	r3
    1e24:	4f 92       	push	r4
    1e26:	5f 92       	push	r5
    1e28:	6f 92       	push	r6
    1e2a:	7f 92       	push	r7
    1e2c:	8f 92       	push	r8
    1e2e:	9f 92       	push	r9
    1e30:	af 92       	push	r10
    1e32:	bf 92       	push	r11
    1e34:	cf 92       	push	r12
    1e36:	df 92       	push	r13
    1e38:	ef 92       	push	r14
    1e3a:	ff 92       	push	r15
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <_ZN6I2Cdev9readBytesEhhhPhj+0x2a>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	98 2e       	mov	r9, r24
    1e50:	69 83       	std	Y+1, r22	; 0x01
    1e52:	84 2e       	mov	r8, r20
    1e54:	59 01       	movw	r10, r18
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    uint32_t t1 = millis();
    1e56:	0e 94 9e 29 	call	0x533c	; 0x533c <millis>
    1e5a:	6b 01       	movw	r12, r22
    1e5c:	7c 01       	movw	r14, r24
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    1e5e:	88 20       	and	r8, r8
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <_ZN6I2Cdev9readBytesEhhhPhj+0x44>
    1e62:	5f c0       	rjmp	.+190    	; 0x1f22 <_ZN6I2Cdev9readBytesEhhhPhj+0x102>
    1e64:	21 2c       	mov	r2, r1
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    1e66:	31 2c       	mov	r3, r1
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
                Wire.beginTransmission(devAddr);
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    1e68:	88 2d       	mov	r24, r8
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9b 83       	std	Y+3, r25	; 0x03
    1e6e:	8a 83       	std	Y+2, r24	; 0x02
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    1e70:	28 01       	movw	r4, r16
    1e72:	61 2c       	mov	r6, r1
    1e74:	71 2c       	mov	r7, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    1e76:	8c 82       	std	Y+4, r8	; 0x04
                Wire.beginTransmission(devAddr);
    1e78:	69 2d       	mov	r22, r9
    1e7a:	8c e5       	ldi	r24, 0x5C	; 92
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
    1e82:	69 81       	ldd	r22, Y+1	; 0x01
    1e84:	8c e5       	ldi	r24, 0x5C	; 92
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN7TwoWire5writeEh>
                Wire.endTransmission();
    1e8c:	8c e5       	ldi	r24, 0x5C	; 92
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	0e 94 97 11 	call	0x232e	; 0x232e <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
    1e94:	69 2d       	mov	r22, r9
    1e96:	8c e5       	ldi	r24, 0x5C	; 92
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    1e9e:	4a 81       	ldd	r20, Y+2	; 0x02
    1ea0:	5b 81       	ldd	r21, Y+3	; 0x03
    1ea2:	42 19       	sub	r20, r2
    1ea4:	51 09       	sbc	r21, r1
    1ea6:	41 32       	cpi	r20, 0x21	; 33
    1ea8:	51 05       	cpc	r21, r1
    1eaa:	14 f0       	brlt	.+4      	; 0x1eb0 <_ZN6I2Cdev9readBytesEhhhPhj+0x90>
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	69 2d       	mov	r22, r9
    1eb2:	8c e5       	ldi	r24, 0x5C	; 92
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	0e 94 76 11 	call	0x22ec	; 0x22ec <_ZN7TwoWire11requestFromEhh>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <_ZN6I2Cdev9readBytesEhhhPhj+0xba>
                    data[count] = Wire.read();
    1ebc:	f5 01       	movw	r30, r10
    1ebe:	e3 0d       	add	r30, r3
    1ec0:	f1 1d       	adc	r31, r1
    1ec2:	37 fc       	sbrc	r3, 7
    1ec4:	fa 95       	dec	r31
    1ec6:	fe 83       	std	Y+6, r31	; 0x06
    1ec8:	ed 83       	std	Y+5, r30	; 0x05
    1eca:	8c e5       	ldi	r24, 0x5C	; 92
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	0e 94 ca 10 	call	0x2194	; 0x2194 <_ZN7TwoWire4readEv>
    1ed2:	ed 81       	ldd	r30, Y+5	; 0x05
    1ed4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ed6:	80 83       	st	Z, r24
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    1ed8:	33 94       	inc	r3
    1eda:	8c e5       	ldi	r24, 0x5C	; 92
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN7TwoWire9availableEv>
    1ee2:	89 2b       	or	r24, r25
    1ee4:	81 f0       	breq	.+32     	; 0x1f06 <_ZN6I2Cdev9readBytesEhhhPhj+0xe6>
    1ee6:	01 15       	cp	r16, r1
    1ee8:	11 05       	cpc	r17, r1
    1eea:	41 f3       	breq	.-48     	; 0x1ebc <_ZN6I2Cdev9readBytesEhhhPhj+0x9c>
    1eec:	0e 94 9e 29 	call	0x533c	; 0x533c <millis>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8c 19       	sub	r24, r12
    1ef6:	9d 09       	sbc	r25, r13
    1ef8:	ae 09       	sbc	r26, r14
    1efa:	bf 09       	sbc	r27, r15
    1efc:	84 15       	cp	r24, r4
    1efe:	95 05       	cpc	r25, r5
    1f00:	a6 05       	cpc	r26, r6
    1f02:	b7 05       	cpc	r27, r7
    1f04:	d8 f2       	brcs	.-74     	; 0x1ebc <_ZN6I2Cdev9readBytesEhhhPhj+0x9c>
                        Serial.print(data[count], HEX);
                        if (count + 1 < length) Serial.print(" ");
                    #endif
                }
        
                Wire.endTransmission();
    1f06:	8c e5       	ldi	r24, 0x5C	; 92
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	0e 94 97 11 	call	0x232e	; 0x232e <_ZN7TwoWire15endTransmissionEv>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	f0 e2       	ldi	r31, 0x20	; 32
    1f12:	f8 15       	cp	r31, r8
    1f14:	08 f4       	brcc	.+2      	; 0x1f18 <_ZN6I2Cdev9readBytesEhhhPhj+0xf8>
    1f16:	80 e2       	ldi	r24, 0x20	; 32
    1f18:	28 0e       	add	r2, r24
    1f1a:	28 14       	cp	r2, r8
    1f1c:	08 f4       	brcc	.+2      	; 0x1f20 <_ZN6I2Cdev9readBytesEhhhPhj+0x100>
    1f1e:	ac cf       	rjmp	.-168    	; 0x1e78 <_ZN6I2Cdev9readBytesEhhhPhj+0x58>
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <_ZN6I2Cdev9readBytesEhhhPhj+0x104>
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    1f22:	31 2c       	mov	r3, r1
		count = length; //TODO implement something meaningful, for now just making sure no error is thrown
	
    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    1f24:	01 15       	cp	r16, r1
    1f26:	11 05       	cpc	r17, r1
    1f28:	c9 f0       	breq	.+50     	; 0x1f5c <_ZN6I2Cdev9readBytesEhhhPhj+0x13c>
    1f2a:	0e 94 9e 29 	call	0x533c	; 0x533c <millis>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	8c 19       	sub	r24, r12
    1f34:	9d 09       	sbc	r25, r13
    1f36:	ae 09       	sbc	r26, r14
    1f38:	bf 09       	sbc	r27, r15
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	80 17       	cp	r24, r16
    1f40:	91 07       	cpc	r25, r17
    1f42:	a2 07       	cpc	r26, r18
    1f44:	b3 07       	cpc	r27, r19
    1f46:	50 f0       	brcs	.+20     	; 0x1f5c <_ZN6I2Cdev9readBytesEhhhPhj+0x13c>
    1f48:	91 2c       	mov	r9, r1
    1f4a:	83 2d       	mov	r24, r3
    1f4c:	99 27       	eor	r25, r25
    1f4e:	87 fd       	sbrc	r24, 7
    1f50:	90 95       	com	r25
    1f52:	88 15       	cp	r24, r8
    1f54:	99 05       	cpc	r25, r9
    1f56:	14 f4       	brge	.+4      	; 0x1f5c <_ZN6I2Cdev9readBytesEhhhPhj+0x13c>
    1f58:	33 24       	eor	r3, r3
    1f5a:	3a 94       	dec	r3
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    1f5c:	83 2d       	mov	r24, r3
    1f5e:	26 96       	adiw	r28, 0x06	; 6
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	bf 90       	pop	r11
    1f7c:	af 90       	pop	r10
    1f7e:	9f 90       	pop	r9
    1f80:	8f 90       	pop	r8
    1f82:	7f 90       	pop	r7
    1f84:	6f 90       	pop	r6
    1f86:	5f 90       	pop	r5
    1f88:	4f 90       	pop	r4
    1f8a:	3f 90       	pop	r3
    1f8c:	2f 90       	pop	r2
    1f8e:	08 95       	ret

00001f90 <_ZN6I2Cdev8readByteEhhPhj>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    1f90:	0f 93       	push	r16
    1f92:	1f 93       	push	r17
    return readBytes(devAddr, regAddr, 1, data, timeout);
    1f94:	89 01       	movw	r16, r18
    1f96:	9a 01       	movw	r18, r20
    1f98:	41 e0       	ldi	r20, 0x01	; 1
    1f9a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN6I2Cdev9readBytesEhhhPhj>
}
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	08 95       	ret

00001fa4 <_ZN6I2Cdev7readBitEhhhPhj>:
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    1fa4:	df 92       	push	r13
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	1f 92       	push	r1
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	d4 2e       	mov	r13, r20
    1fba:	79 01       	movw	r14, r18
    1fbc:	98 01       	movw	r18, r16
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    1fbe:	ae 01       	movw	r20, r28
    1fc0:	4f 5f       	subi	r20, 0xFF	; 255
    1fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN6I2Cdev8readByteEhhPhj>
    *data = b & (1 << bitNum);
    1fc8:	21 e0       	ldi	r18, 0x01	; 1
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	a9 01       	movw	r20, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <_ZN6I2Cdev7readBitEhhhPhj+0x30>
    1fd0:	44 0f       	add	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	da 94       	dec	r13
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <_ZN6I2Cdev7readBitEhhhPhj+0x2c>
    1fd8:	99 81       	ldd	r25, Y+1	; 0x01
    1fda:	49 23       	and	r20, r25
    1fdc:	f7 01       	movw	r30, r14
    1fde:	40 83       	st	Z, r20
    return count;
}
    1fe0:	0f 90       	pop	r0
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	08 95       	ret

00001ff2 <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    1ff2:	cf 92       	push	r12
    1ff4:	df 92       	push	r13
    1ff6:	ef 92       	push	r14
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	1f 92       	push	r1
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	c4 2e       	mov	r12, r20
    200a:	d2 2e       	mov	r13, r18
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    200c:	97 01       	movw	r18, r14
    200e:	ae 01       	movw	r20, r28
    2010:	4f 5f       	subi	r20, 0xFF	; 255
    2012:	5f 4f       	sbci	r21, 0xFF	; 255
    2014:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN6I2Cdev8readByteEhhPhj>
    2018:	88 23       	and	r24, r24
    201a:	09 f1       	breq	.+66     	; 0x205e <_ZN6I2Cdev8readBitsEhhhhPhj+0x6c>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    201c:	4c 2d       	mov	r20, r12
    201e:	50 e0       	ldi	r21, 0x00	; 0
    2020:	4d 19       	sub	r20, r13
    2022:	51 09       	sbc	r21, r1
    2024:	4f 5f       	subi	r20, 0xFF	; 255
    2026:	5f 4f       	sbci	r21, 0xFF	; 255
    2028:	61 e0       	ldi	r22, 0x01	; 1
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	9b 01       	movw	r18, r22
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <_ZN6I2Cdev8readBitsEhhhhPhj+0x42>
    2030:	22 0f       	add	r18, r18
    2032:	33 1f       	adc	r19, r19
    2034:	da 94       	dec	r13
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <_ZN6I2Cdev8readBitsEhhhhPhj+0x3e>
    2038:	21 50       	subi	r18, 0x01	; 1
    203a:	31 09       	sbc	r19, r1
    203c:	04 2e       	mov	r0, r20
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <_ZN6I2Cdev8readBitsEhhhhPhj+0x52>
    2040:	22 0f       	add	r18, r18
    2042:	33 1f       	adc	r19, r19
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <_ZN6I2Cdev8readBitsEhhhhPhj+0x4e>
        b &= mask;
    2048:	99 81       	ldd	r25, Y+1	; 0x01
    204a:	29 23       	and	r18, r25
        b >>= (bitStart - length + 1);
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	b9 01       	movw	r22, r18
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <_ZN6I2Cdev8readBitsEhhhhPhj+0x64>
    2052:	75 95       	asr	r23
    2054:	67 95       	ror	r22
    2056:	4a 95       	dec	r20
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <_ZN6I2Cdev8readBitsEhhhhPhj+0x60>
    205a:	f8 01       	movw	r30, r16
    205c:	60 83       	st	Z, r22
        *data = b;
    }
    return count;
}
    205e:	0f 90       	pop	r0
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	08 95       	ret

00002072 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	1f 92       	push	r1
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	18 2f       	mov	r17, r24
    2086:	06 2f       	mov	r16, r22
    2088:	f4 2e       	mov	r15, r20
    208a:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    208c:	20 91 5a 01 	lds	r18, 0x015A
    2090:	30 91 5b 01 	lds	r19, 0x015B
    2094:	ae 01       	movw	r20, r28
    2096:	4f 5f       	subi	r20, 0xFF	; 255
    2098:	5f 4f       	sbci	r21, 0xFF	; 255
    209a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN6I2Cdev8readByteEhhPhj>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    209e:	ee 20       	and	r14, r14
    20a0:	59 f0       	breq	.+22     	; 0x20b8 <_ZN6I2Cdev8writeBitEhhhh+0x46>
    20a2:	21 e0       	ldi	r18, 0x01	; 1
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	a9 01       	movw	r20, r18
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <_ZN6I2Cdev8writeBitEhhhh+0x3c>
    20aa:	44 0f       	add	r20, r20
    20ac:	55 1f       	adc	r21, r21
    20ae:	fa 94       	dec	r15
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <_ZN6I2Cdev8writeBitEhhhh+0x38>
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	48 2b       	or	r20, r24
    20b6:	0b c0       	rjmp	.+22     	; 0x20ce <_ZN6I2Cdev8writeBitEhhhh+0x5c>
    20b8:	21 e0       	ldi	r18, 0x01	; 1
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	a9 01       	movw	r20, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <_ZN6I2Cdev8writeBitEhhhh+0x52>
    20c0:	44 0f       	add	r20, r20
    20c2:	55 1f       	adc	r21, r21
    20c4:	fa 94       	dec	r15
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <_ZN6I2Cdev8writeBitEhhhh+0x4e>
    20c8:	40 95       	com	r20
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	48 23       	and	r20, r24
    20ce:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    20d0:	60 2f       	mov	r22, r16
    20d2:	81 2f       	mov	r24, r17
    20d4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
}
    20d8:	0f 90       	pop	r0
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	ff 90       	pop	r15
    20e4:	ef 90       	pop	r14
    20e6:	08 95       	ret

000020e8 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    20e8:	df 92       	push	r13
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	1f 92       	push	r1
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	f8 2e       	mov	r15, r24
    20fe:	e6 2e       	mov	r14, r22
    2100:	d4 2e       	mov	r13, r20
    2102:	12 2f       	mov	r17, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    2104:	20 91 5a 01 	lds	r18, 0x015A
    2108:	30 91 5b 01 	lds	r19, 0x015B
    210c:	ae 01       	movw	r20, r28
    210e:	4f 5f       	subi	r20, 0xFF	; 255
    2110:	5f 4f       	sbci	r21, 0xFF	; 255
    2112:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN6I2Cdev8readByteEhhPhj>
    2116:	88 23       	and	r24, r24
    2118:	59 f1       	breq	.+86     	; 0x2170 <_ZN6I2Cdev9writeBitsEhhhhh+0x88>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    211a:	4d 2d       	mov	r20, r13
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	41 1b       	sub	r20, r17
    2120:	51 09       	sbc	r21, r1
    2122:	4f 5f       	subi	r20, 0xFF	; 255
    2124:	5f 4f       	sbci	r21, 0xFF	; 255
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9c 01       	movw	r18, r24
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <_ZN6I2Cdev9writeBitsEhhhhh+0x4a>
    212e:	22 0f       	add	r18, r18
    2130:	33 1f       	adc	r19, r19
    2132:	1a 95       	dec	r17
    2134:	e2 f7       	brpl	.-8      	; 0x212e <_ZN6I2Cdev9writeBitsEhhhhh+0x46>
    2136:	21 50       	subi	r18, 0x01	; 1
    2138:	31 09       	sbc	r19, r1
    213a:	04 2e       	mov	r0, r20
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <_ZN6I2Cdev9writeBitsEhhhhh+0x5a>
    213e:	22 0f       	add	r18, r18
    2140:	33 1f       	adc	r19, r19
    2142:	0a 94       	dec	r0
    2144:	e2 f7       	brpl	.-8      	; 0x213e <_ZN6I2Cdev9writeBitsEhhhhh+0x56>
        data <<= (bitStart - length + 1); // shift data into correct position
    2146:	10 e0       	ldi	r17, 0x00	; 0
    2148:	c8 01       	movw	r24, r16
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <_ZN6I2Cdev9writeBitsEhhhhh+0x68>
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	4a 95       	dec	r20
    2152:	e2 f7       	brpl	.-8      	; 0x214c <_ZN6I2Cdev9writeBitsEhhhhh+0x64>
    2154:	ac 01       	movw	r20, r24
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
    2156:	92 2f       	mov	r25, r18
    2158:	90 95       	com	r25
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	89 23       	and	r24, r25
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
    215e:	24 23       	and	r18, r20
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    2160:	48 2f       	mov	r20, r24
    2162:	42 2b       	or	r20, r18
    2164:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    2166:	6e 2d       	mov	r22, r14
    2168:	8f 2d       	mov	r24, r15
    216a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN6I2Cdev9writeByteEhhh>
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <_ZN6I2Cdev9writeBitsEhhhhh+0x8a>
    } else {
        return false;
    2170:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    2172:	0f 90       	pop	r0
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	ff 90       	pop	r15
    217e:	ef 90       	pop	r14
    2180:	df 90       	pop	r13
    2182:	08 95       	ret

00002184 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    2184:	80 91 8c 01 	lds	r24, 0x018C
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	20 91 8d 01 	lds	r18, 0x018D
}
    218e:	82 1b       	sub	r24, r18
    2190:	91 09       	sbc	r25, r1
    2192:	08 95       	ret

00002194 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2194:	20 91 8d 01 	lds	r18, 0x018D
    2198:	80 91 8c 01 	lds	r24, 0x018C
    219c:	28 17       	cp	r18, r24
    219e:	50 f4       	brcc	.+20     	; 0x21b4 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    21a0:	e2 2f       	mov	r30, r18
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	e2 57       	subi	r30, 0x72	; 114
    21a6:	fe 4f       	sbci	r31, 0xFE	; 254
    21a8:	80 81       	ld	r24, Z
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    ++rxBufferIndex;
    21ac:	2f 5f       	subi	r18, 0xFF	; 255
    21ae:	20 93 8d 01 	sts	0x018D, r18
    21b2:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    21b4:	8f ef       	ldi	r24, 0xFF	; 255
    21b6:	9f ef       	ldi	r25, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    21b8:	08 95       	ret

000021ba <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    21ba:	e0 91 8d 01 	lds	r30, 0x018D
    21be:	80 91 8c 01 	lds	r24, 0x018C
    21c2:	e8 17       	cp	r30, r24
    21c4:	30 f4       	brcc	.+12     	; 0x21d2 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	e2 57       	subi	r30, 0x72	; 114
    21ca:	fe 4f       	sbci	r31, 0xFE	; 254
    21cc:	80 81       	ld	r24, Z
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    21d6:	08 95       	ret

000021d8 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    21d8:	08 95       	ret

000021da <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    21da:	cf 92       	push	r12
    21dc:	df 92       	push	r13
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	8c 01       	movw	r16, r24
    21ec:	7b 01       	movw	r14, r22
    21ee:	6a 01       	movw	r12, r20
  if(transmitting){
    21f0:	80 91 68 01 	lds	r24, 0x0168
    21f4:	88 23       	and	r24, r24
    21f6:	99 f0       	breq	.+38     	; 0x221e <_ZN7TwoWire5writeEPKhj+0x44>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    21f8:	41 15       	cp	r20, r1
    21fa:	51 05       	cpc	r21, r1
    21fc:	a1 f0       	breq	.+40     	; 0x2226 <_ZN7TwoWire5writeEPKhj+0x4c>
    21fe:	eb 01       	movw	r28, r22
    2200:	e4 0e       	add	r14, r20
    2202:	f5 1e       	adc	r15, r21
      write(data[i]);
    2204:	69 91       	ld	r22, Y+
    2206:	d8 01       	movw	r26, r16
    2208:	ed 91       	ld	r30, X+
    220a:	fc 91       	ld	r31, X
    220c:	01 90       	ld	r0, Z+
    220e:	f0 81       	ld	r31, Z
    2210:	e0 2d       	mov	r30, r0
    2212:	c8 01       	movw	r24, r16
    2214:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2216:	ce 15       	cp	r28, r14
    2218:	df 05       	cpc	r29, r15
    221a:	a1 f7       	brne	.-24     	; 0x2204 <_ZN7TwoWire5writeEPKhj+0x2a>
    221c:	04 c0       	rjmp	.+8      	; 0x2226 <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    221e:	64 2f       	mov	r22, r20
    2220:	c7 01       	movw	r24, r14
    2222:	0e 94 69 12 	call	0x24d2	; 0x24d2 <twi_transmit>
  }
  return quantity;
}
    2226:	c6 01       	movw	r24, r12
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	ff 90       	pop	r15
    2232:	ef 90       	pop	r14
    2234:	df 90       	pop	r13
    2236:	cf 90       	pop	r12
    2238:	08 95       	ret

0000223a <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	1f 92       	push	r1
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    2246:	20 91 68 01 	lds	r18, 0x0168
    224a:	22 23       	and	r18, r18
    224c:	e1 f0       	breq	.+56     	; 0x2286 <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    224e:	20 91 69 01 	lds	r18, 0x0169
    2252:	20 32       	cpi	r18, 0x20	; 32
    2254:	40 f0       	brcs	.+16     	; 0x2266 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2256:	21 e0       	ldi	r18, 0x01	; 1
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	fc 01       	movw	r30, r24
    225c:	33 83       	std	Z+3, r19	; 0x03
    225e:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	17 c0       	rjmp	.+46     	; 0x2294 <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2266:	80 91 6a 01 	lds	r24, 0x016A
    226a:	e8 2f       	mov	r30, r24
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	e5 59       	subi	r30, 0x95	; 149
    2270:	fe 4f       	sbci	r31, 0xFE	; 254
    2272:	99 81       	ldd	r25, Y+1	; 0x01
    2274:	90 83       	st	Z, r25
    ++txBufferIndex;
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	80 93 6a 01 	sts	0x016A, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    227c:	80 93 69 01 	sts	0x0169, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	07 c0       	rjmp	.+14     	; 0x2294 <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2286:	61 e0       	ldi	r22, 0x01	; 1
    2288:	ce 01       	movw	r24, r28
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <twi_transmit>
  }
  return 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
}
    2294:	0f 90       	pop	r0
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

0000229c <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    229c:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    229e:	13 82       	std	Z+3, r1	; 0x03
    22a0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    22a2:	48 ee       	ldi	r20, 0xE8	; 232
    22a4:	53 e0       	ldi	r21, 0x03	; 3
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	44 83       	std	Z+4, r20	; 0x04
    22ac:	55 83       	std	Z+5, r21	; 0x05
    22ae:	66 83       	std	Z+6, r22	; 0x06
    22b0:	77 83       	std	Z+7, r23	; 0x07
    22b2:	88 e2       	ldi	r24, 0x28	; 40
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
    22ba:	08 95       	ret

000022bc <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    22bc:	10 92 8d 01 	sts	0x018D, r1
  rxBufferLength = 0;
    22c0:	10 92 8c 01 	sts	0x018C, r1

  txBufferIndex = 0;
    22c4:	10 92 6a 01 	sts	0x016A, r1
  txBufferLength = 0;
    22c8:	10 92 69 01 	sts	0x0169, r1

  twi_init();
    22cc:	0e 94 a0 11 	call	0x2340	; 0x2340 <twi_init>
    22d0:	08 95       	ret

000022d2 <_ZN7TwoWire11requestFromEhhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
    22d2:	86 2f       	mov	r24, r22
    22d4:	41 32       	cpi	r20, 0x21	; 33
    22d6:	08 f0       	brcs	.+2      	; 0x22da <_ZN7TwoWire11requestFromEhhh+0x8>
    22d8:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    22da:	6e e8       	ldi	r22, 0x8E	; 142
    22dc:	71 e0       	ldi	r23, 0x01	; 1
    22de:	0e 94 be 11 	call	0x237c	; 0x237c <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    22e2:	10 92 8d 01 	sts	0x018D, r1
  rxBufferLength = read;
    22e6:	80 93 8c 01 	sts	0x018C, r24

  return read;
}
    22ea:	08 95       	ret

000022ec <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN7TwoWire11requestFromEhhh>
}
    22f2:	08 95       	ret

000022f4 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	80 93 68 01 	sts	0x0168, r24
  // set address of targeted slave
  txAddress = address;
    22fa:	60 93 8b 01 	sts	0x018B, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    22fe:	10 92 6a 01 	sts	0x016A, r1
  txBufferLength = 0;
    2302:	10 92 69 01 	sts	0x0169, r1
    2306:	08 95       	ret

00002308 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2308:	0f 93       	push	r16
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    230a:	06 2f       	mov	r16, r22
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	40 91 69 01 	lds	r20, 0x0169
    2312:	6b e6       	ldi	r22, 0x6B	; 107
    2314:	71 e0       	ldi	r23, 0x01	; 1
    2316:	80 91 8b 01 	lds	r24, 0x018B
    231a:	0e 94 0c 12 	call	0x2418	; 0x2418 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    231e:	10 92 6a 01 	sts	0x016A, r1
  txBufferLength = 0;
    2322:	10 92 69 01 	sts	0x0169, r1
  // indicate that we are done transmitting
  transmitting = 0;
    2326:	10 92 68 01 	sts	0x0168, r1
  return ret;
}
    232a:	0f 91       	pop	r16
    232c:	08 95       	ret

0000232e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    232e:	61 e0       	ldi	r22, 0x01	; 1
    2330:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN7TwoWire15endTransmissionEh>
}
    2334:	08 95       	ret

00002336 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2336:	8c e5       	ldi	r24, 0x5C	; 92
    2338:	91 e0       	ldi	r25, 0x01	; 1
    233a:	0e 94 4e 11 	call	0x229c	; 0x229c <_ZN7TwoWireC1Ev>
    233e:	08 95       	ret

00002340 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    2340:	10 92 1b 02 	sts	0x021B, r1
  twi_sendStop = true;		// default value
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	80 93 19 02 	sts	0x0219, r24
  twi_inRepStart = false;
    234a:	10 92 18 02 	sts	0x0218, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    234e:	61 e0       	ldi	r22, 0x01	; 1
    2350:	82 e1       	ldi	r24, 0x12	; 18
    2352:	0e 94 23 2c 	call	0x5846	; 0x5846 <digitalWrite>
  digitalWrite(SCL, 1);
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	83 e1       	ldi	r24, 0x13	; 19
    235a:	0e 94 23 2c 	call	0x5846	; 0x5846 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    235e:	e9 eb       	ldi	r30, 0xB9	; 185
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	8e 7f       	andi	r24, 0xFE	; 254
    2366:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    2368:	80 81       	ld	r24, Z
    236a:	8d 7f       	andi	r24, 0xFD	; 253
    236c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    236e:	88 e4       	ldi	r24, 0x48	; 72
    2370:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    2374:	85 e4       	ldi	r24, 0x45	; 69
    2376:	80 93 bc 00 	sts	0x00BC, r24
    237a:	08 95       	ret

0000237c <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    237c:	41 32       	cpi	r20, 0x21	; 33
    237e:	08 f0       	brcs	.+2      	; 0x2382 <twi_readFrom+0x6>
    2380:	45 c0       	rjmp	.+138    	; 0x240c <twi_readFrom+0x90>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    2382:	90 91 1b 02 	lds	r25, 0x021B
    2386:	91 11       	cpse	r25, r1
    2388:	fc cf       	rjmp	.-8      	; 0x2382 <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
    238a:	91 e0       	ldi	r25, 0x01	; 1
    238c:	90 93 1b 02 	sts	0x021B, r25
  twi_sendStop = sendStop;
    2390:	20 93 19 02 	sts	0x0219, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2394:	2f ef       	ldi	r18, 0xFF	; 255
    2396:	20 93 ae 01 	sts	0x01AE, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    239a:	10 92 f3 01 	sts	0x01F3, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    239e:	24 0f       	add	r18, r20
    23a0:	20 93 f2 01 	sts	0x01F2, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    23a4:	90 93 1a 02 	sts	0x021A, r25
  twi_slarw |= address << 1;
    23a8:	90 91 1a 02 	lds	r25, 0x021A
    23ac:	88 0f       	add	r24, r24
    23ae:	89 2b       	or	r24, r25
    23b0:	80 93 1a 02 	sts	0x021A, r24

  if (true == twi_inRepStart) {
    23b4:	80 91 18 02 	lds	r24, 0x0218
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	51 f4       	brne	.+20     	; 0x23d0 <twi_readFrom+0x54>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    23bc:	10 92 18 02 	sts	0x0218, r1
    TWDR = twi_slarw;
    23c0:	80 91 1a 02 	lds	r24, 0x021A
    23c4:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    23c8:	85 ec       	ldi	r24, 0xC5	; 197
    23ca:	80 93 bc 00 	sts	0x00BC, r24
    23ce:	03 c0       	rjmp	.+6      	; 0x23d6 <twi_readFrom+0x5a>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    23d0:	85 ee       	ldi	r24, 0xE5	; 229
    23d2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    23d6:	80 91 1b 02 	lds	r24, 0x021B
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	e1 f3       	breq	.-8      	; 0x23d6 <twi_readFrom+0x5a>
    continue;
  }

  if (twi_masterBufferIndex < length)
    23de:	80 91 f3 01 	lds	r24, 0x01F3
    23e2:	84 17       	cp	r24, r20
    23e4:	10 f4       	brcc	.+4      	; 0x23ea <twi_readFrom+0x6e>
    length = twi_masterBufferIndex;
    23e6:	40 91 f3 01 	lds	r20, 0x01F3

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    23ea:	44 23       	and	r20, r20
    23ec:	89 f0       	breq	.+34     	; 0x2410 <twi_readFrom+0x94>
    23ee:	e4 ef       	ldi	r30, 0xF4	; 244
    23f0:	f1 e0       	ldi	r31, 0x01	; 1
    23f2:	a6 2f       	mov	r26, r22
    23f4:	b7 2f       	mov	r27, r23
    23f6:	2f ef       	ldi	r18, 0xFF	; 255
    23f8:	24 0f       	add	r18, r20
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	2b 50       	subi	r18, 0x0B	; 11
    23fe:	3e 4f       	sbci	r19, 0xFE	; 254
    data[i] = twi_masterBuffer[i];
    2400:	91 91       	ld	r25, Z+
    2402:	9d 93       	st	X+, r25

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2404:	e2 17       	cp	r30, r18
    2406:	f3 07       	cpc	r31, r19
    2408:	d9 f7       	brne	.-10     	; 0x2400 <twi_readFrom+0x84>
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <twi_readFrom+0x98>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	08 95       	ret
  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    2410:	84 2f       	mov	r24, r20
    2412:	08 95       	ret
    2414:	84 2f       	mov	r24, r20
}
    2416:	08 95       	ret

00002418 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    2418:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    241a:	41 32       	cpi	r20, 0x21	; 33
    241c:	08 f0       	brcs	.+2      	; 0x2420 <twi_writeTo+0x8>
    241e:	50 c0       	rjmp	.+160    	; 0x24c0 <twi_writeTo+0xa8>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    2420:	90 91 1b 02 	lds	r25, 0x021B
    2424:	91 11       	cpse	r25, r1
    2426:	fc cf       	rjmp	.-8      	; 0x2420 <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
    2428:	92 e0       	ldi	r25, 0x02	; 2
    242a:	90 93 1b 02 	sts	0x021B, r25
  twi_sendStop = sendStop;
    242e:	00 93 19 02 	sts	0x0219, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2432:	9f ef       	ldi	r25, 0xFF	; 255
    2434:	90 93 ae 01 	sts	0x01AE, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2438:	10 92 f3 01 	sts	0x01F3, r1
  twi_masterBufferLength = length;
    243c:	40 93 f2 01 	sts	0x01F2, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2440:	44 23       	and	r20, r20
    2442:	69 f0       	breq	.+26     	; 0x245e <twi_writeTo+0x46>
    2444:	fb 01       	movw	r30, r22
    2446:	a4 ef       	ldi	r26, 0xF4	; 244
    2448:	b1 e0       	ldi	r27, 0x01	; 1
    244a:	6f 5f       	subi	r22, 0xFF	; 255
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	41 50       	subi	r20, 0x01	; 1
    2450:	64 0f       	add	r22, r20
    2452:	71 1d       	adc	r23, r1
    twi_masterBuffer[i] = data[i];
    2454:	91 91       	ld	r25, Z+
    2456:	9d 93       	st	X+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2458:	e6 17       	cp	r30, r22
    245a:	f7 07       	cpc	r31, r23
    245c:	d9 f7       	brne	.-10     	; 0x2454 <twi_writeTo+0x3c>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    245e:	10 92 1a 02 	sts	0x021A, r1
  twi_slarw |= address << 1;
    2462:	90 91 1a 02 	lds	r25, 0x021A
    2466:	88 0f       	add	r24, r24
    2468:	89 2b       	or	r24, r25
    246a:	80 93 1a 02 	sts	0x021A, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    246e:	80 91 18 02 	lds	r24, 0x0218
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	51 f4       	brne	.+20     	; 0x248a <twi_writeTo+0x72>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2476:	10 92 18 02 	sts	0x0218, r1
    TWDR = twi_slarw;				
    247a:	80 91 1a 02 	lds	r24, 0x021A
    247e:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2482:	85 ec       	ldi	r24, 0xC5	; 197
    2484:	80 93 bc 00 	sts	0x00BC, r24
    2488:	03 c0       	rjmp	.+6      	; 0x2490 <twi_writeTo+0x78>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    248a:	85 ee       	ldi	r24, 0xE5	; 229
    248c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2490:	22 23       	and	r18, r18
    2492:	41 f0       	breq	.+16     	; 0x24a4 <twi_writeTo+0x8c>
    2494:	80 91 1b 02 	lds	r24, 0x021B
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	21 f4       	brne	.+8      	; 0x24a4 <twi_writeTo+0x8c>
    249c:	80 91 1b 02 	lds	r24, 0x021B
    24a0:	82 30       	cpi	r24, 0x02	; 2
    24a2:	e1 f3       	breq	.-8      	; 0x249c <twi_writeTo+0x84>
    continue;
  }
  
  if (twi_error == 0xFF)
    24a4:	80 91 ae 01 	lds	r24, 0x01AE
    24a8:	8f 3f       	cpi	r24, 0xFF	; 255
    24aa:	61 f0       	breq	.+24     	; 0x24c4 <twi_writeTo+0xac>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    24ac:	80 91 ae 01 	lds	r24, 0x01AE
    24b0:	80 32       	cpi	r24, 0x20	; 32
    24b2:	51 f0       	breq	.+20     	; 0x24c8 <twi_writeTo+0xb0>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    24b4:	80 91 ae 01 	lds	r24, 0x01AE
    24b8:	80 33       	cpi	r24, 0x30	; 48
    24ba:	41 f4       	brne	.+16     	; 0x24cc <twi_writeTo+0xb4>
    return 3;	// error: data send, nack received
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	07 c0       	rjmp	.+14     	; 0x24ce <twi_writeTo+0xb6>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	05 c0       	rjmp	.+10     	; 0x24ce <twi_writeTo+0xb6>
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	03 c0       	rjmp	.+6      	; 0x24ce <twi_writeTo+0xb6>
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	01 c0       	rjmp	.+2      	; 0x24ce <twi_writeTo+0xb6>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    24cc:	84 e0       	ldi	r24, 0x04	; 4
}
    24ce:	0f 91       	pop	r16
    24d0:	08 95       	ret

000024d2 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    24d2:	61 32       	cpi	r22, 0x21	; 33
    24d4:	a8 f4       	brcc	.+42     	; 0x2500 <twi_transmit+0x2e>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    24d6:	20 91 1b 02 	lds	r18, 0x021B
    24da:	24 30       	cpi	r18, 0x04	; 4
    24dc:	99 f4       	brne	.+38     	; 0x2504 <twi_transmit+0x32>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    24de:	60 93 d0 01 	sts	0x01D0, r22
  for(i = 0; i < length; ++i){
    24e2:	66 23       	and	r22, r22
    24e4:	89 f0       	breq	.+34     	; 0x2508 <twi_transmit+0x36>
    24e6:	fc 01       	movw	r30, r24
    24e8:	a2 ed       	ldi	r26, 0xD2	; 210
    24ea:	b1 e0       	ldi	r27, 0x01	; 1
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	61 50       	subi	r22, 0x01	; 1
    24f0:	86 0f       	add	r24, r22
    24f2:	91 1d       	adc	r25, r1
    twi_txBuffer[i] = data[i];
    24f4:	21 91       	ld	r18, Z+
    24f6:	2d 93       	st	X+, r18
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    24f8:	e8 17       	cp	r30, r24
    24fa:	f9 07       	cpc	r31, r25
    24fc:	d9 f7       	brne	.-10     	; 0x24f4 <twi_transmit+0x22>
    24fe:	06 c0       	rjmp	.+12     	; 0x250c <twi_transmit+0x3a>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    2504:	82 e0       	ldi	r24, 0x02	; 2
    2506:	08 95       	ret
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	08 95       	ret
    250c:	80 e0       	ldi	r24, 0x00	; 0
}
    250e:	08 95       	ret

00002510 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2510:	85 ed       	ldi	r24, 0xD5	; 213
    2512:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2516:	ec eb       	ldi	r30, 0xBC	; 188
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	84 fd       	sbrc	r24, 4
    251e:	fd cf       	rjmp	.-6      	; 0x251a <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2520:	10 92 1b 02 	sts	0x021B, r1
    2524:	08 95       	ret

00002526 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2526:	85 ec       	ldi	r24, 0xC5	; 197
    2528:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    252c:	10 92 1b 02 	sts	0x021B, r1
    2530:	08 95       	ret

00002532 <__vector_24>:
}

ISR(TWI_vect)
{
    2532:	1f 92       	push	r1
    2534:	0f 92       	push	r0
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	0f 92       	push	r0
    253a:	11 24       	eor	r1, r1
    253c:	2f 93       	push	r18
    253e:	3f 93       	push	r19
    2540:	4f 93       	push	r20
    2542:	5f 93       	push	r21
    2544:	6f 93       	push	r22
    2546:	7f 93       	push	r23
    2548:	8f 93       	push	r24
    254a:	9f 93       	push	r25
    254c:	af 93       	push	r26
    254e:	bf 93       	push	r27
    2550:	ef 93       	push	r30
    2552:	ff 93       	push	r31
  switch(TW_STATUS){
    2554:	80 91 b9 00 	lds	r24, 0x00B9
    2558:	88 7f       	andi	r24, 0xF8	; 248
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	89 3c       	cpi	r24, 0xC9	; 201
    255e:	91 05       	cpc	r25, r1
    2560:	08 f0       	brcs	.+2      	; 0x2564 <__vector_24+0x32>
    2562:	f7 c0       	rjmp	.+494    	; 0x2752 <__vector_24+0x220>
    2564:	fc 01       	movw	r30, r24
    2566:	ec 5c       	subi	r30, 0xCC	; 204
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	0c 94 fc 2c 	jmp	0x59f8	; 0x59f8 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    256e:	80 91 1a 02 	lds	r24, 0x021A
    2572:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2576:	85 ec       	ldi	r24, 0xC5	; 197
    2578:	80 93 bc 00 	sts	0x00BC, r24
    257c:	ea c0       	rjmp	.+468    	; 0x2752 <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    257e:	90 91 f3 01 	lds	r25, 0x01F3
    2582:	80 91 f2 01 	lds	r24, 0x01F2
    2586:	98 17       	cp	r25, r24
    2588:	80 f4       	brcc	.+32     	; 0x25aa <__vector_24+0x78>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    258a:	e0 91 f3 01 	lds	r30, 0x01F3
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	8e 0f       	add	r24, r30
    2592:	80 93 f3 01 	sts	0x01F3, r24
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	ec 50       	subi	r30, 0x0C	; 12
    259a:	fe 4f       	sbci	r31, 0xFE	; 254
    259c:	80 81       	ld	r24, Z
    259e:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    25a2:	85 ec       	ldi	r24, 0xC5	; 197
    25a4:	80 93 bc 00 	sts	0x00BC, r24
    25a8:	d4 c0       	rjmp	.+424    	; 0x2752 <__vector_24+0x220>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    25aa:	80 91 19 02 	lds	r24, 0x0219
    25ae:	88 23       	and	r24, r24
    25b0:	19 f0       	breq	.+6      	; 0x25b8 <__vector_24+0x86>
          twi_stop();
    25b2:	0e 94 88 12 	call	0x2510	; 0x2510 <twi_stop>
    25b6:	cd c0       	rjmp	.+410    	; 0x2752 <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 18 02 	sts	0x0218, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    25be:	84 ea       	ldi	r24, 0xA4	; 164
    25c0:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    25c4:	10 92 1b 02 	sts	0x021B, r1
    25c8:	c4 c0       	rjmp	.+392    	; 0x2752 <__vector_24+0x220>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    25ca:	80 e2       	ldi	r24, 0x20	; 32
    25cc:	80 93 ae 01 	sts	0x01AE, r24
      twi_stop();
    25d0:	0e 94 88 12 	call	0x2510	; 0x2510 <twi_stop>
      break;
    25d4:	be c0       	rjmp	.+380    	; 0x2752 <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    25d6:	80 e3       	ldi	r24, 0x30	; 48
    25d8:	80 93 ae 01 	sts	0x01AE, r24
      twi_stop();
    25dc:	0e 94 88 12 	call	0x2510	; 0x2510 <twi_stop>
      break;
    25e0:	b8 c0       	rjmp	.+368    	; 0x2752 <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    25e2:	88 e3       	ldi	r24, 0x38	; 56
    25e4:	80 93 ae 01 	sts	0x01AE, r24
      twi_releaseBus();
    25e8:	0e 94 93 12 	call	0x2526	; 0x2526 <twi_releaseBus>
      break;
    25ec:	b2 c0       	rjmp	.+356    	; 0x2752 <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    25ee:	e0 91 f3 01 	lds	r30, 0x01F3
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	8e 0f       	add	r24, r30
    25f6:	80 93 f3 01 	sts	0x01F3, r24
    25fa:	80 91 bb 00 	lds	r24, 0x00BB
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	ec 50       	subi	r30, 0x0C	; 12
    2602:	fe 4f       	sbci	r31, 0xFE	; 254
    2604:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2606:	90 91 f3 01 	lds	r25, 0x01F3
    260a:	80 91 f2 01 	lds	r24, 0x01F2
    260e:	98 17       	cp	r25, r24
    2610:	20 f4       	brcc	.+8      	; 0x261a <__vector_24+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2612:	85 ec       	ldi	r24, 0xC5	; 197
    2614:	80 93 bc 00 	sts	0x00BC, r24
    2618:	9c c0       	rjmp	.+312    	; 0x2752 <__vector_24+0x220>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    261a:	85 e8       	ldi	r24, 0x85	; 133
    261c:	80 93 bc 00 	sts	0x00BC, r24
    2620:	98 c0       	rjmp	.+304    	; 0x2752 <__vector_24+0x220>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2622:	e0 91 f3 01 	lds	r30, 0x01F3
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	8e 0f       	add	r24, r30
    262a:	80 93 f3 01 	sts	0x01F3, r24
    262e:	80 91 bb 00 	lds	r24, 0x00BB
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	ec 50       	subi	r30, 0x0C	; 12
    2636:	fe 4f       	sbci	r31, 0xFE	; 254
    2638:	80 83       	st	Z, r24
	if (twi_sendStop)
    263a:	80 91 19 02 	lds	r24, 0x0219
    263e:	88 23       	and	r24, r24
    2640:	19 f0       	breq	.+6      	; 0x2648 <__vector_24+0x116>
          twi_stop();
    2642:	0e 94 88 12 	call	0x2510	; 0x2510 <twi_stop>
    2646:	85 c0       	rjmp	.+266    	; 0x2752 <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	80 93 18 02 	sts	0x0218, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    264e:	84 ea       	ldi	r24, 0xA4	; 164
    2650:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2654:	10 92 1b 02 	sts	0x021B, r1
    2658:	7c c0       	rjmp	.+248    	; 0x2752 <__vector_24+0x220>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    265a:	0e 94 88 12 	call	0x2510	; 0x2510 <twi_stop>
      break;
    265e:	79 c0       	rjmp	.+242    	; 0x2752 <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2660:	83 e0       	ldi	r24, 0x03	; 3
    2662:	80 93 1b 02 	sts	0x021B, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2666:	10 92 af 01 	sts	0x01AF, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    266a:	85 ec       	ldi	r24, 0xC5	; 197
    266c:	80 93 bc 00 	sts	0x00BC, r24
    2670:	70 c0       	rjmp	.+224    	; 0x2752 <__vector_24+0x220>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2672:	80 91 af 01 	lds	r24, 0x01AF
    2676:	80 32       	cpi	r24, 0x20	; 32
    2678:	80 f4       	brcc	.+32     	; 0x269a <__vector_24+0x168>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    267a:	e0 91 af 01 	lds	r30, 0x01AF
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	8e 0f       	add	r24, r30
    2682:	80 93 af 01 	sts	0x01AF, r24
    2686:	80 91 bb 00 	lds	r24, 0x00BB
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	e0 55       	subi	r30, 0x50	; 80
    268e:	fe 4f       	sbci	r31, 0xFE	; 254
    2690:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2692:	85 ec       	ldi	r24, 0xC5	; 197
    2694:	80 93 bc 00 	sts	0x00BC, r24
    2698:	5c c0       	rjmp	.+184    	; 0x2752 <__vector_24+0x220>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    269a:	85 e8       	ldi	r24, 0x85	; 133
    269c:	80 93 bc 00 	sts	0x00BC, r24
    26a0:	58 c0       	rjmp	.+176    	; 0x2752 <__vector_24+0x220>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    26a2:	80 91 af 01 	lds	r24, 0x01AF
    26a6:	80 32       	cpi	r24, 0x20	; 32
    26a8:	30 f4       	brcc	.+12     	; 0x26b6 <__vector_24+0x184>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    26aa:	e0 91 af 01 	lds	r30, 0x01AF
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	e0 55       	subi	r30, 0x50	; 80
    26b2:	fe 4f       	sbci	r31, 0xFE	; 254
    26b4:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    26b6:	0e 94 88 12 	call	0x2510	; 0x2510 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    26ba:	60 91 af 01 	lds	r22, 0x01AF
    26be:	70 e0       	ldi	r23, 0x00	; 0
    26c0:	e0 91 14 02 	lds	r30, 0x0214
    26c4:	f0 91 15 02 	lds	r31, 0x0215
    26c8:	80 eb       	ldi	r24, 0xB0	; 176
    26ca:	91 e0       	ldi	r25, 0x01	; 1
    26cc:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    26ce:	10 92 af 01 	sts	0x01AF, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    26d2:	0e 94 93 12 	call	0x2526	; 0x2526 <twi_releaseBus>
      break;
    26d6:	3d c0       	rjmp	.+122    	; 0x2752 <__vector_24+0x220>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    26d8:	85 e8       	ldi	r24, 0x85	; 133
    26da:	80 93 bc 00 	sts	0x00BC, r24
    26de:	39 c0       	rjmp	.+114    	; 0x2752 <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    26e0:	84 e0       	ldi	r24, 0x04	; 4
    26e2:	80 93 1b 02 	sts	0x021B, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    26e6:	10 92 d1 01 	sts	0x01D1, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    26ea:	10 92 d0 01 	sts	0x01D0, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    26ee:	e0 91 16 02 	lds	r30, 0x0216
    26f2:	f0 91 17 02 	lds	r31, 0x0217
    26f6:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    26f8:	80 91 d0 01 	lds	r24, 0x01D0
    26fc:	81 11       	cpse	r24, r1
    26fe:	05 c0       	rjmp	.+10     	; 0x270a <__vector_24+0x1d8>
        twi_txBufferLength = 1;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	80 93 d0 01 	sts	0x01D0, r24
        twi_txBuffer[0] = 0x00;
    2706:	10 92 d2 01 	sts	0x01D2, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    270a:	e0 91 d1 01 	lds	r30, 0x01D1
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	8e 0f       	add	r24, r30
    2712:	80 93 d1 01 	sts	0x01D1, r24
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	ee 52       	subi	r30, 0x2E	; 46
    271a:	fe 4f       	sbci	r31, 0xFE	; 254
    271c:	80 81       	ld	r24, Z
    271e:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2722:	90 91 d1 01 	lds	r25, 0x01D1
    2726:	80 91 d0 01 	lds	r24, 0x01D0
    272a:	98 17       	cp	r25, r24
    272c:	20 f4       	brcc	.+8      	; 0x2736 <__vector_24+0x204>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    272e:	85 ec       	ldi	r24, 0xC5	; 197
    2730:	80 93 bc 00 	sts	0x00BC, r24
    2734:	0e c0       	rjmp	.+28     	; 0x2752 <__vector_24+0x220>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2736:	85 e8       	ldi	r24, 0x85	; 133
    2738:	80 93 bc 00 	sts	0x00BC, r24
    273c:	0a c0       	rjmp	.+20     	; 0x2752 <__vector_24+0x220>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    273e:	85 ec       	ldi	r24, 0xC5	; 197
    2740:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2744:	10 92 1b 02 	sts	0x021B, r1
      break;
    2748:	04 c0       	rjmp	.+8      	; 0x2752 <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    274a:	10 92 ae 01 	sts	0x01AE, r1
      twi_stop();
    274e:	0e 94 88 12 	call	0x2510	; 0x2510 <twi_stop>
      break;
  }
}
    2752:	ff 91       	pop	r31
    2754:	ef 91       	pop	r30
    2756:	bf 91       	pop	r27
    2758:	af 91       	pop	r26
    275a:	9f 91       	pop	r25
    275c:	8f 91       	pop	r24
    275e:	7f 91       	pop	r23
    2760:	6f 91       	pop	r22
    2762:	5f 91       	pop	r21
    2764:	4f 91       	pop	r20
    2766:	3f 91       	pop	r19
    2768:	2f 91       	pop	r18
    276a:	0f 90       	pop	r0
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	0f 90       	pop	r0
    2770:	1f 90       	pop	r1
    2772:	18 95       	reti

00002774 <_Z12dmpDataReadyv>:
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
    mpuInterrupt = true;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	80 93 1c 02 	sts	0x021C, r24
    277a:	08 95       	ret

0000277c <_ZN7MPU605013dmpInitializeEv>:
    0x00,   0x60,   0x04,   0x40, 0x00, 0x00, 0x00,
    0x01,   0x62,   0x02,   0x00, 0x00,
    0x00,   0x60,   0x04,   0x00, 0x40, 0x00, 0x00
};

uint8_t MPU6050::dmpInitialize() {
    277c:	6f 92       	push	r6
    277e:	7f 92       	push	r7
    2780:	8f 92       	push	r8
    2782:	9f 92       	push	r9
    2784:	af 92       	push	r10
    2786:	bf 92       	push	r11
    2788:	cf 92       	push	r12
    278a:	ef 92       	push	r14
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	c0 59       	subi	r28, 0x90	; 144
    279a:	d1 09       	sbc	r29, r1
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	3c 01       	movw	r6, r24
    // reset device
    DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    27a8:	66 e2       	ldi	r22, 0x26	; 38
    27aa:	7c e0       	ldi	r23, 0x0C	; 12
    27ac:	8e e2       	ldi	r24, 0x2E	; 46
    27ae:	93 e0       	ldi	r25, 0x03	; 3
    27b0:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    reset();
    27b4:	c3 01       	movw	r24, r6
    27b6:	0e 94 47 0b 	call	0x168e	; 0x168e <_ZN7MPU60505resetEv>
    delay(30); // wait after reset
    27ba:	6e e1       	ldi	r22, 0x1E	; 30
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 29 2a 	call	0x5452	; 0x5452 <delay>
    setSleepEnabled(true);
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    DEBUG_PRINTLN(F("Disabling sleep mode..."));
    27c6:	6e e0       	ldi	r22, 0x0E	; 14
    27c8:	7c e0       	ldi	r23, 0x0C	; 12
    27ca:	8e e2       	ldi	r24, 0x2E	; 46
    27cc:	93 e0       	ldi	r25, 0x03	; 3
    27ce:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setSleepEnabled(false);
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	c3 01       	movw	r24, r6
    27d6:	0e 94 4f 0b 	call	0x169e	; 0x169e <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    DEBUG_PRINTLN(F("Selecting user bank 16..."));
    27da:	64 ef       	ldi	r22, 0xF4	; 244
    27dc:	7b e0       	ldi	r23, 0x0B	; 11
    27de:	8e e2       	ldi	r24, 0x2E	; 46
    27e0:	93 e0       	ldi	r25, 0x03	; 3
    27e2:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setMemoryBank(0x10, true, true);
    27e6:	21 e0       	ldi	r18, 0x01	; 1
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	60 e1       	ldi	r22, 0x10	; 16
    27ec:	c3 01       	movw	r24, r6
    27ee:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN7MPU605013setMemoryBankEhbb>
    DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    27f2:	69 ed       	ldi	r22, 0xD9	; 217
    27f4:	7b e0       	ldi	r23, 0x0B	; 11
    27f6:	8e e2       	ldi	r24, 0x2E	; 46
    27f8:	93 e0       	ldi	r25, 0x03	; 3
    27fa:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setMemoryStartAddress(0x06);
    27fe:	66 e0       	ldi	r22, 0x06	; 6
    2800:	c3 01       	movw	r24, r6
    2802:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN7MPU605021setMemoryStartAddressEh>
    DEBUG_PRINTLN(F("Checking hardware revision..."));
    2806:	6b eb       	ldi	r22, 0xBB	; 187
    2808:	7b e0       	ldi	r23, 0x0B	; 11
    280a:	8e e2       	ldi	r24, 0x2E	; 46
    280c:	93 e0       	ldi	r25, 0x03	; 3
    280e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    uint8_t hwRevision = readMemoryByte();
    2812:	c3 01       	movw	r24, r6
    2814:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN7MPU605014readMemoryByteEv>
    2818:	18 2f       	mov	r17, r24
    DEBUG_PRINT(F("Revision @ user[16][6] = "));
    281a:	61 ea       	ldi	r22, 0xA1	; 161
    281c:	7b e0       	ldi	r23, 0x0B	; 11
    281e:	8e e2       	ldi	r24, 0x2E	; 46
    2820:	93 e0       	ldi	r25, 0x03	; 3
    2822:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLNF(hwRevision, HEX);
    2826:	40 e1       	ldi	r20, 0x10	; 16
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	61 2f       	mov	r22, r17
    282c:	8e e2       	ldi	r24, 0x2E	; 46
    282e:	93 e0       	ldi	r25, 0x03	; 3
    2830:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <_ZN5Print7printlnEhi>
    DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    2834:	69 e7       	ldi	r22, 0x79	; 121
    2836:	7b e0       	ldi	r23, 0x0B	; 11
    2838:	8e e2       	ldi	r24, 0x2E	; 46
    283a:	93 e0       	ldi	r25, 0x03	; 3
    283c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setMemoryBank(0, false, false);
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	c3 01       	movw	r24, r6
    2848:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN7MPU605013setMemoryBankEhbb>

    // check OTP bank valid
    DEBUG_PRINTLN(F("Reading OTP bank valid flag..."));
    284c:	6a e5       	ldi	r22, 0x5A	; 90
    284e:	7b e0       	ldi	r23, 0x0B	; 11
    2850:	8e e2       	ldi	r24, 0x2E	; 46
    2852:	93 e0       	ldi	r25, 0x03	; 3
    2854:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    uint8_t otpValid = getOTPBankValid();
    2858:	c3 01       	movw	r24, r6
    285a:	0e 94 c6 0b 	call	0x178c	; 0x178c <_ZN7MPU605015getOTPBankValidEv>
    285e:	18 2f       	mov	r17, r24
    DEBUG_PRINT(F("OTP bank is "));
    2860:	6d e4       	ldi	r22, 0x4D	; 77
    2862:	7b e0       	ldi	r23, 0x0B	; 11
    2864:	8e e2       	ldi	r24, 0x2E	; 46
    2866:	93 e0       	ldi	r25, 0x03	; 3
    2868:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLN(otpValid ? F("valid!") : F("invalid!"));
    286c:	11 23       	and	r17, r17
    286e:	19 f0       	breq	.+6      	; 0x2876 <_ZN7MPU605013dmpInitializeEv+0xfa>
    2870:	66 e4       	ldi	r22, 0x46	; 70
    2872:	7b e0       	ldi	r23, 0x0B	; 11
    2874:	02 c0       	rjmp	.+4      	; 0x287a <_ZN7MPU605013dmpInitializeEv+0xfe>
    2876:	6d e3       	ldi	r22, 0x3D	; 61
    2878:	7b e0       	ldi	r23, 0x0B	; 11
    287a:	8e e2       	ldi	r24, 0x2E	; 46
    287c:	93 e0       	ldi	r25, 0x03	; 3
    287e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>

    // get X/Y/Z gyro offsets
    DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    2882:	6c e1       	ldi	r22, 0x1C	; 28
    2884:	7b e0       	ldi	r23, 0x0B	; 11
    2886:	8e e2       	ldi	r24, 0x2E	; 46
    2888:	93 e0       	ldi	r25, 0x03	; 3
    288a:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    int8_t xgOffsetTC = getXGyroOffsetTC();
    288e:	c3 01       	movw	r24, r6
    2890:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <_ZN7MPU605016getXGyroOffsetTCEv>
    2894:	a8 2e       	mov	r10, r24
    int8_t ygOffsetTC = getYGyroOffsetTC();
    2896:	c3 01       	movw	r24, r6
    2898:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN7MPU605016getYGyroOffsetTCEv>
    289c:	b8 2e       	mov	r11, r24
    int8_t zgOffsetTC = getZGyroOffsetTC();
    289e:	c3 01       	movw	r24, r6
    28a0:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN7MPU605016getZGyroOffsetTCEv>
    28a4:	18 2f       	mov	r17, r24
    DEBUG_PRINT(F("X gyro offset = "));
    28a6:	6b e0       	ldi	r22, 0x0B	; 11
    28a8:	7b e0       	ldi	r23, 0x0B	; 11
    28aa:	8e e2       	ldi	r24, 0x2E	; 46
    28ac:	93 e0       	ldi	r25, 0x03	; 3
    28ae:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLN(xgOffsetTC);
    28b2:	6a 2d       	mov	r22, r10
    28b4:	77 27       	eor	r23, r23
    28b6:	67 fd       	sbrc	r22, 7
    28b8:	70 95       	com	r23
    28ba:	4a e0       	ldi	r20, 0x0A	; 10
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	8e e2       	ldi	r24, 0x2E	; 46
    28c0:	93 e0       	ldi	r25, 0x03	; 3
    28c2:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <_ZN5Print7printlnEii>
    DEBUG_PRINT(F("Y gyro offset = "));
    28c6:	6a ef       	ldi	r22, 0xFA	; 250
    28c8:	7a e0       	ldi	r23, 0x0A	; 10
    28ca:	8e e2       	ldi	r24, 0x2E	; 46
    28cc:	93 e0       	ldi	r25, 0x03	; 3
    28ce:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLN(ygOffsetTC);
    28d2:	6b 2d       	mov	r22, r11
    28d4:	77 27       	eor	r23, r23
    28d6:	67 fd       	sbrc	r22, 7
    28d8:	70 95       	com	r23
    28da:	4a e0       	ldi	r20, 0x0A	; 10
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	8e e2       	ldi	r24, 0x2E	; 46
    28e0:	93 e0       	ldi	r25, 0x03	; 3
    28e2:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <_ZN5Print7printlnEii>
    DEBUG_PRINT(F("Z gyro offset = "));
    28e6:	69 ee       	ldi	r22, 0xE9	; 233
    28e8:	7a e0       	ldi	r23, 0x0A	; 10
    28ea:	8e e2       	ldi	r24, 0x2E	; 46
    28ec:	93 e0       	ldi	r25, 0x03	; 3
    28ee:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLN(zgOffsetTC);
    28f2:	61 2f       	mov	r22, r17
    28f4:	77 27       	eor	r23, r23
    28f6:	67 fd       	sbrc	r22, 7
    28f8:	70 95       	com	r23
    28fa:	4a e0       	ldi	r20, 0x0A	; 10
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	8e e2       	ldi	r24, 0x2E	; 46
    2900:	93 e0       	ldi	r25, 0x03	; 3
    2902:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <_ZN5Print7printlnEii>

    // setup weird slave stuff (?)
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    2906:	66 ec       	ldi	r22, 0xC6	; 198
    2908:	7a e0       	ldi	r23, 0x0A	; 10
    290a:	8e e2       	ldi	r24, 0x2E	; 46
    290c:	93 e0       	ldi	r25, 0x03	; 3
    290e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setSlaveAddress(0, 0x7F);
    2912:	4f e7       	ldi	r20, 0x7F	; 127
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	c3 01       	movw	r24, r6
    2918:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    291c:	69 ea       	ldi	r22, 0xA9	; 169
    291e:	7a e0       	ldi	r23, 0x0A	; 10
    2920:	8e e2       	ldi	r24, 0x2E	; 46
    2922:	93 e0       	ldi	r25, 0x03	; 3
    2924:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setI2CMasterModeEnabled(false);
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	c3 01       	movw	r24, r6
    292c:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MPU605023setI2CMasterModeEnabledEb>
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    2930:	6f e7       	ldi	r22, 0x7F	; 127
    2932:	7a e0       	ldi	r23, 0x0A	; 10
    2934:	8e e2       	ldi	r24, 0x2E	; 46
    2936:	93 e0       	ldi	r25, 0x03	; 3
    2938:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setSlaveAddress(0, 0x68);
    293c:	48 e6       	ldi	r20, 0x68	; 104
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	c3 01       	movw	r24, r6
    2942:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    2946:	6f e5       	ldi	r22, 0x5F	; 95
    2948:	7a e0       	ldi	r23, 0x0A	; 10
    294a:	8e e2       	ldi	r24, 0x2E	; 46
    294c:	93 e0       	ldi	r25, 0x03	; 3
    294e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    resetI2CMaster();
    2952:	c3 01       	movw	r24, r6
    2954:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN7MPU605014resetI2CMasterEv>
    delay(20);
    2958:	64 e1       	ldi	r22, 0x14	; 20
    295a:	70 e0       	ldi	r23, 0x00	; 0
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 94 29 2a 	call	0x5452	; 0x5452 <delay>

    // load DMP code into memory banks
    DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    2964:	68 e3       	ldi	r22, 0x38	; 56
    2966:	7a e0       	ldi	r23, 0x0A	; 10
    2968:	8e e2       	ldi	r24, 0x2E	; 46
    296a:	93 e0       	ldi	r25, 0x03	; 3
    296c:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    2970:	4a e0       	ldi	r20, 0x0A	; 10
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	69 e8       	ldi	r22, 0x89	; 137
    2976:	77 e0       	ldi	r23, 0x07	; 7
    2978:	8e e2       	ldi	r24, 0x2E	; 46
    297a:	93 e0       	ldi	r25, 0x03	; 3
    297c:	0e 94 4a 24 	call	0x4894	; 0x4894 <_ZN5Print5printEii>
    DEBUG_PRINTLN(F(" bytes)"));
    2980:	60 e3       	ldi	r22, 0x30	; 48
    2982:	7a e0       	ldi	r23, 0x0A	; 10
    2984:	8e e2       	ldi	r24, 0x2E	; 46
    2986:	93 e0       	ldi	r25, 0x03	; 3
    2988:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
    298c:	ee 24       	eor	r14, r14
    298e:	e3 94       	inc	r14
    2990:	00 e0       	ldi	r16, 0x00	; 0
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	49 e8       	ldi	r20, 0x89	; 137
    2996:	57 e0       	ldi	r21, 0x07	; 7
    2998:	6c e2       	ldi	r22, 0x2C	; 44
    299a:	7d e0       	ldi	r23, 0x0D	; 13
    299c:	c3 01       	movw	r24, r6
    299e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>
    29a2:	88 23       	and	r24, r24
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <_ZN7MPU605013dmpInitializeEv+0x22c>
    29a6:	5a c3       	rjmp	.+1716   	; 0x305c <_ZN7MPU605013dmpInitializeEv+0x8e0>
        DEBUG_PRINTLN(F("Success! DMP code written and verified."));
    29a8:	68 e0       	ldi	r22, 0x08	; 8
    29aa:	7a e0       	ldi	r23, 0x0A	; 10
    29ac:	8e e2       	ldi	r24, 0x2E	; 46
    29ae:	93 e0       	ldi	r25, 0x03	; 3
    29b0:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>

        // write DMP configuration
        DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
    29b4:	68 ed       	ldi	r22, 0xD8	; 216
    29b6:	79 e0       	ldi	r23, 0x09	; 9
    29b8:	8e e2       	ldi	r24, 0x2E	; 46
    29ba:	93 e0       	ldi	r25, 0x03	; 3
    29bc:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
        DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
    29c0:	4a e0       	ldi	r20, 0x0A	; 10
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	60 ec       	ldi	r22, 0xC0	; 192
    29c6:	70 e0       	ldi	r23, 0x00	; 0
    29c8:	8e e2       	ldi	r24, 0x2E	; 46
    29ca:	93 e0       	ldi	r25, 0x03	; 3
    29cc:	0e 94 4a 24 	call	0x4894	; 0x4894 <_ZN5Print5printEii>
        DEBUG_PRINTLN(F(" bytes in config def)"));
    29d0:	62 ec       	ldi	r22, 0xC2	; 194
    29d2:	79 e0       	ldi	r23, 0x09	; 9
    29d4:	8e e2       	ldi	r24, 0x2E	; 46
    29d6:	93 e0       	ldi	r25, 0x03	; 3
    29d8:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
    29dc:	40 ec       	ldi	r20, 0xC0	; 192
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	6c e6       	ldi	r22, 0x6C	; 108
    29e2:	7c e0       	ldi	r23, 0x0C	; 12
    29e4:	c3 01       	movw	r24, r6
    29e6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_ZN7MPU605028writeProgDMPConfigurationSetEPKhj>
    29ea:	88 23       	and	r24, r24
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <_ZN7MPU605013dmpInitializeEv+0x274>
    29ee:	2e c3       	rjmp	.+1628   	; 0x304c <_ZN7MPU605013dmpInitializeEv+0x8d0>
            DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));
    29f0:	61 e9       	ldi	r22, 0x91	; 145
    29f2:	79 e0       	ldi	r23, 0x09	; 9
    29f4:	8e e2       	ldi	r24, 0x2E	; 46
    29f6:	93 e0       	ldi	r25, 0x03	; 3
    29f8:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>

            DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
    29fc:	6f e6       	ldi	r22, 0x6F	; 111
    29fe:	79 e0       	ldi	r23, 0x09	; 9
    2a00:	8e e2       	ldi	r24, 0x2E	; 46
    2a02:	93 e0       	ldi	r25, 0x03	; 3
    2a04:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
    2a08:	63 e0       	ldi	r22, 0x03	; 3
    2a0a:	c3 01       	movw	r24, r6
    2a0c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN7MPU605014setClockSourceEh>

            DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
    2a10:	6e e3       	ldi	r22, 0x3E	; 62
    2a12:	79 e0       	ldi	r23, 0x09	; 9
    2a14:	8e e2       	ldi	r24, 0x2E	; 46
    2a16:	93 e0       	ldi	r25, 0x03	; 3
    2a18:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setIntEnabled(0x12);
    2a1c:	62 e1       	ldi	r22, 0x12	; 18
    2a1e:	c3 01       	movw	r24, r6
    2a20:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN7MPU605013setIntEnabledEh>

            DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
    2a24:	6e e1       	ldi	r22, 0x1E	; 30
    2a26:	79 e0       	ldi	r23, 0x09	; 9
    2a28:	8e e2       	ldi	r24, 0x2E	; 46
    2a2a:	93 e0       	ldi	r25, 0x03	; 3
    2a2c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setRate(4); // 1khz / (1 + 4) = 200 Hz
    2a30:	64 e0       	ldi	r22, 0x04	; 4
    2a32:	c3 01       	movw	r24, r6
    2a34:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_ZN7MPU60507setRateEh>

            DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
    2a38:	6e ee       	ldi	r22, 0xEE	; 238
    2a3a:	78 e0       	ldi	r23, 0x08	; 8
    2a3c:	8e e2       	ldi	r24, 0x2E	; 46
    2a3e:	93 e0       	ldi	r25, 0x03	; 3
    2a40:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	c3 01       	movw	r24, r6
    2a48:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN7MPU605020setExternalFrameSyncEh>

            DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
    2a4c:	6c ec       	ldi	r22, 0xCC	; 204
    2a4e:	78 e0       	ldi	r23, 0x08	; 8
    2a50:	8e e2       	ldi	r24, 0x2E	; 46
    2a52:	93 e0       	ldi	r25, 0x03	; 3
    2a54:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setDLPFMode(MPU6050_DLPF_BW_42);
    2a58:	63 e0       	ldi	r22, 0x03	; 3
    2a5a:	c3 01       	movw	r24, r6
    2a5c:	0e 94 c6 0a 	call	0x158c	; 0x158c <_ZN7MPU605011setDLPFModeEh>

            DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
    2a60:	6c e9       	ldi	r22, 0x9C	; 156
    2a62:	78 e0       	ldi	r23, 0x08	; 8
    2a64:	8e e2       	ldi	r24, 0x2E	; 46
    2a66:	93 e0       	ldi	r25, 0x03	; 3
    2a68:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
    2a6c:	63 e0       	ldi	r22, 0x03	; 3
    2a6e:	c3 01       	movw	r24, r6
    2a70:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_ZN7MPU605021setFullScaleGyroRangeEh>

            DEBUG_PRINTLN(F("Setting DMP configuration bytes (function unknown)..."));
    2a74:	66 e6       	ldi	r22, 0x66	; 102
    2a76:	78 e0       	ldi	r23, 0x08	; 8
    2a78:	8e e2       	ldi	r24, 0x2E	; 46
    2a7a:	93 e0       	ldi	r25, 0x03	; 3
    2a7c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setDMPConfig1(0x03);
    2a80:	63 e0       	ldi	r22, 0x03	; 3
    2a82:	c3 01       	movw	r24, r6
    2a84:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <_ZN7MPU605013setDMPConfig1Eh>
            setDMPConfig2(0x00);
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	c3 01       	movw	r24, r6
    2a8c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN7MPU605013setDMPConfig2Eh>

            DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
    2a90:	6c e4       	ldi	r22, 0x4C	; 76
    2a92:	78 e0       	ldi	r23, 0x08	; 8
    2a94:	8e e2       	ldi	r24, 0x2E	; 46
    2a96:	93 e0       	ldi	r25, 0x03	; 3
    2a98:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setOTPBankValid(false);
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	c3 01       	movw	r24, r6
    2aa0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN7MPU605015setOTPBankValidEb>

            DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
    2aa4:	68 e1       	ldi	r22, 0x18	; 24
    2aa6:	78 e0       	ldi	r23, 0x08	; 8
    2aa8:	8e e2       	ldi	r24, 0x2E	; 46
    2aaa:	93 e0       	ldi	r25, 0x03	; 3
    2aac:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setXGyroOffsetTC(xgOffsetTC);
    2ab0:	6a 2d       	mov	r22, r10
    2ab2:	c3 01       	movw	r24, r6
    2ab4:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
    2ab8:	6b 2d       	mov	r22, r11
    2aba:	c3 01       	movw	r24, r6
    2abc:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
    2ac0:	61 2f       	mov	r22, r17
    2ac2:	c3 01       	movw	r24, r6
    2ac4:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN7MPU605016setZGyroOffsetTCEa>
            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro user offsets to zero..."));
            //setXGyroOffset(0);
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
    2ac8:	62 ee       	ldi	r22, 0xE2	; 226
    2aca:	77 e0       	ldi	r23, 0x07	; 7
    2acc:	8e e2       	ldi	r24, 0x2E	; 46
    2ace:	93 e0       	ldi	r25, 0x03	; 3
    2ad0:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
    2ad4:	a1 2c       	mov	r10, r1
    2ad6:	b1 2c       	mov	r11, r1
    2ad8:	8d e3       	ldi	r24, 0x3D	; 61
    2ada:	9c e0       	ldi	r25, 0x0C	; 12
    2adc:	4c 01       	movw	r8, r24
    2ade:	f5 01       	movw	r30, r10
    2ae0:	e3 5c       	subi	r30, 0xC3	; 195
    2ae2:	f3 4f       	sbci	r31, 0xF3	; 243
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    2ae4:	e4 91       	lpm	r30, Z
    2ae6:	a1 e8       	ldi	r26, 0x81	; 129
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	ac 0f       	add	r26, r28
    2aec:	bd 1f       	adc	r27, r29
    2aee:	aa 0d       	add	r26, r10
    2af0:	b1 1d       	adc	r27, r1
    2af2:	ec 93       	st	X, r30
    2af4:	61 e0       	ldi	r22, 0x01	; 1
    2af6:	6a 0d       	add	r22, r10
    2af8:	2f ef       	ldi	r18, 0xFF	; 255
    2afa:	a2 1a       	sub	r10, r18
    2afc:	b2 0a       	sbc	r11, r18
    2afe:	e3 e0       	ldi	r30, 0x03	; 3
    2b00:	ea 15       	cp	r30, r10
    2b02:	60 f7       	brcc	.-40     	; 0x2adc <_ZN7MPU605013dmpInitializeEv+0x360>
    2b04:	cd 57       	subi	r28, 0x7D	; 125
    2b06:	df 4f       	sbci	r29, 0xFF	; 255
    2b08:	48 81       	ld	r20, Y
    2b0a:	c3 58       	subi	r28, 0x83	; 131
    2b0c:	d0 40       	sbci	r29, 0x00	; 0
    2b0e:	70 e0       	ldi	r23, 0x00	; 0
    2b10:	24 2f       	mov	r18, r20
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	2d 5f       	subi	r18, 0xFD	; 253
    2b16:	3f 4f       	sbci	r19, 0xFF	; 255
    2b18:	62 17       	cp	r22, r18
    2b1a:	73 07       	cpc	r23, r19
    2b1c:	fc f2       	brlt	.-66     	; 0x2adc <_ZN7MPU605013dmpInitializeEv+0x360>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    2b1e:	50 e0       	ldi	r21, 0x00	; 0
    2b20:	61 e8       	ldi	r22, 0x81	; 129
    2b22:	70 e0       	ldi	r23, 0x00	; 0
    2b24:	6c 0f       	add	r22, r28
    2b26:	7d 1f       	adc	r23, r29
    2b28:	6d 5f       	subi	r22, 0xFD	; 253
    2b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2c:	c1 2c       	mov	r12, r1
    2b2e:	ee 24       	eor	r14, r14
    2b30:	e3 94       	inc	r14
    2b32:	ce 57       	subi	r28, 0x7E	; 126
    2b34:	df 4f       	sbci	r29, 0xFF	; 255
    2b36:	08 81       	ld	r16, Y
    2b38:	c2 58       	subi	r28, 0x82	; 130
    2b3a:	d0 40       	sbci	r29, 0x00	; 0
    2b3c:	cf 57       	subi	r28, 0x7F	; 127
    2b3e:	df 4f       	sbci	r29, 0xFF	; 255
    2b40:	28 81       	ld	r18, Y
    2b42:	c1 58       	subi	r28, 0x81	; 129
    2b44:	d0 40       	sbci	r29, 0x00	; 0
    2b46:	c3 01       	movw	r24, r6
    2b48:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
    2b4c:	6c ea       	ldi	r22, 0xAC	; 172
    2b4e:	77 e0       	ldi	r23, 0x07	; 7
    2b50:	8e e2       	ldi	r24, 0x2E	; 46
    2b52:	93 e0       	ldi	r25, 0x03	; 3
    2b54:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	f4 01       	movw	r30, r8
    2b5c:	ea 0d       	add	r30, r10
    2b5e:	fb 1d       	adc	r31, r11
    2b60:	84 91       	lpm	r24, Z
    2b62:	e1 e8       	ldi	r30, 0x81	; 129
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	ec 0f       	add	r30, r28
    2b68:	fd 1f       	adc	r31, r29
    2b6a:	e5 0f       	add	r30, r21
    2b6c:	f1 1d       	adc	r31, r1
    2b6e:	80 83       	st	Z, r24
    2b70:	5f 5f       	subi	r21, 0xFF	; 255
    2b72:	ff ef       	ldi	r31, 0xFF	; 255
    2b74:	af 1a       	sub	r10, r31
    2b76:	bf 0a       	sbc	r11, r31
    2b78:	54 30       	cpi	r21, 0x04	; 4
    2b7a:	78 f3       	brcs	.-34     	; 0x2b5a <_ZN7MPU605013dmpInitializeEv+0x3de>
    2b7c:	cd 57       	subi	r28, 0x7D	; 125
    2b7e:	df 4f       	sbci	r29, 0xFF	; 255
    2b80:	48 81       	ld	r20, Y
    2b82:	c3 58       	subi	r28, 0x83	; 131
    2b84:	d0 40       	sbci	r29, 0x00	; 0
    2b86:	25 2f       	mov	r18, r21
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	84 2f       	mov	r24, r20
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	03 96       	adiw	r24, 0x03	; 3
    2b90:	28 17       	cp	r18, r24
    2b92:	39 07       	cpc	r19, r25
    2b94:	14 f3       	brlt	.-60     	; 0x2b5a <_ZN7MPU605013dmpInitializeEv+0x3de>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	61 e8       	ldi	r22, 0x81	; 129
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	6c 0f       	add	r22, r28
    2b9e:	7d 1f       	adc	r23, r29
    2ba0:	6d 5f       	subi	r22, 0xFD	; 253
    2ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba4:	c1 2c       	mov	r12, r1
    2ba6:	ee 24       	eor	r14, r14
    2ba8:	e3 94       	inc	r14
    2baa:	ce 57       	subi	r28, 0x7E	; 126
    2bac:	df 4f       	sbci	r29, 0xFF	; 255
    2bae:	08 81       	ld	r16, Y
    2bb0:	c2 58       	subi	r28, 0x82	; 130
    2bb2:	d0 40       	sbci	r29, 0x00	; 0
    2bb4:	cf 57       	subi	r28, 0x7F	; 127
    2bb6:	df 4f       	sbci	r29, 0xFF	; 255
    2bb8:	28 81       	ld	r18, Y
    2bba:	c1 58       	subi	r28, 0x81	; 129
    2bbc:	d0 40       	sbci	r29, 0x00	; 0
    2bbe:	c3 01       	movw	r24, r6
    2bc0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
    2bc4:	6a e9       	ldi	r22, 0x9A	; 154
    2bc6:	77 e0       	ldi	r23, 0x07	; 7
    2bc8:	8e e2       	ldi	r24, 0x2E	; 46
    2bca:	93 e0       	ldi	r25, 0x03	; 3
    2bcc:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            resetFIFO();
    2bd0:	c3 01       	movw	r24, r6
    2bd2:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Reading FIFO count..."));
    2bd6:	64 e8       	ldi	r22, 0x84	; 132
    2bd8:	77 e0       	ldi	r23, 0x07	; 7
    2bda:	8e e2       	ldi	r24, 0x2E	; 46
    2bdc:	93 e0       	ldi	r25, 0x03	; 3
    2bde:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            uint16_t fifoCount = getFIFOCount();
    2be2:	c3 01       	movw	r24, r6
    2be4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN7MPU605012getFIFOCountEv>
    2be8:	18 2f       	mov	r17, r24
    2bea:	09 2f       	mov	r16, r25
            uint8_t fifoBuffer[128];

            DEBUG_PRINT(F("Current FIFO count="));
    2bec:	60 e7       	ldi	r22, 0x70	; 112
    2bee:	77 e0       	ldi	r23, 0x07	; 7
    2bf0:	8e e2       	ldi	r24, 0x2E	; 46
    2bf2:	93 e0       	ldi	r25, 0x03	; 3
    2bf4:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLN(fifoCount);
    2bf8:	4a e0       	ldi	r20, 0x0A	; 10
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	61 2f       	mov	r22, r17
    2bfe:	70 2f       	mov	r23, r16
    2c00:	8e e2       	ldi	r24, 0x2E	; 46
    2c02:	93 e0       	ldi	r25, 0x03	; 3
    2c04:	0e 94 18 26 	call	0x4c30	; 0x4c30 <_ZN5Print7printlnEji>
            getFIFOBytes(fifoBuffer, fifoCount);
    2c08:	41 2f       	mov	r20, r17
    2c0a:	be 01       	movw	r22, r28
    2c0c:	6f 5f       	subi	r22, 0xFF	; 255
    2c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c10:	c3 01       	movw	r24, r6
    2c12:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
    2c16:	65 e4       	ldi	r22, 0x45	; 69
    2c18:	77 e0       	ldi	r23, 0x07	; 7
    2c1a:	8e e2       	ldi	r24, 0x2E	; 46
    2c1c:	93 e0       	ldi	r25, 0x03	; 3
    2c1e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setMotionDetectionThreshold(2);
    2c22:	62 e0       	ldi	r22, 0x02	; 2
    2c24:	c3 01       	movw	r24, r6
    2c26:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <_ZN7MPU605027setMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
    2c2a:	63 e1       	ldi	r22, 0x13	; 19
    2c2c:	77 e0       	ldi	r23, 0x07	; 7
    2c2e:	8e e2       	ldi	r24, 0x2E	; 46
    2c30:	93 e0       	ldi	r25, 0x03	; 3
    2c32:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setZeroMotionDetectionThreshold(156);
    2c36:	6c e9       	ldi	r22, 0x9C	; 156
    2c38:	c3 01       	movw	r24, r6
    2c3a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
    2c3e:	68 ee       	ldi	r22, 0xE8	; 232
    2c40:	76 e0       	ldi	r23, 0x06	; 6
    2c42:	8e e2       	ldi	r24, 0x2E	; 46
    2c44:	93 e0       	ldi	r25, 0x03	; 3
    2c46:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setMotionDetectionDuration(80);
    2c4a:	60 e5       	ldi	r22, 0x50	; 80
    2c4c:	c3 01       	movw	r24, r6
    2c4e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN7MPU605026setMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
    2c52:	69 eb       	ldi	r22, 0xB9	; 185
    2c54:	76 e0       	ldi	r23, 0x06	; 6
    2c56:	8e e2       	ldi	r24, 0x2E	; 46
    2c58:	93 e0       	ldi	r25, 0x03	; 3
    2c5a:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setZeroMotionDetectionDuration(0);
    2c5e:	60 e0       	ldi	r22, 0x00	; 0
    2c60:	c3 01       	movw	r24, r6
    2c62:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
    2c66:	67 ea       	ldi	r22, 0xA7	; 167
    2c68:	76 e0       	ldi	r23, 0x06	; 6
    2c6a:	8e e2       	ldi	r24, 0x2E	; 46
    2c6c:	93 e0       	ldi	r25, 0x03	; 3
    2c6e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            resetFIFO();
    2c72:	c3 01       	movw	r24, r6
    2c74:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Enabling FIFO..."));
    2c78:	66 e9       	ldi	r22, 0x96	; 150
    2c7a:	76 e0       	ldi	r23, 0x06	; 6
    2c7c:	8e e2       	ldi	r24, 0x2E	; 46
    2c7e:	93 e0       	ldi	r25, 0x03	; 3
    2c80:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setFIFOEnabled(true);
    2c84:	61 e0       	ldi	r22, 0x01	; 1
    2c86:	c3 01       	movw	r24, r6
    2c88:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN7MPU605014setFIFOEnabledEb>

            DEBUG_PRINTLN(F("Enabling DMP..."));
    2c8c:	66 e8       	ldi	r22, 0x86	; 134
    2c8e:	76 e0       	ldi	r23, 0x06	; 6
    2c90:	8e e2       	ldi	r24, 0x2E	; 46
    2c92:	93 e0       	ldi	r25, 0x03	; 3
    2c94:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setDMPEnabled(true);
    2c98:	61 e0       	ldi	r22, 0x01	; 1
    2c9a:	c3 01       	movw	r24, r6
    2c9c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Resetting DMP..."));
    2ca0:	65 e7       	ldi	r22, 0x75	; 117
    2ca2:	76 e0       	ldi	r23, 0x06	; 6
    2ca4:	8e e2       	ldi	r24, 0x2E	; 46
    2ca6:	93 e0       	ldi	r25, 0x03	; 3
    2ca8:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            resetDMP();
    2cac:	c3 01       	movw	r24, r6
    2cae:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7MPU60508resetDMPEv>

            DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
    2cb2:	6f e3       	ldi	r22, 0x3F	; 63
    2cb4:	76 e0       	ldi	r23, 0x06	; 6
    2cb6:	8e e2       	ldi	r24, 0x2E	; 46
    2cb8:	93 e0       	ldi	r25, 0x03	; 3
    2cba:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	f4 01       	movw	r30, r8
    2cc2:	ea 0d       	add	r30, r10
    2cc4:	fb 1d       	adc	r31, r11
    2cc6:	84 91       	lpm	r24, Z
    2cc8:	e1 e8       	ldi	r30, 0x81	; 129
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	ec 0f       	add	r30, r28
    2cce:	fd 1f       	adc	r31, r29
    2cd0:	e5 0f       	add	r30, r21
    2cd2:	f1 1d       	adc	r31, r1
    2cd4:	80 83       	st	Z, r24
    2cd6:	5f 5f       	subi	r21, 0xFF	; 255
    2cd8:	2f ef       	ldi	r18, 0xFF	; 255
    2cda:	a2 1a       	sub	r10, r18
    2cdc:	b2 0a       	sbc	r11, r18
    2cde:	54 30       	cpi	r21, 0x04	; 4
    2ce0:	78 f3       	brcs	.-34     	; 0x2cc0 <_ZN7MPU605013dmpInitializeEv+0x544>
    2ce2:	cd 57       	subi	r28, 0x7D	; 125
    2ce4:	df 4f       	sbci	r29, 0xFF	; 255
    2ce6:	48 81       	ld	r20, Y
    2ce8:	c3 58       	subi	r28, 0x83	; 131
    2cea:	d0 40       	sbci	r29, 0x00	; 0
    2cec:	25 2f       	mov	r18, r21
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	84 2f       	mov	r24, r20
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	03 96       	adiw	r24, 0x03	; 3
    2cf6:	28 17       	cp	r18, r24
    2cf8:	39 07       	cpc	r19, r25
    2cfa:	14 f3       	brlt	.-60     	; 0x2cc0 <_ZN7MPU605013dmpInitializeEv+0x544>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    2cfc:	50 e0       	ldi	r21, 0x00	; 0
    2cfe:	61 e8       	ldi	r22, 0x81	; 129
    2d00:	70 e0       	ldi	r23, 0x00	; 0
    2d02:	6c 0f       	add	r22, r28
    2d04:	7d 1f       	adc	r23, r29
    2d06:	6d 5f       	subi	r22, 0xFD	; 253
    2d08:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0a:	c1 2c       	mov	r12, r1
    2d0c:	ee 24       	eor	r14, r14
    2d0e:	e3 94       	inc	r14
    2d10:	ce 57       	subi	r28, 0x7E	; 126
    2d12:	df 4f       	sbci	r29, 0xFF	; 255
    2d14:	08 81       	ld	r16, Y
    2d16:	c2 58       	subi	r28, 0x82	; 130
    2d18:	d0 40       	sbci	r29, 0x00	; 0
    2d1a:	cf 57       	subi	r28, 0x7F	; 127
    2d1c:	df 4f       	sbci	r29, 0xFF	; 255
    2d1e:	28 81       	ld	r18, Y
    2d20:	c1 58       	subi	r28, 0x81	; 129
    2d22:	d0 40       	sbci	r29, 0x00	; 0
    2d24:	c3 01       	movw	r24, r6
    2d26:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
    2d2a:	69 e0       	ldi	r22, 0x09	; 9
    2d2c:	76 e0       	ldi	r23, 0x06	; 6
    2d2e:	8e e2       	ldi	r24, 0x2E	; 46
    2d30:	93 e0       	ldi	r25, 0x03	; 3
    2d32:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    2d36:	50 e0       	ldi	r21, 0x00	; 0
    2d38:	f4 01       	movw	r30, r8
    2d3a:	ea 0d       	add	r30, r10
    2d3c:	fb 1d       	adc	r31, r11
    2d3e:	84 91       	lpm	r24, Z
    2d40:	e1 e8       	ldi	r30, 0x81	; 129
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	ec 0f       	add	r30, r28
    2d46:	fd 1f       	adc	r31, r29
    2d48:	e5 0f       	add	r30, r21
    2d4a:	f1 1d       	adc	r31, r1
    2d4c:	80 83       	st	Z, r24
    2d4e:	5f 5f       	subi	r21, 0xFF	; 255
    2d50:	8f ef       	ldi	r24, 0xFF	; 255
    2d52:	a8 1a       	sub	r10, r24
    2d54:	b8 0a       	sbc	r11, r24
    2d56:	54 30       	cpi	r21, 0x04	; 4
    2d58:	78 f3       	brcs	.-34     	; 0x2d38 <_ZN7MPU605013dmpInitializeEv+0x5bc>
    2d5a:	cd 57       	subi	r28, 0x7D	; 125
    2d5c:	df 4f       	sbci	r29, 0xFF	; 255
    2d5e:	48 81       	ld	r20, Y
    2d60:	c3 58       	subi	r28, 0x83	; 131
    2d62:	d0 40       	sbci	r29, 0x00	; 0
    2d64:	25 2f       	mov	r18, r21
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	84 2f       	mov	r24, r20
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	03 96       	adiw	r24, 0x03	; 3
    2d6e:	28 17       	cp	r18, r24
    2d70:	39 07       	cpc	r19, r25
    2d72:	14 f3       	brlt	.-60     	; 0x2d38 <_ZN7MPU605013dmpInitializeEv+0x5bc>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	61 e8       	ldi	r22, 0x81	; 129
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	6c 0f       	add	r22, r28
    2d7c:	7d 1f       	adc	r23, r29
    2d7e:	6d 5f       	subi	r22, 0xFD	; 253
    2d80:	7f 4f       	sbci	r23, 0xFF	; 255
    2d82:	c1 2c       	mov	r12, r1
    2d84:	ee 24       	eor	r14, r14
    2d86:	e3 94       	inc	r14
    2d88:	ce 57       	subi	r28, 0x7E	; 126
    2d8a:	df 4f       	sbci	r29, 0xFF	; 255
    2d8c:	08 81       	ld	r16, Y
    2d8e:	c2 58       	subi	r28, 0x82	; 130
    2d90:	d0 40       	sbci	r29, 0x00	; 0
    2d92:	cf 57       	subi	r28, 0x7F	; 127
    2d94:	df 4f       	sbci	r29, 0xFF	; 255
    2d96:	28 81       	ld	r18, Y
    2d98:	c1 58       	subi	r28, 0x81	; 129
    2d9a:	d0 40       	sbci	r29, 0x00	; 0
    2d9c:	c3 01       	movw	r24, r6
    2d9e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
    2da2:	63 ed       	ldi	r22, 0xD3	; 211
    2da4:	75 e0       	ldi	r23, 0x05	; 5
    2da6:	8e e2       	ldi	r24, 0x2E	; 46
    2da8:	93 e0       	ldi	r25, 0x03	; 3
    2daa:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	f4 01       	movw	r30, r8
    2db2:	ea 0d       	add	r30, r10
    2db4:	fb 1d       	adc	r31, r11
    2db6:	84 91       	lpm	r24, Z
    2db8:	e1 e8       	ldi	r30, 0x81	; 129
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	ec 0f       	add	r30, r28
    2dbe:	fd 1f       	adc	r31, r29
    2dc0:	e5 0f       	add	r30, r21
    2dc2:	f1 1d       	adc	r31, r1
    2dc4:	80 83       	st	Z, r24
    2dc6:	5f 5f       	subi	r21, 0xFF	; 255
    2dc8:	ef ef       	ldi	r30, 0xFF	; 255
    2dca:	ae 1a       	sub	r10, r30
    2dcc:	be 0a       	sbc	r11, r30
    2dce:	54 30       	cpi	r21, 0x04	; 4
    2dd0:	78 f3       	brcs	.-34     	; 0x2db0 <_ZN7MPU605013dmpInitializeEv+0x634>
    2dd2:	cd 57       	subi	r28, 0x7D	; 125
    2dd4:	df 4f       	sbci	r29, 0xFF	; 255
    2dd6:	48 81       	ld	r20, Y
    2dd8:	c3 58       	subi	r28, 0x83	; 131
    2dda:	d0 40       	sbci	r29, 0x00	; 0
    2ddc:	25 2f       	mov	r18, r21
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	84 2f       	mov	r24, r20
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	03 96       	adiw	r24, 0x03	; 3
    2de6:	28 17       	cp	r18, r24
    2de8:	39 07       	cpc	r19, r25
    2dea:	14 f3       	brlt	.-60     	; 0x2db0 <_ZN7MPU605013dmpInitializeEv+0x634>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	61 e8       	ldi	r22, 0x81	; 129
    2df0:	70 e0       	ldi	r23, 0x00	; 0
    2df2:	6c 0f       	add	r22, r28
    2df4:	7d 1f       	adc	r23, r29
    2df6:	6d 5f       	subi	r22, 0xFD	; 253
    2df8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfa:	c1 2c       	mov	r12, r1
    2dfc:	ee 24       	eor	r14, r14
    2dfe:	e3 94       	inc	r14
    2e00:	ce 57       	subi	r28, 0x7E	; 126
    2e02:	df 4f       	sbci	r29, 0xFF	; 255
    2e04:	08 81       	ld	r16, Y
    2e06:	c2 58       	subi	r28, 0x82	; 130
    2e08:	d0 40       	sbci	r29, 0x00	; 0
    2e0a:	cf 57       	subi	r28, 0x7F	; 127
    2e0c:	df 4f       	sbci	r29, 0xFF	; 255
    2e0e:	28 81       	ld	r18, Y
    2e10:	c1 58       	subi	r28, 0x81	; 129
    2e12:	d0 40       	sbci	r29, 0x00	; 0
    2e14:	c3 01       	movw	r24, r6
    2e16:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
    2e1a:	65 eb       	ldi	r22, 0xB5	; 181
    2e1c:	75 e0       	ldi	r23, 0x05	; 5
    2e1e:	8e e2       	ldi	r24, 0x2E	; 46
    2e20:	93 e0       	ldi	r25, 0x03	; 3
    2e22:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            while ((fifoCount = getFIFOCount()) < 3);
    2e26:	c3 01       	movw	r24, r6
    2e28:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN7MPU605012getFIFOCountEv>
    2e2c:	8c 01       	movw	r16, r24
    2e2e:	83 30       	cpi	r24, 0x03	; 3
    2e30:	91 05       	cpc	r25, r1
    2e32:	c8 f3       	brcs	.-14     	; 0x2e26 <_ZN7MPU605013dmpInitializeEv+0x6aa>

            DEBUG_PRINT(F("Current FIFO count="));
    2e34:	61 ea       	ldi	r22, 0xA1	; 161
    2e36:	75 e0       	ldi	r23, 0x05	; 5
    2e38:	8e e2       	ldi	r24, 0x2E	; 46
    2e3a:	93 e0       	ldi	r25, 0x03	; 3
    2e3c:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLN(fifoCount);
    2e40:	4a e0       	ldi	r20, 0x0A	; 10
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	b8 01       	movw	r22, r16
    2e46:	8e e2       	ldi	r24, 0x2E	; 46
    2e48:	93 e0       	ldi	r25, 0x03	; 3
    2e4a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <_ZN5Print7printlnEji>
            DEBUG_PRINTLN(F("Reading FIFO data..."));
    2e4e:	6c e8       	ldi	r22, 0x8C	; 140
    2e50:	75 e0       	ldi	r23, 0x05	; 5
    2e52:	8e e2       	ldi	r24, 0x2E	; 46
    2e54:	93 e0       	ldi	r25, 0x03	; 3
    2e56:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            getFIFOBytes(fifoBuffer, fifoCount);
    2e5a:	40 2f       	mov	r20, r16
    2e5c:	be 01       	movw	r22, r28
    2e5e:	6f 5f       	subi	r22, 0xFF	; 255
    2e60:	7f 4f       	sbci	r23, 0xFF	; 255
    2e62:	c3 01       	movw	r24, r6
    2e64:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
    2e68:	60 e7       	ldi	r22, 0x70	; 112
    2e6a:	75 e0       	ldi	r23, 0x05	; 5
    2e6c:	8e e2       	ldi	r24, 0x2E	; 46
    2e6e:	93 e0       	ldi	r25, 0x03	; 3
    2e70:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            uint8_t mpuIntStatus = getIntStatus();
    2e74:	c3 01       	movw	r24, r6
    2e76:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7MPU605012getIntStatusEv>
    2e7a:	18 2f       	mov	r17, r24

            DEBUG_PRINT(F("Current interrupt status="));
    2e7c:	66 e5       	ldi	r22, 0x56	; 86
    2e7e:	75 e0       	ldi	r23, 0x05	; 5
    2e80:	8e e2       	ldi	r24, 0x2E	; 46
    2e82:	93 e0       	ldi	r25, 0x03	; 3
    2e84:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLNF(mpuIntStatus, HEX);
    2e88:	40 e1       	ldi	r20, 0x10	; 16
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	61 2f       	mov	r22, r17
    2e8e:	8e e2       	ldi	r24, 0x2E	; 46
    2e90:	93 e0       	ldi	r25, 0x03	; 3
    2e92:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <_ZN5Print7printlnEhi>

            DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
    2e96:	60 e2       	ldi	r22, 0x20	; 32
    2e98:	75 e0       	ldi	r23, 0x05	; 5
    2e9a:	8e e2       	ldi	r24, 0x2E	; 46
    2e9c:	93 e0       	ldi	r25, 0x03	; 3
    2e9e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    2ea2:	50 e0       	ldi	r21, 0x00	; 0
    2ea4:	f4 01       	movw	r30, r8
    2ea6:	ea 0d       	add	r30, r10
    2ea8:	fb 1d       	adc	r31, r11
    2eaa:	84 91       	lpm	r24, Z
    2eac:	e1 e8       	ldi	r30, 0x81	; 129
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	ec 0f       	add	r30, r28
    2eb2:	fd 1f       	adc	r31, r29
    2eb4:	e5 0f       	add	r30, r21
    2eb6:	f1 1d       	adc	r31, r1
    2eb8:	80 83       	st	Z, r24
    2eba:	5f 5f       	subi	r21, 0xFF	; 255
    2ebc:	ff ef       	ldi	r31, 0xFF	; 255
    2ebe:	af 1a       	sub	r10, r31
    2ec0:	bf 0a       	sbc	r11, r31
    2ec2:	54 30       	cpi	r21, 0x04	; 4
    2ec4:	78 f3       	brcs	.-34     	; 0x2ea4 <_ZN7MPU605013dmpInitializeEv+0x728>
    2ec6:	cd 57       	subi	r28, 0x7D	; 125
    2ec8:	df 4f       	sbci	r29, 0xFF	; 255
    2eca:	48 81       	ld	r20, Y
    2ecc:	c3 58       	subi	r28, 0x83	; 131
    2ece:	d0 40       	sbci	r29, 0x00	; 0
    2ed0:	25 2f       	mov	r18, r21
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	84 2f       	mov	r24, r20
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	03 96       	adiw	r24, 0x03	; 3
    2eda:	28 17       	cp	r18, r24
    2edc:	39 07       	cpc	r19, r25
    2ede:	14 f3       	brlt	.-60     	; 0x2ea4 <_ZN7MPU605013dmpInitializeEv+0x728>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	61 e8       	ldi	r22, 0x81	; 129
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	6c 0f       	add	r22, r28
    2ee8:	7d 1f       	adc	r23, r29
    2eea:	6d 5f       	subi	r22, 0xFD	; 253
    2eec:	7f 4f       	sbci	r23, 0xFF	; 255
    2eee:	ce 57       	subi	r28, 0x7E	; 126
    2ef0:	df 4f       	sbci	r29, 0xFF	; 255
    2ef2:	08 81       	ld	r16, Y
    2ef4:	c2 58       	subi	r28, 0x82	; 130
    2ef6:	d0 40       	sbci	r29, 0x00	; 0
    2ef8:	cf 57       	subi	r28, 0x7F	; 127
    2efa:	df 4f       	sbci	r29, 0xFF	; 255
    2efc:	28 81       	ld	r18, Y
    2efe:	c1 58       	subi	r28, 0x81	; 129
    2f00:	d0 40       	sbci	r29, 0x00	; 0
    2f02:	c3 01       	movw	r24, r6
    2f04:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN7MPU605015readMemoryBlockEPhjhh>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
    2f08:	62 e0       	ldi	r22, 0x02	; 2
    2f0a:	75 e0       	ldi	r23, 0x05	; 5
    2f0c:	8e e2       	ldi	r24, 0x2E	; 46
    2f0e:	93 e0       	ldi	r25, 0x03	; 3
    2f10:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            while ((fifoCount = getFIFOCount()) < 3);
    2f14:	c3 01       	movw	r24, r6
    2f16:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN7MPU605012getFIFOCountEv>
    2f1a:	4c 01       	movw	r8, r24
    2f1c:	83 30       	cpi	r24, 0x03	; 3
    2f1e:	91 05       	cpc	r25, r1
    2f20:	c8 f3       	brcs	.-14     	; 0x2f14 <_ZN7MPU605013dmpInitializeEv+0x798>

            DEBUG_PRINT(F("Current FIFO count="));
    2f22:	6e ee       	ldi	r22, 0xEE	; 238
    2f24:	74 e0       	ldi	r23, 0x04	; 4
    2f26:	8e e2       	ldi	r24, 0x2E	; 46
    2f28:	93 e0       	ldi	r25, 0x03	; 3
    2f2a:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLN(fifoCount);
    2f2e:	4a e0       	ldi	r20, 0x0A	; 10
    2f30:	50 e0       	ldi	r21, 0x00	; 0
    2f32:	b4 01       	movw	r22, r8
    2f34:	8e e2       	ldi	r24, 0x2E	; 46
    2f36:	93 e0       	ldi	r25, 0x03	; 3
    2f38:	0e 94 18 26 	call	0x4c30	; 0x4c30 <_ZN5Print7printlnEji>

            DEBUG_PRINTLN(F("Reading FIFO data..."));
    2f3c:	69 ed       	ldi	r22, 0xD9	; 217
    2f3e:	74 e0       	ldi	r23, 0x04	; 4
    2f40:	8e e2       	ldi	r24, 0x2E	; 46
    2f42:	93 e0       	ldi	r25, 0x03	; 3
    2f44:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            getFIFOBytes(fifoBuffer, fifoCount);
    2f48:	48 2d       	mov	r20, r8
    2f4a:	be 01       	movw	r22, r28
    2f4c:	6f 5f       	subi	r22, 0xFF	; 255
    2f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f50:	c3 01       	movw	r24, r6
    2f52:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
    2f56:	6d eb       	ldi	r22, 0xBD	; 189
    2f58:	74 e0       	ldi	r23, 0x04	; 4
    2f5a:	8e e2       	ldi	r24, 0x2E	; 46
    2f5c:	93 e0       	ldi	r25, 0x03	; 3
    2f5e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            mpuIntStatus = getIntStatus();
    2f62:	c3 01       	movw	r24, r6
    2f64:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7MPU605012getIntStatusEv>
    2f68:	18 2f       	mov	r17, r24

            DEBUG_PRINT(F("Current interrupt status="));
    2f6a:	63 ea       	ldi	r22, 0xA3	; 163
    2f6c:	74 e0       	ldi	r23, 0x04	; 4
    2f6e:	8e e2       	ldi	r24, 0x2E	; 46
    2f70:	93 e0       	ldi	r25, 0x03	; 3
    2f72:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLNF(mpuIntStatus, HEX);
    2f76:	40 e1       	ldi	r20, 0x10	; 16
    2f78:	50 e0       	ldi	r21, 0x00	; 0
    2f7a:	61 2f       	mov	r22, r17
    2f7c:	8e e2       	ldi	r24, 0x2E	; 46
    2f7e:	93 e0       	ldi	r25, 0x03	; 3
    2f80:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <_ZN5Print7printlnEhi>

            DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
    2f84:	6d e6       	ldi	r22, 0x6D	; 109
    2f86:	74 e0       	ldi	r23, 0x04	; 4
    2f88:	8e e2       	ldi	r24, 0x2E	; 46
    2f8a:	93 e0       	ldi	r25, 0x03	; 3
    2f8c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    2f90:	f5 01       	movw	r30, r10
    2f92:	e3 5c       	subi	r30, 0xC3	; 195
    2f94:	f3 4f       	sbci	r31, 0xF3	; 243
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    2f96:	50 e0       	ldi	r21, 0x00	; 0
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <_ZN7MPU605013dmpInitializeEv+0x820>
    2f9a:	31 96       	adiw	r30, 0x01	; 1
    2f9c:	84 91       	lpm	r24, Z
    2f9e:	a1 e8       	ldi	r26, 0x81	; 129
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	ac 0f       	add	r26, r28
    2fa4:	bd 1f       	adc	r27, r29
    2fa6:	a5 0f       	add	r26, r21
    2fa8:	b1 1d       	adc	r27, r1
    2faa:	8c 93       	st	X, r24
    2fac:	5f 5f       	subi	r21, 0xFF	; 255
    2fae:	54 30       	cpi	r21, 0x04	; 4
    2fb0:	a0 f3       	brcs	.-24     	; 0x2f9a <_ZN7MPU605013dmpInitializeEv+0x81e>
    2fb2:	cd 57       	subi	r28, 0x7D	; 125
    2fb4:	df 4f       	sbci	r29, 0xFF	; 255
    2fb6:	48 81       	ld	r20, Y
    2fb8:	c3 58       	subi	r28, 0x83	; 131
    2fba:	d0 40       	sbci	r29, 0x00	; 0
    2fbc:	25 2f       	mov	r18, r21
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	84 2f       	mov	r24, r20
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	03 96       	adiw	r24, 0x03	; 3
    2fc6:	28 17       	cp	r18, r24
    2fc8:	39 07       	cpc	r19, r25
    2fca:	3c f3       	brlt	.-50     	; 0x2f9a <_ZN7MPU605013dmpInitializeEv+0x81e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    2fcc:	50 e0       	ldi	r21, 0x00	; 0
    2fce:	61 e8       	ldi	r22, 0x81	; 129
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	6c 0f       	add	r22, r28
    2fd4:	7d 1f       	adc	r23, r29
    2fd6:	6d 5f       	subi	r22, 0xFD	; 253
    2fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fda:	c1 2c       	mov	r12, r1
    2fdc:	ee 24       	eor	r14, r14
    2fde:	e3 94       	inc	r14
    2fe0:	ce 57       	subi	r28, 0x7E	; 126
    2fe2:	df 4f       	sbci	r29, 0xFF	; 255
    2fe4:	08 81       	ld	r16, Y
    2fe6:	c2 58       	subi	r28, 0x82	; 130
    2fe8:	d0 40       	sbci	r29, 0x00	; 0
    2fea:	cf 57       	subi	r28, 0x7F	; 127
    2fec:	df 4f       	sbci	r29, 0xFF	; 255
    2fee:	28 81       	ld	r18, Y
    2ff0:	c1 58       	subi	r28, 0x81	; 129
    2ff2:	d0 40       	sbci	r29, 0x00	; 0
    2ff4:	c3 01       	movw	r24, r6
    2ff6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("DMP is good to go! Finally."));
    2ffa:	61 e5       	ldi	r22, 0x51	; 81
    2ffc:	74 e0       	ldi	r23, 0x04	; 4
    2ffe:	8e e2       	ldi	r24, 0x2E	; 46
    3000:	93 e0       	ldi	r25, 0x03	; 3
    3002:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>

            DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
    3006:	69 e2       	ldi	r22, 0x29	; 41
    3008:	74 e0       	ldi	r23, 0x04	; 4
    300a:	8e e2       	ldi	r24, 0x2E	; 46
    300c:	93 e0       	ldi	r25, 0x03	; 3
    300e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setDMPEnabled(false);
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	c3 01       	movw	r24, r6
    3016:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
    301a:	6e ee       	ldi	r22, 0xEE	; 238
    301c:	73 e0       	ldi	r23, 0x03	; 3
    301e:	8e e2       	ldi	r24, 0x2E	; 46
    3020:	93 e0       	ldi	r25, 0x03	; 3
    3022:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            dmpPacketSize = 42;
    3026:	8a e2       	ldi	r24, 0x2A	; 42
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	f3 01       	movw	r30, r6
    302c:	93 83       	std	Z+3, r25	; 0x03
    302e:	82 83       	std	Z+2, r24	; 0x02
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
    3030:	66 eb       	ldi	r22, 0xB6	; 182
    3032:	73 e0       	ldi	r23, 0x03	; 3
    3034:	8e e2       	ldi	r24, 0x2E	; 46
    3036:	93 e0       	ldi	r25, 0x03	; 3
    3038:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            resetFIFO();
    303c:	c3 01       	movw	r24, r6
    303e:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
    3042:	c3 01       	movw	r24, r6
    3044:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	0f c0       	rjmp	.+30     	; 0x306a <_ZN7MPU605013dmpInitializeEv+0x8ee>

            DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
            getIntStatus();
        } else {
            DEBUG_PRINTLN(F("ERROR! DMP configuration verification failed."));
    304c:	68 e8       	ldi	r22, 0x88	; 136
    304e:	73 e0       	ldi	r23, 0x03	; 3
    3050:	8e e2       	ldi	r24, 0x2E	; 46
    3052:	93 e0       	ldi	r25, 0x03	; 3
    3054:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
            return 2; // configuration block loading failed
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	07 c0       	rjmp	.+14     	; 0x306a <_ZN7MPU605013dmpInitializeEv+0x8ee>
        }
    } else {
        DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
    305c:	63 e6       	ldi	r22, 0x63	; 99
    305e:	73 e0       	ldi	r23, 0x03	; 3
    3060:	8e e2       	ldi	r24, 0x2E	; 46
    3062:	93 e0       	ldi	r25, 0x03	; 3
    3064:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
        return 1; // main binary block loading failed
    3068:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0; // success
}
    306a:	c0 57       	subi	r28, 0x70	; 112
    306c:	df 4f       	sbci	r29, 0xFF	; 255
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ef 90       	pop	r14
    3082:	cf 90       	pop	r12
    3084:	bf 90       	pop	r11
    3086:	af 90       	pop	r10
    3088:	9f 90       	pop	r9
    308a:	8f 90       	pop	r8
    308c:	7f 90       	pop	r7
    308e:	6f 90       	pop	r6
    3090:	08 95       	ret

00003092 <_ZN7MPU605011dmpGetAccelEP11VectorInt16PKh>:
    data[0] = (packet[28] << 8) + packet[29];
    data[1] = (packet[32] << 8) + packet[33];
    data[2] = (packet[36] << 8) + packet[37];
    return 0;
}
uint8_t MPU6050::dmpGetAccel(VectorInt16 *v, const uint8_t* packet) {
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	db 01       	movw	r26, r22
    3098:	fa 01       	movw	r30, r20
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
    309a:	30 97       	sbiw	r30, 0x00	; 0
    309c:	19 f4       	brne	.+6      	; 0x30a4 <_ZN7MPU605011dmpGetAccelEP11VectorInt16PKh+0x12>
    309e:	ec 01       	movw	r28, r24
    30a0:	e8 81       	ld	r30, Y
    30a2:	f9 81       	ldd	r31, Y+1	; 0x01
    v -> x = (packet[28] << 8) + packet[29];
    30a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	98 2f       	mov	r25, r24
    30aa:	88 27       	eor	r24, r24
    30ac:	25 8d       	ldd	r18, Z+29	; 0x1d
    30ae:	82 0f       	add	r24, r18
    30b0:	91 1d       	adc	r25, r1
    30b2:	11 96       	adiw	r26, 0x01	; 1
    30b4:	9c 93       	st	X, r25
    30b6:	8e 93       	st	-X, r24
    v -> y = (packet[32] << 8) + packet[33];
    30b8:	80 a1       	ldd	r24, Z+32	; 0x20
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	98 2f       	mov	r25, r24
    30be:	88 27       	eor	r24, r24
    30c0:	21 a1       	ldd	r18, Z+33	; 0x21
    30c2:	82 0f       	add	r24, r18
    30c4:	91 1d       	adc	r25, r1
    30c6:	13 96       	adiw	r26, 0x03	; 3
    30c8:	9c 93       	st	X, r25
    30ca:	8e 93       	st	-X, r24
    30cc:	12 97       	sbiw	r26, 0x02	; 2
    v -> z = (packet[36] << 8) + packet[37];
    30ce:	84 a1       	ldd	r24, Z+36	; 0x24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	98 2f       	mov	r25, r24
    30d4:	88 27       	eor	r24, r24
    30d6:	25 a1       	ldd	r18, Z+37	; 0x25
    30d8:	82 0f       	add	r24, r18
    30da:	91 1d       	adc	r25, r1
    30dc:	15 96       	adiw	r26, 0x05	; 5
    30de:	9c 93       	st	X, r25
    30e0:	8e 93       	st	-X, r24
    30e2:	14 97       	sbiw	r26, 0x04	; 4
    return 0;
}
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	08 95       	ret

000030ec <_ZN7MPU605016dmpGetQuaternionEPiPKh>:
    data[1] = ((packet[4] << 24) + (packet[5] << 16) + (packet[6] << 8) + packet[7]);
    data[2] = ((packet[8] << 24) + (packet[9] << 16) + (packet[10] << 8) + packet[11]);
    data[3] = ((packet[12] << 24) + (packet[13] << 16) + (packet[14] << 8) + packet[15]);
    return 0;
}
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	db 01       	movw	r26, r22
    30f2:	fa 01       	movw	r30, r20
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
    30f4:	30 97       	sbiw	r30, 0x00	; 0
    30f6:	19 f4       	brne	.+6      	; 0x30fe <_ZN7MPU605016dmpGetQuaternionEPiPKh+0x12>
    30f8:	ec 01       	movw	r28, r24
    30fa:	e8 81       	ld	r30, Y
    30fc:	f9 81       	ldd	r31, Y+1	; 0x01
    data[0] = ((packet[0] << 8) + packet[1]);
    30fe:	80 81       	ld	r24, Z
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	98 2f       	mov	r25, r24
    3104:	88 27       	eor	r24, r24
    3106:	21 81       	ldd	r18, Z+1	; 0x01
    3108:	82 0f       	add	r24, r18
    310a:	91 1d       	adc	r25, r1
    310c:	11 96       	adiw	r26, 0x01	; 1
    310e:	9c 93       	st	X, r25
    3110:	8e 93       	st	-X, r24
    data[1] = ((packet[4] << 8) + packet[5]);
    3112:	84 81       	ldd	r24, Z+4	; 0x04
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	98 2f       	mov	r25, r24
    3118:	88 27       	eor	r24, r24
    311a:	25 81       	ldd	r18, Z+5	; 0x05
    311c:	82 0f       	add	r24, r18
    311e:	91 1d       	adc	r25, r1
    3120:	13 96       	adiw	r26, 0x03	; 3
    3122:	9c 93       	st	X, r25
    3124:	8e 93       	st	-X, r24
    3126:	12 97       	sbiw	r26, 0x02	; 2
    data[2] = ((packet[8] << 8) + packet[9]);
    3128:	80 85       	ldd	r24, Z+8	; 0x08
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	98 2f       	mov	r25, r24
    312e:	88 27       	eor	r24, r24
    3130:	21 85       	ldd	r18, Z+9	; 0x09
    3132:	82 0f       	add	r24, r18
    3134:	91 1d       	adc	r25, r1
    3136:	15 96       	adiw	r26, 0x05	; 5
    3138:	9c 93       	st	X, r25
    313a:	8e 93       	st	-X, r24
    313c:	14 97       	sbiw	r26, 0x04	; 4
    data[3] = ((packet[12] << 8) + packet[13]);
    313e:	84 85       	ldd	r24, Z+12	; 0x0c
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	98 2f       	mov	r25, r24
    3144:	88 27       	eor	r24, r24
    3146:	25 85       	ldd	r18, Z+13	; 0x0d
    3148:	82 0f       	add	r24, r18
    314a:	91 1d       	adc	r25, r1
    314c:	17 96       	adiw	r26, 0x07	; 7
    314e:	9c 93       	st	X, r25
    3150:	8e 93       	st	-X, r24
    3152:	16 97       	sbiw	r26, 0x06	; 6
    return 0;
}
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	08 95       	ret

0000315c <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	28 97       	sbiw	r28, 0x08	; 8
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	8b 01       	movw	r16, r22
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    int16_t qI[4];
    uint8_t status = dmpGetQuaternion(qI, packet);
    3178:	be 01       	movw	r22, r28
    317a:	6f 5f       	subi	r22, 0xFF	; 255
    317c:	7f 4f       	sbci	r23, 0xFF	; 255
    317e:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN7MPU605016dmpGetQuaternionEPiPKh>
    3182:	f8 2e       	mov	r15, r24
    if (status == 0) {
    3184:	81 11       	cpse	r24, r1
    3186:	4c c0       	rjmp	.+152    	; 0x3220 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0xc4>
        q -> w = (float)qI[0] / 16384.0f;
    3188:	69 81       	ldd	r22, Y+1	; 0x01
    318a:	7a 81       	ldd	r23, Y+2	; 0x02
    318c:	88 27       	eor	r24, r24
    318e:	77 fd       	sbrc	r23, 7
    3190:	80 95       	com	r24
    3192:	98 2f       	mov	r25, r24
    3194:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__floatsisf>
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	40 e8       	ldi	r20, 0x80	; 128
    319e:	58 e3       	ldi	r21, 0x38	; 56
    31a0:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    31a4:	f8 01       	movw	r30, r16
    31a6:	60 83       	st	Z, r22
    31a8:	71 83       	std	Z+1, r23	; 0x01
    31aa:	82 83       	std	Z+2, r24	; 0x02
    31ac:	93 83       	std	Z+3, r25	; 0x03
        q -> x = (float)qI[1] / 16384.0f;
    31ae:	6b 81       	ldd	r22, Y+3	; 0x03
    31b0:	7c 81       	ldd	r23, Y+4	; 0x04
    31b2:	88 27       	eor	r24, r24
    31b4:	77 fd       	sbrc	r23, 7
    31b6:	80 95       	com	r24
    31b8:	98 2f       	mov	r25, r24
    31ba:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__floatsisf>
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e8       	ldi	r20, 0x80	; 128
    31c4:	58 e3       	ldi	r21, 0x38	; 56
    31c6:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    31ca:	f8 01       	movw	r30, r16
    31cc:	64 83       	std	Z+4, r22	; 0x04
    31ce:	75 83       	std	Z+5, r23	; 0x05
    31d0:	86 83       	std	Z+6, r24	; 0x06
    31d2:	97 83       	std	Z+7, r25	; 0x07
        q -> y = (float)qI[2] / 16384.0f;
    31d4:	6d 81       	ldd	r22, Y+5	; 0x05
    31d6:	7e 81       	ldd	r23, Y+6	; 0x06
    31d8:	88 27       	eor	r24, r24
    31da:	77 fd       	sbrc	r23, 7
    31dc:	80 95       	com	r24
    31de:	98 2f       	mov	r25, r24
    31e0:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__floatsisf>
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e8       	ldi	r20, 0x80	; 128
    31ea:	58 e3       	ldi	r21, 0x38	; 56
    31ec:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    31f0:	f8 01       	movw	r30, r16
    31f2:	60 87       	std	Z+8, r22	; 0x08
    31f4:	71 87       	std	Z+9, r23	; 0x09
    31f6:	82 87       	std	Z+10, r24	; 0x0a
    31f8:	93 87       	std	Z+11, r25	; 0x0b
        q -> z = (float)qI[3] / 16384.0f;
    31fa:	6f 81       	ldd	r22, Y+7	; 0x07
    31fc:	78 85       	ldd	r23, Y+8	; 0x08
    31fe:	88 27       	eor	r24, r24
    3200:	77 fd       	sbrc	r23, 7
    3202:	80 95       	com	r24
    3204:	98 2f       	mov	r25, r24
    3206:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__floatsisf>
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e8       	ldi	r20, 0x80	; 128
    3210:	58 e3       	ldi	r21, 0x38	; 56
    3212:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    3216:	f8 01       	movw	r30, r16
    3218:	64 87       	std	Z+12, r22	; 0x0c
    321a:	75 87       	std	Z+13, r23	; 0x0d
    321c:	86 87       	std	Z+14, r24	; 0x0e
    321e:	97 87       	std	Z+15, r25	; 0x0f
        return 0;
    }
    return status; // int16 return value, indicates error if this line is reached
}
    3220:	8f 2d       	mov	r24, r15
    3222:	28 96       	adiw	r28, 0x08	; 8
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	ff 90       	pop	r15
    3238:	08 95       	ret

0000323a <_ZN7MPU605017dmpGetLinearAccelEP11VectorInt16S1_P11VectorFloat>:
    data[2] = (packet[24] << 8) + packet[25];
    return 0;
}
// uint8_t MPU6050::dmpSetLinearAccelFilterCoefficient(float coef);
// uint8_t MPU6050::dmpGetLinearAccel(long *data, const uint8_t* packet);
uint8_t MPU6050::dmpGetLinearAccel(VectorInt16 *v, VectorInt16 *vRaw, VectorFloat *gravity) {
    323a:	af 92       	push	r10
    323c:	bf 92       	push	r11
    323e:	cf 92       	push	r12
    3240:	df 92       	push	r13
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	eb 01       	movw	r28, r22
    3250:	5a 01       	movw	r10, r20
    3252:	89 01       	movw	r16, r18
    // get rid of the gravity component (+1g = +8192 in standard DMP FIFO packet, sensitivity is 2g)
    v -> x = vRaw -> x - gravity -> x*8192;
    3254:	fa 01       	movw	r30, r20
    3256:	60 81       	ld	r22, Z
    3258:	71 81       	ldd	r23, Z+1	; 0x01
    325a:	88 27       	eor	r24, r24
    325c:	77 fd       	sbrc	r23, 7
    325e:	80 95       	com	r24
    3260:	98 2f       	mov	r25, r24
    3262:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__floatsisf>
    3266:	6b 01       	movw	r12, r22
    3268:	7c 01       	movw	r14, r24
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e0       	ldi	r20, 0x00	; 0
    3270:	56 e4       	ldi	r21, 0x46	; 70
    3272:	f8 01       	movw	r30, r16
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    3280:	9b 01       	movw	r18, r22
    3282:	ac 01       	movw	r20, r24
    3284:	c7 01       	movw	r24, r14
    3286:	b6 01       	movw	r22, r12
    3288:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__subsf3>
    328c:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <__fixsfsi>
    3290:	79 83       	std	Y+1, r23	; 0x01
    3292:	68 83       	st	Y, r22
    v -> y = vRaw -> y - gravity -> y*8192;
    3294:	f5 01       	movw	r30, r10
    3296:	62 81       	ldd	r22, Z+2	; 0x02
    3298:	73 81       	ldd	r23, Z+3	; 0x03
    329a:	88 27       	eor	r24, r24
    329c:	77 fd       	sbrc	r23, 7
    329e:	80 95       	com	r24
    32a0:	98 2f       	mov	r25, r24
    32a2:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__floatsisf>
    32a6:	6b 01       	movw	r12, r22
    32a8:	7c 01       	movw	r14, r24
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e0       	ldi	r20, 0x00	; 0
    32b0:	56 e4       	ldi	r21, 0x46	; 70
    32b2:	f8 01       	movw	r30, r16
    32b4:	64 81       	ldd	r22, Z+4	; 0x04
    32b6:	75 81       	ldd	r23, Z+5	; 0x05
    32b8:	86 81       	ldd	r24, Z+6	; 0x06
    32ba:	97 81       	ldd	r25, Z+7	; 0x07
    32bc:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    32c0:	9b 01       	movw	r18, r22
    32c2:	ac 01       	movw	r20, r24
    32c4:	c7 01       	movw	r24, r14
    32c6:	b6 01       	movw	r22, r12
    32c8:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__subsf3>
    32cc:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <__fixsfsi>
    32d0:	7b 83       	std	Y+3, r23	; 0x03
    32d2:	6a 83       	std	Y+2, r22	; 0x02
    v -> z = vRaw -> z - gravity -> z*8192;
    32d4:	f5 01       	movw	r30, r10
    32d6:	64 81       	ldd	r22, Z+4	; 0x04
    32d8:	75 81       	ldd	r23, Z+5	; 0x05
    32da:	88 27       	eor	r24, r24
    32dc:	77 fd       	sbrc	r23, 7
    32de:	80 95       	com	r24
    32e0:	98 2f       	mov	r25, r24
    32e2:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__floatsisf>
    32e6:	6b 01       	movw	r12, r22
    32e8:	7c 01       	movw	r14, r24
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	40 e0       	ldi	r20, 0x00	; 0
    32f0:	56 e4       	ldi	r21, 0x46	; 70
    32f2:	f8 01       	movw	r30, r16
    32f4:	60 85       	ldd	r22, Z+8	; 0x08
    32f6:	71 85       	ldd	r23, Z+9	; 0x09
    32f8:	82 85       	ldd	r24, Z+10	; 0x0a
    32fa:	93 85       	ldd	r25, Z+11	; 0x0b
    32fc:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    3300:	9b 01       	movw	r18, r22
    3302:	ac 01       	movw	r20, r24
    3304:	c7 01       	movw	r24, r14
    3306:	b6 01       	movw	r22, r12
    3308:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__subsf3>
    330c:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <__fixsfsi>
    3310:	7d 83       	std	Y+5, r23	; 0x05
    3312:	6c 83       	std	Y+4, r22	; 0x04
    return 0;
}
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	1f 91       	pop	r17
    331c:	0f 91       	pop	r16
    331e:	ff 90       	pop	r15
    3320:	ef 90       	pop	r14
    3322:	df 90       	pop	r13
    3324:	cf 90       	pop	r12
    3326:	bf 90       	pop	r11
    3328:	af 90       	pop	r10
    332a:	08 95       	ret

0000332c <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>:
// uint8_t MPU6050::dmpGetGyroAndAccelSensor(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetGyroSensor(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetControlData(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetTemperature(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetGravity(long *data, const uint8_t* packet);
uint8_t MPU6050::dmpGetGravity(VectorFloat *v, Quaternion *q) {
    332c:	4f 92       	push	r4
    332e:	5f 92       	push	r5
    3330:	6f 92       	push	r6
    3332:	7f 92       	push	r7
    3334:	8f 92       	push	r8
    3336:	9f 92       	push	r9
    3338:	af 92       	push	r10
    333a:	bf 92       	push	r11
    333c:	cf 92       	push	r12
    333e:	df 92       	push	r13
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	00 d0       	rcall	.+0      	; 0x334e <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion+0x22>
    334e:	00 d0       	rcall	.+0      	; 0x3350 <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion+0x24>
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	8b 01       	movw	r16, r22
    3356:	3a 01       	movw	r6, r20
    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);
    3358:	fa 01       	movw	r30, r20
    335a:	24 85       	ldd	r18, Z+12	; 0x0c
    335c:	35 85       	ldd	r19, Z+13	; 0x0d
    335e:	46 85       	ldd	r20, Z+14	; 0x0e
    3360:	57 85       	ldd	r21, Z+15	; 0x0f
    3362:	64 81       	ldd	r22, Z+4	; 0x04
    3364:	75 81       	ldd	r23, Z+5	; 0x05
    3366:	86 81       	ldd	r24, Z+6	; 0x06
    3368:	97 81       	ldd	r25, Z+7	; 0x07
    336a:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    336e:	6b 01       	movw	r12, r22
    3370:	7c 01       	movw	r14, r24
    3372:	f3 01       	movw	r30, r6
    3374:	20 85       	ldd	r18, Z+8	; 0x08
    3376:	31 85       	ldd	r19, Z+9	; 0x09
    3378:	42 85       	ldd	r20, Z+10	; 0x0a
    337a:	53 85       	ldd	r21, Z+11	; 0x0b
    337c:	60 81       	ld	r22, Z
    337e:	71 81       	ldd	r23, Z+1	; 0x01
    3380:	82 81       	ldd	r24, Z+2	; 0x02
    3382:	93 81       	ldd	r25, Z+3	; 0x03
    3384:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    3388:	9b 01       	movw	r18, r22
    338a:	ac 01       	movw	r20, r24
    338c:	c7 01       	movw	r24, r14
    338e:	b6 01       	movw	r22, r12
    3390:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__subsf3>
    3394:	9b 01       	movw	r18, r22
    3396:	ac 01       	movw	r20, r24
    3398:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__addsf3>
    339c:	f8 01       	movw	r30, r16
    339e:	60 83       	st	Z, r22
    33a0:	71 83       	std	Z+1, r23	; 0x01
    33a2:	82 83       	std	Z+2, r24	; 0x02
    33a4:	93 83       	std	Z+3, r25	; 0x03
    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);
    33a6:	f3 01       	movw	r30, r6
    33a8:	24 81       	ldd	r18, Z+4	; 0x04
    33aa:	35 81       	ldd	r19, Z+5	; 0x05
    33ac:	46 81       	ldd	r20, Z+6	; 0x06
    33ae:	57 81       	ldd	r21, Z+7	; 0x07
    33b0:	60 81       	ld	r22, Z
    33b2:	71 81       	ldd	r23, Z+1	; 0x01
    33b4:	82 81       	ldd	r24, Z+2	; 0x02
    33b6:	93 81       	ldd	r25, Z+3	; 0x03
    33b8:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    33bc:	6b 01       	movw	r12, r22
    33be:	7c 01       	movw	r14, r24
    33c0:	f3 01       	movw	r30, r6
    33c2:	24 85       	ldd	r18, Z+12	; 0x0c
    33c4:	35 85       	ldd	r19, Z+13	; 0x0d
    33c6:	46 85       	ldd	r20, Z+14	; 0x0e
    33c8:	57 85       	ldd	r21, Z+15	; 0x0f
    33ca:	60 85       	ldd	r22, Z+8	; 0x08
    33cc:	71 85       	ldd	r23, Z+9	; 0x09
    33ce:	82 85       	ldd	r24, Z+10	; 0x0a
    33d0:	93 85       	ldd	r25, Z+11	; 0x0b
    33d2:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    33d6:	9b 01       	movw	r18, r22
    33d8:	ac 01       	movw	r20, r24
    33da:	c7 01       	movw	r24, r14
    33dc:	b6 01       	movw	r22, r12
    33de:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__addsf3>
    33e2:	9b 01       	movw	r18, r22
    33e4:	ac 01       	movw	r20, r24
    33e6:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__addsf3>
    33ea:	f8 01       	movw	r30, r16
    33ec:	64 83       	std	Z+4, r22	; 0x04
    33ee:	75 83       	std	Z+5, r23	; 0x05
    33f0:	86 83       	std	Z+6, r24	; 0x06
    33f2:	97 83       	std	Z+7, r25	; 0x07
    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;
    33f4:	f3 01       	movw	r30, r6
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	93 81       	ldd	r25, Z+3	; 0x03
    33fe:	84 80       	ldd	r8, Z+4	; 0x04
    3400:	95 80       	ldd	r9, Z+5	; 0x05
    3402:	a6 80       	ldd	r10, Z+6	; 0x06
    3404:	b7 80       	ldd	r11, Z+7	; 0x07
    3406:	c0 84       	ldd	r12, Z+8	; 0x08
    3408:	d1 84       	ldd	r13, Z+9	; 0x09
    340a:	e2 84       	ldd	r14, Z+10	; 0x0a
    340c:	f3 84       	ldd	r15, Z+11	; 0x0b
    340e:	44 84       	ldd	r4, Z+12	; 0x0c
    3410:	55 84       	ldd	r5, Z+13	; 0x0d
    3412:	66 84       	ldd	r6, Z+14	; 0x0e
    3414:	77 84       	ldd	r7, Z+15	; 0x0f
    3416:	9b 01       	movw	r18, r22
    3418:	ac 01       	movw	r20, r24
    341a:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    341e:	69 83       	std	Y+1, r22	; 0x01
    3420:	7a 83       	std	Y+2, r23	; 0x02
    3422:	8b 83       	std	Y+3, r24	; 0x03
    3424:	9c 83       	std	Y+4, r25	; 0x04
    3426:	a5 01       	movw	r20, r10
    3428:	94 01       	movw	r18, r8
    342a:	c5 01       	movw	r24, r10
    342c:	b4 01       	movw	r22, r8
    342e:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    3432:	9b 01       	movw	r18, r22
    3434:	ac 01       	movw	r20, r24
    3436:	69 81       	ldd	r22, Y+1	; 0x01
    3438:	7a 81       	ldd	r23, Y+2	; 0x02
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	9c 81       	ldd	r25, Y+4	; 0x04
    343e:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__subsf3>
    3442:	4b 01       	movw	r8, r22
    3444:	5c 01       	movw	r10, r24
    3446:	a7 01       	movw	r20, r14
    3448:	96 01       	movw	r18, r12
    344a:	c7 01       	movw	r24, r14
    344c:	b6 01       	movw	r22, r12
    344e:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    3452:	9b 01       	movw	r18, r22
    3454:	ac 01       	movw	r20, r24
    3456:	c5 01       	movw	r24, r10
    3458:	b4 01       	movw	r22, r8
    345a:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__subsf3>
    345e:	6b 01       	movw	r12, r22
    3460:	7c 01       	movw	r14, r24
    3462:	a3 01       	movw	r20, r6
    3464:	92 01       	movw	r18, r4
    3466:	c3 01       	movw	r24, r6
    3468:	b2 01       	movw	r22, r4
    346a:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    346e:	9b 01       	movw	r18, r22
    3470:	ac 01       	movw	r20, r24
    3472:	c7 01       	movw	r24, r14
    3474:	b6 01       	movw	r22, r12
    3476:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__addsf3>
    347a:	f8 01       	movw	r30, r16
    347c:	60 87       	std	Z+8, r22	; 0x08
    347e:	71 87       	std	Z+9, r23	; 0x09
    3480:	82 87       	std	Z+10, r24	; 0x0a
    3482:	93 87       	std	Z+11, r25	; 0x0b
    return 0;
}
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	df 90       	pop	r13
    349c:	cf 90       	pop	r12
    349e:	bf 90       	pop	r11
    34a0:	af 90       	pop	r10
    34a2:	9f 90       	pop	r9
    34a4:	8f 90       	pop	r8
    34a6:	7f 90       	pop	r7
    34a8:	6f 90       	pop	r6
    34aa:	5f 90       	pop	r5
    34ac:	4f 90       	pop	r4
    34ae:	08 95       	ret

000034b0 <setup>:
// ================================================================

void setup() {
    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
    34b0:	8c e5       	ldi	r24, 0x5C	; 92
    34b2:	91 e0       	ldi	r25, 0x01	; 1
    34b4:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN7TwoWire5beginEv>
        TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
    34b8:	88 e1       	ldi	r24, 0x18	; 24
    34ba:	80 93 b8 00 	sts	0x00B8, r24
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif

    // initialize serial communication
    Serial.begin(115200); // need this baudrate otherwise FIFO overflow will occur. WE are not sending data fast enough
    34be:	40 e0       	ldi	r20, 0x00	; 0
    34c0:	52 ec       	ldi	r21, 0xC2	; 194
    34c2:	61 e0       	ldi	r22, 0x01	; 1
    34c4:	70 e0       	ldi	r23, 0x00	; 0
    34c6:	8e e2       	ldi	r24, 0x2E	; 46
    34c8:	93 e0       	ldi	r25, 0x03	; 3
    34ca:	0e 94 37 20 	call	0x406e	; 0x406e <_ZN14HardwareSerial5beginEm>
    while (!Serial); // wait for Leonardo enumeration, others continue immediately
    34ce:	8e e2       	ldi	r24, 0x2E	; 46
    34d0:	93 e0       	ldi	r25, 0x03	; 3
    34d2:	0e 94 b4 22 	call	0x4568	; 0x4568 <_ZN14HardwareSerialcvbEv>
    34d6:	88 23       	and	r24, r24
    34d8:	d1 f3       	breq	.-12     	; 0x34ce <setup+0x1e>
	
	////////////////// MPU Initialization ////////////////
    // initialize device
    Serial.println(F("Initializing I2C devices..."));
    34da:	67 e4       	ldi	r22, 0x47	; 71
    34dc:	73 e0       	ldi	r23, 0x03	; 3
    34de:	8e e2       	ldi	r24, 0x2E	; 46
    34e0:	93 e0       	ldi	r25, 0x03	; 3
    34e2:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    mpu.initialize();
    34e6:	83 e9       	ldi	r24, 0x93	; 147
    34e8:	92 e0       	ldi	r25, 0x02	; 2
    34ea:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN7MPU605010initializeEv>

    // verify connection
    Serial.println(F("Testing device connections..."));
    34ee:	69 e2       	ldi	r22, 0x29	; 41
    34f0:	73 e0       	ldi	r23, 0x03	; 3
    34f2:	8e e2       	ldi	r24, 0x2E	; 46
    34f4:	93 e0       	ldi	r25, 0x03	; 3
    34f6:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));
    34fa:	83 e9       	ldi	r24, 0x93	; 147
    34fc:	92 e0       	ldi	r25, 0x02	; 2
    34fe:	0e 94 be 0b 	call	0x177c	; 0x177c <_ZN7MPU605014testConnectionEv>
    3502:	88 23       	and	r24, r24
    3504:	19 f0       	breq	.+6      	; 0x350c <setup+0x5c>
    3506:	6b e0       	ldi	r22, 0x0B	; 11
    3508:	73 e0       	ldi	r23, 0x03	; 3
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <setup+0x60>
    350c:	61 ef       	ldi	r22, 0xF1	; 241
    350e:	72 e0       	ldi	r23, 0x02	; 2
    3510:	8e e2       	ldi	r24, 0x2E	; 46
    3512:	93 e0       	ldi	r25, 0x03	; 3
    3514:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>

    // wait for ready
    Serial.println(F("\nSend any character to begin DMP programming and demo: "));
    3518:	69 eb       	ldi	r22, 0xB9	; 185
    351a:	72 e0       	ldi	r23, 0x02	; 2
    351c:	8e e2       	ldi	r24, 0x2E	; 46
    351e:	93 e0       	ldi	r25, 0x03	; 3
    3520:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
//    while (Serial.available() && Serial.read()); // empty buffer
//    while (!Serial.available());                 // wait for data
//    while (Serial.available() && Serial.read()); // empty buffer again

    // load and configure the DMP
    Serial.println(F("Initializing DMP..."));
    3524:	65 ea       	ldi	r22, 0xA5	; 165
    3526:	72 e0       	ldi	r23, 0x02	; 2
    3528:	8e e2       	ldi	r24, 0x2E	; 46
    352a:	93 e0       	ldi	r25, 0x03	; 3
    352c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    devStatus = mpu.dmpInitialize();
    3530:	83 e9       	ldi	r24, 0x93	; 147
    3532:	92 e0       	ldi	r25, 0x02	; 2
    3534:	0e 94 be 13 	call	0x277c	; 0x277c <_ZN7MPU605013dmpInitializeEv>
    3538:	80 93 8f 02 	sts	0x028F, r24
 //   mpu.setYGyroOffset(76);
 //   mpu.setZGyroOffset(-85);
 //   mpu.setZAccelOffset(1788); // 1688 factory default for my test chip

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
    353c:	81 11       	cpse	r24, r1
    353e:	30 c0       	rjmp	.+96     	; 0x35a0 <setup+0xf0>
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
    3540:	65 e9       	ldi	r22, 0x95	; 149
    3542:	72 e0       	ldi	r23, 0x02	; 2
    3544:	8e e2       	ldi	r24, 0x2E	; 46
    3546:	93 e0       	ldi	r25, 0x03	; 3
    3548:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
        mpu.setDMPEnabled(true);
    354c:	61 e0       	ldi	r22, 0x01	; 1
    354e:	83 e9       	ldi	r24, 0x93	; 147
    3550:	92 e0       	ldi	r25, 0x02	; 2
    3552:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7MPU605013setDMPEnabledEb>

        // enable Arduino interrupt detection
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
    3556:	66 e5       	ldi	r22, 0x56	; 86
    3558:	72 e0       	ldi	r23, 0x02	; 2
    355a:	8e e2       	ldi	r24, 0x2E	; 46
    355c:	93 e0       	ldi	r25, 0x03	; 3
    355e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
        attachInterrupt(0, dmpDataReady, RISING);
    3562:	43 e0       	ldi	r20, 0x03	; 3
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	6a eb       	ldi	r22, 0xBA	; 186
    3568:	73 e1       	ldi	r23, 0x13	; 19
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	0e 94 5f 28 	call	0x50be	; 0x50be <attachInterrupt>
        mpuIntStatus = mpu.getIntStatus();
    3570:	83 e9       	ldi	r24, 0x93	; 147
    3572:	92 e0       	ldi	r25, 0x02	; 2
    3574:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7MPU605012getIntStatusEv>
    3578:	80 93 90 02 	sts	0x0290, r24

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
    357c:	6c e2       	ldi	r22, 0x2C	; 44
    357e:	72 e0       	ldi	r23, 0x02	; 2
    3580:	8e e2       	ldi	r24, 0x2E	; 46
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
        dmpReady = true;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	80 93 91 02 	sts	0x0291, r24

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    358e:	80 91 95 02 	lds	r24, 0x0295
    3592:	90 91 96 02 	lds	r25, 0x0296
    3596:	90 93 8e 02 	sts	0x028E, r25
    359a:	80 93 8d 02 	sts	0x028D, r24
    359e:	14 c0       	rjmp	.+40     	; 0x35c8 <setup+0x118>
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
    35a0:	6b e0       	ldi	r22, 0x0B	; 11
    35a2:	72 e0       	ldi	r23, 0x02	; 2
    35a4:	8e e2       	ldi	r24, 0x2E	; 46
    35a6:	93 e0       	ldi	r25, 0x03	; 3
    35a8:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(devStatus);
    35ac:	4a e0       	ldi	r20, 0x0A	; 10
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	60 91 8f 02 	lds	r22, 0x028F
    35b4:	8e e2       	ldi	r24, 0x2E	; 46
    35b6:	93 e0       	ldi	r25, 0x03	; 3
    35b8:	0e 94 28 24 	call	0x4850	; 0x4850 <_ZN5Print5printEhi>
        Serial.println(F(")"));
    35bc:	69 e0       	ldi	r22, 0x09	; 9
    35be:	72 e0       	ldi	r23, 0x02	; 2
    35c0:	8e e2       	ldi	r24, 0x2E	; 46
    35c2:	93 e0       	ldi	r25, 0x03	; 3
    35c4:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    }
	
    // configure LED for output
    pinMode(LED_PIN, OUTPUT);
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	8d e0       	ldi	r24, 0x0D	; 13
    35cc:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <pinMode>
    35d0:	08 95       	ret

000035d2 <loop>:
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {
    // if programming failed, don't try to do anything
    if (!dmpReady) return;
    35d2:	80 91 91 02 	lds	r24, 0x0291
    35d6:	88 23       	and	r24, r24
    35d8:	09 f4       	brne	.+2      	; 0x35dc <loop+0xa>
    35da:	15 c1       	rjmp	.+554    	; 0x3806 <loop+0x234>

    // wait for MPU interrupt or extra packet(s) available
    while (!mpuInterrupt && fifoCount < packetSize) {
    35dc:	20 91 8b 02 	lds	r18, 0x028B
    35e0:	30 91 8c 02 	lds	r19, 0x028C
    35e4:	80 91 8d 02 	lds	r24, 0x028D
    35e8:	90 91 8e 02 	lds	r25, 0x028E
    35ec:	40 91 1c 02 	lds	r20, 0x021C
    35f0:	41 11       	cpse	r20, r1
    35f2:	f4 c0       	rjmp	.+488    	; 0x37dc <loop+0x20a>
    35f4:	28 17       	cp	r18, r24
    35f6:	39 07       	cpc	r19, r25
    35f8:	08 f0       	brcs	.+2      	; 0x35fc <loop+0x2a>
    35fa:	f0 c0       	rjmp	.+480    	; 0x37dc <loop+0x20a>
    35fc:	f7 cf       	rjmp	.-18     	; 0x35ec <loop+0x1a>

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    35fe:	81 15       	cp	r24, r1
    3600:	34 e0       	ldi	r19, 0x04	; 4
    3602:	93 07       	cpc	r25, r19
    3604:	59 f4       	brne	.+22     	; 0x361c <loop+0x4a>
        // reset so we can continue cleanly
        mpu.resetFIFO();
    3606:	83 e9       	ldi	r24, 0x93	; 147
    3608:	92 e0       	ldi	r25, 0x02	; 2
    360a:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7MPU60509resetFIFOEv>
        Serial.println(F("FIFO overflow!"));
    360e:	6a ef       	ldi	r22, 0xFA	; 250
    3610:	71 e0       	ldi	r23, 0x01	; 1
    3612:	8e e2       	ldi	r24, 0x2E	; 46
    3614:	93 e0       	ldi	r25, 0x03	; 3
    3616:	0e 94 6e 25 	call	0x4adc	; 0x4adc <_ZN5Print7printlnEPK19__FlashStringHelper>
    361a:	08 95       	ret

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
    361c:	21 ff       	sbrs	r18, 1
    361e:	f3 c0       	rjmp	.+486    	; 0x3806 <loop+0x234>
        // wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();
    3620:	40 91 8d 02 	lds	r20, 0x028D
    3624:	50 91 8e 02 	lds	r21, 0x028E
    3628:	84 17       	cp	r24, r20
    362a:	95 07       	cpc	r25, r21
    362c:	78 f4       	brcc	.+30     	; 0x364c <loop+0x7a>
    362e:	83 e9       	ldi	r24, 0x93	; 147
    3630:	92 e0       	ldi	r25, 0x02	; 2
    3632:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN7MPU605012getFIFOCountEv>
    3636:	90 93 8c 02 	sts	0x028C, r25
    363a:	80 93 8b 02 	sts	0x028B, r24
    363e:	40 91 8d 02 	lds	r20, 0x028D
    3642:	50 91 8e 02 	lds	r21, 0x028E
    3646:	84 17       	cp	r24, r20
    3648:	95 07       	cpc	r25, r21
    364a:	88 f3       	brcs	.-30     	; 0x362e <loop+0x5c>

        // read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);
    364c:	6b e4       	ldi	r22, 0x4B	; 75
    364e:	72 e0       	ldi	r23, 0x02	; 2
    3650:	83 e9       	ldi	r24, 0x93	; 147
    3652:	92 e0       	ldi	r25, 0x02	; 2
    3654:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN7MPU605012getFIFOBytesEPhh>
        
        // track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;
    3658:	80 91 8b 02 	lds	r24, 0x028B
    365c:	90 91 8c 02 	lds	r25, 0x028C
    3660:	20 91 8d 02 	lds	r18, 0x028D
    3664:	30 91 8e 02 	lds	r19, 0x028E
    3668:	82 1b       	sub	r24, r18
    366a:	93 0b       	sbc	r25, r19
    366c:	90 93 8c 02 	sts	0x028C, r25
    3670:	80 93 8b 02 	sts	0x028B, r24

        #ifdef OUTPUT_READABLE_QUATERNION
            // display quaternion values in easy matrix form: w x y z
            mpu.dmpGetQuaternion(&q, fifoBuffer);
    3674:	4b e4       	ldi	r20, 0x4B	; 75
    3676:	52 e0       	ldi	r21, 0x02	; 2
    3678:	6b e3       	ldi	r22, 0x3B	; 59
    367a:	72 e0       	ldi	r23, 0x02	; 2
    367c:	83 e9       	ldi	r24, 0x93	; 147
    367e:	92 e0       	ldi	r25, 0x02	; 2
    3680:	0e 94 ae 18 	call	0x315c	; 0x315c <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
            Serial.print("quat\t");
    3684:	64 e3       	ldi	r22, 0x34	; 52
    3686:	71 e0       	ldi	r23, 0x01	; 1
    3688:	8e e2       	ldi	r24, 0x2E	; 46
    368a:	93 e0       	ldi	r25, 0x03	; 3
    368c:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
            Serial.print(q.w);
    3690:	40 91 3b 02 	lds	r20, 0x023B
    3694:	50 91 3c 02 	lds	r21, 0x023C
    3698:	60 91 3d 02 	lds	r22, 0x023D
    369c:	70 91 3e 02 	lds	r23, 0x023E
    36a0:	22 e0       	ldi	r18, 0x02	; 2
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	8e e2       	ldi	r24, 0x2E	; 46
    36a6:	93 e0       	ldi	r25, 0x03	; 3
    36a8:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_ZN5Print5printEdi>
            Serial.print("\t");
    36ac:	6f e3       	ldi	r22, 0x3F	; 63
    36ae:	71 e0       	ldi	r23, 0x01	; 1
    36b0:	8e e2       	ldi	r24, 0x2E	; 46
    36b2:	93 e0       	ldi	r25, 0x03	; 3
    36b4:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
            Serial.print(q.x);
    36b8:	40 91 3f 02 	lds	r20, 0x023F
    36bc:	50 91 40 02 	lds	r21, 0x0240
    36c0:	60 91 41 02 	lds	r22, 0x0241
    36c4:	70 91 42 02 	lds	r23, 0x0242
    36c8:	22 e0       	ldi	r18, 0x02	; 2
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	8e e2       	ldi	r24, 0x2E	; 46
    36ce:	93 e0       	ldi	r25, 0x03	; 3
    36d0:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_ZN5Print5printEdi>
            Serial.print("\t");
    36d4:	6f e3       	ldi	r22, 0x3F	; 63
    36d6:	71 e0       	ldi	r23, 0x01	; 1
    36d8:	8e e2       	ldi	r24, 0x2E	; 46
    36da:	93 e0       	ldi	r25, 0x03	; 3
    36dc:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
            Serial.print(q.y);
    36e0:	40 91 43 02 	lds	r20, 0x0243
    36e4:	50 91 44 02 	lds	r21, 0x0244
    36e8:	60 91 45 02 	lds	r22, 0x0245
    36ec:	70 91 46 02 	lds	r23, 0x0246
    36f0:	22 e0       	ldi	r18, 0x02	; 2
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	8e e2       	ldi	r24, 0x2E	; 46
    36f6:	93 e0       	ldi	r25, 0x03	; 3
    36f8:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_ZN5Print5printEdi>
            Serial.print("\t");
    36fc:	6f e3       	ldi	r22, 0x3F	; 63
    36fe:	71 e0       	ldi	r23, 0x01	; 1
    3700:	8e e2       	ldi	r24, 0x2E	; 46
    3702:	93 e0       	ldi	r25, 0x03	; 3
    3704:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
            Serial.println(q.z);
    3708:	40 91 47 02 	lds	r20, 0x0247
    370c:	50 91 48 02 	lds	r21, 0x0248
    3710:	60 91 49 02 	lds	r22, 0x0249
    3714:	70 91 4a 02 	lds	r23, 0x024A
    3718:	22 e0       	ldi	r18, 0x02	; 2
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	8e e2       	ldi	r24, 0x2E	; 46
    371e:	93 e0       	ldi	r25, 0x03	; 3
    3720:	0e 94 48 26 	call	0x4c90	; 0x4c90 <_ZN5Print7printlnEdi>
            Serial.println(ypr[2] * 180/M_PI);
        #endif

        #ifdef OUTPUT_READABLE_REALACCEL
            // display real acceleration, adjusted to remove gravity
            mpu.dmpGetQuaternion(&q, fifoBuffer);
    3724:	4b e4       	ldi	r20, 0x4B	; 75
    3726:	52 e0       	ldi	r21, 0x02	; 2
    3728:	6b e3       	ldi	r22, 0x3B	; 59
    372a:	72 e0       	ldi	r23, 0x02	; 2
    372c:	83 e9       	ldi	r24, 0x93	; 147
    372e:	92 e0       	ldi	r25, 0x02	; 2
    3730:	0e 94 ae 18 	call	0x315c	; 0x315c <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
            mpu.dmpGetAccel(&aa, fifoBuffer);
    3734:	4b e4       	ldi	r20, 0x4B	; 75
    3736:	52 e0       	ldi	r21, 0x02	; 2
    3738:	65 e3       	ldi	r22, 0x35	; 53
    373a:	72 e0       	ldi	r23, 0x02	; 2
    373c:	83 e9       	ldi	r24, 0x93	; 147
    373e:	92 e0       	ldi	r25, 0x02	; 2
    3740:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN7MPU605011dmpGetAccelEP11VectorInt16PKh>
            mpu.dmpGetGravity(&gravity, &q);
    3744:	4b e3       	ldi	r20, 0x3B	; 59
    3746:	52 e0       	ldi	r21, 0x02	; 2
    3748:	6d e1       	ldi	r22, 0x1D	; 29
    374a:	72 e0       	ldi	r23, 0x02	; 2
    374c:	83 e9       	ldi	r24, 0x93	; 147
    374e:	92 e0       	ldi	r25, 0x02	; 2
    3750:	0e 94 96 19 	call	0x332c	; 0x332c <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>
            mpu.dmpGetLinearAccel(&aaReal, &aa, &gravity);
    3754:	2d e1       	ldi	r18, 0x1D	; 29
    3756:	32 e0       	ldi	r19, 0x02	; 2
    3758:	45 e3       	ldi	r20, 0x35	; 53
    375a:	52 e0       	ldi	r21, 0x02	; 2
    375c:	6f e2       	ldi	r22, 0x2F	; 47
    375e:	72 e0       	ldi	r23, 0x02	; 2
    3760:	83 e9       	ldi	r24, 0x93	; 147
    3762:	92 e0       	ldi	r25, 0x02	; 2
    3764:	0e 94 1d 19 	call	0x323a	; 0x323a <_ZN7MPU605017dmpGetLinearAccelEP11VectorInt16S1_P11VectorFloat>
            Serial.print("areal\t");
    3768:	6a e3       	ldi	r22, 0x3A	; 58
    376a:	71 e0       	ldi	r23, 0x01	; 1
    376c:	8e e2       	ldi	r24, 0x2E	; 46
    376e:	93 e0       	ldi	r25, 0x03	; 3
    3770:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
            Serial.print(aaReal.x);
    3774:	60 91 2f 02 	lds	r22, 0x022F
    3778:	70 91 30 02 	lds	r23, 0x0230
    377c:	4a e0       	ldi	r20, 0x0A	; 10
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	8e e2       	ldi	r24, 0x2E	; 46
    3782:	93 e0       	ldi	r25, 0x03	; 3
    3784:	0e 94 4a 24 	call	0x4894	; 0x4894 <_ZN5Print5printEii>
            Serial.print("\t");
    3788:	6f e3       	ldi	r22, 0x3F	; 63
    378a:	71 e0       	ldi	r23, 0x01	; 1
    378c:	8e e2       	ldi	r24, 0x2E	; 46
    378e:	93 e0       	ldi	r25, 0x03	; 3
    3790:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
            Serial.print(aaReal.y);
    3794:	60 91 31 02 	lds	r22, 0x0231
    3798:	70 91 32 02 	lds	r23, 0x0232
    379c:	4a e0       	ldi	r20, 0x0A	; 10
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	8e e2       	ldi	r24, 0x2E	; 46
    37a2:	93 e0       	ldi	r25, 0x03	; 3
    37a4:	0e 94 4a 24 	call	0x4894	; 0x4894 <_ZN5Print5printEii>
            Serial.print("\t");
    37a8:	6f e3       	ldi	r22, 0x3F	; 63
    37aa:	71 e0       	ldi	r23, 0x01	; 1
    37ac:	8e e2       	ldi	r24, 0x2E	; 46
    37ae:	93 e0       	ldi	r25, 0x03	; 3
    37b0:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
            Serial.println(aaReal.z);
    37b4:	60 91 33 02 	lds	r22, 0x0233
    37b8:	70 91 34 02 	lds	r23, 0x0234
    37bc:	4a e0       	ldi	r20, 0x0A	; 10
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	8e e2       	ldi	r24, 0x2E	; 46
    37c2:	93 e0       	ldi	r25, 0x03	; 3
    37c4:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <_ZN5Print7printlnEii>
            Serial.println(aaWorld.z);
        #endif
  

        // blink LED to indicate activity
        blinkState = !blinkState;
    37c8:	60 91 92 02 	lds	r22, 0x0292
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	68 27       	eor	r22, r24
    37d0:	60 93 92 02 	sts	0x0292, r22
        digitalWrite(LED_PIN, blinkState);
    37d4:	8d e0       	ldi	r24, 0x0D	; 13
    37d6:	0e 94 23 2c 	call	0x5846	; 0x5846 <digitalWrite>
    37da:	08 95       	ret
        // stuff to see if mpuInterrupt is true, and if so, "break;" from the
        // while() loop to immediately process the MPU data
    }

    // reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    37dc:	10 92 1c 02 	sts	0x021C, r1
    mpuIntStatus = mpu.getIntStatus();
    37e0:	83 e9       	ldi	r24, 0x93	; 147
    37e2:	92 e0       	ldi	r25, 0x02	; 2
    37e4:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7MPU605012getIntStatusEv>
    37e8:	80 93 90 02 	sts	0x0290, r24

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();
    37ec:	83 e9       	ldi	r24, 0x93	; 147
    37ee:	92 e0       	ldi	r25, 0x02	; 2
    37f0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN7MPU605012getFIFOCountEv>
    37f4:	90 93 8c 02 	sts	0x028C, r25
    37f8:	80 93 8b 02 	sts	0x028B, r24

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    37fc:	20 91 90 02 	lds	r18, 0x0290
    3800:	24 ff       	sbrs	r18, 4
    3802:	fd ce       	rjmp	.-518    	; 0x35fe <loop+0x2c>
    3804:	00 cf       	rjmp	.-512    	; 0x3606 <loop+0x34>
    3806:	08 95       	ret

00003808 <main>:
    }
}

int main(void)
{
	init();
    3808:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <init>

	#if defined(USBCON)
	USBDevice.attach();
	#endif
	
	setup();
    380c:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <setup>
	
	for (;;) {
		loop();
    3810:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <loop>
		if (serialEventRun) serialEventRun();
    3814:	8b e3       	ldi	r24, 0x3B	; 59
    3816:	9f e1       	ldi	r25, 0x1F	; 31
    3818:	89 2b       	or	r24, r25
    381a:	29 f0       	breq	.+10     	; 0x3826 <main+0x1e>
    381c:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z14serialEventRunv>
	#endif
	
	setup();
	
	for (;;) {
		loop();
    3820:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <loop>
    3824:	fb cf       	rjmp	.-10     	; 0x381c <main+0x14>
    3826:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <loop>
    382a:	fd cf       	rjmp	.-6      	; 0x3826 <main+0x1e>

0000382c <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for SparkFun breakout and InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 mpu;
    382c:	83 e9       	ldi	r24, 0x93	; 147
    382e:	92 e0       	ldi	r25, 0x02	; 2
    3830:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN7MPU6050C1Ev>
        float x;
        float y;
        float z;
        
        Quaternion() {
            w = 1.0f;
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	a0 e8       	ldi	r26, 0x80	; 128
    383a:	bf e3       	ldi	r27, 0x3F	; 63
    383c:	80 93 3b 02 	sts	0x023B, r24
    3840:	90 93 3c 02 	sts	0x023C, r25
    3844:	a0 93 3d 02 	sts	0x023D, r26
    3848:	b0 93 3e 02 	sts	0x023E, r27
            x = 0.0f;
    384c:	10 92 3f 02 	sts	0x023F, r1
    3850:	10 92 40 02 	sts	0x0240, r1
    3854:	10 92 41 02 	sts	0x0241, r1
    3858:	10 92 42 02 	sts	0x0242, r1
            y = 0.0f;
    385c:	10 92 43 02 	sts	0x0243, r1
    3860:	10 92 44 02 	sts	0x0244, r1
    3864:	10 92 45 02 	sts	0x0245, r1
    3868:	10 92 46 02 	sts	0x0246, r1
            z = 0.0f;
    386c:	10 92 47 02 	sts	0x0247, r1
    3870:	10 92 48 02 	sts	0x0248, r1
    3874:	10 92 49 02 	sts	0x0249, r1
    3878:	10 92 4a 02 	sts	0x024A, r1
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    387c:	10 92 36 02 	sts	0x0236, r1
    3880:	10 92 35 02 	sts	0x0235, r1
            y = 0;
    3884:	10 92 38 02 	sts	0x0238, r1
    3888:	10 92 37 02 	sts	0x0237, r1
            z = 0;
    388c:	10 92 3a 02 	sts	0x023A, r1
    3890:	10 92 39 02 	sts	0x0239, r1
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    3894:	10 92 30 02 	sts	0x0230, r1
    3898:	10 92 2f 02 	sts	0x022F, r1
            y = 0;
    389c:	10 92 32 02 	sts	0x0232, r1
    38a0:	10 92 31 02 	sts	0x0231, r1
            z = 0;
    38a4:	10 92 34 02 	sts	0x0234, r1
    38a8:	10 92 33 02 	sts	0x0233, r1
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    38ac:	10 92 2a 02 	sts	0x022A, r1
    38b0:	10 92 29 02 	sts	0x0229, r1
            y = 0;
    38b4:	10 92 2c 02 	sts	0x022C, r1
    38b8:	10 92 2b 02 	sts	0x022B, r1
            z = 0;
    38bc:	10 92 2e 02 	sts	0x022E, r1
    38c0:	10 92 2d 02 	sts	0x022D, r1
        float x;
        float y;
        float z;

        VectorFloat() {
            x = 0;
    38c4:	10 92 1d 02 	sts	0x021D, r1
    38c8:	10 92 1e 02 	sts	0x021E, r1
    38cc:	10 92 1f 02 	sts	0x021F, r1
    38d0:	10 92 20 02 	sts	0x0220, r1
            y = 0;
    38d4:	10 92 21 02 	sts	0x0221, r1
    38d8:	10 92 22 02 	sts	0x0222, r1
    38dc:	10 92 23 02 	sts	0x0223, r1
    38e0:	10 92 24 02 	sts	0x0224, r1
            z = 0;
    38e4:	10 92 25 02 	sts	0x0225, r1
    38e8:	10 92 26 02 	sts	0x0226, r1
    38ec:	10 92 27 02 	sts	0x0227, r1
    38f0:	10 92 28 02 	sts	0x0228, r1
    38f4:	08 95       	ret

000038f6 <__subsf3>:
    38f6:	50 58       	subi	r21, 0x80	; 128

000038f8 <__addsf3>:
    38f8:	bb 27       	eor	r27, r27
    38fa:	aa 27       	eor	r26, r26
    38fc:	0e d0       	rcall	.+28     	; 0x391a <__addsf3x>
    38fe:	4d c1       	rjmp	.+666    	; 0x3b9a <__fp_round>
    3900:	3e d1       	rcall	.+636    	; 0x3b7e <__fp_pscA>
    3902:	30 f0       	brcs	.+12     	; 0x3910 <__addsf3+0x18>
    3904:	43 d1       	rcall	.+646    	; 0x3b8c <__fp_pscB>
    3906:	20 f0       	brcs	.+8      	; 0x3910 <__addsf3+0x18>
    3908:	31 f4       	brne	.+12     	; 0x3916 <__addsf3+0x1e>
    390a:	9f 3f       	cpi	r25, 0xFF	; 255
    390c:	11 f4       	brne	.+4      	; 0x3912 <__addsf3+0x1a>
    390e:	1e f4       	brtc	.+6      	; 0x3916 <__addsf3+0x1e>
    3910:	33 c1       	rjmp	.+614    	; 0x3b78 <__fp_nan>
    3912:	0e f4       	brtc	.+2      	; 0x3916 <__addsf3+0x1e>
    3914:	e0 95       	com	r30
    3916:	e7 fb       	bst	r30, 7
    3918:	29 c1       	rjmp	.+594    	; 0x3b6c <__fp_inf>

0000391a <__addsf3x>:
    391a:	e9 2f       	mov	r30, r25
    391c:	4f d1       	rcall	.+670    	; 0x3bbc <__fp_split3>
    391e:	80 f3       	brcs	.-32     	; 0x3900 <__addsf3+0x8>
    3920:	ba 17       	cp	r27, r26
    3922:	62 07       	cpc	r22, r18
    3924:	73 07       	cpc	r23, r19
    3926:	84 07       	cpc	r24, r20
    3928:	95 07       	cpc	r25, r21
    392a:	18 f0       	brcs	.+6      	; 0x3932 <__addsf3x+0x18>
    392c:	71 f4       	brne	.+28     	; 0x394a <__addsf3x+0x30>
    392e:	9e f5       	brtc	.+102    	; 0x3996 <__addsf3x+0x7c>
    3930:	67 c1       	rjmp	.+718    	; 0x3c00 <__fp_zero>
    3932:	0e f4       	brtc	.+2      	; 0x3936 <__addsf3x+0x1c>
    3934:	e0 95       	com	r30
    3936:	0b 2e       	mov	r0, r27
    3938:	ba 2f       	mov	r27, r26
    393a:	a0 2d       	mov	r26, r0
    393c:	0b 01       	movw	r0, r22
    393e:	b9 01       	movw	r22, r18
    3940:	90 01       	movw	r18, r0
    3942:	0c 01       	movw	r0, r24
    3944:	ca 01       	movw	r24, r20
    3946:	a0 01       	movw	r20, r0
    3948:	11 24       	eor	r1, r1
    394a:	ff 27       	eor	r31, r31
    394c:	59 1b       	sub	r21, r25
    394e:	99 f0       	breq	.+38     	; 0x3976 <__addsf3x+0x5c>
    3950:	59 3f       	cpi	r21, 0xF9	; 249
    3952:	50 f4       	brcc	.+20     	; 0x3968 <__addsf3x+0x4e>
    3954:	50 3e       	cpi	r21, 0xE0	; 224
    3956:	68 f1       	brcs	.+90     	; 0x39b2 <__addsf3x+0x98>
    3958:	1a 16       	cp	r1, r26
    395a:	f0 40       	sbci	r31, 0x00	; 0
    395c:	a2 2f       	mov	r26, r18
    395e:	23 2f       	mov	r18, r19
    3960:	34 2f       	mov	r19, r20
    3962:	44 27       	eor	r20, r20
    3964:	58 5f       	subi	r21, 0xF8	; 248
    3966:	f3 cf       	rjmp	.-26     	; 0x394e <__addsf3x+0x34>
    3968:	46 95       	lsr	r20
    396a:	37 95       	ror	r19
    396c:	27 95       	ror	r18
    396e:	a7 95       	ror	r26
    3970:	f0 40       	sbci	r31, 0x00	; 0
    3972:	53 95       	inc	r21
    3974:	c9 f7       	brne	.-14     	; 0x3968 <__addsf3x+0x4e>
    3976:	7e f4       	brtc	.+30     	; 0x3996 <__addsf3x+0x7c>
    3978:	1f 16       	cp	r1, r31
    397a:	ba 0b       	sbc	r27, r26
    397c:	62 0b       	sbc	r22, r18
    397e:	73 0b       	sbc	r23, r19
    3980:	84 0b       	sbc	r24, r20
    3982:	ba f0       	brmi	.+46     	; 0x39b2 <__addsf3x+0x98>
    3984:	91 50       	subi	r25, 0x01	; 1
    3986:	a1 f0       	breq	.+40     	; 0x39b0 <__addsf3x+0x96>
    3988:	ff 0f       	add	r31, r31
    398a:	bb 1f       	adc	r27, r27
    398c:	66 1f       	adc	r22, r22
    398e:	77 1f       	adc	r23, r23
    3990:	88 1f       	adc	r24, r24
    3992:	c2 f7       	brpl	.-16     	; 0x3984 <__addsf3x+0x6a>
    3994:	0e c0       	rjmp	.+28     	; 0x39b2 <__addsf3x+0x98>
    3996:	ba 0f       	add	r27, r26
    3998:	62 1f       	adc	r22, r18
    399a:	73 1f       	adc	r23, r19
    399c:	84 1f       	adc	r24, r20
    399e:	48 f4       	brcc	.+18     	; 0x39b2 <__addsf3x+0x98>
    39a0:	87 95       	ror	r24
    39a2:	77 95       	ror	r23
    39a4:	67 95       	ror	r22
    39a6:	b7 95       	ror	r27
    39a8:	f7 95       	ror	r31
    39aa:	9e 3f       	cpi	r25, 0xFE	; 254
    39ac:	08 f0       	brcs	.+2      	; 0x39b0 <__addsf3x+0x96>
    39ae:	b3 cf       	rjmp	.-154    	; 0x3916 <__addsf3+0x1e>
    39b0:	93 95       	inc	r25
    39b2:	88 0f       	add	r24, r24
    39b4:	08 f0       	brcs	.+2      	; 0x39b8 <__addsf3x+0x9e>
    39b6:	99 27       	eor	r25, r25
    39b8:	ee 0f       	add	r30, r30
    39ba:	97 95       	ror	r25
    39bc:	87 95       	ror	r24
    39be:	08 95       	ret

000039c0 <__divsf3>:
    39c0:	0c d0       	rcall	.+24     	; 0x39da <__divsf3x>
    39c2:	eb c0       	rjmp	.+470    	; 0x3b9a <__fp_round>
    39c4:	e3 d0       	rcall	.+454    	; 0x3b8c <__fp_pscB>
    39c6:	40 f0       	brcs	.+16     	; 0x39d8 <__divsf3+0x18>
    39c8:	da d0       	rcall	.+436    	; 0x3b7e <__fp_pscA>
    39ca:	30 f0       	brcs	.+12     	; 0x39d8 <__divsf3+0x18>
    39cc:	21 f4       	brne	.+8      	; 0x39d6 <__divsf3+0x16>
    39ce:	5f 3f       	cpi	r21, 0xFF	; 255
    39d0:	19 f0       	breq	.+6      	; 0x39d8 <__divsf3+0x18>
    39d2:	cc c0       	rjmp	.+408    	; 0x3b6c <__fp_inf>
    39d4:	51 11       	cpse	r21, r1
    39d6:	15 c1       	rjmp	.+554    	; 0x3c02 <__fp_szero>
    39d8:	cf c0       	rjmp	.+414    	; 0x3b78 <__fp_nan>

000039da <__divsf3x>:
    39da:	f0 d0       	rcall	.+480    	; 0x3bbc <__fp_split3>
    39dc:	98 f3       	brcs	.-26     	; 0x39c4 <__divsf3+0x4>

000039de <__divsf3_pse>:
    39de:	99 23       	and	r25, r25
    39e0:	c9 f3       	breq	.-14     	; 0x39d4 <__divsf3+0x14>
    39e2:	55 23       	and	r21, r21
    39e4:	b1 f3       	breq	.-20     	; 0x39d2 <__divsf3+0x12>
    39e6:	95 1b       	sub	r25, r21
    39e8:	55 0b       	sbc	r21, r21
    39ea:	bb 27       	eor	r27, r27
    39ec:	aa 27       	eor	r26, r26
    39ee:	62 17       	cp	r22, r18
    39f0:	73 07       	cpc	r23, r19
    39f2:	84 07       	cpc	r24, r20
    39f4:	38 f0       	brcs	.+14     	; 0x3a04 <__divsf3_pse+0x26>
    39f6:	9f 5f       	subi	r25, 0xFF	; 255
    39f8:	5f 4f       	sbci	r21, 0xFF	; 255
    39fa:	22 0f       	add	r18, r18
    39fc:	33 1f       	adc	r19, r19
    39fe:	44 1f       	adc	r20, r20
    3a00:	aa 1f       	adc	r26, r26
    3a02:	a9 f3       	breq	.-22     	; 0x39ee <__divsf3_pse+0x10>
    3a04:	33 d0       	rcall	.+102    	; 0x3a6c <__divsf3_pse+0x8e>
    3a06:	0e 2e       	mov	r0, r30
    3a08:	3a f0       	brmi	.+14     	; 0x3a18 <__divsf3_pse+0x3a>
    3a0a:	e0 e8       	ldi	r30, 0x80	; 128
    3a0c:	30 d0       	rcall	.+96     	; 0x3a6e <__divsf3_pse+0x90>
    3a0e:	91 50       	subi	r25, 0x01	; 1
    3a10:	50 40       	sbci	r21, 0x00	; 0
    3a12:	e6 95       	lsr	r30
    3a14:	00 1c       	adc	r0, r0
    3a16:	ca f7       	brpl	.-14     	; 0x3a0a <__divsf3_pse+0x2c>
    3a18:	29 d0       	rcall	.+82     	; 0x3a6c <__divsf3_pse+0x8e>
    3a1a:	fe 2f       	mov	r31, r30
    3a1c:	27 d0       	rcall	.+78     	; 0x3a6c <__divsf3_pse+0x8e>
    3a1e:	66 0f       	add	r22, r22
    3a20:	77 1f       	adc	r23, r23
    3a22:	88 1f       	adc	r24, r24
    3a24:	bb 1f       	adc	r27, r27
    3a26:	26 17       	cp	r18, r22
    3a28:	37 07       	cpc	r19, r23
    3a2a:	48 07       	cpc	r20, r24
    3a2c:	ab 07       	cpc	r26, r27
    3a2e:	b0 e8       	ldi	r27, 0x80	; 128
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <__divsf3_pse+0x56>
    3a32:	bb 0b       	sbc	r27, r27
    3a34:	80 2d       	mov	r24, r0
    3a36:	bf 01       	movw	r22, r30
    3a38:	ff 27       	eor	r31, r31
    3a3a:	93 58       	subi	r25, 0x83	; 131
    3a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a3e:	2a f0       	brmi	.+10     	; 0x3a4a <__divsf3_pse+0x6c>
    3a40:	9e 3f       	cpi	r25, 0xFE	; 254
    3a42:	51 05       	cpc	r21, r1
    3a44:	68 f0       	brcs	.+26     	; 0x3a60 <__divsf3_pse+0x82>
    3a46:	92 c0       	rjmp	.+292    	; 0x3b6c <__fp_inf>
    3a48:	dc c0       	rjmp	.+440    	; 0x3c02 <__fp_szero>
    3a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a4c:	ec f3       	brlt	.-6      	; 0x3a48 <__divsf3_pse+0x6a>
    3a4e:	98 3e       	cpi	r25, 0xE8	; 232
    3a50:	dc f3       	brlt	.-10     	; 0x3a48 <__divsf3_pse+0x6a>
    3a52:	86 95       	lsr	r24
    3a54:	77 95       	ror	r23
    3a56:	67 95       	ror	r22
    3a58:	b7 95       	ror	r27
    3a5a:	f7 95       	ror	r31
    3a5c:	9f 5f       	subi	r25, 0xFF	; 255
    3a5e:	c9 f7       	brne	.-14     	; 0x3a52 <__divsf3_pse+0x74>
    3a60:	88 0f       	add	r24, r24
    3a62:	91 1d       	adc	r25, r1
    3a64:	96 95       	lsr	r25
    3a66:	87 95       	ror	r24
    3a68:	97 f9       	bld	r25, 7
    3a6a:	08 95       	ret
    3a6c:	e1 e0       	ldi	r30, 0x01	; 1
    3a6e:	66 0f       	add	r22, r22
    3a70:	77 1f       	adc	r23, r23
    3a72:	88 1f       	adc	r24, r24
    3a74:	bb 1f       	adc	r27, r27
    3a76:	62 17       	cp	r22, r18
    3a78:	73 07       	cpc	r23, r19
    3a7a:	84 07       	cpc	r24, r20
    3a7c:	ba 07       	cpc	r27, r26
    3a7e:	20 f0       	brcs	.+8      	; 0x3a88 <__divsf3_pse+0xaa>
    3a80:	62 1b       	sub	r22, r18
    3a82:	73 0b       	sbc	r23, r19
    3a84:	84 0b       	sbc	r24, r20
    3a86:	ba 0b       	sbc	r27, r26
    3a88:	ee 1f       	adc	r30, r30
    3a8a:	88 f7       	brcc	.-30     	; 0x3a6e <__divsf3_pse+0x90>
    3a8c:	e0 95       	com	r30
    3a8e:	08 95       	ret

00003a90 <__fixsfsi>:
    3a90:	04 d0       	rcall	.+8      	; 0x3a9a <__fixunssfsi>
    3a92:	68 94       	set
    3a94:	b1 11       	cpse	r27, r1
    3a96:	b5 c0       	rjmp	.+362    	; 0x3c02 <__fp_szero>
    3a98:	08 95       	ret

00003a9a <__fixunssfsi>:
    3a9a:	98 d0       	rcall	.+304    	; 0x3bcc <__fp_splitA>
    3a9c:	88 f0       	brcs	.+34     	; 0x3ac0 <__fixunssfsi+0x26>
    3a9e:	9f 57       	subi	r25, 0x7F	; 127
    3aa0:	90 f0       	brcs	.+36     	; 0x3ac6 <__fixunssfsi+0x2c>
    3aa2:	b9 2f       	mov	r27, r25
    3aa4:	99 27       	eor	r25, r25
    3aa6:	b7 51       	subi	r27, 0x17	; 23
    3aa8:	a0 f0       	brcs	.+40     	; 0x3ad2 <__fixunssfsi+0x38>
    3aaa:	d1 f0       	breq	.+52     	; 0x3ae0 <__fixunssfsi+0x46>
    3aac:	66 0f       	add	r22, r22
    3aae:	77 1f       	adc	r23, r23
    3ab0:	88 1f       	adc	r24, r24
    3ab2:	99 1f       	adc	r25, r25
    3ab4:	1a f0       	brmi	.+6      	; 0x3abc <__fixunssfsi+0x22>
    3ab6:	ba 95       	dec	r27
    3ab8:	c9 f7       	brne	.-14     	; 0x3aac <__fixunssfsi+0x12>
    3aba:	12 c0       	rjmp	.+36     	; 0x3ae0 <__fixunssfsi+0x46>
    3abc:	b1 30       	cpi	r27, 0x01	; 1
    3abe:	81 f0       	breq	.+32     	; 0x3ae0 <__fixunssfsi+0x46>
    3ac0:	9f d0       	rcall	.+318    	; 0x3c00 <__fp_zero>
    3ac2:	b1 e0       	ldi	r27, 0x01	; 1
    3ac4:	08 95       	ret
    3ac6:	9c c0       	rjmp	.+312    	; 0x3c00 <__fp_zero>
    3ac8:	67 2f       	mov	r22, r23
    3aca:	78 2f       	mov	r23, r24
    3acc:	88 27       	eor	r24, r24
    3ace:	b8 5f       	subi	r27, 0xF8	; 248
    3ad0:	39 f0       	breq	.+14     	; 0x3ae0 <__fixunssfsi+0x46>
    3ad2:	b9 3f       	cpi	r27, 0xF9	; 249
    3ad4:	cc f3       	brlt	.-14     	; 0x3ac8 <__fixunssfsi+0x2e>
    3ad6:	86 95       	lsr	r24
    3ad8:	77 95       	ror	r23
    3ada:	67 95       	ror	r22
    3adc:	b3 95       	inc	r27
    3ade:	d9 f7       	brne	.-10     	; 0x3ad6 <__fixunssfsi+0x3c>
    3ae0:	3e f4       	brtc	.+14     	; 0x3af0 <__fixunssfsi+0x56>
    3ae2:	90 95       	com	r25
    3ae4:	80 95       	com	r24
    3ae6:	70 95       	com	r23
    3ae8:	61 95       	neg	r22
    3aea:	7f 4f       	sbci	r23, 0xFF	; 255
    3aec:	8f 4f       	sbci	r24, 0xFF	; 255
    3aee:	9f 4f       	sbci	r25, 0xFF	; 255
    3af0:	08 95       	ret

00003af2 <__floatunsisf>:
    3af2:	e8 94       	clt
    3af4:	09 c0       	rjmp	.+18     	; 0x3b08 <__floatsisf+0x12>

00003af6 <__floatsisf>:
    3af6:	97 fb       	bst	r25, 7
    3af8:	3e f4       	brtc	.+14     	; 0x3b08 <__floatsisf+0x12>
    3afa:	90 95       	com	r25
    3afc:	80 95       	com	r24
    3afe:	70 95       	com	r23
    3b00:	61 95       	neg	r22
    3b02:	7f 4f       	sbci	r23, 0xFF	; 255
    3b04:	8f 4f       	sbci	r24, 0xFF	; 255
    3b06:	9f 4f       	sbci	r25, 0xFF	; 255
    3b08:	99 23       	and	r25, r25
    3b0a:	a9 f0       	breq	.+42     	; 0x3b36 <__floatsisf+0x40>
    3b0c:	f9 2f       	mov	r31, r25
    3b0e:	96 e9       	ldi	r25, 0x96	; 150
    3b10:	bb 27       	eor	r27, r27
    3b12:	93 95       	inc	r25
    3b14:	f6 95       	lsr	r31
    3b16:	87 95       	ror	r24
    3b18:	77 95       	ror	r23
    3b1a:	67 95       	ror	r22
    3b1c:	b7 95       	ror	r27
    3b1e:	f1 11       	cpse	r31, r1
    3b20:	f8 cf       	rjmp	.-16     	; 0x3b12 <__floatsisf+0x1c>
    3b22:	fa f4       	brpl	.+62     	; 0x3b62 <__floatsisf+0x6c>
    3b24:	bb 0f       	add	r27, r27
    3b26:	11 f4       	brne	.+4      	; 0x3b2c <__floatsisf+0x36>
    3b28:	60 ff       	sbrs	r22, 0
    3b2a:	1b c0       	rjmp	.+54     	; 0x3b62 <__floatsisf+0x6c>
    3b2c:	6f 5f       	subi	r22, 0xFF	; 255
    3b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b30:	8f 4f       	sbci	r24, 0xFF	; 255
    3b32:	9f 4f       	sbci	r25, 0xFF	; 255
    3b34:	16 c0       	rjmp	.+44     	; 0x3b62 <__floatsisf+0x6c>
    3b36:	88 23       	and	r24, r24
    3b38:	11 f0       	breq	.+4      	; 0x3b3e <__floatsisf+0x48>
    3b3a:	96 e9       	ldi	r25, 0x96	; 150
    3b3c:	11 c0       	rjmp	.+34     	; 0x3b60 <__floatsisf+0x6a>
    3b3e:	77 23       	and	r23, r23
    3b40:	21 f0       	breq	.+8      	; 0x3b4a <__floatsisf+0x54>
    3b42:	9e e8       	ldi	r25, 0x8E	; 142
    3b44:	87 2f       	mov	r24, r23
    3b46:	76 2f       	mov	r23, r22
    3b48:	05 c0       	rjmp	.+10     	; 0x3b54 <__floatsisf+0x5e>
    3b4a:	66 23       	and	r22, r22
    3b4c:	71 f0       	breq	.+28     	; 0x3b6a <__floatsisf+0x74>
    3b4e:	96 e8       	ldi	r25, 0x86	; 134
    3b50:	86 2f       	mov	r24, r22
    3b52:	70 e0       	ldi	r23, 0x00	; 0
    3b54:	60 e0       	ldi	r22, 0x00	; 0
    3b56:	2a f0       	brmi	.+10     	; 0x3b62 <__floatsisf+0x6c>
    3b58:	9a 95       	dec	r25
    3b5a:	66 0f       	add	r22, r22
    3b5c:	77 1f       	adc	r23, r23
    3b5e:	88 1f       	adc	r24, r24
    3b60:	da f7       	brpl	.-10     	; 0x3b58 <__floatsisf+0x62>
    3b62:	88 0f       	add	r24, r24
    3b64:	96 95       	lsr	r25
    3b66:	87 95       	ror	r24
    3b68:	97 f9       	bld	r25, 7
    3b6a:	08 95       	ret

00003b6c <__fp_inf>:
    3b6c:	97 f9       	bld	r25, 7
    3b6e:	9f 67       	ori	r25, 0x7F	; 127
    3b70:	80 e8       	ldi	r24, 0x80	; 128
    3b72:	70 e0       	ldi	r23, 0x00	; 0
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	08 95       	ret

00003b78 <__fp_nan>:
    3b78:	9f ef       	ldi	r25, 0xFF	; 255
    3b7a:	80 ec       	ldi	r24, 0xC0	; 192
    3b7c:	08 95       	ret

00003b7e <__fp_pscA>:
    3b7e:	00 24       	eor	r0, r0
    3b80:	0a 94       	dec	r0
    3b82:	16 16       	cp	r1, r22
    3b84:	17 06       	cpc	r1, r23
    3b86:	18 06       	cpc	r1, r24
    3b88:	09 06       	cpc	r0, r25
    3b8a:	08 95       	ret

00003b8c <__fp_pscB>:
    3b8c:	00 24       	eor	r0, r0
    3b8e:	0a 94       	dec	r0
    3b90:	12 16       	cp	r1, r18
    3b92:	13 06       	cpc	r1, r19
    3b94:	14 06       	cpc	r1, r20
    3b96:	05 06       	cpc	r0, r21
    3b98:	08 95       	ret

00003b9a <__fp_round>:
    3b9a:	09 2e       	mov	r0, r25
    3b9c:	03 94       	inc	r0
    3b9e:	00 0c       	add	r0, r0
    3ba0:	11 f4       	brne	.+4      	; 0x3ba6 <__fp_round+0xc>
    3ba2:	88 23       	and	r24, r24
    3ba4:	52 f0       	brmi	.+20     	; 0x3bba <__fp_round+0x20>
    3ba6:	bb 0f       	add	r27, r27
    3ba8:	40 f4       	brcc	.+16     	; 0x3bba <__fp_round+0x20>
    3baa:	bf 2b       	or	r27, r31
    3bac:	11 f4       	brne	.+4      	; 0x3bb2 <__fp_round+0x18>
    3bae:	60 ff       	sbrs	r22, 0
    3bb0:	04 c0       	rjmp	.+8      	; 0x3bba <__fp_round+0x20>
    3bb2:	6f 5f       	subi	r22, 0xFF	; 255
    3bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    3bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bba:	08 95       	ret

00003bbc <__fp_split3>:
    3bbc:	57 fd       	sbrc	r21, 7
    3bbe:	90 58       	subi	r25, 0x80	; 128
    3bc0:	44 0f       	add	r20, r20
    3bc2:	55 1f       	adc	r21, r21
    3bc4:	59 f0       	breq	.+22     	; 0x3bdc <__fp_splitA+0x10>
    3bc6:	5f 3f       	cpi	r21, 0xFF	; 255
    3bc8:	71 f0       	breq	.+28     	; 0x3be6 <__fp_splitA+0x1a>
    3bca:	47 95       	ror	r20

00003bcc <__fp_splitA>:
    3bcc:	88 0f       	add	r24, r24
    3bce:	97 fb       	bst	r25, 7
    3bd0:	99 1f       	adc	r25, r25
    3bd2:	61 f0       	breq	.+24     	; 0x3bec <__fp_splitA+0x20>
    3bd4:	9f 3f       	cpi	r25, 0xFF	; 255
    3bd6:	79 f0       	breq	.+30     	; 0x3bf6 <__fp_splitA+0x2a>
    3bd8:	87 95       	ror	r24
    3bda:	08 95       	ret
    3bdc:	12 16       	cp	r1, r18
    3bde:	13 06       	cpc	r1, r19
    3be0:	14 06       	cpc	r1, r20
    3be2:	55 1f       	adc	r21, r21
    3be4:	f2 cf       	rjmp	.-28     	; 0x3bca <__fp_split3+0xe>
    3be6:	46 95       	lsr	r20
    3be8:	f1 df       	rcall	.-30     	; 0x3bcc <__fp_splitA>
    3bea:	08 c0       	rjmp	.+16     	; 0x3bfc <__fp_splitA+0x30>
    3bec:	16 16       	cp	r1, r22
    3bee:	17 06       	cpc	r1, r23
    3bf0:	18 06       	cpc	r1, r24
    3bf2:	99 1f       	adc	r25, r25
    3bf4:	f1 cf       	rjmp	.-30     	; 0x3bd8 <__fp_splitA+0xc>
    3bf6:	86 95       	lsr	r24
    3bf8:	71 05       	cpc	r23, r1
    3bfa:	61 05       	cpc	r22, r1
    3bfc:	08 94       	sec
    3bfe:	08 95       	ret

00003c00 <__fp_zero>:
    3c00:	e8 94       	clt

00003c02 <__fp_szero>:
    3c02:	bb 27       	eor	r27, r27
    3c04:	66 27       	eor	r22, r22
    3c06:	77 27       	eor	r23, r23
    3c08:	cb 01       	movw	r24, r22
    3c0a:	97 f9       	bld	r25, 7
    3c0c:	08 95       	ret

00003c0e <__mulsf3>:
    3c0e:	0b d0       	rcall	.+22     	; 0x3c26 <__mulsf3x>
    3c10:	c4 cf       	rjmp	.-120    	; 0x3b9a <__fp_round>
    3c12:	b5 df       	rcall	.-150    	; 0x3b7e <__fp_pscA>
    3c14:	28 f0       	brcs	.+10     	; 0x3c20 <__mulsf3+0x12>
    3c16:	ba df       	rcall	.-140    	; 0x3b8c <__fp_pscB>
    3c18:	18 f0       	brcs	.+6      	; 0x3c20 <__mulsf3+0x12>
    3c1a:	95 23       	and	r25, r21
    3c1c:	09 f0       	breq	.+2      	; 0x3c20 <__mulsf3+0x12>
    3c1e:	a6 cf       	rjmp	.-180    	; 0x3b6c <__fp_inf>
    3c20:	ab cf       	rjmp	.-170    	; 0x3b78 <__fp_nan>
    3c22:	11 24       	eor	r1, r1
    3c24:	ee cf       	rjmp	.-36     	; 0x3c02 <__fp_szero>

00003c26 <__mulsf3x>:
    3c26:	ca df       	rcall	.-108    	; 0x3bbc <__fp_split3>
    3c28:	a0 f3       	brcs	.-24     	; 0x3c12 <__mulsf3+0x4>

00003c2a <__mulsf3_pse>:
    3c2a:	95 9f       	mul	r25, r21
    3c2c:	d1 f3       	breq	.-12     	; 0x3c22 <__mulsf3+0x14>
    3c2e:	95 0f       	add	r25, r21
    3c30:	50 e0       	ldi	r21, 0x00	; 0
    3c32:	55 1f       	adc	r21, r21
    3c34:	62 9f       	mul	r22, r18
    3c36:	f0 01       	movw	r30, r0
    3c38:	72 9f       	mul	r23, r18
    3c3a:	bb 27       	eor	r27, r27
    3c3c:	f0 0d       	add	r31, r0
    3c3e:	b1 1d       	adc	r27, r1
    3c40:	63 9f       	mul	r22, r19
    3c42:	aa 27       	eor	r26, r26
    3c44:	f0 0d       	add	r31, r0
    3c46:	b1 1d       	adc	r27, r1
    3c48:	aa 1f       	adc	r26, r26
    3c4a:	64 9f       	mul	r22, r20
    3c4c:	66 27       	eor	r22, r22
    3c4e:	b0 0d       	add	r27, r0
    3c50:	a1 1d       	adc	r26, r1
    3c52:	66 1f       	adc	r22, r22
    3c54:	82 9f       	mul	r24, r18
    3c56:	22 27       	eor	r18, r18
    3c58:	b0 0d       	add	r27, r0
    3c5a:	a1 1d       	adc	r26, r1
    3c5c:	62 1f       	adc	r22, r18
    3c5e:	73 9f       	mul	r23, r19
    3c60:	b0 0d       	add	r27, r0
    3c62:	a1 1d       	adc	r26, r1
    3c64:	62 1f       	adc	r22, r18
    3c66:	83 9f       	mul	r24, r19
    3c68:	a0 0d       	add	r26, r0
    3c6a:	61 1d       	adc	r22, r1
    3c6c:	22 1f       	adc	r18, r18
    3c6e:	74 9f       	mul	r23, r20
    3c70:	33 27       	eor	r19, r19
    3c72:	a0 0d       	add	r26, r0
    3c74:	61 1d       	adc	r22, r1
    3c76:	23 1f       	adc	r18, r19
    3c78:	84 9f       	mul	r24, r20
    3c7a:	60 0d       	add	r22, r0
    3c7c:	21 1d       	adc	r18, r1
    3c7e:	82 2f       	mov	r24, r18
    3c80:	76 2f       	mov	r23, r22
    3c82:	6a 2f       	mov	r22, r26
    3c84:	11 24       	eor	r1, r1
    3c86:	9f 57       	subi	r25, 0x7F	; 127
    3c88:	50 40       	sbci	r21, 0x00	; 0
    3c8a:	8a f0       	brmi	.+34     	; 0x3cae <__mulsf3_pse+0x84>
    3c8c:	e1 f0       	breq	.+56     	; 0x3cc6 <__mulsf3_pse+0x9c>
    3c8e:	88 23       	and	r24, r24
    3c90:	4a f0       	brmi	.+18     	; 0x3ca4 <__mulsf3_pse+0x7a>
    3c92:	ee 0f       	add	r30, r30
    3c94:	ff 1f       	adc	r31, r31
    3c96:	bb 1f       	adc	r27, r27
    3c98:	66 1f       	adc	r22, r22
    3c9a:	77 1f       	adc	r23, r23
    3c9c:	88 1f       	adc	r24, r24
    3c9e:	91 50       	subi	r25, 0x01	; 1
    3ca0:	50 40       	sbci	r21, 0x00	; 0
    3ca2:	a9 f7       	brne	.-22     	; 0x3c8e <__mulsf3_pse+0x64>
    3ca4:	9e 3f       	cpi	r25, 0xFE	; 254
    3ca6:	51 05       	cpc	r21, r1
    3ca8:	70 f0       	brcs	.+28     	; 0x3cc6 <__mulsf3_pse+0x9c>
    3caa:	60 cf       	rjmp	.-320    	; 0x3b6c <__fp_inf>
    3cac:	aa cf       	rjmp	.-172    	; 0x3c02 <__fp_szero>
    3cae:	5f 3f       	cpi	r21, 0xFF	; 255
    3cb0:	ec f3       	brlt	.-6      	; 0x3cac <__mulsf3_pse+0x82>
    3cb2:	98 3e       	cpi	r25, 0xE8	; 232
    3cb4:	dc f3       	brlt	.-10     	; 0x3cac <__mulsf3_pse+0x82>
    3cb6:	86 95       	lsr	r24
    3cb8:	77 95       	ror	r23
    3cba:	67 95       	ror	r22
    3cbc:	b7 95       	ror	r27
    3cbe:	f7 95       	ror	r31
    3cc0:	e7 95       	ror	r30
    3cc2:	9f 5f       	subi	r25, 0xFF	; 255
    3cc4:	c1 f7       	brne	.-16     	; 0x3cb6 <__mulsf3_pse+0x8c>
    3cc6:	fe 2b       	or	r31, r30
    3cc8:	88 0f       	add	r24, r24
    3cca:	91 1d       	adc	r25, r1
    3ccc:	96 95       	lsr	r25
    3cce:	87 95       	ror	r24
    3cd0:	97 f9       	bld	r25, 7
    3cd2:	08 95       	ret

00003cd4 <_ZN5PrintC1Ev>:
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	00 d0       	rcall	.+0      	; 0x3cda <_ZN5PrintC1Ev+0x6>
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	9a 83       	std	Y+2, r25	; 0x02
    3ce0:	89 83       	std	Y+1, r24	; 0x01
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce6:	25 e5       	ldi	r18, 0x55	; 85
    3ce8:	31 e0       	ldi	r19, 0x01	; 1
    3cea:	fc 01       	movw	r30, r24
    3cec:	31 83       	std	Z+1, r19	; 0x01
    3cee:	20 83       	st	Z, r18
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	13 82       	std	Z+3, r1	; 0x03
    3cf8:	12 82       	std	Z+2, r1	; 0x02
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	df 91       	pop	r29
    3d00:	cf 91       	pop	r28
    3d02:	08 95       	ret

00003d04 <_ZN6StreamC1Ev>:
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	00 d0       	rcall	.+0      	; 0x3d0a <_ZN6StreamC1Ev+0x6>
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	9a 83       	std	Y+2, r25	; 0x02
    3d10:	89 83       	std	Y+1, r24	; 0x01
    3d12:	89 81       	ldd	r24, Y+1	; 0x01
    3d14:	9a 81       	ldd	r25, Y+2	; 0x02
    3d16:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_ZN5PrintC1Ev>
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1e:	28 e1       	ldi	r18, 0x18	; 24
    3d20:	31 e0       	ldi	r19, 0x01	; 1
    3d22:	fc 01       	movw	r30, r24
    3d24:	31 83       	std	Z+1, r19	; 0x01
    3d26:	20 83       	st	Z, r18
    3d28:	29 81       	ldd	r18, Y+1	; 0x01
    3d2a:	3a 81       	ldd	r19, Y+2	; 0x02
    3d2c:	88 ee       	ldi	r24, 0xE8	; 232
    3d2e:	93 e0       	ldi	r25, 0x03	; 3
    3d30:	a0 e0       	ldi	r26, 0x00	; 0
    3d32:	b0 e0       	ldi	r27, 0x00	; 0
    3d34:	f9 01       	movw	r30, r18
    3d36:	84 83       	std	Z+4, r24	; 0x04
    3d38:	95 83       	std	Z+5, r25	; 0x05
    3d3a:	a6 83       	std	Z+6, r26	; 0x06
    3d3c:	b7 83       	std	Z+7, r27	; 0x07
    3d3e:	0f 90       	pop	r0
    3d40:	0f 90       	pop	r0
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	08 95       	ret

00003d48 <_Z10store_charhP11ring_buffer>:
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	00 d0       	rcall	.+0      	; 0x3d4e <_Z10store_charhP11ring_buffer+0x6>
    3d4e:	00 d0       	rcall	.+0      	; 0x3d50 <_Z10store_charhP11ring_buffer+0x8>
    3d50:	1f 92       	push	r1
    3d52:	cd b7       	in	r28, 0x3d	; 61
    3d54:	de b7       	in	r29, 0x3e	; 62
    3d56:	8b 83       	std	Y+3, r24	; 0x03
    3d58:	7d 83       	std	Y+5, r23	; 0x05
    3d5a:	6c 83       	std	Y+4, r22	; 0x04
    3d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d60:	80 5c       	subi	r24, 0xC0	; 192
    3d62:	9f 4f       	sbci	r25, 0xFF	; 255
    3d64:	fc 01       	movw	r30, r24
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	01 96       	adiw	r24, 0x01	; 1
    3d6c:	8f 73       	andi	r24, 0x3F	; 63
    3d6e:	99 27       	eor	r25, r25
    3d70:	9a 83       	std	Y+2, r25	; 0x02
    3d72:	89 83       	std	Y+1, r24	; 0x01
    3d74:	29 81       	ldd	r18, Y+1	; 0x01
    3d76:	3a 81       	ldd	r19, Y+2	; 0x02
    3d78:	8c 81       	ldd	r24, Y+4	; 0x04
    3d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d7c:	8e 5b       	subi	r24, 0xBE	; 190
    3d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d80:	fc 01       	movw	r30, r24
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	41 e0       	ldi	r20, 0x01	; 1
    3d88:	28 17       	cp	r18, r24
    3d8a:	39 07       	cpc	r19, r25
    3d8c:	09 f4       	brne	.+2      	; 0x3d90 <_Z10store_charhP11ring_buffer+0x48>
    3d8e:	40 e0       	ldi	r20, 0x00	; 0
    3d90:	44 23       	and	r20, r20
    3d92:	b9 f0       	breq	.+46     	; 0x3dc2 <_Z10store_charhP11ring_buffer+0x7a>
    3d94:	8c 81       	ldd	r24, Y+4	; 0x04
    3d96:	9d 81       	ldd	r25, Y+5	; 0x05
    3d98:	80 5c       	subi	r24, 0xC0	; 192
    3d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	2c 81       	ldd	r18, Y+4	; 0x04
    3da4:	3d 81       	ldd	r19, Y+5	; 0x05
    3da6:	82 0f       	add	r24, r18
    3da8:	93 1f       	adc	r25, r19
    3daa:	2b 81       	ldd	r18, Y+3	; 0x03
    3dac:	fc 01       	movw	r30, r24
    3dae:	20 83       	st	Z, r18
    3db0:	29 81       	ldd	r18, Y+1	; 0x01
    3db2:	3a 81       	ldd	r19, Y+2	; 0x02
    3db4:	8c 81       	ldd	r24, Y+4	; 0x04
    3db6:	9d 81       	ldd	r25, Y+5	; 0x05
    3db8:	80 5c       	subi	r24, 0xC0	; 192
    3dba:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	31 83       	std	Z+1, r19	; 0x01
    3dc0:	20 83       	st	Z, r18
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	df 91       	pop	r29
    3dce:	cf 91       	pop	r28
    3dd0:	08 95       	ret

00003dd2 <_Z11serialEventv>:
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    3dda:	df 91       	pop	r29
    3ddc:	cf 91       	pop	r28
    3dde:	08 95       	ret

00003de0 <__vector_18>:
    3de0:	1f 92       	push	r1
    3de2:	0f 92       	push	r0
    3de4:	00 90 5f 00 	lds	r0, 0x005F
    3de8:	0f 92       	push	r0
    3dea:	11 24       	eor	r1, r1
    3dec:	2f 93       	push	r18
    3dee:	3f 93       	push	r19
    3df0:	4f 93       	push	r20
    3df2:	5f 93       	push	r21
    3df4:	6f 93       	push	r22
    3df6:	7f 93       	push	r23
    3df8:	8f 93       	push	r24
    3dfa:	9f 93       	push	r25
    3dfc:	af 93       	push	r26
    3dfe:	bf 93       	push	r27
    3e00:	ef 93       	push	r30
    3e02:	ff 93       	push	r31
    3e04:	cf 93       	push	r28
    3e06:	df 93       	push	r29
    3e08:	00 d0       	rcall	.+0      	; 0x3e0a <__vector_18+0x2a>
    3e0a:	cd b7       	in	r28, 0x3d	; 61
    3e0c:	de b7       	in	r29, 0x3e	; 62
    3e0e:	80 ec       	ldi	r24, 0xC0	; 192
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	fc 01       	movw	r30, r24
    3e14:	80 81       	ld	r24, Z
    3e16:	88 2f       	mov	r24, r24
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	84 70       	andi	r24, 0x04	; 4
    3e1c:	99 27       	eor	r25, r25
    3e1e:	21 e0       	ldi	r18, 0x01	; 1
    3e20:	00 97       	sbiw	r24, 0x00	; 0
    3e22:	09 f0       	breq	.+2      	; 0x3e26 <__vector_18+0x46>
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	22 23       	and	r18, r18
    3e28:	59 f0       	breq	.+22     	; 0x3e40 <__vector_18+0x60>
    3e2a:	86 ec       	ldi	r24, 0xC6	; 198
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	fc 01       	movw	r30, r24
    3e30:	80 81       	ld	r24, Z
    3e32:	89 83       	std	Y+1, r24	; 0x01
    3e34:	66 ea       	ldi	r22, 0xA6	; 166
    3e36:	72 e0       	ldi	r23, 0x02	; 2
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
    3e3a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_Z10store_charhP11ring_buffer>
    3e3e:	05 c0       	rjmp	.+10     	; 0x3e4a <__vector_18+0x6a>
    3e40:	86 ec       	ldi	r24, 0xC6	; 198
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	fc 01       	movw	r30, r24
    3e46:	80 81       	ld	r24, Z
    3e48:	8a 83       	std	Y+2, r24	; 0x02
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	ff 91       	pop	r31
    3e54:	ef 91       	pop	r30
    3e56:	bf 91       	pop	r27
    3e58:	af 91       	pop	r26
    3e5a:	9f 91       	pop	r25
    3e5c:	8f 91       	pop	r24
    3e5e:	7f 91       	pop	r23
    3e60:	6f 91       	pop	r22
    3e62:	5f 91       	pop	r21
    3e64:	4f 91       	pop	r20
    3e66:	3f 91       	pop	r19
    3e68:	2f 91       	pop	r18
    3e6a:	0f 90       	pop	r0
    3e6c:	00 92 5f 00 	sts	0x005F, r0
    3e70:	0f 90       	pop	r0
    3e72:	1f 90       	pop	r1
    3e74:	18 95       	reti

00003e76 <_Z14serialEventRunv>:
    3e76:	cf 93       	push	r28
    3e78:	df 93       	push	r29
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
    3e7e:	8e e2       	ldi	r24, 0x2E	; 46
    3e80:	93 e0       	ldi	r25, 0x03	; 3
    3e82:	0e 94 42 21 	call	0x4284	; 0x4284 <_ZN14HardwareSerial9availableEv>
    3e86:	21 e0       	ldi	r18, 0x01	; 1
    3e88:	00 97       	sbiw	r24, 0x00	; 0
    3e8a:	09 f4       	brne	.+2      	; 0x3e8e <_Z14serialEventRunv+0x18>
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	22 23       	and	r18, r18
    3e90:	11 f0       	breq	.+4      	; 0x3e96 <_Z14serialEventRunv+0x20>
    3e92:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <_Z11serialEventv>
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	08 95       	ret

00003e9c <__vector_19>:
    3e9c:	1f 92       	push	r1
    3e9e:	0f 92       	push	r0
    3ea0:	00 90 5f 00 	lds	r0, 0x005F
    3ea4:	0f 92       	push	r0
    3ea6:	11 24       	eor	r1, r1
    3ea8:	2f 93       	push	r18
    3eaa:	3f 93       	push	r19
    3eac:	4f 93       	push	r20
    3eae:	8f 93       	push	r24
    3eb0:	9f 93       	push	r25
    3eb2:	ef 93       	push	r30
    3eb4:	ff 93       	push	r31
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	1f 92       	push	r1
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	20 91 2a 03 	lds	r18, 0x032A
    3ec4:	30 91 2b 03 	lds	r19, 0x032B
    3ec8:	80 91 2c 03 	lds	r24, 0x032C
    3ecc:	90 91 2d 03 	lds	r25, 0x032D
    3ed0:	41 e0       	ldi	r20, 0x01	; 1
    3ed2:	28 17       	cp	r18, r24
    3ed4:	39 07       	cpc	r19, r25
    3ed6:	09 f0       	breq	.+2      	; 0x3eda <__vector_19+0x3e>
    3ed8:	40 e0       	ldi	r20, 0x00	; 0
    3eda:	44 23       	and	r20, r20
    3edc:	51 f0       	breq	.+20     	; 0x3ef2 <__vector_19+0x56>
    3ede:	81 ec       	ldi	r24, 0xC1	; 193
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	21 ec       	ldi	r18, 0xC1	; 193
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	f9 01       	movw	r30, r18
    3ee8:	20 81       	ld	r18, Z
    3eea:	2f 7d       	andi	r18, 0xDF	; 223
    3eec:	fc 01       	movw	r30, r24
    3eee:	20 83       	st	Z, r18
    3ef0:	19 c0       	rjmp	.+50     	; 0x3f24 <__vector_19+0x88>
    3ef2:	80 91 2c 03 	lds	r24, 0x032C
    3ef6:	90 91 2d 03 	lds	r25, 0x032D
    3efa:	86 51       	subi	r24, 0x16	; 22
    3efc:	9d 4f       	sbci	r25, 0xFD	; 253
    3efe:	fc 01       	movw	r30, r24
    3f00:	80 81       	ld	r24, Z
    3f02:	89 83       	std	Y+1, r24	; 0x01
    3f04:	80 91 2c 03 	lds	r24, 0x032C
    3f08:	90 91 2d 03 	lds	r25, 0x032D
    3f0c:	01 96       	adiw	r24, 0x01	; 1
    3f0e:	8f 73       	andi	r24, 0x3F	; 63
    3f10:	99 27       	eor	r25, r25
    3f12:	90 93 2d 03 	sts	0x032D, r25
    3f16:	80 93 2c 03 	sts	0x032C, r24
    3f1a:	86 ec       	ldi	r24, 0xC6	; 198
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	29 81       	ldd	r18, Y+1	; 0x01
    3f20:	fc 01       	movw	r30, r24
    3f22:	20 83       	st	Z, r18
    3f24:	0f 90       	pop	r0
    3f26:	df 91       	pop	r29
    3f28:	cf 91       	pop	r28
    3f2a:	ff 91       	pop	r31
    3f2c:	ef 91       	pop	r30
    3f2e:	9f 91       	pop	r25
    3f30:	8f 91       	pop	r24
    3f32:	4f 91       	pop	r20
    3f34:	3f 91       	pop	r19
    3f36:	2f 91       	pop	r18
    3f38:	0f 90       	pop	r0
    3f3a:	00 92 5f 00 	sts	0x005F, r0
    3f3e:	0f 90       	pop	r0
    3f40:	1f 90       	pop	r1
    3f42:	18 95       	reti

00003f44 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    3f44:	8f 92       	push	r8
    3f46:	9f 92       	push	r9
    3f48:	af 92       	push	r10
    3f4a:	bf 92       	push	r11
    3f4c:	cf 92       	push	r12
    3f4e:	df 92       	push	r13
    3f50:	ef 92       	push	r14
    3f52:	ff 92       	push	r15
    3f54:	0f 93       	push	r16
    3f56:	1f 93       	push	r17
    3f58:	cf 93       	push	r28
    3f5a:	df 93       	push	r29
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
    3f60:	62 97       	sbiw	r28, 0x12	; 18
    3f62:	0f b6       	in	r0, 0x3f	; 63
    3f64:	f8 94       	cli
    3f66:	de bf       	out	0x3e, r29	; 62
    3f68:	0f be       	out	0x3f, r0	; 63
    3f6a:	cd bf       	out	0x3d, r28	; 61
    3f6c:	9a 83       	std	Y+2, r25	; 0x02
    3f6e:	89 83       	std	Y+1, r24	; 0x01
    3f70:	7c 83       	std	Y+4, r23	; 0x04
    3f72:	6b 83       	std	Y+3, r22	; 0x03
    3f74:	5e 83       	std	Y+6, r21	; 0x06
    3f76:	4d 83       	std	Y+5, r20	; 0x05
    3f78:	38 87       	std	Y+8, r19	; 0x08
    3f7a:	2f 83       	std	Y+7, r18	; 0x07
    3f7c:	1a 87       	std	Y+10, r17	; 0x0a
    3f7e:	09 87       	std	Y+9, r16	; 0x09
    3f80:	fc 86       	std	Y+12, r15	; 0x0c
    3f82:	eb 86       	std	Y+11, r14	; 0x0b
    3f84:	de 86       	std	Y+14, r13	; 0x0e
    3f86:	cd 86       	std	Y+13, r12	; 0x0d
    3f88:	b8 8a       	std	Y+16, r11	; 0x10
    3f8a:	af 86       	std	Y+15, r10	; 0x0f
    3f8c:	9a 8a       	std	Y+18, r9	; 0x12
    3f8e:	89 8a       	std	Y+17, r8	; 0x11
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	9a 81       	ldd	r25, Y+2	; 0x02
    3f94:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <_ZN6StreamC1Ev>
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9c:	25 e4       	ldi	r18, 0x45	; 69
    3f9e:	31 e0       	ldi	r19, 0x01	; 1
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	31 83       	std	Z+1, r19	; 0x01
    3fa4:	20 83       	st	Z, r18
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3faa:	2b 81       	ldd	r18, Y+3	; 0x03
    3fac:	3c 81       	ldd	r19, Y+4	; 0x04
    3fae:	fc 01       	movw	r30, r24
    3fb0:	35 87       	std	Z+13, r19	; 0x0d
    3fb2:	24 87       	std	Z+12, r18	; 0x0c
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb8:	2d 81       	ldd	r18, Y+5	; 0x05
    3fba:	3e 81       	ldd	r19, Y+6	; 0x06
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	37 87       	std	Z+15, r19	; 0x0f
    3fc0:	26 87       	std	Z+14, r18	; 0x0e
    3fc2:	89 81       	ldd	r24, Y+1	; 0x01
    3fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc6:	2f 81       	ldd	r18, Y+7	; 0x07
    3fc8:	38 85       	ldd	r19, Y+8	; 0x08
    3fca:	fc 01       	movw	r30, r24
    3fcc:	31 8b       	std	Z+17, r19	; 0x11
    3fce:	20 8b       	std	Z+16, r18	; 0x10
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd4:	29 85       	ldd	r18, Y+9	; 0x09
    3fd6:	3a 85       	ldd	r19, Y+10	; 0x0a
    3fd8:	fc 01       	movw	r30, r24
    3fda:	33 8b       	std	Z+19, r19	; 0x13
    3fdc:	22 8b       	std	Z+18, r18	; 0x12
    3fde:	89 81       	ldd	r24, Y+1	; 0x01
    3fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe2:	2b 85       	ldd	r18, Y+11	; 0x0b
    3fe4:	3c 85       	ldd	r19, Y+12	; 0x0c
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	35 8b       	std	Z+21, r19	; 0x15
    3fea:	24 8b       	std	Z+20, r18	; 0x14
    3fec:	89 81       	ldd	r24, Y+1	; 0x01
    3fee:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff0:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ff2:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	37 8b       	std	Z+23, r19	; 0x17
    3ff8:	26 8b       	std	Z+22, r18	; 0x16
    3ffa:	89 81       	ldd	r24, Y+1	; 0x01
    3ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffe:	2f 85       	ldd	r18, Y+15	; 0x0f
    4000:	38 89       	ldd	r19, Y+16	; 0x10
    4002:	fc 01       	movw	r30, r24
    4004:	31 8f       	std	Z+25, r19	; 0x19
    4006:	20 8f       	std	Z+24, r18	; 0x18
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	9a 81       	ldd	r25, Y+2	; 0x02
    400c:	29 89       	ldd	r18, Y+17	; 0x11
    400e:	3a 89       	ldd	r19, Y+18	; 0x12
    4010:	fc 01       	movw	r30, r24
    4012:	33 8f       	std	Z+27, r19	; 0x1b
    4014:	22 8f       	std	Z+26, r18	; 0x1a
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	9a 81       	ldd	r25, Y+2	; 0x02
    401a:	29 a1       	ldd	r18, Y+33	; 0x21
    401c:	fc 01       	movw	r30, r24
    401e:	24 8f       	std	Z+28, r18	; 0x1c
    4020:	89 81       	ldd	r24, Y+1	; 0x01
    4022:	9a 81       	ldd	r25, Y+2	; 0x02
    4024:	2a a1       	ldd	r18, Y+34	; 0x22
    4026:	fc 01       	movw	r30, r24
    4028:	25 8f       	std	Z+29, r18	; 0x1d
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	9a 81       	ldd	r25, Y+2	; 0x02
    402e:	2b a1       	ldd	r18, Y+35	; 0x23
    4030:	fc 01       	movw	r30, r24
    4032:	26 8f       	std	Z+30, r18	; 0x1e
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	9a 81       	ldd	r25, Y+2	; 0x02
    4038:	2c a1       	ldd	r18, Y+36	; 0x24
    403a:	fc 01       	movw	r30, r24
    403c:	27 8f       	std	Z+31, r18	; 0x1f
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	9a 81       	ldd	r25, Y+2	; 0x02
    4042:	2d a1       	ldd	r18, Y+37	; 0x25
    4044:	fc 01       	movw	r30, r24
    4046:	20 a3       	std	Z+32, r18	; 0x20
    4048:	62 96       	adiw	r28, 0x12	; 18
    404a:	0f b6       	in	r0, 0x3f	; 63
    404c:	f8 94       	cli
    404e:	de bf       	out	0x3e, r29	; 62
    4050:	0f be       	out	0x3f, r0	; 63
    4052:	cd bf       	out	0x3d, r28	; 61
    4054:	df 91       	pop	r29
    4056:	cf 91       	pop	r28
    4058:	1f 91       	pop	r17
    405a:	0f 91       	pop	r16
    405c:	ff 90       	pop	r15
    405e:	ef 90       	pop	r14
    4060:	df 90       	pop	r13
    4062:	cf 90       	pop	r12
    4064:	bf 90       	pop	r11
    4066:	af 90       	pop	r10
    4068:	9f 90       	pop	r9
    406a:	8f 90       	pop	r8
    406c:	08 95       	ret

0000406e <_ZN14HardwareSerial5beginEm>:
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	61 97       	sbiw	r28, 0x11	; 17
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	f8 94       	cli
    407c:	de bf       	out	0x3e, r29	; 62
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	9d 83       	std	Y+5, r25	; 0x05
    4084:	8c 83       	std	Y+4, r24	; 0x04
    4086:	4e 83       	std	Y+6, r20	; 0x06
    4088:	5f 83       	std	Y+7, r21	; 0x07
    408a:	68 87       	std	Y+8, r22	; 0x08
    408c:	79 87       	std	Y+9, r23	; 0x09
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	8b 83       	std	Y+3, r24	; 0x03
    4092:	8e 81       	ldd	r24, Y+6	; 0x06
    4094:	9f 81       	ldd	r25, Y+7	; 0x07
    4096:	a8 85       	ldd	r26, Y+8	; 0x08
    4098:	b9 85       	ldd	r27, Y+9	; 0x09
    409a:	81 15       	cp	r24, r1
    409c:	21 ee       	ldi	r18, 0xE1	; 225
    409e:	92 07       	cpc	r25, r18
    40a0:	a1 05       	cpc	r26, r1
    40a2:	b1 05       	cpc	r27, r1
    40a4:	09 f4       	brne	.+2      	; 0x40a8 <_ZN14HardwareSerial5beginEm+0x3a>
    40a6:	1b 82       	std	Y+3, r1	; 0x03
    40a8:	8b 81       	ldd	r24, Y+3	; 0x03
    40aa:	88 23       	and	r24, r24
    40ac:	61 f1       	breq	.+88     	; 0x4106 <_ZN14HardwareSerial5beginEm+0x98>
    40ae:	8c 81       	ldd	r24, Y+4	; 0x04
    40b0:	9d 81       	ldd	r25, Y+5	; 0x05
    40b2:	fc 01       	movw	r30, r24
    40b4:	84 89       	ldd	r24, Z+20	; 0x14
    40b6:	95 89       	ldd	r25, Z+21	; 0x15
    40b8:	2c 81       	ldd	r18, Y+4	; 0x04
    40ba:	3d 81       	ldd	r19, Y+5	; 0x05
    40bc:	f9 01       	movw	r30, r18
    40be:	20 a1       	ldd	r18, Z+32	; 0x20
    40c0:	42 2f       	mov	r20, r18
    40c2:	50 e0       	ldi	r21, 0x00	; 0
    40c4:	21 e0       	ldi	r18, 0x01	; 1
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	02 c0       	rjmp	.+4      	; 0x40ce <_ZN14HardwareSerial5beginEm+0x60>
    40ca:	22 0f       	add	r18, r18
    40cc:	33 1f       	adc	r19, r19
    40ce:	4a 95       	dec	r20
    40d0:	e2 f7       	brpl	.-8      	; 0x40ca <_ZN14HardwareSerial5beginEm+0x5c>
    40d2:	fc 01       	movw	r30, r24
    40d4:	20 83       	st	Z, r18
    40d6:	80 e0       	ldi	r24, 0x00	; 0
    40d8:	99 e0       	ldi	r25, 0x09	; 9
    40da:	ad e3       	ldi	r26, 0x3D	; 61
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	2e 81       	ldd	r18, Y+6	; 0x06
    40e0:	3f 81       	ldd	r19, Y+7	; 0x07
    40e2:	48 85       	ldd	r20, Y+8	; 0x08
    40e4:	59 85       	ldd	r21, Y+9	; 0x09
    40e6:	bc 01       	movw	r22, r24
    40e8:	cd 01       	movw	r24, r26
    40ea:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__udivmodsi4>
    40ee:	da 01       	movw	r26, r20
    40f0:	c9 01       	movw	r24, r18
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	a1 09       	sbc	r26, r1
    40f6:	b1 09       	sbc	r27, r1
    40f8:	b6 95       	lsr	r27
    40fa:	a7 95       	ror	r26
    40fc:	97 95       	ror	r25
    40fe:	87 95       	ror	r24
    4100:	9a 83       	std	Y+2, r25	; 0x02
    4102:	89 83       	std	Y+1, r24	; 0x01
    4104:	1e c0       	rjmp	.+60     	; 0x4142 <_ZN14HardwareSerial5beginEm+0xd4>
    4106:	8c 81       	ldd	r24, Y+4	; 0x04
    4108:	9d 81       	ldd	r25, Y+5	; 0x05
    410a:	fc 01       	movw	r30, r24
    410c:	84 89       	ldd	r24, Z+20	; 0x14
    410e:	95 89       	ldd	r25, Z+21	; 0x15
    4110:	fc 01       	movw	r30, r24
    4112:	10 82       	st	Z, r1
    4114:	80 e8       	ldi	r24, 0x80	; 128
    4116:	94 e8       	ldi	r25, 0x84	; 132
    4118:	ae e1       	ldi	r26, 0x1E	; 30
    411a:	b0 e0       	ldi	r27, 0x00	; 0
    411c:	2e 81       	ldd	r18, Y+6	; 0x06
    411e:	3f 81       	ldd	r19, Y+7	; 0x07
    4120:	48 85       	ldd	r20, Y+8	; 0x08
    4122:	59 85       	ldd	r21, Y+9	; 0x09
    4124:	bc 01       	movw	r22, r24
    4126:	cd 01       	movw	r24, r26
    4128:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__udivmodsi4>
    412c:	da 01       	movw	r26, r20
    412e:	c9 01       	movw	r24, r18
    4130:	01 97       	sbiw	r24, 0x01	; 1
    4132:	a1 09       	sbc	r26, r1
    4134:	b1 09       	sbc	r27, r1
    4136:	b6 95       	lsr	r27
    4138:	a7 95       	ror	r26
    413a:	97 95       	ror	r25
    413c:	87 95       	ror	r24
    413e:	9a 83       	std	Y+2, r25	; 0x02
    4140:	89 83       	std	Y+1, r24	; 0x01
    4142:	89 81       	ldd	r24, Y+1	; 0x01
    4144:	9a 81       	ldd	r25, Y+2	; 0x02
    4146:	81 15       	cp	r24, r1
    4148:	f0 e1       	ldi	r31, 0x10	; 16
    414a:	9f 07       	cpc	r25, r31
    414c:	28 f0       	brcs	.+10     	; 0x4158 <_ZN14HardwareSerial5beginEm+0xea>
    414e:	8b 81       	ldd	r24, Y+3	; 0x03
    4150:	88 23       	and	r24, r24
    4152:	11 f0       	breq	.+4      	; 0x4158 <_ZN14HardwareSerial5beginEm+0xea>
    4154:	1b 82       	std	Y+3, r1	; 0x03
    4156:	a8 cf       	rjmp	.-176    	; 0x40a8 <_ZN14HardwareSerial5beginEm+0x3a>
    4158:	8c 81       	ldd	r24, Y+4	; 0x04
    415a:	9d 81       	ldd	r25, Y+5	; 0x05
    415c:	fc 01       	movw	r30, r24
    415e:	80 89       	ldd	r24, Z+16	; 0x10
    4160:	91 89       	ldd	r25, Z+17	; 0x11
    4162:	29 81       	ldd	r18, Y+1	; 0x01
    4164:	3a 81       	ldd	r19, Y+2	; 0x02
    4166:	23 2f       	mov	r18, r19
    4168:	33 27       	eor	r19, r19
    416a:	fc 01       	movw	r30, r24
    416c:	20 83       	st	Z, r18
    416e:	8c 81       	ldd	r24, Y+4	; 0x04
    4170:	9d 81       	ldd	r25, Y+5	; 0x05
    4172:	fc 01       	movw	r30, r24
    4174:	82 89       	ldd	r24, Z+18	; 0x12
    4176:	93 89       	ldd	r25, Z+19	; 0x13
    4178:	29 81       	ldd	r18, Y+1	; 0x01
    417a:	fc 01       	movw	r30, r24
    417c:	20 83       	st	Z, r18
    417e:	8c 81       	ldd	r24, Y+4	; 0x04
    4180:	9d 81       	ldd	r25, Y+5	; 0x05
    4182:	fc 01       	movw	r30, r24
    4184:	11 a2       	std	Z+33, r1	; 0x21
    4186:	8c 81       	ldd	r24, Y+4	; 0x04
    4188:	9d 81       	ldd	r25, Y+5	; 0x05
    418a:	fc 01       	movw	r30, r24
    418c:	86 89       	ldd	r24, Z+22	; 0x16
    418e:	97 89       	ldd	r25, Z+23	; 0x17
    4190:	2c 81       	ldd	r18, Y+4	; 0x04
    4192:	3d 81       	ldd	r19, Y+5	; 0x05
    4194:	f9 01       	movw	r30, r18
    4196:	26 89       	ldd	r18, Z+22	; 0x16
    4198:	37 89       	ldd	r19, Z+23	; 0x17
    419a:	f9 01       	movw	r30, r18
    419c:	20 81       	ld	r18, Z
    419e:	62 2f       	mov	r22, r18
    41a0:	2c 81       	ldd	r18, Y+4	; 0x04
    41a2:	3d 81       	ldd	r19, Y+5	; 0x05
    41a4:	f9 01       	movw	r30, r18
    41a6:	24 8d       	ldd	r18, Z+28	; 0x1c
    41a8:	42 2f       	mov	r20, r18
    41aa:	50 e0       	ldi	r21, 0x00	; 0
    41ac:	21 e0       	ldi	r18, 0x01	; 1
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	02 c0       	rjmp	.+4      	; 0x41b6 <_ZN14HardwareSerial5beginEm+0x148>
    41b2:	22 0f       	add	r18, r18
    41b4:	33 1f       	adc	r19, r19
    41b6:	4a 95       	dec	r20
    41b8:	e2 f7       	brpl	.-8      	; 0x41b2 <_ZN14HardwareSerial5beginEm+0x144>
    41ba:	26 2b       	or	r18, r22
    41bc:	fc 01       	movw	r30, r24
    41be:	20 83       	st	Z, r18
    41c0:	8c 81       	ldd	r24, Y+4	; 0x04
    41c2:	9d 81       	ldd	r25, Y+5	; 0x05
    41c4:	fc 01       	movw	r30, r24
    41c6:	86 89       	ldd	r24, Z+22	; 0x16
    41c8:	97 89       	ldd	r25, Z+23	; 0x17
    41ca:	2c 81       	ldd	r18, Y+4	; 0x04
    41cc:	3d 81       	ldd	r19, Y+5	; 0x05
    41ce:	f9 01       	movw	r30, r18
    41d0:	26 89       	ldd	r18, Z+22	; 0x16
    41d2:	37 89       	ldd	r19, Z+23	; 0x17
    41d4:	f9 01       	movw	r30, r18
    41d6:	20 81       	ld	r18, Z
    41d8:	62 2f       	mov	r22, r18
    41da:	2c 81       	ldd	r18, Y+4	; 0x04
    41dc:	3d 81       	ldd	r19, Y+5	; 0x05
    41de:	f9 01       	movw	r30, r18
    41e0:	25 8d       	ldd	r18, Z+29	; 0x1d
    41e2:	42 2f       	mov	r20, r18
    41e4:	50 e0       	ldi	r21, 0x00	; 0
    41e6:	21 e0       	ldi	r18, 0x01	; 1
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	02 c0       	rjmp	.+4      	; 0x41f0 <_ZN14HardwareSerial5beginEm+0x182>
    41ec:	22 0f       	add	r18, r18
    41ee:	33 1f       	adc	r19, r19
    41f0:	4a 95       	dec	r20
    41f2:	e2 f7       	brpl	.-8      	; 0x41ec <_ZN14HardwareSerial5beginEm+0x17e>
    41f4:	26 2b       	or	r18, r22
    41f6:	fc 01       	movw	r30, r24
    41f8:	20 83       	st	Z, r18
    41fa:	8c 81       	ldd	r24, Y+4	; 0x04
    41fc:	9d 81       	ldd	r25, Y+5	; 0x05
    41fe:	fc 01       	movw	r30, r24
    4200:	86 89       	ldd	r24, Z+22	; 0x16
    4202:	97 89       	ldd	r25, Z+23	; 0x17
    4204:	2c 81       	ldd	r18, Y+4	; 0x04
    4206:	3d 81       	ldd	r19, Y+5	; 0x05
    4208:	f9 01       	movw	r30, r18
    420a:	26 89       	ldd	r18, Z+22	; 0x16
    420c:	37 89       	ldd	r19, Z+23	; 0x17
    420e:	f9 01       	movw	r30, r18
    4210:	20 81       	ld	r18, Z
    4212:	62 2f       	mov	r22, r18
    4214:	2c 81       	ldd	r18, Y+4	; 0x04
    4216:	3d 81       	ldd	r19, Y+5	; 0x05
    4218:	f9 01       	movw	r30, r18
    421a:	26 8d       	ldd	r18, Z+30	; 0x1e
    421c:	42 2f       	mov	r20, r18
    421e:	50 e0       	ldi	r21, 0x00	; 0
    4220:	21 e0       	ldi	r18, 0x01	; 1
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	02 c0       	rjmp	.+4      	; 0x422a <_ZN14HardwareSerial5beginEm+0x1bc>
    4226:	22 0f       	add	r18, r18
    4228:	33 1f       	adc	r19, r19
    422a:	4a 95       	dec	r20
    422c:	e2 f7       	brpl	.-8      	; 0x4226 <_ZN14HardwareSerial5beginEm+0x1b8>
    422e:	26 2b       	or	r18, r22
    4230:	fc 01       	movw	r30, r24
    4232:	20 83       	st	Z, r18
    4234:	8c 81       	ldd	r24, Y+4	; 0x04
    4236:	9d 81       	ldd	r25, Y+5	; 0x05
    4238:	fc 01       	movw	r30, r24
    423a:	86 89       	ldd	r24, Z+22	; 0x16
    423c:	97 89       	ldd	r25, Z+23	; 0x17
    423e:	2c 81       	ldd	r18, Y+4	; 0x04
    4240:	3d 81       	ldd	r19, Y+5	; 0x05
    4242:	f9 01       	movw	r30, r18
    4244:	26 89       	ldd	r18, Z+22	; 0x16
    4246:	37 89       	ldd	r19, Z+23	; 0x17
    4248:	f9 01       	movw	r30, r18
    424a:	20 81       	ld	r18, Z
    424c:	62 2f       	mov	r22, r18
    424e:	2c 81       	ldd	r18, Y+4	; 0x04
    4250:	3d 81       	ldd	r19, Y+5	; 0x05
    4252:	f9 01       	movw	r30, r18
    4254:	27 8d       	ldd	r18, Z+31	; 0x1f
    4256:	42 2f       	mov	r20, r18
    4258:	50 e0       	ldi	r21, 0x00	; 0
    425a:	21 e0       	ldi	r18, 0x01	; 1
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	04 2e       	mov	r0, r20
    4260:	02 c0       	rjmp	.+4      	; 0x4266 <_ZN14HardwareSerial5beginEm+0x1f8>
    4262:	22 0f       	add	r18, r18
    4264:	33 1f       	adc	r19, r19
    4266:	0a 94       	dec	r0
    4268:	e2 f7       	brpl	.-8      	; 0x4262 <_ZN14HardwareSerial5beginEm+0x1f4>
    426a:	20 95       	com	r18
    426c:	26 23       	and	r18, r22
    426e:	fc 01       	movw	r30, r24
    4270:	20 83       	st	Z, r18
    4272:	61 96       	adiw	r28, 0x11	; 17
    4274:	0f b6       	in	r0, 0x3f	; 63
    4276:	f8 94       	cli
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	0f be       	out	0x3f, r0	; 63
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	df 91       	pop	r29
    4280:	cf 91       	pop	r28
    4282:	08 95       	ret

00004284 <_ZN14HardwareSerial9availableEv>:
    4284:	cf 93       	push	r28
    4286:	df 93       	push	r29
    4288:	00 d0       	rcall	.+0      	; 0x428a <_ZN14HardwareSerial9availableEv+0x6>
    428a:	cd b7       	in	r28, 0x3d	; 61
    428c:	de b7       	in	r29, 0x3e	; 62
    428e:	9a 83       	std	Y+2, r25	; 0x02
    4290:	89 83       	std	Y+1, r24	; 0x01
    4292:	89 81       	ldd	r24, Y+1	; 0x01
    4294:	9a 81       	ldd	r25, Y+2	; 0x02
    4296:	fc 01       	movw	r30, r24
    4298:	84 85       	ldd	r24, Z+12	; 0x0c
    429a:	95 85       	ldd	r25, Z+13	; 0x0d
    429c:	80 5c       	subi	r24, 0xC0	; 192
    429e:	9f 4f       	sbci	r25, 0xFF	; 255
    42a0:	fc 01       	movw	r30, r24
    42a2:	20 81       	ld	r18, Z
    42a4:	31 81       	ldd	r19, Z+1	; 0x01
    42a6:	89 81       	ldd	r24, Y+1	; 0x01
    42a8:	9a 81       	ldd	r25, Y+2	; 0x02
    42aa:	fc 01       	movw	r30, r24
    42ac:	84 85       	ldd	r24, Z+12	; 0x0c
    42ae:	95 85       	ldd	r25, Z+13	; 0x0d
    42b0:	8e 5b       	subi	r24, 0xBE	; 190
    42b2:	9f 4f       	sbci	r25, 0xFF	; 255
    42b4:	fc 01       	movw	r30, r24
    42b6:	80 81       	ld	r24, Z
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	a9 01       	movw	r20, r18
    42bc:	48 1b       	sub	r20, r24
    42be:	59 0b       	sbc	r21, r25
    42c0:	ca 01       	movw	r24, r20
    42c2:	8f 73       	andi	r24, 0x3F	; 63
    42c4:	99 27       	eor	r25, r25
    42c6:	0f 90       	pop	r0
    42c8:	0f 90       	pop	r0
    42ca:	df 91       	pop	r29
    42cc:	cf 91       	pop	r28
    42ce:	08 95       	ret

000042d0 <_ZN14HardwareSerial4peekEv>:
    42d0:	cf 93       	push	r28
    42d2:	df 93       	push	r29
    42d4:	00 d0       	rcall	.+0      	; 0x42d6 <_ZN14HardwareSerial4peekEv+0x6>
    42d6:	cd b7       	in	r28, 0x3d	; 61
    42d8:	de b7       	in	r29, 0x3e	; 62
    42da:	9a 83       	std	Y+2, r25	; 0x02
    42dc:	89 83       	std	Y+1, r24	; 0x01
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	9a 81       	ldd	r25, Y+2	; 0x02
    42e2:	fc 01       	movw	r30, r24
    42e4:	84 85       	ldd	r24, Z+12	; 0x0c
    42e6:	95 85       	ldd	r25, Z+13	; 0x0d
    42e8:	80 5c       	subi	r24, 0xC0	; 192
    42ea:	9f 4f       	sbci	r25, 0xFF	; 255
    42ec:	fc 01       	movw	r30, r24
    42ee:	20 81       	ld	r18, Z
    42f0:	31 81       	ldd	r19, Z+1	; 0x01
    42f2:	89 81       	ldd	r24, Y+1	; 0x01
    42f4:	9a 81       	ldd	r25, Y+2	; 0x02
    42f6:	fc 01       	movw	r30, r24
    42f8:	84 85       	ldd	r24, Z+12	; 0x0c
    42fa:	95 85       	ldd	r25, Z+13	; 0x0d
    42fc:	8e 5b       	subi	r24, 0xBE	; 190
    42fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4300:	fc 01       	movw	r30, r24
    4302:	80 81       	ld	r24, Z
    4304:	91 81       	ldd	r25, Z+1	; 0x01
    4306:	41 e0       	ldi	r20, 0x01	; 1
    4308:	28 17       	cp	r18, r24
    430a:	39 07       	cpc	r19, r25
    430c:	09 f0       	breq	.+2      	; 0x4310 <_ZN14HardwareSerial4peekEv+0x40>
    430e:	40 e0       	ldi	r20, 0x00	; 0
    4310:	44 23       	and	r20, r20
    4312:	19 f0       	breq	.+6      	; 0x431a <_ZN14HardwareSerial4peekEv+0x4a>
    4314:	8f ef       	ldi	r24, 0xFF	; 255
    4316:	9f ef       	ldi	r25, 0xFF	; 255
    4318:	15 c0       	rjmp	.+42     	; 0x4344 <_ZN14HardwareSerial4peekEv+0x74>
    431a:	89 81       	ldd	r24, Y+1	; 0x01
    431c:	9a 81       	ldd	r25, Y+2	; 0x02
    431e:	fc 01       	movw	r30, r24
    4320:	24 85       	ldd	r18, Z+12	; 0x0c
    4322:	35 85       	ldd	r19, Z+13	; 0x0d
    4324:	89 81       	ldd	r24, Y+1	; 0x01
    4326:	9a 81       	ldd	r25, Y+2	; 0x02
    4328:	fc 01       	movw	r30, r24
    432a:	84 85       	ldd	r24, Z+12	; 0x0c
    432c:	95 85       	ldd	r25, Z+13	; 0x0d
    432e:	8e 5b       	subi	r24, 0xBE	; 190
    4330:	9f 4f       	sbci	r25, 0xFF	; 255
    4332:	fc 01       	movw	r30, r24
    4334:	80 81       	ld	r24, Z
    4336:	91 81       	ldd	r25, Z+1	; 0x01
    4338:	82 0f       	add	r24, r18
    433a:	93 1f       	adc	r25, r19
    433c:	fc 01       	movw	r30, r24
    433e:	80 81       	ld	r24, Z
    4340:	88 2f       	mov	r24, r24
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	df 91       	pop	r29
    434a:	cf 91       	pop	r28
    434c:	08 95       	ret

0000434e <_ZN14HardwareSerial4readEv>:
    434e:	cf 93       	push	r28
    4350:	df 93       	push	r29
    4352:	00 d0       	rcall	.+0      	; 0x4354 <_ZN14HardwareSerial4readEv+0x6>
    4354:	1f 92       	push	r1
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
    435a:	9b 83       	std	Y+3, r25	; 0x03
    435c:	8a 83       	std	Y+2, r24	; 0x02
    435e:	8a 81       	ldd	r24, Y+2	; 0x02
    4360:	9b 81       	ldd	r25, Y+3	; 0x03
    4362:	fc 01       	movw	r30, r24
    4364:	84 85       	ldd	r24, Z+12	; 0x0c
    4366:	95 85       	ldd	r25, Z+13	; 0x0d
    4368:	80 5c       	subi	r24, 0xC0	; 192
    436a:	9f 4f       	sbci	r25, 0xFF	; 255
    436c:	fc 01       	movw	r30, r24
    436e:	20 81       	ld	r18, Z
    4370:	31 81       	ldd	r19, Z+1	; 0x01
    4372:	8a 81       	ldd	r24, Y+2	; 0x02
    4374:	9b 81       	ldd	r25, Y+3	; 0x03
    4376:	fc 01       	movw	r30, r24
    4378:	84 85       	ldd	r24, Z+12	; 0x0c
    437a:	95 85       	ldd	r25, Z+13	; 0x0d
    437c:	8e 5b       	subi	r24, 0xBE	; 190
    437e:	9f 4f       	sbci	r25, 0xFF	; 255
    4380:	fc 01       	movw	r30, r24
    4382:	80 81       	ld	r24, Z
    4384:	91 81       	ldd	r25, Z+1	; 0x01
    4386:	41 e0       	ldi	r20, 0x01	; 1
    4388:	28 17       	cp	r18, r24
    438a:	39 07       	cpc	r19, r25
    438c:	09 f0       	breq	.+2      	; 0x4390 <_ZN14HardwareSerial4readEv+0x42>
    438e:	40 e0       	ldi	r20, 0x00	; 0
    4390:	44 23       	and	r20, r20
    4392:	19 f0       	breq	.+6      	; 0x439a <_ZN14HardwareSerial4readEv+0x4c>
    4394:	8f ef       	ldi	r24, 0xFF	; 255
    4396:	9f ef       	ldi	r25, 0xFF	; 255
    4398:	2f c0       	rjmp	.+94     	; 0x43f8 <_ZN14HardwareSerial4readEv+0xaa>
    439a:	8a 81       	ldd	r24, Y+2	; 0x02
    439c:	9b 81       	ldd	r25, Y+3	; 0x03
    439e:	fc 01       	movw	r30, r24
    43a0:	24 85       	ldd	r18, Z+12	; 0x0c
    43a2:	35 85       	ldd	r19, Z+13	; 0x0d
    43a4:	8a 81       	ldd	r24, Y+2	; 0x02
    43a6:	9b 81       	ldd	r25, Y+3	; 0x03
    43a8:	fc 01       	movw	r30, r24
    43aa:	84 85       	ldd	r24, Z+12	; 0x0c
    43ac:	95 85       	ldd	r25, Z+13	; 0x0d
    43ae:	8e 5b       	subi	r24, 0xBE	; 190
    43b0:	9f 4f       	sbci	r25, 0xFF	; 255
    43b2:	fc 01       	movw	r30, r24
    43b4:	80 81       	ld	r24, Z
    43b6:	91 81       	ldd	r25, Z+1	; 0x01
    43b8:	82 0f       	add	r24, r18
    43ba:	93 1f       	adc	r25, r19
    43bc:	fc 01       	movw	r30, r24
    43be:	80 81       	ld	r24, Z
    43c0:	89 83       	std	Y+1, r24	; 0x01
    43c2:	8a 81       	ldd	r24, Y+2	; 0x02
    43c4:	9b 81       	ldd	r25, Y+3	; 0x03
    43c6:	fc 01       	movw	r30, r24
    43c8:	84 85       	ldd	r24, Z+12	; 0x0c
    43ca:	95 85       	ldd	r25, Z+13	; 0x0d
    43cc:	2a 81       	ldd	r18, Y+2	; 0x02
    43ce:	3b 81       	ldd	r19, Y+3	; 0x03
    43d0:	f9 01       	movw	r30, r18
    43d2:	24 85       	ldd	r18, Z+12	; 0x0c
    43d4:	35 85       	ldd	r19, Z+13	; 0x0d
    43d6:	2e 5b       	subi	r18, 0xBE	; 190
    43d8:	3f 4f       	sbci	r19, 0xFF	; 255
    43da:	f9 01       	movw	r30, r18
    43dc:	20 81       	ld	r18, Z
    43de:	31 81       	ldd	r19, Z+1	; 0x01
    43e0:	2f 5f       	subi	r18, 0xFF	; 255
    43e2:	3f 4f       	sbci	r19, 0xFF	; 255
    43e4:	2f 73       	andi	r18, 0x3F	; 63
    43e6:	33 27       	eor	r19, r19
    43e8:	8e 5b       	subi	r24, 0xBE	; 190
    43ea:	9f 4f       	sbci	r25, 0xFF	; 255
    43ec:	fc 01       	movw	r30, r24
    43ee:	31 83       	std	Z+1, r19	; 0x01
    43f0:	20 83       	st	Z, r18
    43f2:	89 81       	ldd	r24, Y+1	; 0x01
    43f4:	88 2f       	mov	r24, r24
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	0f 90       	pop	r0
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	df 91       	pop	r29
    4400:	cf 91       	pop	r28
    4402:	08 95       	ret

00004404 <_ZN14HardwareSerial5flushEv>:
    4404:	cf 93       	push	r28
    4406:	df 93       	push	r29
    4408:	00 d0       	rcall	.+0      	; 0x440a <_ZN14HardwareSerial5flushEv+0x6>
    440a:	cd b7       	in	r28, 0x3d	; 61
    440c:	de b7       	in	r29, 0x3e	; 62
    440e:	9a 83       	std	Y+2, r25	; 0x02
    4410:	89 83       	std	Y+1, r24	; 0x01
    4412:	00 00       	nop
    4414:	89 81       	ldd	r24, Y+1	; 0x01
    4416:	9a 81       	ldd	r25, Y+2	; 0x02
    4418:	fc 01       	movw	r30, r24
    441a:	81 a1       	ldd	r24, Z+33	; 0x21
    441c:	88 23       	and	r24, r24
    441e:	79 f0       	breq	.+30     	; 0x443e <_ZN14HardwareSerial5flushEv+0x3a>
    4420:	89 81       	ldd	r24, Y+1	; 0x01
    4422:	9a 81       	ldd	r25, Y+2	; 0x02
    4424:	fc 01       	movw	r30, r24
    4426:	84 89       	ldd	r24, Z+20	; 0x14
    4428:	95 89       	ldd	r25, Z+21	; 0x15
    442a:	fc 01       	movw	r30, r24
    442c:	80 81       	ld	r24, Z
    442e:	88 2f       	mov	r24, r24
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	80 74       	andi	r24, 0x40	; 64
    4434:	99 27       	eor	r25, r25
    4436:	00 97       	sbiw	r24, 0x00	; 0
    4438:	11 f4       	brne	.+4      	; 0x443e <_ZN14HardwareSerial5flushEv+0x3a>
    443a:	81 e0       	ldi	r24, 0x01	; 1
    443c:	01 c0       	rjmp	.+2      	; 0x4440 <_ZN14HardwareSerial5flushEv+0x3c>
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	88 23       	and	r24, r24
    4442:	41 f7       	brne	.-48     	; 0x4414 <_ZN14HardwareSerial5flushEv+0x10>
    4444:	89 81       	ldd	r24, Y+1	; 0x01
    4446:	9a 81       	ldd	r25, Y+2	; 0x02
    4448:	fc 01       	movw	r30, r24
    444a:	11 a2       	std	Z+33, r1	; 0x21
    444c:	0f 90       	pop	r0
    444e:	0f 90       	pop	r0
    4450:	df 91       	pop	r29
    4452:	cf 91       	pop	r28
    4454:	08 95       	ret

00004456 <_ZN14HardwareSerial5writeEh>:
    4456:	cf 93       	push	r28
    4458:	df 93       	push	r29
    445a:	00 d0       	rcall	.+0      	; 0x445c <_ZN14HardwareSerial5writeEh+0x6>
    445c:	00 d0       	rcall	.+0      	; 0x445e <_ZN14HardwareSerial5writeEh+0x8>
    445e:	1f 92       	push	r1
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	9c 83       	std	Y+4, r25	; 0x04
    4466:	8b 83       	std	Y+3, r24	; 0x03
    4468:	6d 83       	std	Y+5, r22	; 0x05
    446a:	8b 81       	ldd	r24, Y+3	; 0x03
    446c:	9c 81       	ldd	r25, Y+4	; 0x04
    446e:	fc 01       	movw	r30, r24
    4470:	86 85       	ldd	r24, Z+14	; 0x0e
    4472:	97 85       	ldd	r25, Z+15	; 0x0f
    4474:	80 5c       	subi	r24, 0xC0	; 192
    4476:	9f 4f       	sbci	r25, 0xFF	; 255
    4478:	fc 01       	movw	r30, r24
    447a:	80 81       	ld	r24, Z
    447c:	91 81       	ldd	r25, Z+1	; 0x01
    447e:	01 96       	adiw	r24, 0x01	; 1
    4480:	8f 73       	andi	r24, 0x3F	; 63
    4482:	99 27       	eor	r25, r25
    4484:	9a 83       	std	Y+2, r25	; 0x02
    4486:	89 83       	std	Y+1, r24	; 0x01
    4488:	00 00       	nop
    448a:	29 81       	ldd	r18, Y+1	; 0x01
    448c:	3a 81       	ldd	r19, Y+2	; 0x02
    448e:	8b 81       	ldd	r24, Y+3	; 0x03
    4490:	9c 81       	ldd	r25, Y+4	; 0x04
    4492:	fc 01       	movw	r30, r24
    4494:	86 85       	ldd	r24, Z+14	; 0x0e
    4496:	97 85       	ldd	r25, Z+15	; 0x0f
    4498:	8e 5b       	subi	r24, 0xBE	; 190
    449a:	9f 4f       	sbci	r25, 0xFF	; 255
    449c:	fc 01       	movw	r30, r24
    449e:	80 81       	ld	r24, Z
    44a0:	91 81       	ldd	r25, Z+1	; 0x01
    44a2:	41 e0       	ldi	r20, 0x01	; 1
    44a4:	28 17       	cp	r18, r24
    44a6:	39 07       	cpc	r19, r25
    44a8:	09 f0       	breq	.+2      	; 0x44ac <_ZN14HardwareSerial5writeEh+0x56>
    44aa:	40 e0       	ldi	r20, 0x00	; 0
    44ac:	44 23       	and	r20, r20
    44ae:	69 f7       	brne	.-38     	; 0x448a <_ZN14HardwareSerial5writeEh+0x34>
    44b0:	8b 81       	ldd	r24, Y+3	; 0x03
    44b2:	9c 81       	ldd	r25, Y+4	; 0x04
    44b4:	fc 01       	movw	r30, r24
    44b6:	26 85       	ldd	r18, Z+14	; 0x0e
    44b8:	37 85       	ldd	r19, Z+15	; 0x0f
    44ba:	8b 81       	ldd	r24, Y+3	; 0x03
    44bc:	9c 81       	ldd	r25, Y+4	; 0x04
    44be:	fc 01       	movw	r30, r24
    44c0:	86 85       	ldd	r24, Z+14	; 0x0e
    44c2:	97 85       	ldd	r25, Z+15	; 0x0f
    44c4:	80 5c       	subi	r24, 0xC0	; 192
    44c6:	9f 4f       	sbci	r25, 0xFF	; 255
    44c8:	fc 01       	movw	r30, r24
    44ca:	80 81       	ld	r24, Z
    44cc:	91 81       	ldd	r25, Z+1	; 0x01
    44ce:	82 0f       	add	r24, r18
    44d0:	93 1f       	adc	r25, r19
    44d2:	2d 81       	ldd	r18, Y+5	; 0x05
    44d4:	fc 01       	movw	r30, r24
    44d6:	20 83       	st	Z, r18
    44d8:	8b 81       	ldd	r24, Y+3	; 0x03
    44da:	9c 81       	ldd	r25, Y+4	; 0x04
    44dc:	fc 01       	movw	r30, r24
    44de:	86 85       	ldd	r24, Z+14	; 0x0e
    44e0:	97 85       	ldd	r25, Z+15	; 0x0f
    44e2:	29 81       	ldd	r18, Y+1	; 0x01
    44e4:	3a 81       	ldd	r19, Y+2	; 0x02
    44e6:	80 5c       	subi	r24, 0xC0	; 192
    44e8:	9f 4f       	sbci	r25, 0xFF	; 255
    44ea:	fc 01       	movw	r30, r24
    44ec:	31 83       	std	Z+1, r19	; 0x01
    44ee:	20 83       	st	Z, r18
    44f0:	8b 81       	ldd	r24, Y+3	; 0x03
    44f2:	9c 81       	ldd	r25, Y+4	; 0x04
    44f4:	fc 01       	movw	r30, r24
    44f6:	86 89       	ldd	r24, Z+22	; 0x16
    44f8:	97 89       	ldd	r25, Z+23	; 0x17
    44fa:	2b 81       	ldd	r18, Y+3	; 0x03
    44fc:	3c 81       	ldd	r19, Y+4	; 0x04
    44fe:	f9 01       	movw	r30, r18
    4500:	26 89       	ldd	r18, Z+22	; 0x16
    4502:	37 89       	ldd	r19, Z+23	; 0x17
    4504:	f9 01       	movw	r30, r18
    4506:	20 81       	ld	r18, Z
    4508:	62 2f       	mov	r22, r18
    450a:	2b 81       	ldd	r18, Y+3	; 0x03
    450c:	3c 81       	ldd	r19, Y+4	; 0x04
    450e:	f9 01       	movw	r30, r18
    4510:	27 8d       	ldd	r18, Z+31	; 0x1f
    4512:	42 2f       	mov	r20, r18
    4514:	50 e0       	ldi	r21, 0x00	; 0
    4516:	21 e0       	ldi	r18, 0x01	; 1
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	04 2e       	mov	r0, r20
    451c:	02 c0       	rjmp	.+4      	; 0x4522 <_ZN14HardwareSerial5writeEh+0xcc>
    451e:	22 0f       	add	r18, r18
    4520:	33 1f       	adc	r19, r19
    4522:	0a 94       	dec	r0
    4524:	e2 f7       	brpl	.-8      	; 0x451e <_ZN14HardwareSerial5writeEh+0xc8>
    4526:	26 2b       	or	r18, r22
    4528:	fc 01       	movw	r30, r24
    452a:	20 83       	st	Z, r18
    452c:	8b 81       	ldd	r24, Y+3	; 0x03
    452e:	9c 81       	ldd	r25, Y+4	; 0x04
    4530:	21 e0       	ldi	r18, 0x01	; 1
    4532:	fc 01       	movw	r30, r24
    4534:	21 a3       	std	Z+33, r18	; 0x21
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	fc 01       	movw	r30, r24
    453c:	84 89       	ldd	r24, Z+20	; 0x14
    453e:	95 89       	ldd	r25, Z+21	; 0x15
    4540:	2b 81       	ldd	r18, Y+3	; 0x03
    4542:	3c 81       	ldd	r19, Y+4	; 0x04
    4544:	f9 01       	movw	r30, r18
    4546:	24 89       	ldd	r18, Z+20	; 0x14
    4548:	35 89       	ldd	r19, Z+21	; 0x15
    454a:	f9 01       	movw	r30, r18
    454c:	20 81       	ld	r18, Z
    454e:	20 64       	ori	r18, 0x40	; 64
    4550:	fc 01       	movw	r30, r24
    4552:	20 83       	st	Z, r18
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0f 90       	pop	r0
    455a:	0f 90       	pop	r0
    455c:	0f 90       	pop	r0
    455e:	0f 90       	pop	r0
    4560:	0f 90       	pop	r0
    4562:	df 91       	pop	r29
    4564:	cf 91       	pop	r28
    4566:	08 95       	ret

00004568 <_ZN14HardwareSerialcvbEv>:
    4568:	cf 93       	push	r28
    456a:	df 93       	push	r29
    456c:	00 d0       	rcall	.+0      	; 0x456e <_ZN14HardwareSerialcvbEv+0x6>
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	9a 83       	std	Y+2, r25	; 0x02
    4574:	89 83       	std	Y+1, r24	; 0x01
    4576:	81 e0       	ldi	r24, 0x01	; 1
    4578:	0f 90       	pop	r0
    457a:	0f 90       	pop	r0
    457c:	df 91       	pop	r29
    457e:	cf 91       	pop	r28
    4580:	08 95       	ret

00004582 <_Z41__static_initialization_and_destruction_0ii>:
    4582:	8f 92       	push	r8
    4584:	9f 92       	push	r9
    4586:	af 92       	push	r10
    4588:	bf 92       	push	r11
    458a:	cf 92       	push	r12
    458c:	df 92       	push	r13
    458e:	ef 92       	push	r14
    4590:	ff 92       	push	r15
    4592:	0f 93       	push	r16
    4594:	1f 93       	push	r17
    4596:	cf 93       	push	r28
    4598:	df 93       	push	r29
    459a:	00 d0       	rcall	.+0      	; 0x459c <_Z41__static_initialization_and_destruction_0ii+0x1a>
    459c:	00 d0       	rcall	.+0      	; 0x459e <_Z41__static_initialization_and_destruction_0ii+0x1c>
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
    45a2:	9a 83       	std	Y+2, r25	; 0x02
    45a4:	89 83       	std	Y+1, r24	; 0x01
    45a6:	7c 83       	std	Y+4, r23	; 0x04
    45a8:	6b 83       	std	Y+3, r22	; 0x03
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	9a 81       	ldd	r25, Y+2	; 0x02
    45ae:	81 30       	cpi	r24, 0x01	; 1
    45b0:	91 05       	cpc	r25, r1
    45b2:	a9 f5       	brne	.+106    	; 0x461e <_Z41__static_initialization_and_destruction_0ii+0x9c>
    45b4:	8b 81       	ldd	r24, Y+3	; 0x03
    45b6:	9c 81       	ldd	r25, Y+4	; 0x04
    45b8:	8f 3f       	cpi	r24, 0xFF	; 255
    45ba:	2f ef       	ldi	r18, 0xFF	; 255
    45bc:	92 07       	cpc	r25, r18
    45be:	79 f5       	brne	.+94     	; 0x461e <_Z41__static_initialization_and_destruction_0ii+0x9c>
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	8f 93       	push	r24
    45c4:	85 e0       	ldi	r24, 0x05	; 5
    45c6:	8f 93       	push	r24
    45c8:	87 e0       	ldi	r24, 0x07	; 7
    45ca:	8f 93       	push	r24
    45cc:	83 e0       	ldi	r24, 0x03	; 3
    45ce:	8f 93       	push	r24
    45d0:	84 e0       	ldi	r24, 0x04	; 4
    45d2:	8f 93       	push	r24
    45d4:	0f 2e       	mov	r0, r31
    45d6:	f6 ec       	ldi	r31, 0xC6	; 198
    45d8:	8f 2e       	mov	r8, r31
    45da:	91 2c       	mov	r9, r1
    45dc:	f0 2d       	mov	r31, r0
    45de:	0f 2e       	mov	r0, r31
    45e0:	f2 ec       	ldi	r31, 0xC2	; 194
    45e2:	af 2e       	mov	r10, r31
    45e4:	b1 2c       	mov	r11, r1
    45e6:	f0 2d       	mov	r31, r0
    45e8:	0f 2e       	mov	r0, r31
    45ea:	f1 ec       	ldi	r31, 0xC1	; 193
    45ec:	cf 2e       	mov	r12, r31
    45ee:	d1 2c       	mov	r13, r1
    45f0:	f0 2d       	mov	r31, r0
    45f2:	0f 2e       	mov	r0, r31
    45f4:	f0 ec       	ldi	r31, 0xC0	; 192
    45f6:	ef 2e       	mov	r14, r31
    45f8:	f1 2c       	mov	r15, r1
    45fa:	f0 2d       	mov	r31, r0
    45fc:	04 ec       	ldi	r16, 0xC4	; 196
    45fe:	10 e0       	ldi	r17, 0x00	; 0
    4600:	25 ec       	ldi	r18, 0xC5	; 197
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	4a ee       	ldi	r20, 0xEA	; 234
    4606:	52 e0       	ldi	r21, 0x02	; 2
    4608:	66 ea       	ldi	r22, 0xA6	; 166
    460a:	72 e0       	ldi	r23, 0x02	; 2
    460c:	8e e2       	ldi	r24, 0x2E	; 46
    460e:	93 e0       	ldi	r25, 0x03	; 3
    4610:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    4614:	0f 90       	pop	r0
    4616:	0f 90       	pop	r0
    4618:	0f 90       	pop	r0
    461a:	0f 90       	pop	r0
    461c:	0f 90       	pop	r0
    461e:	0f 90       	pop	r0
    4620:	0f 90       	pop	r0
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	df 91       	pop	r29
    4628:	cf 91       	pop	r28
    462a:	1f 91       	pop	r17
    462c:	0f 91       	pop	r16
    462e:	ff 90       	pop	r15
    4630:	ef 90       	pop	r14
    4632:	df 90       	pop	r13
    4634:	cf 90       	pop	r12
    4636:	bf 90       	pop	r11
    4638:	af 90       	pop	r10
    463a:	9f 90       	pop	r9
    463c:	8f 90       	pop	r8
    463e:	08 95       	ret

00004640 <_GLOBAL__sub_I_rx_buffer>:
    4640:	cf 93       	push	r28
    4642:	df 93       	push	r29
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	6f ef       	ldi	r22, 0xFF	; 255
    464a:	7f ef       	ldi	r23, 0xFF	; 255
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	0e 94 c1 22 	call	0x4582	; 0x4582 <_Z41__static_initialization_and_destruction_0ii>
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	08 95       	ret

0000465a <__cxa_pure_virtual>:
    465a:	cf 93       	push	r28
    465c:	df 93       	push	r29
    465e:	cd b7       	in	r28, 0x3d	; 61
    4660:	de b7       	in	r29, 0x3e	; 62
    4662:	df 91       	pop	r29
    4664:	cf 91       	pop	r28
    4666:	08 95       	ret

00004668 <_ZN5Print5writeEPKc>:
    4668:	0f 93       	push	r16
    466a:	1f 93       	push	r17
    466c:	cf 93       	push	r28
    466e:	df 93       	push	r29
    4670:	00 d0       	rcall	.+0      	; 0x4672 <_ZN5Print5writeEPKc+0xa>
    4672:	00 d0       	rcall	.+0      	; 0x4674 <_ZN5Print5writeEPKc+0xc>
    4674:	cd b7       	in	r28, 0x3d	; 61
    4676:	de b7       	in	r29, 0x3e	; 62
    4678:	9a 83       	std	Y+2, r25	; 0x02
    467a:	89 83       	std	Y+1, r24	; 0x01
    467c:	7c 83       	std	Y+4, r23	; 0x04
    467e:	6b 83       	std	Y+3, r22	; 0x03
    4680:	8b 81       	ldd	r24, Y+3	; 0x03
    4682:	9c 81       	ldd	r25, Y+4	; 0x04
    4684:	00 97       	sbiw	r24, 0x00	; 0
    4686:	19 f4       	brne	.+6      	; 0x468e <_ZN5Print5writeEPKc+0x26>
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	15 c0       	rjmp	.+42     	; 0x46b8 <_ZN5Print5writeEPKc+0x50>
    468e:	89 81       	ldd	r24, Y+1	; 0x01
    4690:	9a 81       	ldd	r25, Y+2	; 0x02
    4692:	fc 01       	movw	r30, r24
    4694:	80 81       	ld	r24, Z
    4696:	91 81       	ldd	r25, Z+1	; 0x01
    4698:	02 96       	adiw	r24, 0x02	; 2
    469a:	fc 01       	movw	r30, r24
    469c:	00 81       	ld	r16, Z
    469e:	11 81       	ldd	r17, Z+1	; 0x01
    46a0:	8b 81       	ldd	r24, Y+3	; 0x03
    46a2:	9c 81       	ldd	r25, Y+4	; 0x04
    46a4:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <strlen>
    46a8:	ac 01       	movw	r20, r24
    46aa:	2b 81       	ldd	r18, Y+3	; 0x03
    46ac:	3c 81       	ldd	r19, Y+4	; 0x04
    46ae:	89 81       	ldd	r24, Y+1	; 0x01
    46b0:	9a 81       	ldd	r25, Y+2	; 0x02
    46b2:	b9 01       	movw	r22, r18
    46b4:	f8 01       	movw	r30, r16
    46b6:	09 95       	icall
    46b8:	0f 90       	pop	r0
    46ba:	0f 90       	pop	r0
    46bc:	0f 90       	pop	r0
    46be:	0f 90       	pop	r0
    46c0:	df 91       	pop	r29
    46c2:	cf 91       	pop	r28
    46c4:	1f 91       	pop	r17
    46c6:	0f 91       	pop	r16
    46c8:	08 95       	ret

000046ca <_ZN5Print5writeEPKhj>:
    46ca:	cf 93       	push	r28
    46cc:	df 93       	push	r29
    46ce:	cd b7       	in	r28, 0x3d	; 61
    46d0:	de b7       	in	r29, 0x3e	; 62
    46d2:	28 97       	sbiw	r28, 0x08	; 8
    46d4:	0f b6       	in	r0, 0x3f	; 63
    46d6:	f8 94       	cli
    46d8:	de bf       	out	0x3e, r29	; 62
    46da:	0f be       	out	0x3f, r0	; 63
    46dc:	cd bf       	out	0x3d, r28	; 61
    46de:	9c 83       	std	Y+4, r25	; 0x04
    46e0:	8b 83       	std	Y+3, r24	; 0x03
    46e2:	7e 83       	std	Y+6, r23	; 0x06
    46e4:	6d 83       	std	Y+5, r22	; 0x05
    46e6:	58 87       	std	Y+8, r21	; 0x08
    46e8:	4f 83       	std	Y+7, r20	; 0x07
    46ea:	1a 82       	std	Y+2, r1	; 0x02
    46ec:	19 82       	std	Y+1, r1	; 0x01
    46ee:	1c c0       	rjmp	.+56     	; 0x4728 <_ZN5Print5writeEPKhj+0x5e>
    46f0:	8b 81       	ldd	r24, Y+3	; 0x03
    46f2:	9c 81       	ldd	r25, Y+4	; 0x04
    46f4:	fc 01       	movw	r30, r24
    46f6:	80 81       	ld	r24, Z
    46f8:	91 81       	ldd	r25, Z+1	; 0x01
    46fa:	fc 01       	movw	r30, r24
    46fc:	20 81       	ld	r18, Z
    46fe:	31 81       	ldd	r19, Z+1	; 0x01
    4700:	8d 81       	ldd	r24, Y+5	; 0x05
    4702:	9e 81       	ldd	r25, Y+6	; 0x06
    4704:	ac 01       	movw	r20, r24
    4706:	4f 5f       	subi	r20, 0xFF	; 255
    4708:	5f 4f       	sbci	r21, 0xFF	; 255
    470a:	5e 83       	std	Y+6, r21	; 0x06
    470c:	4d 83       	std	Y+5, r20	; 0x05
    470e:	fc 01       	movw	r30, r24
    4710:	40 81       	ld	r20, Z
    4712:	8b 81       	ldd	r24, Y+3	; 0x03
    4714:	9c 81       	ldd	r25, Y+4	; 0x04
    4716:	64 2f       	mov	r22, r20
    4718:	f9 01       	movw	r30, r18
    471a:	09 95       	icall
    471c:	29 81       	ldd	r18, Y+1	; 0x01
    471e:	3a 81       	ldd	r19, Y+2	; 0x02
    4720:	82 0f       	add	r24, r18
    4722:	93 1f       	adc	r25, r19
    4724:	9a 83       	std	Y+2, r25	; 0x02
    4726:	89 83       	std	Y+1, r24	; 0x01
    4728:	8f 81       	ldd	r24, Y+7	; 0x07
    472a:	98 85       	ldd	r25, Y+8	; 0x08
    472c:	9c 01       	movw	r18, r24
    472e:	21 50       	subi	r18, 0x01	; 1
    4730:	31 09       	sbc	r19, r1
    4732:	38 87       	std	Y+8, r19	; 0x08
    4734:	2f 83       	std	Y+7, r18	; 0x07
    4736:	21 e0       	ldi	r18, 0x01	; 1
    4738:	00 97       	sbiw	r24, 0x00	; 0
    473a:	09 f4       	brne	.+2      	; 0x473e <_ZN5Print5writeEPKhj+0x74>
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	22 23       	and	r18, r18
    4740:	b9 f6       	brne	.-82     	; 0x46f0 <_ZN5Print5writeEPKhj+0x26>
    4742:	89 81       	ldd	r24, Y+1	; 0x01
    4744:	9a 81       	ldd	r25, Y+2	; 0x02
    4746:	28 96       	adiw	r28, 0x08	; 8
    4748:	0f b6       	in	r0, 0x3f	; 63
    474a:	f8 94       	cli
    474c:	de bf       	out	0x3e, r29	; 62
    474e:	0f be       	out	0x3f, r0	; 63
    4750:	cd bf       	out	0x3d, r28	; 61
    4752:	df 91       	pop	r29
    4754:	cf 91       	pop	r28
    4756:	08 95       	ret

00004758 <_ZN5Print5printEPK19__FlashStringHelper>:
    4758:	cf 93       	push	r28
    475a:	df 93       	push	r29
    475c:	cd b7       	in	r28, 0x3d	; 61
    475e:	de b7       	in	r29, 0x3e	; 62
    4760:	2c 97       	sbiw	r28, 0x0c	; 12
    4762:	0f b6       	in	r0, 0x3f	; 63
    4764:	f8 94       	cli
    4766:	de bf       	out	0x3e, r29	; 62
    4768:	0f be       	out	0x3f, r0	; 63
    476a:	cd bf       	out	0x3d, r28	; 61
    476c:	9a 87       	std	Y+10, r25	; 0x0a
    476e:	89 87       	std	Y+9, r24	; 0x09
    4770:	7c 87       	std	Y+12, r23	; 0x0c
    4772:	6b 87       	std	Y+11, r22	; 0x0b
    4774:	8b 85       	ldd	r24, Y+11	; 0x0b
    4776:	9c 85       	ldd	r25, Y+12	; 0x0c
    4778:	9a 83       	std	Y+2, r25	; 0x02
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	1c 82       	std	Y+4, r1	; 0x04
    477e:	1b 82       	std	Y+3, r1	; 0x03
    4780:	89 81       	ldd	r24, Y+1	; 0x01
    4782:	9a 81       	ldd	r25, Y+2	; 0x02
    4784:	9c 01       	movw	r18, r24
    4786:	2f 5f       	subi	r18, 0xFF	; 255
    4788:	3f 4f       	sbci	r19, 0xFF	; 255
    478a:	3a 83       	std	Y+2, r19	; 0x02
    478c:	29 83       	std	Y+1, r18	; 0x01
    478e:	9e 83       	std	Y+6, r25	; 0x06
    4790:	8d 83       	std	Y+5, r24	; 0x05
    4792:	8d 81       	ldd	r24, Y+5	; 0x05
    4794:	9e 81       	ldd	r25, Y+6	; 0x06
    4796:	fc 01       	movw	r30, r24
    4798:	84 91       	lpm	r24, Z
    479a:	8f 83       	std	Y+7, r24	; 0x07
    479c:	8f 81       	ldd	r24, Y+7	; 0x07
    479e:	88 87       	std	Y+8, r24	; 0x08
    47a0:	88 85       	ldd	r24, Y+8	; 0x08
    47a2:	88 23       	and	r24, r24
    47a4:	09 f4       	brne	.+2      	; 0x47a8 <_ZN5Print5printEPK19__FlashStringHelper+0x50>
    47a6:	14 c0       	rjmp	.+40     	; 0x47d0 <_ZN5Print5printEPK19__FlashStringHelper+0x78>
    47a8:	89 85       	ldd	r24, Y+9	; 0x09
    47aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ac:	fc 01       	movw	r30, r24
    47ae:	80 81       	ld	r24, Z
    47b0:	91 81       	ldd	r25, Z+1	; 0x01
    47b2:	fc 01       	movw	r30, r24
    47b4:	20 81       	ld	r18, Z
    47b6:	31 81       	ldd	r19, Z+1	; 0x01
    47b8:	89 85       	ldd	r24, Y+9	; 0x09
    47ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    47bc:	68 85       	ldd	r22, Y+8	; 0x08
    47be:	f9 01       	movw	r30, r18
    47c0:	09 95       	icall
    47c2:	2b 81       	ldd	r18, Y+3	; 0x03
    47c4:	3c 81       	ldd	r19, Y+4	; 0x04
    47c6:	82 0f       	add	r24, r18
    47c8:	93 1f       	adc	r25, r19
    47ca:	9c 83       	std	Y+4, r25	; 0x04
    47cc:	8b 83       	std	Y+3, r24	; 0x03
    47ce:	d8 cf       	rjmp	.-80     	; 0x4780 <_ZN5Print5printEPK19__FlashStringHelper+0x28>
    47d0:	8b 81       	ldd	r24, Y+3	; 0x03
    47d2:	9c 81       	ldd	r25, Y+4	; 0x04
    47d4:	2c 96       	adiw	r28, 0x0c	; 12
    47d6:	0f b6       	in	r0, 0x3f	; 63
    47d8:	f8 94       	cli
    47da:	de bf       	out	0x3e, r29	; 62
    47dc:	0f be       	out	0x3f, r0	; 63
    47de:	cd bf       	out	0x3d, r28	; 61
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	08 95       	ret

000047e6 <_ZN5Print5printEPKc>:
    47e6:	cf 93       	push	r28
    47e8:	df 93       	push	r29
    47ea:	00 d0       	rcall	.+0      	; 0x47ec <_ZN5Print5printEPKc+0x6>
    47ec:	00 d0       	rcall	.+0      	; 0x47ee <_ZN5Print5printEPKc+0x8>
    47ee:	cd b7       	in	r28, 0x3d	; 61
    47f0:	de b7       	in	r29, 0x3e	; 62
    47f2:	9a 83       	std	Y+2, r25	; 0x02
    47f4:	89 83       	std	Y+1, r24	; 0x01
    47f6:	7c 83       	std	Y+4, r23	; 0x04
    47f8:	6b 83       	std	Y+3, r22	; 0x03
    47fa:	2b 81       	ldd	r18, Y+3	; 0x03
    47fc:	3c 81       	ldd	r19, Y+4	; 0x04
    47fe:	89 81       	ldd	r24, Y+1	; 0x01
    4800:	9a 81       	ldd	r25, Y+2	; 0x02
    4802:	b9 01       	movw	r22, r18
    4804:	0e 94 34 23 	call	0x4668	; 0x4668 <_ZN5Print5writeEPKc>
    4808:	0f 90       	pop	r0
    480a:	0f 90       	pop	r0
    480c:	0f 90       	pop	r0
    480e:	0f 90       	pop	r0
    4810:	df 91       	pop	r29
    4812:	cf 91       	pop	r28
    4814:	08 95       	ret

00004816 <_ZN5Print5printEc>:
    4816:	cf 93       	push	r28
    4818:	df 93       	push	r29
    481a:	00 d0       	rcall	.+0      	; 0x481c <_ZN5Print5printEc+0x6>
    481c:	1f 92       	push	r1
    481e:	cd b7       	in	r28, 0x3d	; 61
    4820:	de b7       	in	r29, 0x3e	; 62
    4822:	9a 83       	std	Y+2, r25	; 0x02
    4824:	89 83       	std	Y+1, r24	; 0x01
    4826:	6b 83       	std	Y+3, r22	; 0x03
    4828:	89 81       	ldd	r24, Y+1	; 0x01
    482a:	9a 81       	ldd	r25, Y+2	; 0x02
    482c:	fc 01       	movw	r30, r24
    482e:	80 81       	ld	r24, Z
    4830:	91 81       	ldd	r25, Z+1	; 0x01
    4832:	fc 01       	movw	r30, r24
    4834:	20 81       	ld	r18, Z
    4836:	31 81       	ldd	r19, Z+1	; 0x01
    4838:	4b 81       	ldd	r20, Y+3	; 0x03
    483a:	89 81       	ldd	r24, Y+1	; 0x01
    483c:	9a 81       	ldd	r25, Y+2	; 0x02
    483e:	64 2f       	mov	r22, r20
    4840:	f9 01       	movw	r30, r18
    4842:	09 95       	icall
    4844:	0f 90       	pop	r0
    4846:	0f 90       	pop	r0
    4848:	0f 90       	pop	r0
    484a:	df 91       	pop	r29
    484c:	cf 91       	pop	r28
    484e:	08 95       	ret

00004850 <_ZN5Print5printEhi>:
    4850:	cf 93       	push	r28
    4852:	df 93       	push	r29
    4854:	00 d0       	rcall	.+0      	; 0x4856 <_ZN5Print5printEhi+0x6>
    4856:	00 d0       	rcall	.+0      	; 0x4858 <_ZN5Print5printEhi+0x8>
    4858:	1f 92       	push	r1
    485a:	cd b7       	in	r28, 0x3d	; 61
    485c:	de b7       	in	r29, 0x3e	; 62
    485e:	9a 83       	std	Y+2, r25	; 0x02
    4860:	89 83       	std	Y+1, r24	; 0x01
    4862:	6b 83       	std	Y+3, r22	; 0x03
    4864:	5d 83       	std	Y+5, r21	; 0x05
    4866:	4c 83       	std	Y+4, r20	; 0x04
    4868:	8b 81       	ldd	r24, Y+3	; 0x03
    486a:	88 2f       	mov	r24, r24
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	a0 e0       	ldi	r26, 0x00	; 0
    4870:	b0 e0       	ldi	r27, 0x00	; 0
    4872:	2c 81       	ldd	r18, Y+4	; 0x04
    4874:	3d 81       	ldd	r19, Y+5	; 0x05
    4876:	e9 81       	ldd	r30, Y+1	; 0x01
    4878:	fa 81       	ldd	r31, Y+2	; 0x02
    487a:	ac 01       	movw	r20, r24
    487c:	bd 01       	movw	r22, r26
    487e:	cf 01       	movw	r24, r30
    4880:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN5Print5printEmi>
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	0f 90       	pop	r0
    488c:	0f 90       	pop	r0
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	08 95       	ret

00004894 <_ZN5Print5printEii>:
    4894:	cf 93       	push	r28
    4896:	df 93       	push	r29
    4898:	00 d0       	rcall	.+0      	; 0x489a <_ZN5Print5printEii+0x6>
    489a:	00 d0       	rcall	.+0      	; 0x489c <_ZN5Print5printEii+0x8>
    489c:	00 d0       	rcall	.+0      	; 0x489e <_ZN5Print5printEii+0xa>
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
    48a2:	9a 83       	std	Y+2, r25	; 0x02
    48a4:	89 83       	std	Y+1, r24	; 0x01
    48a6:	7c 83       	std	Y+4, r23	; 0x04
    48a8:	6b 83       	std	Y+3, r22	; 0x03
    48aa:	5e 83       	std	Y+6, r21	; 0x06
    48ac:	4d 83       	std	Y+5, r20	; 0x05
    48ae:	8b 81       	ldd	r24, Y+3	; 0x03
    48b0:	9c 81       	ldd	r25, Y+4	; 0x04
    48b2:	aa 27       	eor	r26, r26
    48b4:	97 fd       	sbrc	r25, 7
    48b6:	a0 95       	com	r26
    48b8:	ba 2f       	mov	r27, r26
    48ba:	2d 81       	ldd	r18, Y+5	; 0x05
    48bc:	3e 81       	ldd	r19, Y+6	; 0x06
    48be:	e9 81       	ldd	r30, Y+1	; 0x01
    48c0:	fa 81       	ldd	r31, Y+2	; 0x02
    48c2:	ac 01       	movw	r20, r24
    48c4:	bd 01       	movw	r22, r26
    48c6:	cf 01       	movw	r24, r30
    48c8:	0e 94 93 24 	call	0x4926	; 0x4926 <_ZN5Print5printEli>
    48cc:	26 96       	adiw	r28, 0x06	; 6
    48ce:	0f b6       	in	r0, 0x3f	; 63
    48d0:	f8 94       	cli
    48d2:	de bf       	out	0x3e, r29	; 62
    48d4:	0f be       	out	0x3f, r0	; 63
    48d6:	cd bf       	out	0x3d, r28	; 61
    48d8:	df 91       	pop	r29
    48da:	cf 91       	pop	r28
    48dc:	08 95       	ret

000048de <_ZN5Print5printEji>:
    48de:	cf 93       	push	r28
    48e0:	df 93       	push	r29
    48e2:	00 d0       	rcall	.+0      	; 0x48e4 <_ZN5Print5printEji+0x6>
    48e4:	00 d0       	rcall	.+0      	; 0x48e6 <_ZN5Print5printEji+0x8>
    48e6:	00 d0       	rcall	.+0      	; 0x48e8 <_ZN5Print5printEji+0xa>
    48e8:	cd b7       	in	r28, 0x3d	; 61
    48ea:	de b7       	in	r29, 0x3e	; 62
    48ec:	9a 83       	std	Y+2, r25	; 0x02
    48ee:	89 83       	std	Y+1, r24	; 0x01
    48f0:	7c 83       	std	Y+4, r23	; 0x04
    48f2:	6b 83       	std	Y+3, r22	; 0x03
    48f4:	5e 83       	std	Y+6, r21	; 0x06
    48f6:	4d 83       	std	Y+5, r20	; 0x05
    48f8:	8b 81       	ldd	r24, Y+3	; 0x03
    48fa:	9c 81       	ldd	r25, Y+4	; 0x04
    48fc:	cc 01       	movw	r24, r24
    48fe:	a0 e0       	ldi	r26, 0x00	; 0
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	2d 81       	ldd	r18, Y+5	; 0x05
    4904:	3e 81       	ldd	r19, Y+6	; 0x06
    4906:	e9 81       	ldd	r30, Y+1	; 0x01
    4908:	fa 81       	ldd	r31, Y+2	; 0x02
    490a:	ac 01       	movw	r20, r24
    490c:	bd 01       	movw	r22, r26
    490e:	cf 01       	movw	r24, r30
    4910:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN5Print5printEmi>
    4914:	26 96       	adiw	r28, 0x06	; 6
    4916:	0f b6       	in	r0, 0x3f	; 63
    4918:	f8 94       	cli
    491a:	de bf       	out	0x3e, r29	; 62
    491c:	0f be       	out	0x3f, r0	; 63
    491e:	cd bf       	out	0x3d, r28	; 61
    4920:	df 91       	pop	r29
    4922:	cf 91       	pop	r28
    4924:	08 95       	ret

00004926 <_ZN5Print5printEli>:
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
    492e:	2a 97       	sbiw	r28, 0x0a	; 10
    4930:	0f b6       	in	r0, 0x3f	; 63
    4932:	f8 94       	cli
    4934:	de bf       	out	0x3e, r29	; 62
    4936:	0f be       	out	0x3f, r0	; 63
    4938:	cd bf       	out	0x3d, r28	; 61
    493a:	9c 83       	std	Y+4, r25	; 0x04
    493c:	8b 83       	std	Y+3, r24	; 0x03
    493e:	4d 83       	std	Y+5, r20	; 0x05
    4940:	5e 83       	std	Y+6, r21	; 0x06
    4942:	6f 83       	std	Y+7, r22	; 0x07
    4944:	78 87       	std	Y+8, r23	; 0x08
    4946:	3a 87       	std	Y+10, r19	; 0x0a
    4948:	29 87       	std	Y+9, r18	; 0x09
    494a:	89 85       	ldd	r24, Y+9	; 0x09
    494c:	9a 85       	ldd	r25, Y+10	; 0x0a
    494e:	00 97       	sbiw	r24, 0x00	; 0
    4950:	79 f4       	brne	.+30     	; 0x4970 <_ZN5Print5printEli+0x4a>
    4952:	8b 81       	ldd	r24, Y+3	; 0x03
    4954:	9c 81       	ldd	r25, Y+4	; 0x04
    4956:	fc 01       	movw	r30, r24
    4958:	80 81       	ld	r24, Z
    495a:	91 81       	ldd	r25, Z+1	; 0x01
    495c:	fc 01       	movw	r30, r24
    495e:	20 81       	ld	r18, Z
    4960:	31 81       	ldd	r19, Z+1	; 0x01
    4962:	4d 81       	ldd	r20, Y+5	; 0x05
    4964:	8b 81       	ldd	r24, Y+3	; 0x03
    4966:	9c 81       	ldd	r25, Y+4	; 0x04
    4968:	64 2f       	mov	r22, r20
    496a:	f9 01       	movw	r30, r18
    496c:	09 95       	icall
    496e:	4c c0       	rjmp	.+152    	; 0x4a08 <_ZN5Print5printEli+0xe2>
    4970:	89 85       	ldd	r24, Y+9	; 0x09
    4972:	9a 85       	ldd	r25, Y+10	; 0x0a
    4974:	8a 30       	cpi	r24, 0x0A	; 10
    4976:	91 05       	cpc	r25, r1
    4978:	d9 f5       	brne	.+118    	; 0x49f0 <_ZN5Print5printEli+0xca>
    497a:	8d 81       	ldd	r24, Y+5	; 0x05
    497c:	9e 81       	ldd	r25, Y+6	; 0x06
    497e:	af 81       	ldd	r26, Y+7	; 0x07
    4980:	b8 85       	ldd	r27, Y+8	; 0x08
    4982:	bb 23       	and	r27, r27
    4984:	44 f5       	brge	.+80     	; 0x49d6 <_ZN5Print5printEli+0xb0>
    4986:	8b 81       	ldd	r24, Y+3	; 0x03
    4988:	9c 81       	ldd	r25, Y+4	; 0x04
    498a:	6d e2       	ldi	r22, 0x2D	; 45
    498c:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN5Print5printEc>
    4990:	9a 83       	std	Y+2, r25	; 0x02
    4992:	89 83       	std	Y+1, r24	; 0x01
    4994:	8d 81       	ldd	r24, Y+5	; 0x05
    4996:	9e 81       	ldd	r25, Y+6	; 0x06
    4998:	af 81       	ldd	r26, Y+7	; 0x07
    499a:	b8 85       	ldd	r27, Y+8	; 0x08
    499c:	b0 95       	com	r27
    499e:	a0 95       	com	r26
    49a0:	90 95       	com	r25
    49a2:	81 95       	neg	r24
    49a4:	9f 4f       	sbci	r25, 0xFF	; 255
    49a6:	af 4f       	sbci	r26, 0xFF	; 255
    49a8:	bf 4f       	sbci	r27, 0xFF	; 255
    49aa:	8d 83       	std	Y+5, r24	; 0x05
    49ac:	9e 83       	std	Y+6, r25	; 0x06
    49ae:	af 83       	std	Y+7, r26	; 0x07
    49b0:	b8 87       	std	Y+8, r27	; 0x08
    49b2:	8d 81       	ldd	r24, Y+5	; 0x05
    49b4:	9e 81       	ldd	r25, Y+6	; 0x06
    49b6:	af 81       	ldd	r26, Y+7	; 0x07
    49b8:	b8 85       	ldd	r27, Y+8	; 0x08
    49ba:	eb 81       	ldd	r30, Y+3	; 0x03
    49bc:	fc 81       	ldd	r31, Y+4	; 0x04
    49be:	2a e0       	ldi	r18, 0x0A	; 10
    49c0:	ac 01       	movw	r20, r24
    49c2:	bd 01       	movw	r22, r26
    49c4:	cf 01       	movw	r24, r30
    49c6:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <_ZN5Print11printNumberEmh>
    49ca:	9c 01       	movw	r18, r24
    49cc:	89 81       	ldd	r24, Y+1	; 0x01
    49ce:	9a 81       	ldd	r25, Y+2	; 0x02
    49d0:	82 0f       	add	r24, r18
    49d2:	93 1f       	adc	r25, r19
    49d4:	19 c0       	rjmp	.+50     	; 0x4a08 <_ZN5Print5printEli+0xe2>
    49d6:	8d 81       	ldd	r24, Y+5	; 0x05
    49d8:	9e 81       	ldd	r25, Y+6	; 0x06
    49da:	af 81       	ldd	r26, Y+7	; 0x07
    49dc:	b8 85       	ldd	r27, Y+8	; 0x08
    49de:	eb 81       	ldd	r30, Y+3	; 0x03
    49e0:	fc 81       	ldd	r31, Y+4	; 0x04
    49e2:	2a e0       	ldi	r18, 0x0A	; 10
    49e4:	ac 01       	movw	r20, r24
    49e6:	bd 01       	movw	r22, r26
    49e8:	cf 01       	movw	r24, r30
    49ea:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <_ZN5Print11printNumberEmh>
    49ee:	0c c0       	rjmp	.+24     	; 0x4a08 <_ZN5Print5printEli+0xe2>
    49f0:	29 85       	ldd	r18, Y+9	; 0x09
    49f2:	8d 81       	ldd	r24, Y+5	; 0x05
    49f4:	9e 81       	ldd	r25, Y+6	; 0x06
    49f6:	af 81       	ldd	r26, Y+7	; 0x07
    49f8:	b8 85       	ldd	r27, Y+8	; 0x08
    49fa:	eb 81       	ldd	r30, Y+3	; 0x03
    49fc:	fc 81       	ldd	r31, Y+4	; 0x04
    49fe:	ac 01       	movw	r20, r24
    4a00:	bd 01       	movw	r22, r26
    4a02:	cf 01       	movw	r24, r30
    4a04:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <_ZN5Print11printNumberEmh>
    4a08:	2a 96       	adiw	r28, 0x0a	; 10
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	f8 94       	cli
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	cd bf       	out	0x3d, r28	; 61
    4a14:	df 91       	pop	r29
    4a16:	cf 91       	pop	r28
    4a18:	08 95       	ret

00004a1a <_ZN5Print5printEmi>:
    4a1a:	cf 93       	push	r28
    4a1c:	df 93       	push	r29
    4a1e:	cd b7       	in	r28, 0x3d	; 61
    4a20:	de b7       	in	r29, 0x3e	; 62
    4a22:	28 97       	sbiw	r28, 0x08	; 8
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	f8 94       	cli
    4a28:	de bf       	out	0x3e, r29	; 62
    4a2a:	0f be       	out	0x3f, r0	; 63
    4a2c:	cd bf       	out	0x3d, r28	; 61
    4a2e:	9a 83       	std	Y+2, r25	; 0x02
    4a30:	89 83       	std	Y+1, r24	; 0x01
    4a32:	4b 83       	std	Y+3, r20	; 0x03
    4a34:	5c 83       	std	Y+4, r21	; 0x04
    4a36:	6d 83       	std	Y+5, r22	; 0x05
    4a38:	7e 83       	std	Y+6, r23	; 0x06
    4a3a:	38 87       	std	Y+8, r19	; 0x08
    4a3c:	2f 83       	std	Y+7, r18	; 0x07
    4a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    4a40:	98 85       	ldd	r25, Y+8	; 0x08
    4a42:	00 97       	sbiw	r24, 0x00	; 0
    4a44:	79 f4       	brne	.+30     	; 0x4a64 <_ZN5Print5printEmi+0x4a>
    4a46:	89 81       	ldd	r24, Y+1	; 0x01
    4a48:	9a 81       	ldd	r25, Y+2	; 0x02
    4a4a:	fc 01       	movw	r30, r24
    4a4c:	80 81       	ld	r24, Z
    4a4e:	91 81       	ldd	r25, Z+1	; 0x01
    4a50:	fc 01       	movw	r30, r24
    4a52:	20 81       	ld	r18, Z
    4a54:	31 81       	ldd	r19, Z+1	; 0x01
    4a56:	4b 81       	ldd	r20, Y+3	; 0x03
    4a58:	89 81       	ldd	r24, Y+1	; 0x01
    4a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a5c:	64 2f       	mov	r22, r20
    4a5e:	f9 01       	movw	r30, r18
    4a60:	09 95       	icall
    4a62:	0c c0       	rjmp	.+24     	; 0x4a7c <_ZN5Print5printEmi+0x62>
    4a64:	2f 81       	ldd	r18, Y+7	; 0x07
    4a66:	8b 81       	ldd	r24, Y+3	; 0x03
    4a68:	9c 81       	ldd	r25, Y+4	; 0x04
    4a6a:	ad 81       	ldd	r26, Y+5	; 0x05
    4a6c:	be 81       	ldd	r27, Y+6	; 0x06
    4a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a70:	fa 81       	ldd	r31, Y+2	; 0x02
    4a72:	ac 01       	movw	r20, r24
    4a74:	bd 01       	movw	r22, r26
    4a76:	cf 01       	movw	r24, r30
    4a78:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <_ZN5Print11printNumberEmh>
    4a7c:	28 96       	adiw	r28, 0x08	; 8
    4a7e:	0f b6       	in	r0, 0x3f	; 63
    4a80:	f8 94       	cli
    4a82:	de bf       	out	0x3e, r29	; 62
    4a84:	0f be       	out	0x3f, r0	; 63
    4a86:	cd bf       	out	0x3d, r28	; 61
    4a88:	df 91       	pop	r29
    4a8a:	cf 91       	pop	r28
    4a8c:	08 95       	ret

00004a8e <_ZN5Print5printEdi>:
    4a8e:	cf 93       	push	r28
    4a90:	df 93       	push	r29
    4a92:	cd b7       	in	r28, 0x3d	; 61
    4a94:	de b7       	in	r29, 0x3e	; 62
    4a96:	28 97       	sbiw	r28, 0x08	; 8
    4a98:	0f b6       	in	r0, 0x3f	; 63
    4a9a:	f8 94       	cli
    4a9c:	de bf       	out	0x3e, r29	; 62
    4a9e:	0f be       	out	0x3f, r0	; 63
    4aa0:	cd bf       	out	0x3d, r28	; 61
    4aa2:	9a 83       	std	Y+2, r25	; 0x02
    4aa4:	89 83       	std	Y+1, r24	; 0x01
    4aa6:	4b 83       	std	Y+3, r20	; 0x03
    4aa8:	5c 83       	std	Y+4, r21	; 0x04
    4aaa:	6d 83       	std	Y+5, r22	; 0x05
    4aac:	7e 83       	std	Y+6, r23	; 0x06
    4aae:	38 87       	std	Y+8, r19	; 0x08
    4ab0:	2f 83       	std	Y+7, r18	; 0x07
    4ab2:	2f 81       	ldd	r18, Y+7	; 0x07
    4ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab8:	ad 81       	ldd	r26, Y+5	; 0x05
    4aba:	be 81       	ldd	r27, Y+6	; 0x06
    4abc:	e9 81       	ldd	r30, Y+1	; 0x01
    4abe:	fa 81       	ldd	r31, Y+2	; 0x02
    4ac0:	ac 01       	movw	r20, r24
    4ac2:	bd 01       	movw	r22, r26
    4ac4:	cf 01       	movw	r24, r30
    4ac6:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print10printFloatEdh>
    4aca:	28 96       	adiw	r28, 0x08	; 8
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	df 91       	pop	r29
    4ad8:	cf 91       	pop	r28
    4ada:	08 95       	ret

00004adc <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4adc:	cf 93       	push	r28
    4ade:	df 93       	push	r29
    4ae0:	00 d0       	rcall	.+0      	; 0x4ae2 <_ZN5Print7printlnEPK19__FlashStringHelper+0x6>
    4ae2:	00 d0       	rcall	.+0      	; 0x4ae4 <_ZN5Print7printlnEPK19__FlashStringHelper+0x8>
    4ae4:	00 d0       	rcall	.+0      	; 0x4ae6 <_ZN5Print7printlnEPK19__FlashStringHelper+0xa>
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
    4aea:	9c 83       	std	Y+4, r25	; 0x04
    4aec:	8b 83       	std	Y+3, r24	; 0x03
    4aee:	7e 83       	std	Y+6, r23	; 0x06
    4af0:	6d 83       	std	Y+5, r22	; 0x05
    4af2:	2d 81       	ldd	r18, Y+5	; 0x05
    4af4:	3e 81       	ldd	r19, Y+6	; 0x06
    4af6:	8b 81       	ldd	r24, Y+3	; 0x03
    4af8:	9c 81       	ldd	r25, Y+4	; 0x04
    4afa:	b9 01       	movw	r22, r18
    4afc:	0e 94 ac 23 	call	0x4758	; 0x4758 <_ZN5Print5printEPK19__FlashStringHelper>
    4b00:	9a 83       	std	Y+2, r25	; 0x02
    4b02:	89 83       	std	Y+1, r24	; 0x01
    4b04:	8b 81       	ldd	r24, Y+3	; 0x03
    4b06:	9c 81       	ldd	r25, Y+4	; 0x04
    4b08:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN5Print7printlnEv>
    4b0c:	29 81       	ldd	r18, Y+1	; 0x01
    4b0e:	3a 81       	ldd	r19, Y+2	; 0x02
    4b10:	82 0f       	add	r24, r18
    4b12:	93 1f       	adc	r25, r19
    4b14:	9a 83       	std	Y+2, r25	; 0x02
    4b16:	89 83       	std	Y+1, r24	; 0x01
    4b18:	89 81       	ldd	r24, Y+1	; 0x01
    4b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b1c:	26 96       	adiw	r28, 0x06	; 6
    4b1e:	0f b6       	in	r0, 0x3f	; 63
    4b20:	f8 94       	cli
    4b22:	de bf       	out	0x3e, r29	; 62
    4b24:	0f be       	out	0x3f, r0	; 63
    4b26:	cd bf       	out	0x3d, r28	; 61
    4b28:	df 91       	pop	r29
    4b2a:	cf 91       	pop	r28
    4b2c:	08 95       	ret

00004b2e <_ZN5Print7printlnEv>:
    4b2e:	cf 93       	push	r28
    4b30:	df 93       	push	r29
    4b32:	00 d0       	rcall	.+0      	; 0x4b34 <_ZN5Print7printlnEv+0x6>
    4b34:	00 d0       	rcall	.+0      	; 0x4b36 <_ZN5Print7printlnEv+0x8>
    4b36:	cd b7       	in	r28, 0x3d	; 61
    4b38:	de b7       	in	r29, 0x3e	; 62
    4b3a:	9c 83       	std	Y+4, r25	; 0x04
    4b3c:	8b 83       	std	Y+3, r24	; 0x03
    4b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b40:	9c 81       	ldd	r25, Y+4	; 0x04
    4b42:	6d e0       	ldi	r22, 0x0D	; 13
    4b44:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN5Print5printEc>
    4b48:	9a 83       	std	Y+2, r25	; 0x02
    4b4a:	89 83       	std	Y+1, r24	; 0x01
    4b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b50:	6a e0       	ldi	r22, 0x0A	; 10
    4b52:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN5Print5printEc>
    4b56:	29 81       	ldd	r18, Y+1	; 0x01
    4b58:	3a 81       	ldd	r19, Y+2	; 0x02
    4b5a:	82 0f       	add	r24, r18
    4b5c:	93 1f       	adc	r25, r19
    4b5e:	9a 83       	std	Y+2, r25	; 0x02
    4b60:	89 83       	std	Y+1, r24	; 0x01
    4b62:	89 81       	ldd	r24, Y+1	; 0x01
    4b64:	9a 81       	ldd	r25, Y+2	; 0x02
    4b66:	0f 90       	pop	r0
    4b68:	0f 90       	pop	r0
    4b6a:	0f 90       	pop	r0
    4b6c:	0f 90       	pop	r0
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	08 95       	ret

00004b74 <_ZN5Print7printlnEhi>:
    4b74:	cf 93       	push	r28
    4b76:	df 93       	push	r29
    4b78:	cd b7       	in	r28, 0x3d	; 61
    4b7a:	de b7       	in	r29, 0x3e	; 62
    4b7c:	27 97       	sbiw	r28, 0x07	; 7
    4b7e:	0f b6       	in	r0, 0x3f	; 63
    4b80:	f8 94       	cli
    4b82:	de bf       	out	0x3e, r29	; 62
    4b84:	0f be       	out	0x3f, r0	; 63
    4b86:	cd bf       	out	0x3d, r28	; 61
    4b88:	9c 83       	std	Y+4, r25	; 0x04
    4b8a:	8b 83       	std	Y+3, r24	; 0x03
    4b8c:	6d 83       	std	Y+5, r22	; 0x05
    4b8e:	5f 83       	std	Y+7, r21	; 0x07
    4b90:	4e 83       	std	Y+6, r20	; 0x06
    4b92:	2e 81       	ldd	r18, Y+6	; 0x06
    4b94:	3f 81       	ldd	r19, Y+7	; 0x07
    4b96:	8b 81       	ldd	r24, Y+3	; 0x03
    4b98:	9c 81       	ldd	r25, Y+4	; 0x04
    4b9a:	a9 01       	movw	r20, r18
    4b9c:	6d 81       	ldd	r22, Y+5	; 0x05
    4b9e:	0e 94 28 24 	call	0x4850	; 0x4850 <_ZN5Print5printEhi>
    4ba2:	9a 83       	std	Y+2, r25	; 0x02
    4ba4:	89 83       	std	Y+1, r24	; 0x01
    4ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    4baa:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN5Print7printlnEv>
    4bae:	29 81       	ldd	r18, Y+1	; 0x01
    4bb0:	3a 81       	ldd	r19, Y+2	; 0x02
    4bb2:	82 0f       	add	r24, r18
    4bb4:	93 1f       	adc	r25, r19
    4bb6:	9a 83       	std	Y+2, r25	; 0x02
    4bb8:	89 83       	std	Y+1, r24	; 0x01
    4bba:	89 81       	ldd	r24, Y+1	; 0x01
    4bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bbe:	27 96       	adiw	r28, 0x07	; 7
    4bc0:	0f b6       	in	r0, 0x3f	; 63
    4bc2:	f8 94       	cli
    4bc4:	de bf       	out	0x3e, r29	; 62
    4bc6:	0f be       	out	0x3f, r0	; 63
    4bc8:	cd bf       	out	0x3d, r28	; 61
    4bca:	df 91       	pop	r29
    4bcc:	cf 91       	pop	r28
    4bce:	08 95       	ret

00004bd0 <_ZN5Print7printlnEii>:
    4bd0:	cf 93       	push	r28
    4bd2:	df 93       	push	r29
    4bd4:	cd b7       	in	r28, 0x3d	; 61
    4bd6:	de b7       	in	r29, 0x3e	; 62
    4bd8:	28 97       	sbiw	r28, 0x08	; 8
    4bda:	0f b6       	in	r0, 0x3f	; 63
    4bdc:	f8 94       	cli
    4bde:	de bf       	out	0x3e, r29	; 62
    4be0:	0f be       	out	0x3f, r0	; 63
    4be2:	cd bf       	out	0x3d, r28	; 61
    4be4:	9c 83       	std	Y+4, r25	; 0x04
    4be6:	8b 83       	std	Y+3, r24	; 0x03
    4be8:	7e 83       	std	Y+6, r23	; 0x06
    4bea:	6d 83       	std	Y+5, r22	; 0x05
    4bec:	58 87       	std	Y+8, r21	; 0x08
    4bee:	4f 83       	std	Y+7, r20	; 0x07
    4bf0:	4f 81       	ldd	r20, Y+7	; 0x07
    4bf2:	58 85       	ldd	r21, Y+8	; 0x08
    4bf4:	2d 81       	ldd	r18, Y+5	; 0x05
    4bf6:	3e 81       	ldd	r19, Y+6	; 0x06
    4bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    4bfc:	b9 01       	movw	r22, r18
    4bfe:	0e 94 4a 24 	call	0x4894	; 0x4894 <_ZN5Print5printEii>
    4c02:	9a 83       	std	Y+2, r25	; 0x02
    4c04:	89 83       	std	Y+1, r24	; 0x01
    4c06:	8b 81       	ldd	r24, Y+3	; 0x03
    4c08:	9c 81       	ldd	r25, Y+4	; 0x04
    4c0a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN5Print7printlnEv>
    4c0e:	29 81       	ldd	r18, Y+1	; 0x01
    4c10:	3a 81       	ldd	r19, Y+2	; 0x02
    4c12:	82 0f       	add	r24, r18
    4c14:	93 1f       	adc	r25, r19
    4c16:	9a 83       	std	Y+2, r25	; 0x02
    4c18:	89 83       	std	Y+1, r24	; 0x01
    4c1a:	89 81       	ldd	r24, Y+1	; 0x01
    4c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c1e:	28 96       	adiw	r28, 0x08	; 8
    4c20:	0f b6       	in	r0, 0x3f	; 63
    4c22:	f8 94       	cli
    4c24:	de bf       	out	0x3e, r29	; 62
    4c26:	0f be       	out	0x3f, r0	; 63
    4c28:	cd bf       	out	0x3d, r28	; 61
    4c2a:	df 91       	pop	r29
    4c2c:	cf 91       	pop	r28
    4c2e:	08 95       	ret

00004c30 <_ZN5Print7printlnEji>:
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
    4c34:	cd b7       	in	r28, 0x3d	; 61
    4c36:	de b7       	in	r29, 0x3e	; 62
    4c38:	28 97       	sbiw	r28, 0x08	; 8
    4c3a:	0f b6       	in	r0, 0x3f	; 63
    4c3c:	f8 94       	cli
    4c3e:	de bf       	out	0x3e, r29	; 62
    4c40:	0f be       	out	0x3f, r0	; 63
    4c42:	cd bf       	out	0x3d, r28	; 61
    4c44:	9c 83       	std	Y+4, r25	; 0x04
    4c46:	8b 83       	std	Y+3, r24	; 0x03
    4c48:	7e 83       	std	Y+6, r23	; 0x06
    4c4a:	6d 83       	std	Y+5, r22	; 0x05
    4c4c:	58 87       	std	Y+8, r21	; 0x08
    4c4e:	4f 83       	std	Y+7, r20	; 0x07
    4c50:	4f 81       	ldd	r20, Y+7	; 0x07
    4c52:	58 85       	ldd	r21, Y+8	; 0x08
    4c54:	2d 81       	ldd	r18, Y+5	; 0x05
    4c56:	3e 81       	ldd	r19, Y+6	; 0x06
    4c58:	8b 81       	ldd	r24, Y+3	; 0x03
    4c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c5c:	b9 01       	movw	r22, r18
    4c5e:	0e 94 6f 24 	call	0x48de	; 0x48de <_ZN5Print5printEji>
    4c62:	9a 83       	std	Y+2, r25	; 0x02
    4c64:	89 83       	std	Y+1, r24	; 0x01
    4c66:	8b 81       	ldd	r24, Y+3	; 0x03
    4c68:	9c 81       	ldd	r25, Y+4	; 0x04
    4c6a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN5Print7printlnEv>
    4c6e:	29 81       	ldd	r18, Y+1	; 0x01
    4c70:	3a 81       	ldd	r19, Y+2	; 0x02
    4c72:	82 0f       	add	r24, r18
    4c74:	93 1f       	adc	r25, r19
    4c76:	9a 83       	std	Y+2, r25	; 0x02
    4c78:	89 83       	std	Y+1, r24	; 0x01
    4c7a:	89 81       	ldd	r24, Y+1	; 0x01
    4c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c7e:	28 96       	adiw	r28, 0x08	; 8
    4c80:	0f b6       	in	r0, 0x3f	; 63
    4c82:	f8 94       	cli
    4c84:	de bf       	out	0x3e, r29	; 62
    4c86:	0f be       	out	0x3f, r0	; 63
    4c88:	cd bf       	out	0x3d, r28	; 61
    4c8a:	df 91       	pop	r29
    4c8c:	cf 91       	pop	r28
    4c8e:	08 95       	ret

00004c90 <_ZN5Print7printlnEdi>:
    4c90:	cf 93       	push	r28
    4c92:	df 93       	push	r29
    4c94:	cd b7       	in	r28, 0x3d	; 61
    4c96:	de b7       	in	r29, 0x3e	; 62
    4c98:	2a 97       	sbiw	r28, 0x0a	; 10
    4c9a:	0f b6       	in	r0, 0x3f	; 63
    4c9c:	f8 94       	cli
    4c9e:	de bf       	out	0x3e, r29	; 62
    4ca0:	0f be       	out	0x3f, r0	; 63
    4ca2:	cd bf       	out	0x3d, r28	; 61
    4ca4:	9c 83       	std	Y+4, r25	; 0x04
    4ca6:	8b 83       	std	Y+3, r24	; 0x03
    4ca8:	4d 83       	std	Y+5, r20	; 0x05
    4caa:	5e 83       	std	Y+6, r21	; 0x06
    4cac:	6f 83       	std	Y+7, r22	; 0x07
    4cae:	78 87       	std	Y+8, r23	; 0x08
    4cb0:	3a 87       	std	Y+10, r19	; 0x0a
    4cb2:	29 87       	std	Y+9, r18	; 0x09
    4cb4:	29 85       	ldd	r18, Y+9	; 0x09
    4cb6:	3a 85       	ldd	r19, Y+10	; 0x0a
    4cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cba:	9e 81       	ldd	r25, Y+6	; 0x06
    4cbc:	af 81       	ldd	r26, Y+7	; 0x07
    4cbe:	b8 85       	ldd	r27, Y+8	; 0x08
    4cc0:	eb 81       	ldd	r30, Y+3	; 0x03
    4cc2:	fc 81       	ldd	r31, Y+4	; 0x04
    4cc4:	ac 01       	movw	r20, r24
    4cc6:	bd 01       	movw	r22, r26
    4cc8:	cf 01       	movw	r24, r30
    4cca:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_ZN5Print5printEdi>
    4cce:	9a 83       	std	Y+2, r25	; 0x02
    4cd0:	89 83       	std	Y+1, r24	; 0x01
    4cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd6:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN5Print7printlnEv>
    4cda:	29 81       	ldd	r18, Y+1	; 0x01
    4cdc:	3a 81       	ldd	r19, Y+2	; 0x02
    4cde:	82 0f       	add	r24, r18
    4ce0:	93 1f       	adc	r25, r19
    4ce2:	9a 83       	std	Y+2, r25	; 0x02
    4ce4:	89 83       	std	Y+1, r24	; 0x01
    4ce6:	89 81       	ldd	r24, Y+1	; 0x01
    4ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cea:	2a 96       	adiw	r28, 0x0a	; 10
    4cec:	0f b6       	in	r0, 0x3f	; 63
    4cee:	f8 94       	cli
    4cf0:	de bf       	out	0x3e, r29	; 62
    4cf2:	0f be       	out	0x3f, r0	; 63
    4cf4:	cd bf       	out	0x3d, r28	; 61
    4cf6:	df 91       	pop	r29
    4cf8:	cf 91       	pop	r28
    4cfa:	08 95       	ret

00004cfc <_ZN5Print11printNumberEmh>:
    4cfc:	cf 93       	push	r28
    4cfe:	df 93       	push	r29
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
    4d04:	e3 97       	sbiw	r28, 0x33	; 51
    4d06:	0f b6       	in	r0, 0x3f	; 63
    4d08:	f8 94       	cli
    4d0a:	de bf       	out	0x3e, r29	; 62
    4d0c:	0f be       	out	0x3f, r0	; 63
    4d0e:	cd bf       	out	0x3d, r28	; 61
    4d10:	9a a7       	std	Y+42, r25	; 0x2a
    4d12:	89 a7       	std	Y+41, r24	; 0x29
    4d14:	4b a7       	std	Y+43, r20	; 0x2b
    4d16:	5c a7       	std	Y+44, r21	; 0x2c
    4d18:	6d a7       	std	Y+45, r22	; 0x2d
    4d1a:	7e a7       	std	Y+46, r23	; 0x2e
    4d1c:	2f a7       	std	Y+47, r18	; 0x2f
    4d1e:	80 e2       	ldi	r24, 0x20	; 32
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	9e 01       	movw	r18, r28
    4d24:	28 5f       	subi	r18, 0xF8	; 248
    4d26:	3f 4f       	sbci	r19, 0xFF	; 255
    4d28:	82 0f       	add	r24, r18
    4d2a:	93 1f       	adc	r25, r19
    4d2c:	9a 83       	std	Y+2, r25	; 0x02
    4d2e:	89 83       	std	Y+1, r24	; 0x01
    4d30:	89 81       	ldd	r24, Y+1	; 0x01
    4d32:	9a 81       	ldd	r25, Y+2	; 0x02
    4d34:	fc 01       	movw	r30, r24
    4d36:	10 82       	st	Z, r1
    4d38:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d3a:	82 30       	cpi	r24, 0x02	; 2
    4d3c:	10 f4       	brcc	.+4      	; 0x4d42 <_ZN5Print11printNumberEmh+0x46>
    4d3e:	8a e0       	ldi	r24, 0x0A	; 10
    4d40:	8f a7       	std	Y+47, r24	; 0x2f
    4d42:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d44:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d46:	ad a5       	ldd	r26, Y+45	; 0x2d
    4d48:	be a5       	ldd	r27, Y+46	; 0x2e
    4d4a:	8b 83       	std	Y+3, r24	; 0x03
    4d4c:	9c 83       	std	Y+4, r25	; 0x04
    4d4e:	ad 83       	std	Y+5, r26	; 0x05
    4d50:	be 83       	std	Y+6, r27	; 0x06
    4d52:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d54:	28 2f       	mov	r18, r24
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	40 e0       	ldi	r20, 0x00	; 0
    4d5a:	50 e0       	ldi	r21, 0x00	; 0
    4d5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d60:	ad a5       	ldd	r26, Y+45	; 0x2d
    4d62:	be a5       	ldd	r27, Y+46	; 0x2e
    4d64:	bc 01       	movw	r22, r24
    4d66:	cd 01       	movw	r24, r26
    4d68:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__udivmodsi4>
    4d6c:	da 01       	movw	r26, r20
    4d6e:	c9 01       	movw	r24, r18
    4d70:	8b a7       	std	Y+43, r24	; 0x2b
    4d72:	9c a7       	std	Y+44, r25	; 0x2c
    4d74:	ad a7       	std	Y+45, r26	; 0x2d
    4d76:	be a7       	std	Y+46, r27	; 0x2e
    4d78:	9b 81       	ldd	r25, Y+3	; 0x03
    4d7a:	2b a5       	ldd	r18, Y+43	; 0x2b
    4d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d7e:	28 9f       	mul	r18, r24
    4d80:	80 2d       	mov	r24, r0
    4d82:	11 24       	eor	r1, r1
    4d84:	f9 2f       	mov	r31, r25
    4d86:	f8 1b       	sub	r31, r24
    4d88:	8f 2f       	mov	r24, r31
    4d8a:	8f 83       	std	Y+7, r24	; 0x07
    4d8c:	89 81       	ldd	r24, Y+1	; 0x01
    4d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d90:	01 97       	sbiw	r24, 0x01	; 1
    4d92:	9a 83       	std	Y+2, r25	; 0x02
    4d94:	89 83       	std	Y+1, r24	; 0x01
    4d96:	8f 81       	ldd	r24, Y+7	; 0x07
    4d98:	8a 30       	cpi	r24, 0x0A	; 10
    4d9a:	24 f4       	brge	.+8      	; 0x4da4 <_ZN5Print11printNumberEmh+0xa8>
    4d9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d9e:	80 5d       	subi	r24, 0xD0	; 208
    4da0:	28 2f       	mov	r18, r24
    4da2:	03 c0       	rjmp	.+6      	; 0x4daa <_ZN5Print11printNumberEmh+0xae>
    4da4:	8f 81       	ldd	r24, Y+7	; 0x07
    4da6:	89 5c       	subi	r24, 0xC9	; 201
    4da8:	28 2f       	mov	r18, r24
    4daa:	89 81       	ldd	r24, Y+1	; 0x01
    4dac:	9a 81       	ldd	r25, Y+2	; 0x02
    4dae:	fc 01       	movw	r30, r24
    4db0:	20 83       	st	Z, r18
    4db2:	8b a5       	ldd	r24, Y+43	; 0x2b
    4db4:	9c a5       	ldd	r25, Y+44	; 0x2c
    4db6:	ad a5       	ldd	r26, Y+45	; 0x2d
    4db8:	be a5       	ldd	r27, Y+46	; 0x2e
    4dba:	00 97       	sbiw	r24, 0x00	; 0
    4dbc:	a1 05       	cpc	r26, r1
    4dbe:	b1 05       	cpc	r27, r1
    4dc0:	09 f0       	breq	.+2      	; 0x4dc4 <_ZN5Print11printNumberEmh+0xc8>
    4dc2:	bf cf       	rjmp	.-130    	; 0x4d42 <_ZN5Print11printNumberEmh+0x46>
    4dc4:	29 81       	ldd	r18, Y+1	; 0x01
    4dc6:	3a 81       	ldd	r19, Y+2	; 0x02
    4dc8:	89 a5       	ldd	r24, Y+41	; 0x29
    4dca:	9a a5       	ldd	r25, Y+42	; 0x2a
    4dcc:	b9 01       	movw	r22, r18
    4dce:	0e 94 34 23 	call	0x4668	; 0x4668 <_ZN5Print5writeEPKc>
    4dd2:	e3 96       	adiw	r28, 0x33	; 51
    4dd4:	0f b6       	in	r0, 0x3f	; 63
    4dd6:	f8 94       	cli
    4dd8:	de bf       	out	0x3e, r29	; 62
    4dda:	0f be       	out	0x3f, r0	; 63
    4ddc:	cd bf       	out	0x3d, r28	; 61
    4dde:	df 91       	pop	r29
    4de0:	cf 91       	pop	r28
    4de2:	08 95       	ret

00004de4 <_ZN5Print10printFloatEdh>:
    4de4:	cf 92       	push	r12
    4de6:	df 92       	push	r13
    4de8:	ef 92       	push	r14
    4dea:	ff 92       	push	r15
    4dec:	1f 93       	push	r17
    4dee:	cf 93       	push	r28
    4df0:	df 93       	push	r29
    4df2:	cd b7       	in	r28, 0x3d	; 61
    4df4:	de b7       	in	r29, 0x3e	; 62
    4df6:	68 97       	sbiw	r28, 0x18	; 24
    4df8:	0f b6       	in	r0, 0x3f	; 63
    4dfa:	f8 94       	cli
    4dfc:	de bf       	out	0x3e, r29	; 62
    4dfe:	0f be       	out	0x3f, r0	; 63
    4e00:	cd bf       	out	0x3d, r28	; 61
    4e02:	9b 8b       	std	Y+19, r25	; 0x13
    4e04:	8a 8b       	std	Y+18, r24	; 0x12
    4e06:	4c 8b       	std	Y+20, r20	; 0x14
    4e08:	5d 8b       	std	Y+21, r21	; 0x15
    4e0a:	6e 8b       	std	Y+22, r22	; 0x16
    4e0c:	7f 8b       	std	Y+23, r23	; 0x17
    4e0e:	28 8f       	std	Y+24, r18	; 0x18
    4e10:	1a 82       	std	Y+2, r1	; 0x02
    4e12:	19 82       	std	Y+1, r1	; 0x01
    4e14:	2c 89       	ldd	r18, Y+20	; 0x14
    4e16:	3d 89       	ldd	r19, Y+21	; 0x15
    4e18:	4e 89       	ldd	r20, Y+22	; 0x16
    4e1a:	5f 89       	ldd	r21, Y+23	; 0x17
    4e1c:	6c 89       	ldd	r22, Y+20	; 0x14
    4e1e:	7d 89       	ldd	r23, Y+21	; 0x15
    4e20:	8e 89       	ldd	r24, Y+22	; 0x16
    4e22:	9f 89       	ldd	r25, Y+23	; 0x17
    4e24:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__unordsf2>
    4e28:	88 23       	and	r24, r24
    4e2a:	39 f0       	breq	.+14     	; 0x4e3a <_ZN5Print10printFloatEdh+0x56>
    4e2c:	8a 89       	ldd	r24, Y+18	; 0x12
    4e2e:	9b 89       	ldd	r25, Y+19	; 0x13
    4e30:	66 e0       	ldi	r22, 0x06	; 6
    4e32:	71 e0       	ldi	r23, 0x01	; 1
    4e34:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
    4e38:	34 c1       	rjmp	.+616    	; 0x50a2 <_ZN5Print10printFloatEdh+0x2be>
    4e3a:	8c 89       	ldd	r24, Y+20	; 0x14
    4e3c:	9d 89       	ldd	r25, Y+21	; 0x15
    4e3e:	ae 89       	ldd	r26, Y+22	; 0x16
    4e40:	bf 89       	ldd	r27, Y+23	; 0x17
    4e42:	6c 01       	movw	r12, r24
    4e44:	7d 01       	movw	r14, r26
    4e46:	e8 94       	clt
    4e48:	f7 f8       	bld	r15, 7
    4e4a:	11 e0       	ldi	r17, 0x01	; 1
    4e4c:	2f ef       	ldi	r18, 0xFF	; 255
    4e4e:	3f ef       	ldi	r19, 0xFF	; 255
    4e50:	4f e7       	ldi	r20, 0x7F	; 127
    4e52:	5f e7       	ldi	r21, 0x7F	; 127
    4e54:	c7 01       	movw	r24, r14
    4e56:	b6 01       	movw	r22, r12
    4e58:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__unordsf2>
    4e5c:	88 23       	and	r24, r24
    4e5e:	59 f4       	brne	.+22     	; 0x4e76 <_ZN5Print10printFloatEdh+0x92>
    4e60:	2f ef       	ldi	r18, 0xFF	; 255
    4e62:	3f ef       	ldi	r19, 0xFF	; 255
    4e64:	4f e7       	ldi	r20, 0x7F	; 127
    4e66:	5f e7       	ldi	r21, 0x7F	; 127
    4e68:	c7 01       	movw	r24, r14
    4e6a:	b6 01       	movw	r22, r12
    4e6c:	0e 94 aa 2c 	call	0x5954	; 0x5954 <__cmpsf2>
    4e70:	18 16       	cp	r1, r24
    4e72:	0c f4       	brge	.+2      	; 0x4e76 <_ZN5Print10printFloatEdh+0x92>
    4e74:	10 e0       	ldi	r17, 0x00	; 0
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	81 27       	eor	r24, r17
    4e7a:	88 23       	and	r24, r24
    4e7c:	39 f0       	breq	.+14     	; 0x4e8c <_ZN5Print10printFloatEdh+0xa8>
    4e7e:	8a 89       	ldd	r24, Y+18	; 0x12
    4e80:	9b 89       	ldd	r25, Y+19	; 0x13
    4e82:	6a e0       	ldi	r22, 0x0A	; 10
    4e84:	71 e0       	ldi	r23, 0x01	; 1
    4e86:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
    4e8a:	0b c1       	rjmp	.+534    	; 0x50a2 <_ZN5Print10printFloatEdh+0x2be>
    4e8c:	2f ef       	ldi	r18, 0xFF	; 255
    4e8e:	3f ef       	ldi	r19, 0xFF	; 255
    4e90:	4f e7       	ldi	r20, 0x7F	; 127
    4e92:	5f e4       	ldi	r21, 0x4F	; 79
    4e94:	6c 89       	ldd	r22, Y+20	; 0x14
    4e96:	7d 89       	ldd	r23, Y+21	; 0x15
    4e98:	8e 89       	ldd	r24, Y+22	; 0x16
    4e9a:	9f 89       	ldd	r25, Y+23	; 0x17
    4e9c:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__gesf2>
    4ea0:	18 16       	cp	r1, r24
    4ea2:	3c f4       	brge	.+14     	; 0x4eb2 <_ZN5Print10printFloatEdh+0xce>
    4ea4:	8a 89       	ldd	r24, Y+18	; 0x12
    4ea6:	9b 89       	ldd	r25, Y+19	; 0x13
    4ea8:	6e e0       	ldi	r22, 0x0E	; 14
    4eaa:	71 e0       	ldi	r23, 0x01	; 1
    4eac:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
    4eb0:	f8 c0       	rjmp	.+496    	; 0x50a2 <_ZN5Print10printFloatEdh+0x2be>
    4eb2:	2f ef       	ldi	r18, 0xFF	; 255
    4eb4:	3f ef       	ldi	r19, 0xFF	; 255
    4eb6:	4f e7       	ldi	r20, 0x7F	; 127
    4eb8:	5f ec       	ldi	r21, 0xCF	; 207
    4eba:	6c 89       	ldd	r22, Y+20	; 0x14
    4ebc:	7d 89       	ldd	r23, Y+21	; 0x15
    4ebe:	8e 89       	ldd	r24, Y+22	; 0x16
    4ec0:	9f 89       	ldd	r25, Y+23	; 0x17
    4ec2:	0e 94 aa 2c 	call	0x5954	; 0x5954 <__cmpsf2>
    4ec6:	88 23       	and	r24, r24
    4ec8:	3c f4       	brge	.+14     	; 0x4ed8 <_ZN5Print10printFloatEdh+0xf4>
    4eca:	8a 89       	ldd	r24, Y+18	; 0x12
    4ecc:	9b 89       	ldd	r25, Y+19	; 0x13
    4ece:	6e e0       	ldi	r22, 0x0E	; 14
    4ed0:	71 e0       	ldi	r23, 0x01	; 1
    4ed2:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
    4ed6:	e5 c0       	rjmp	.+458    	; 0x50a2 <_ZN5Print10printFloatEdh+0x2be>
    4ed8:	20 e0       	ldi	r18, 0x00	; 0
    4eda:	30 e0       	ldi	r19, 0x00	; 0
    4edc:	a9 01       	movw	r20, r18
    4ede:	6c 89       	ldd	r22, Y+20	; 0x14
    4ee0:	7d 89       	ldd	r23, Y+21	; 0x15
    4ee2:	8e 89       	ldd	r24, Y+22	; 0x16
    4ee4:	9f 89       	ldd	r25, Y+23	; 0x17
    4ee6:	0e 94 aa 2c 	call	0x5954	; 0x5954 <__cmpsf2>
    4eea:	88 23       	and	r24, r24
    4eec:	a4 f4       	brge	.+40     	; 0x4f16 <_ZN5Print10printFloatEdh+0x132>
    4eee:	8a 89       	ldd	r24, Y+18	; 0x12
    4ef0:	9b 89       	ldd	r25, Y+19	; 0x13
    4ef2:	6d e2       	ldi	r22, 0x2D	; 45
    4ef4:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN5Print5printEc>
    4ef8:	29 81       	ldd	r18, Y+1	; 0x01
    4efa:	3a 81       	ldd	r19, Y+2	; 0x02
    4efc:	82 0f       	add	r24, r18
    4efe:	93 1f       	adc	r25, r19
    4f00:	9a 83       	std	Y+2, r25	; 0x02
    4f02:	89 83       	std	Y+1, r24	; 0x01
    4f04:	8c 89       	ldd	r24, Y+20	; 0x14
    4f06:	9d 89       	ldd	r25, Y+21	; 0x15
    4f08:	ae 89       	ldd	r26, Y+22	; 0x16
    4f0a:	bf 89       	ldd	r27, Y+23	; 0x17
    4f0c:	b0 58       	subi	r27, 0x80	; 128
    4f0e:	8c 8b       	std	Y+20, r24	; 0x14
    4f10:	9d 8b       	std	Y+21, r25	; 0x15
    4f12:	ae 8b       	std	Y+22, r26	; 0x16
    4f14:	bf 8b       	std	Y+23, r27	; 0x17
    4f16:	80 e0       	ldi	r24, 0x00	; 0
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	a0 e0       	ldi	r26, 0x00	; 0
    4f1c:	bf e3       	ldi	r27, 0x3F	; 63
    4f1e:	8b 83       	std	Y+3, r24	; 0x03
    4f20:	9c 83       	std	Y+4, r25	; 0x04
    4f22:	ad 83       	std	Y+5, r26	; 0x05
    4f24:	be 83       	std	Y+6, r27	; 0x06
    4f26:	1f 82       	std	Y+7, r1	; 0x07
    4f28:	13 c0       	rjmp	.+38     	; 0x4f50 <_ZN5Print10printFloatEdh+0x16c>
    4f2a:	20 e0       	ldi	r18, 0x00	; 0
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	40 e2       	ldi	r20, 0x20	; 32
    4f30:	51 e4       	ldi	r21, 0x41	; 65
    4f32:	6b 81       	ldd	r22, Y+3	; 0x03
    4f34:	7c 81       	ldd	r23, Y+4	; 0x04
    4f36:	8d 81       	ldd	r24, Y+5	; 0x05
    4f38:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3a:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__divsf3>
    4f3e:	dc 01       	movw	r26, r24
    4f40:	cb 01       	movw	r24, r22
    4f42:	8b 83       	std	Y+3, r24	; 0x03
    4f44:	9c 83       	std	Y+4, r25	; 0x04
    4f46:	ad 83       	std	Y+5, r26	; 0x05
    4f48:	be 83       	std	Y+6, r27	; 0x06
    4f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    4f4c:	8f 5f       	subi	r24, 0xFF	; 255
    4f4e:	8f 83       	std	Y+7, r24	; 0x07
    4f50:	9f 81       	ldd	r25, Y+7	; 0x07
    4f52:	88 8d       	ldd	r24, Y+24	; 0x18
    4f54:	98 17       	cp	r25, r24
    4f56:	48 f3       	brcs	.-46     	; 0x4f2a <_ZN5Print10printFloatEdh+0x146>
    4f58:	2b 81       	ldd	r18, Y+3	; 0x03
    4f5a:	3c 81       	ldd	r19, Y+4	; 0x04
    4f5c:	4d 81       	ldd	r20, Y+5	; 0x05
    4f5e:	5e 81       	ldd	r21, Y+6	; 0x06
    4f60:	6c 89       	ldd	r22, Y+20	; 0x14
    4f62:	7d 89       	ldd	r23, Y+21	; 0x15
    4f64:	8e 89       	ldd	r24, Y+22	; 0x16
    4f66:	9f 89       	ldd	r25, Y+23	; 0x17
    4f68:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__addsf3>
    4f6c:	dc 01       	movw	r26, r24
    4f6e:	cb 01       	movw	r24, r22
    4f70:	8c 8b       	std	Y+20, r24	; 0x14
    4f72:	9d 8b       	std	Y+21, r25	; 0x15
    4f74:	ae 8b       	std	Y+22, r26	; 0x16
    4f76:	bf 8b       	std	Y+23, r27	; 0x17
    4f78:	6c 89       	ldd	r22, Y+20	; 0x14
    4f7a:	7d 89       	ldd	r23, Y+21	; 0x15
    4f7c:	8e 89       	ldd	r24, Y+22	; 0x16
    4f7e:	9f 89       	ldd	r25, Y+23	; 0x17
    4f80:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__fixunssfsi>
    4f84:	dc 01       	movw	r26, r24
    4f86:	cb 01       	movw	r24, r22
    4f88:	8c 87       	std	Y+12, r24	; 0x0c
    4f8a:	9d 87       	std	Y+13, r25	; 0x0d
    4f8c:	ae 87       	std	Y+14, r26	; 0x0e
    4f8e:	bf 87       	std	Y+15, r27	; 0x0f
    4f90:	6c 85       	ldd	r22, Y+12	; 0x0c
    4f92:	7d 85       	ldd	r23, Y+13	; 0x0d
    4f94:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f96:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f98:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <__floatunsisf>
    4f9c:	dc 01       	movw	r26, r24
    4f9e:	cb 01       	movw	r24, r22
    4fa0:	9c 01       	movw	r18, r24
    4fa2:	ad 01       	movw	r20, r26
    4fa4:	6c 89       	ldd	r22, Y+20	; 0x14
    4fa6:	7d 89       	ldd	r23, Y+21	; 0x15
    4fa8:	8e 89       	ldd	r24, Y+22	; 0x16
    4faa:	9f 89       	ldd	r25, Y+23	; 0x17
    4fac:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__subsf3>
    4fb0:	dc 01       	movw	r26, r24
    4fb2:	cb 01       	movw	r24, r22
    4fb4:	88 87       	std	Y+8, r24	; 0x08
    4fb6:	99 87       	std	Y+9, r25	; 0x09
    4fb8:	aa 87       	std	Y+10, r26	; 0x0a
    4fba:	bb 87       	std	Y+11, r27	; 0x0b
    4fbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4fbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    4fc0:	ae 85       	ldd	r26, Y+14	; 0x0e
    4fc2:	bf 85       	ldd	r27, Y+15	; 0x0f
    4fc4:	ea 89       	ldd	r30, Y+18	; 0x12
    4fc6:	fb 89       	ldd	r31, Y+19	; 0x13
    4fc8:	2a e0       	ldi	r18, 0x0A	; 10
    4fca:	30 e0       	ldi	r19, 0x00	; 0
    4fcc:	ac 01       	movw	r20, r24
    4fce:	bd 01       	movw	r22, r26
    4fd0:	cf 01       	movw	r24, r30
    4fd2:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN5Print5printEmi>
    4fd6:	29 81       	ldd	r18, Y+1	; 0x01
    4fd8:	3a 81       	ldd	r19, Y+2	; 0x02
    4fda:	82 0f       	add	r24, r18
    4fdc:	93 1f       	adc	r25, r19
    4fde:	9a 83       	std	Y+2, r25	; 0x02
    4fe0:	89 83       	std	Y+1, r24	; 0x01
    4fe2:	88 8d       	ldd	r24, Y+24	; 0x18
    4fe4:	88 23       	and	r24, r24
    4fe6:	61 f0       	breq	.+24     	; 0x5000 <_ZN5Print10printFloatEdh+0x21c>
    4fe8:	8a 89       	ldd	r24, Y+18	; 0x12
    4fea:	9b 89       	ldd	r25, Y+19	; 0x13
    4fec:	62 e1       	ldi	r22, 0x12	; 18
    4fee:	71 e0       	ldi	r23, 0x01	; 1
    4ff0:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <_ZN5Print5printEPKc>
    4ff4:	29 81       	ldd	r18, Y+1	; 0x01
    4ff6:	3a 81       	ldd	r19, Y+2	; 0x02
    4ff8:	82 0f       	add	r24, r18
    4ffa:	93 1f       	adc	r25, r19
    4ffc:	9a 83       	std	Y+2, r25	; 0x02
    4ffe:	89 83       	std	Y+1, r24	; 0x01
    5000:	43 c0       	rjmp	.+134    	; 0x5088 <_ZN5Print10printFloatEdh+0x2a4>
    5002:	20 e0       	ldi	r18, 0x00	; 0
    5004:	30 e0       	ldi	r19, 0x00	; 0
    5006:	40 e2       	ldi	r20, 0x20	; 32
    5008:	51 e4       	ldi	r21, 0x41	; 65
    500a:	68 85       	ldd	r22, Y+8	; 0x08
    500c:	79 85       	ldd	r23, Y+9	; 0x09
    500e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5010:	9b 85       	ldd	r25, Y+11	; 0x0b
    5012:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__mulsf3>
    5016:	dc 01       	movw	r26, r24
    5018:	cb 01       	movw	r24, r22
    501a:	88 87       	std	Y+8, r24	; 0x08
    501c:	99 87       	std	Y+9, r25	; 0x09
    501e:	aa 87       	std	Y+10, r26	; 0x0a
    5020:	bb 87       	std	Y+11, r27	; 0x0b
    5022:	68 85       	ldd	r22, Y+8	; 0x08
    5024:	79 85       	ldd	r23, Y+9	; 0x09
    5026:	8a 85       	ldd	r24, Y+10	; 0x0a
    5028:	9b 85       	ldd	r25, Y+11	; 0x0b
    502a:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <__fixsfsi>
    502e:	dc 01       	movw	r26, r24
    5030:	cb 01       	movw	r24, r22
    5032:	99 8b       	std	Y+17, r25	; 0x11
    5034:	88 8b       	std	Y+16, r24	; 0x10
    5036:	28 89       	ldd	r18, Y+16	; 0x10
    5038:	39 89       	ldd	r19, Y+17	; 0x11
    503a:	8a 89       	ldd	r24, Y+18	; 0x12
    503c:	9b 89       	ldd	r25, Y+19	; 0x13
    503e:	4a e0       	ldi	r20, 0x0A	; 10
    5040:	50 e0       	ldi	r21, 0x00	; 0
    5042:	b9 01       	movw	r22, r18
    5044:	0e 94 4a 24 	call	0x4894	; 0x4894 <_ZN5Print5printEii>
    5048:	29 81       	ldd	r18, Y+1	; 0x01
    504a:	3a 81       	ldd	r19, Y+2	; 0x02
    504c:	82 0f       	add	r24, r18
    504e:	93 1f       	adc	r25, r19
    5050:	9a 83       	std	Y+2, r25	; 0x02
    5052:	89 83       	std	Y+1, r24	; 0x01
    5054:	88 89       	ldd	r24, Y+16	; 0x10
    5056:	99 89       	ldd	r25, Y+17	; 0x11
    5058:	aa 27       	eor	r26, r26
    505a:	97 fd       	sbrc	r25, 7
    505c:	a0 95       	com	r26
    505e:	ba 2f       	mov	r27, r26
    5060:	bc 01       	movw	r22, r24
    5062:	cd 01       	movw	r24, r26
    5064:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__floatsisf>
    5068:	dc 01       	movw	r26, r24
    506a:	cb 01       	movw	r24, r22
    506c:	9c 01       	movw	r18, r24
    506e:	ad 01       	movw	r20, r26
    5070:	68 85       	ldd	r22, Y+8	; 0x08
    5072:	79 85       	ldd	r23, Y+9	; 0x09
    5074:	8a 85       	ldd	r24, Y+10	; 0x0a
    5076:	9b 85       	ldd	r25, Y+11	; 0x0b
    5078:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__subsf3>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	88 87       	std	Y+8, r24	; 0x08
    5082:	99 87       	std	Y+9, r25	; 0x09
    5084:	aa 87       	std	Y+10, r26	; 0x0a
    5086:	bb 87       	std	Y+11, r27	; 0x0b
    5088:	98 8d       	ldd	r25, Y+24	; 0x18
    508a:	8f ef       	ldi	r24, 0xFF	; 255
    508c:	89 0f       	add	r24, r25
    508e:	88 8f       	std	Y+24, r24	; 0x18
    5090:	81 e0       	ldi	r24, 0x01	; 1
    5092:	99 23       	and	r25, r25
    5094:	09 f4       	brne	.+2      	; 0x5098 <_ZN5Print10printFloatEdh+0x2b4>
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	88 23       	and	r24, r24
    509a:	09 f0       	breq	.+2      	; 0x509e <_ZN5Print10printFloatEdh+0x2ba>
    509c:	b2 cf       	rjmp	.-156    	; 0x5002 <_ZN5Print10printFloatEdh+0x21e>
    509e:	89 81       	ldd	r24, Y+1	; 0x01
    50a0:	9a 81       	ldd	r25, Y+2	; 0x02
    50a2:	68 96       	adiw	r28, 0x18	; 24
    50a4:	0f b6       	in	r0, 0x3f	; 63
    50a6:	f8 94       	cli
    50a8:	de bf       	out	0x3e, r29	; 62
    50aa:	0f be       	out	0x3f, r0	; 63
    50ac:	cd bf       	out	0x3d, r28	; 61
    50ae:	df 91       	pop	r29
    50b0:	cf 91       	pop	r28
    50b2:	1f 91       	pop	r17
    50b4:	ff 90       	pop	r15
    50b6:	ef 90       	pop	r14
    50b8:	df 90       	pop	r13
    50ba:	cf 90       	pop	r12
    50bc:	08 95       	ret

000050be <attachInterrupt>:
    50be:	cf 93       	push	r28
    50c0:	df 93       	push	r29
    50c2:	00 d0       	rcall	.+0      	; 0x50c4 <attachInterrupt+0x6>
    50c4:	00 d0       	rcall	.+0      	; 0x50c6 <attachInterrupt+0x8>
    50c6:	1f 92       	push	r1
    50c8:	cd b7       	in	r28, 0x3d	; 61
    50ca:	de b7       	in	r29, 0x3e	; 62
    50cc:	89 83       	std	Y+1, r24	; 0x01
    50ce:	7b 83       	std	Y+3, r23	; 0x03
    50d0:	6a 83       	std	Y+2, r22	; 0x02
    50d2:	5d 83       	std	Y+5, r21	; 0x05
    50d4:	4c 83       	std	Y+4, r20	; 0x04
    50d6:	89 81       	ldd	r24, Y+1	; 0x01
    50d8:	82 30       	cpi	r24, 0x02	; 2
    50da:	08 f0       	brcs	.+2      	; 0x50de <attachInterrupt+0x20>
    50dc:	49 c0       	rjmp	.+146    	; 0x5170 <attachInterrupt+0xb2>
    50de:	89 81       	ldd	r24, Y+1	; 0x01
    50e0:	88 2f       	mov	r24, r24
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	88 0f       	add	r24, r24
    50e6:	99 1f       	adc	r25, r25
    50e8:	80 5b       	subi	r24, 0xB0	; 176
    50ea:	9c 4f       	sbci	r25, 0xFC	; 252
    50ec:	2a 81       	ldd	r18, Y+2	; 0x02
    50ee:	3b 81       	ldd	r19, Y+3	; 0x03
    50f0:	fc 01       	movw	r30, r24
    50f2:	31 83       	std	Z+1, r19	; 0x01
    50f4:	20 83       	st	Z, r18
    50f6:	89 81       	ldd	r24, Y+1	; 0x01
    50f8:	88 2f       	mov	r24, r24
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	81 30       	cpi	r24, 0x01	; 1
    50fe:	91 05       	cpc	r25, r1
    5100:	d9 f0       	breq	.+54     	; 0x5138 <attachInterrupt+0x7a>
    5102:	82 30       	cpi	r24, 0x02	; 2
    5104:	91 05       	cpc	r25, r1
    5106:	99 f1       	breq	.+102    	; 0x516e <attachInterrupt+0xb0>
    5108:	00 97       	sbiw	r24, 0x00	; 0
    510a:	91 f5       	brne	.+100    	; 0x5170 <attachInterrupt+0xb2>
    510c:	89 e6       	ldi	r24, 0x69	; 105
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	29 e6       	ldi	r18, 0x69	; 105
    5112:	30 e0       	ldi	r19, 0x00	; 0
    5114:	f9 01       	movw	r30, r18
    5116:	20 81       	ld	r18, Z
    5118:	32 2f       	mov	r19, r18
    511a:	3c 7f       	andi	r19, 0xFC	; 252
    511c:	2c 81       	ldd	r18, Y+4	; 0x04
    511e:	23 2b       	or	r18, r19
    5120:	fc 01       	movw	r30, r24
    5122:	20 83       	st	Z, r18
    5124:	8d e3       	ldi	r24, 0x3D	; 61
    5126:	90 e0       	ldi	r25, 0x00	; 0
    5128:	2d e3       	ldi	r18, 0x3D	; 61
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	f9 01       	movw	r30, r18
    512e:	20 81       	ld	r18, Z
    5130:	21 60       	ori	r18, 0x01	; 1
    5132:	fc 01       	movw	r30, r24
    5134:	20 83       	st	Z, r18
    5136:	1c c0       	rjmp	.+56     	; 0x5170 <attachInterrupt+0xb2>
    5138:	89 e6       	ldi	r24, 0x69	; 105
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	29 e6       	ldi	r18, 0x69	; 105
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	f9 01       	movw	r30, r18
    5142:	20 81       	ld	r18, Z
    5144:	42 2f       	mov	r20, r18
    5146:	43 7f       	andi	r20, 0xF3	; 243
    5148:	2c 81       	ldd	r18, Y+4	; 0x04
    514a:	3d 81       	ldd	r19, Y+5	; 0x05
    514c:	22 0f       	add	r18, r18
    514e:	33 1f       	adc	r19, r19
    5150:	22 0f       	add	r18, r18
    5152:	33 1f       	adc	r19, r19
    5154:	24 2b       	or	r18, r20
    5156:	fc 01       	movw	r30, r24
    5158:	20 83       	st	Z, r18
    515a:	8d e3       	ldi	r24, 0x3D	; 61
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	2d e3       	ldi	r18, 0x3D	; 61
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	f9 01       	movw	r30, r18
    5164:	20 81       	ld	r18, Z
    5166:	22 60       	ori	r18, 0x02	; 2
    5168:	fc 01       	movw	r30, r24
    516a:	20 83       	st	Z, r18
    516c:	01 c0       	rjmp	.+2      	; 0x5170 <attachInterrupt+0xb2>
    516e:	00 00       	nop
    5170:	0f 90       	pop	r0
    5172:	0f 90       	pop	r0
    5174:	0f 90       	pop	r0
    5176:	0f 90       	pop	r0
    5178:	0f 90       	pop	r0
    517a:	df 91       	pop	r29
    517c:	cf 91       	pop	r28
    517e:	08 95       	ret

00005180 <__vector_1>:
    5180:	1f 92       	push	r1
    5182:	0f 92       	push	r0
    5184:	00 90 5f 00 	lds	r0, 0x005F
    5188:	0f 92       	push	r0
    518a:	11 24       	eor	r1, r1
    518c:	2f 93       	push	r18
    518e:	3f 93       	push	r19
    5190:	4f 93       	push	r20
    5192:	5f 93       	push	r21
    5194:	6f 93       	push	r22
    5196:	7f 93       	push	r23
    5198:	8f 93       	push	r24
    519a:	9f 93       	push	r25
    519c:	af 93       	push	r26
    519e:	bf 93       	push	r27
    51a0:	ef 93       	push	r30
    51a2:	ff 93       	push	r31
    51a4:	cf 93       	push	r28
    51a6:	df 93       	push	r29
    51a8:	cd b7       	in	r28, 0x3d	; 61
    51aa:	de b7       	in	r29, 0x3e	; 62
    51ac:	80 91 50 03 	lds	r24, 0x0350
    51b0:	90 91 51 03 	lds	r25, 0x0351
    51b4:	00 97       	sbiw	r24, 0x00	; 0
    51b6:	31 f0       	breq	.+12     	; 0x51c4 <__vector_1+0x44>
    51b8:	80 91 50 03 	lds	r24, 0x0350
    51bc:	90 91 51 03 	lds	r25, 0x0351
    51c0:	fc 01       	movw	r30, r24
    51c2:	09 95       	icall
    51c4:	df 91       	pop	r29
    51c6:	cf 91       	pop	r28
    51c8:	ff 91       	pop	r31
    51ca:	ef 91       	pop	r30
    51cc:	bf 91       	pop	r27
    51ce:	af 91       	pop	r26
    51d0:	9f 91       	pop	r25
    51d2:	8f 91       	pop	r24
    51d4:	7f 91       	pop	r23
    51d6:	6f 91       	pop	r22
    51d8:	5f 91       	pop	r21
    51da:	4f 91       	pop	r20
    51dc:	3f 91       	pop	r19
    51de:	2f 91       	pop	r18
    51e0:	0f 90       	pop	r0
    51e2:	00 92 5f 00 	sts	0x005F, r0
    51e6:	0f 90       	pop	r0
    51e8:	1f 90       	pop	r1
    51ea:	18 95       	reti

000051ec <__vector_2>:
    51ec:	1f 92       	push	r1
    51ee:	0f 92       	push	r0
    51f0:	00 90 5f 00 	lds	r0, 0x005F
    51f4:	0f 92       	push	r0
    51f6:	11 24       	eor	r1, r1
    51f8:	2f 93       	push	r18
    51fa:	3f 93       	push	r19
    51fc:	4f 93       	push	r20
    51fe:	5f 93       	push	r21
    5200:	6f 93       	push	r22
    5202:	7f 93       	push	r23
    5204:	8f 93       	push	r24
    5206:	9f 93       	push	r25
    5208:	af 93       	push	r26
    520a:	bf 93       	push	r27
    520c:	ef 93       	push	r30
    520e:	ff 93       	push	r31
    5210:	cf 93       	push	r28
    5212:	df 93       	push	r29
    5214:	cd b7       	in	r28, 0x3d	; 61
    5216:	de b7       	in	r29, 0x3e	; 62
    5218:	80 91 52 03 	lds	r24, 0x0352
    521c:	90 91 53 03 	lds	r25, 0x0353
    5220:	00 97       	sbiw	r24, 0x00	; 0
    5222:	31 f0       	breq	.+12     	; 0x5230 <__vector_2+0x44>
    5224:	80 91 52 03 	lds	r24, 0x0352
    5228:	90 91 53 03 	lds	r25, 0x0353
    522c:	fc 01       	movw	r30, r24
    522e:	09 95       	icall
    5230:	df 91       	pop	r29
    5232:	cf 91       	pop	r28
    5234:	ff 91       	pop	r31
    5236:	ef 91       	pop	r30
    5238:	bf 91       	pop	r27
    523a:	af 91       	pop	r26
    523c:	9f 91       	pop	r25
    523e:	8f 91       	pop	r24
    5240:	7f 91       	pop	r23
    5242:	6f 91       	pop	r22
    5244:	5f 91       	pop	r21
    5246:	4f 91       	pop	r20
    5248:	3f 91       	pop	r19
    524a:	2f 91       	pop	r18
    524c:	0f 90       	pop	r0
    524e:	00 92 5f 00 	sts	0x005F, r0
    5252:	0f 90       	pop	r0
    5254:	1f 90       	pop	r1
    5256:	18 95       	reti

00005258 <__vector_16>:
    5258:	1f 92       	push	r1
    525a:	0f 92       	push	r0
    525c:	00 90 5f 00 	lds	r0, 0x005F
    5260:	0f 92       	push	r0
    5262:	11 24       	eor	r1, r1
    5264:	8f 93       	push	r24
    5266:	9f 93       	push	r25
    5268:	af 93       	push	r26
    526a:	bf 93       	push	r27
    526c:	cf 93       	push	r28
    526e:	df 93       	push	r29
    5270:	cd b7       	in	r28, 0x3d	; 61
    5272:	de b7       	in	r29, 0x3e	; 62
    5274:	25 97       	sbiw	r28, 0x05	; 5
    5276:	de bf       	out	0x3e, r29	; 62
    5278:	cd bf       	out	0x3d, r28	; 61
    527a:	80 91 58 03 	lds	r24, 0x0358
    527e:	90 91 59 03 	lds	r25, 0x0359
    5282:	a0 91 5a 03 	lds	r26, 0x035A
    5286:	b0 91 5b 03 	lds	r27, 0x035B
    528a:	89 83       	std	Y+1, r24	; 0x01
    528c:	9a 83       	std	Y+2, r25	; 0x02
    528e:	ab 83       	std	Y+3, r26	; 0x03
    5290:	bc 83       	std	Y+4, r27	; 0x04
    5292:	80 91 5c 03 	lds	r24, 0x035C
    5296:	8d 83       	std	Y+5, r24	; 0x05
    5298:	89 81       	ldd	r24, Y+1	; 0x01
    529a:	9a 81       	ldd	r25, Y+2	; 0x02
    529c:	ab 81       	ldd	r26, Y+3	; 0x03
    529e:	bc 81       	ldd	r27, Y+4	; 0x04
    52a0:	01 96       	adiw	r24, 0x01	; 1
    52a2:	a1 1d       	adc	r26, r1
    52a4:	b1 1d       	adc	r27, r1
    52a6:	89 83       	std	Y+1, r24	; 0x01
    52a8:	9a 83       	std	Y+2, r25	; 0x02
    52aa:	ab 83       	std	Y+3, r26	; 0x03
    52ac:	bc 83       	std	Y+4, r27	; 0x04
    52ae:	8d 81       	ldd	r24, Y+5	; 0x05
    52b0:	8d 5f       	subi	r24, 0xFD	; 253
    52b2:	8d 83       	std	Y+5, r24	; 0x05
    52b4:	8d 81       	ldd	r24, Y+5	; 0x05
    52b6:	8d 37       	cpi	r24, 0x7D	; 125
    52b8:	70 f0       	brcs	.+28     	; 0x52d6 <__vector_16+0x7e>
    52ba:	8d 81       	ldd	r24, Y+5	; 0x05
    52bc:	8d 57       	subi	r24, 0x7D	; 125
    52be:	8d 83       	std	Y+5, r24	; 0x05
    52c0:	89 81       	ldd	r24, Y+1	; 0x01
    52c2:	9a 81       	ldd	r25, Y+2	; 0x02
    52c4:	ab 81       	ldd	r26, Y+3	; 0x03
    52c6:	bc 81       	ldd	r27, Y+4	; 0x04
    52c8:	01 96       	adiw	r24, 0x01	; 1
    52ca:	a1 1d       	adc	r26, r1
    52cc:	b1 1d       	adc	r27, r1
    52ce:	89 83       	std	Y+1, r24	; 0x01
    52d0:	9a 83       	std	Y+2, r25	; 0x02
    52d2:	ab 83       	std	Y+3, r26	; 0x03
    52d4:	bc 83       	std	Y+4, r27	; 0x04
    52d6:	8d 81       	ldd	r24, Y+5	; 0x05
    52d8:	80 93 5c 03 	sts	0x035C, r24
    52dc:	89 81       	ldd	r24, Y+1	; 0x01
    52de:	9a 81       	ldd	r25, Y+2	; 0x02
    52e0:	ab 81       	ldd	r26, Y+3	; 0x03
    52e2:	bc 81       	ldd	r27, Y+4	; 0x04
    52e4:	80 93 58 03 	sts	0x0358, r24
    52e8:	90 93 59 03 	sts	0x0359, r25
    52ec:	a0 93 5a 03 	sts	0x035A, r26
    52f0:	b0 93 5b 03 	sts	0x035B, r27
    52f4:	80 91 54 03 	lds	r24, 0x0354
    52f8:	90 91 55 03 	lds	r25, 0x0355
    52fc:	a0 91 56 03 	lds	r26, 0x0356
    5300:	b0 91 57 03 	lds	r27, 0x0357
    5304:	01 96       	adiw	r24, 0x01	; 1
    5306:	a1 1d       	adc	r26, r1
    5308:	b1 1d       	adc	r27, r1
    530a:	80 93 54 03 	sts	0x0354, r24
    530e:	90 93 55 03 	sts	0x0355, r25
    5312:	a0 93 56 03 	sts	0x0356, r26
    5316:	b0 93 57 03 	sts	0x0357, r27
    531a:	0f 90       	pop	r0
    531c:	0f 90       	pop	r0
    531e:	0f 90       	pop	r0
    5320:	0f 90       	pop	r0
    5322:	0f 90       	pop	r0
    5324:	df 91       	pop	r29
    5326:	cf 91       	pop	r28
    5328:	bf 91       	pop	r27
    532a:	af 91       	pop	r26
    532c:	9f 91       	pop	r25
    532e:	8f 91       	pop	r24
    5330:	0f 90       	pop	r0
    5332:	00 92 5f 00 	sts	0x005F, r0
    5336:	0f 90       	pop	r0
    5338:	1f 90       	pop	r1
    533a:	18 95       	reti

0000533c <millis>:
    533c:	cf 93       	push	r28
    533e:	df 93       	push	r29
    5340:	00 d0       	rcall	.+0      	; 0x5342 <millis+0x6>
    5342:	00 d0       	rcall	.+0      	; 0x5344 <millis+0x8>
    5344:	1f 92       	push	r1
    5346:	cd b7       	in	r28, 0x3d	; 61
    5348:	de b7       	in	r29, 0x3e	; 62
    534a:	8f e5       	ldi	r24, 0x5F	; 95
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	fc 01       	movw	r30, r24
    5350:	80 81       	ld	r24, Z
    5352:	89 83       	std	Y+1, r24	; 0x01
    5354:	f8 94       	cli
    5356:	80 91 58 03 	lds	r24, 0x0358
    535a:	90 91 59 03 	lds	r25, 0x0359
    535e:	a0 91 5a 03 	lds	r26, 0x035A
    5362:	b0 91 5b 03 	lds	r27, 0x035B
    5366:	8a 83       	std	Y+2, r24	; 0x02
    5368:	9b 83       	std	Y+3, r25	; 0x03
    536a:	ac 83       	std	Y+4, r26	; 0x04
    536c:	bd 83       	std	Y+5, r27	; 0x05
    536e:	8f e5       	ldi	r24, 0x5F	; 95
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	29 81       	ldd	r18, Y+1	; 0x01
    5374:	fc 01       	movw	r30, r24
    5376:	20 83       	st	Z, r18
    5378:	8a 81       	ldd	r24, Y+2	; 0x02
    537a:	9b 81       	ldd	r25, Y+3	; 0x03
    537c:	ac 81       	ldd	r26, Y+4	; 0x04
    537e:	bd 81       	ldd	r27, Y+5	; 0x05
    5380:	bc 01       	movw	r22, r24
    5382:	cd 01       	movw	r24, r26
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    5388:	0f 90       	pop	r0
    538a:	0f 90       	pop	r0
    538c:	0f 90       	pop	r0
    538e:	df 91       	pop	r29
    5390:	cf 91       	pop	r28
    5392:	08 95       	ret

00005394 <micros>:
    5394:	cf 93       	push	r28
    5396:	df 93       	push	r29
    5398:	00 d0       	rcall	.+0      	; 0x539a <micros+0x6>
    539a:	00 d0       	rcall	.+0      	; 0x539c <micros+0x8>
    539c:	00 d0       	rcall	.+0      	; 0x539e <micros+0xa>
    539e:	cd b7       	in	r28, 0x3d	; 61
    53a0:	de b7       	in	r29, 0x3e	; 62
    53a2:	8f e5       	ldi	r24, 0x5F	; 95
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	fc 01       	movw	r30, r24
    53a8:	80 81       	ld	r24, Z
    53aa:	8d 83       	std	Y+5, r24	; 0x05
    53ac:	f8 94       	cli
    53ae:	80 91 54 03 	lds	r24, 0x0354
    53b2:	90 91 55 03 	lds	r25, 0x0355
    53b6:	a0 91 56 03 	lds	r26, 0x0356
    53ba:	b0 91 57 03 	lds	r27, 0x0357
    53be:	89 83       	std	Y+1, r24	; 0x01
    53c0:	9a 83       	std	Y+2, r25	; 0x02
    53c2:	ab 83       	std	Y+3, r26	; 0x03
    53c4:	bc 83       	std	Y+4, r27	; 0x04
    53c6:	86 e4       	ldi	r24, 0x46	; 70
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	fc 01       	movw	r30, r24
    53cc:	80 81       	ld	r24, Z
    53ce:	8e 83       	std	Y+6, r24	; 0x06
    53d0:	85 e3       	ldi	r24, 0x35	; 53
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	fc 01       	movw	r30, r24
    53d6:	80 81       	ld	r24, Z
    53d8:	88 2f       	mov	r24, r24
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	81 70       	andi	r24, 0x01	; 1
    53de:	99 27       	eor	r25, r25
    53e0:	00 97       	sbiw	r24, 0x00	; 0
    53e2:	71 f0       	breq	.+28     	; 0x5400 <micros+0x6c>
    53e4:	8e 81       	ldd	r24, Y+6	; 0x06
    53e6:	8f 3f       	cpi	r24, 0xFF	; 255
    53e8:	59 f0       	breq	.+22     	; 0x5400 <micros+0x6c>
    53ea:	89 81       	ldd	r24, Y+1	; 0x01
    53ec:	9a 81       	ldd	r25, Y+2	; 0x02
    53ee:	ab 81       	ldd	r26, Y+3	; 0x03
    53f0:	bc 81       	ldd	r27, Y+4	; 0x04
    53f2:	01 96       	adiw	r24, 0x01	; 1
    53f4:	a1 1d       	adc	r26, r1
    53f6:	b1 1d       	adc	r27, r1
    53f8:	89 83       	std	Y+1, r24	; 0x01
    53fa:	9a 83       	std	Y+2, r25	; 0x02
    53fc:	ab 83       	std	Y+3, r26	; 0x03
    53fe:	bc 83       	std	Y+4, r27	; 0x04
    5400:	8f e5       	ldi	r24, 0x5F	; 95
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	2d 81       	ldd	r18, Y+5	; 0x05
    5406:	fc 01       	movw	r30, r24
    5408:	20 83       	st	Z, r18
    540a:	89 81       	ldd	r24, Y+1	; 0x01
    540c:	9a 81       	ldd	r25, Y+2	; 0x02
    540e:	ab 81       	ldd	r26, Y+3	; 0x03
    5410:	bc 81       	ldd	r27, Y+4	; 0x04
    5412:	22 27       	eor	r18, r18
    5414:	38 2f       	mov	r19, r24
    5416:	49 2f       	mov	r20, r25
    5418:	5a 2f       	mov	r21, r26
    541a:	8e 81       	ldd	r24, Y+6	; 0x06
    541c:	88 2f       	mov	r24, r24
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	a0 e0       	ldi	r26, 0x00	; 0
    5422:	b0 e0       	ldi	r27, 0x00	; 0
    5424:	82 0f       	add	r24, r18
    5426:	93 1f       	adc	r25, r19
    5428:	a4 1f       	adc	r26, r20
    542a:	b5 1f       	adc	r27, r21
    542c:	88 0f       	add	r24, r24
    542e:	99 1f       	adc	r25, r25
    5430:	aa 1f       	adc	r26, r26
    5432:	bb 1f       	adc	r27, r27
    5434:	88 0f       	add	r24, r24
    5436:	99 1f       	adc	r25, r25
    5438:	aa 1f       	adc	r26, r26
    543a:	bb 1f       	adc	r27, r27
    543c:	bc 01       	movw	r22, r24
    543e:	cd 01       	movw	r24, r26
    5440:	26 96       	adiw	r28, 0x06	; 6
    5442:	0f b6       	in	r0, 0x3f	; 63
    5444:	f8 94       	cli
    5446:	de bf       	out	0x3e, r29	; 62
    5448:	0f be       	out	0x3f, r0	; 63
    544a:	cd bf       	out	0x3d, r28	; 61
    544c:	df 91       	pop	r29
    544e:	cf 91       	pop	r28
    5450:	08 95       	ret

00005452 <delay>:
    5452:	cf 93       	push	r28
    5454:	df 93       	push	r29
    5456:	00 d0       	rcall	.+0      	; 0x5458 <delay+0x6>
    5458:	00 d0       	rcall	.+0      	; 0x545a <delay+0x8>
    545a:	00 d0       	rcall	.+0      	; 0x545c <delay+0xa>
    545c:	cd b7       	in	r28, 0x3d	; 61
    545e:	de b7       	in	r29, 0x3e	; 62
    5460:	6b 83       	std	Y+3, r22	; 0x03
    5462:	7c 83       	std	Y+4, r23	; 0x04
    5464:	8d 83       	std	Y+5, r24	; 0x05
    5466:	9e 83       	std	Y+6, r25	; 0x06
    5468:	0e 94 ca 29 	call	0x5394	; 0x5394 <micros>
    546c:	dc 01       	movw	r26, r24
    546e:	cb 01       	movw	r24, r22
    5470:	9a 83       	std	Y+2, r25	; 0x02
    5472:	89 83       	std	Y+1, r24	; 0x01
    5474:	20 c0       	rjmp	.+64     	; 0x54b6 <delay+0x64>
    5476:	0e 94 ca 29 	call	0x5394	; 0x5394 <micros>
    547a:	dc 01       	movw	r26, r24
    547c:	cb 01       	movw	r24, r22
    547e:	9c 01       	movw	r18, r24
    5480:	89 81       	ldd	r24, Y+1	; 0x01
    5482:	9a 81       	ldd	r25, Y+2	; 0x02
    5484:	a9 01       	movw	r20, r18
    5486:	48 1b       	sub	r20, r24
    5488:	59 0b       	sbc	r21, r25
    548a:	ca 01       	movw	r24, r20
    548c:	88 3e       	cpi	r24, 0xE8	; 232
    548e:	53 e0       	ldi	r21, 0x03	; 3
    5490:	95 07       	cpc	r25, r21
    5492:	88 f0       	brcs	.+34     	; 0x54b6 <delay+0x64>
    5494:	8b 81       	ldd	r24, Y+3	; 0x03
    5496:	9c 81       	ldd	r25, Y+4	; 0x04
    5498:	ad 81       	ldd	r26, Y+5	; 0x05
    549a:	be 81       	ldd	r27, Y+6	; 0x06
    549c:	01 97       	sbiw	r24, 0x01	; 1
    549e:	a1 09       	sbc	r26, r1
    54a0:	b1 09       	sbc	r27, r1
    54a2:	8b 83       	std	Y+3, r24	; 0x03
    54a4:	9c 83       	std	Y+4, r25	; 0x04
    54a6:	ad 83       	std	Y+5, r26	; 0x05
    54a8:	be 83       	std	Y+6, r27	; 0x06
    54aa:	89 81       	ldd	r24, Y+1	; 0x01
    54ac:	9a 81       	ldd	r25, Y+2	; 0x02
    54ae:	88 51       	subi	r24, 0x18	; 24
    54b0:	9c 4f       	sbci	r25, 0xFC	; 252
    54b2:	9a 83       	std	Y+2, r25	; 0x02
    54b4:	89 83       	std	Y+1, r24	; 0x01
    54b6:	8b 81       	ldd	r24, Y+3	; 0x03
    54b8:	9c 81       	ldd	r25, Y+4	; 0x04
    54ba:	ad 81       	ldd	r26, Y+5	; 0x05
    54bc:	be 81       	ldd	r27, Y+6	; 0x06
    54be:	00 97       	sbiw	r24, 0x00	; 0
    54c0:	a1 05       	cpc	r26, r1
    54c2:	b1 05       	cpc	r27, r1
    54c4:	c1 f6       	brne	.-80     	; 0x5476 <delay+0x24>
    54c6:	26 96       	adiw	r28, 0x06	; 6
    54c8:	0f b6       	in	r0, 0x3f	; 63
    54ca:	f8 94       	cli
    54cc:	de bf       	out	0x3e, r29	; 62
    54ce:	0f be       	out	0x3f, r0	; 63
    54d0:	cd bf       	out	0x3d, r28	; 61
    54d2:	df 91       	pop	r29
    54d4:	cf 91       	pop	r28
    54d6:	08 95       	ret

000054d8 <init>:
    54d8:	cf 93       	push	r28
    54da:	df 93       	push	r29
    54dc:	cd b7       	in	r28, 0x3d	; 61
    54de:	de b7       	in	r29, 0x3e	; 62
    54e0:	78 94       	sei
    54e2:	84 e4       	ldi	r24, 0x44	; 68
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	24 e4       	ldi	r18, 0x44	; 68
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	f9 01       	movw	r30, r18
    54ec:	20 81       	ld	r18, Z
    54ee:	22 60       	ori	r18, 0x02	; 2
    54f0:	fc 01       	movw	r30, r24
    54f2:	20 83       	st	Z, r18
    54f4:	84 e4       	ldi	r24, 0x44	; 68
    54f6:	90 e0       	ldi	r25, 0x00	; 0
    54f8:	24 e4       	ldi	r18, 0x44	; 68
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	f9 01       	movw	r30, r18
    54fe:	20 81       	ld	r18, Z
    5500:	21 60       	ori	r18, 0x01	; 1
    5502:	fc 01       	movw	r30, r24
    5504:	20 83       	st	Z, r18
    5506:	85 e4       	ldi	r24, 0x45	; 69
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	25 e4       	ldi	r18, 0x45	; 69
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	f9 01       	movw	r30, r18
    5510:	20 81       	ld	r18, Z
    5512:	22 60       	ori	r18, 0x02	; 2
    5514:	fc 01       	movw	r30, r24
    5516:	20 83       	st	Z, r18
    5518:	85 e4       	ldi	r24, 0x45	; 69
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	25 e4       	ldi	r18, 0x45	; 69
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	f9 01       	movw	r30, r18
    5522:	20 81       	ld	r18, Z
    5524:	21 60       	ori	r18, 0x01	; 1
    5526:	fc 01       	movw	r30, r24
    5528:	20 83       	st	Z, r18
    552a:	8e e6       	ldi	r24, 0x6E	; 110
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	2e e6       	ldi	r18, 0x6E	; 110
    5530:	30 e0       	ldi	r19, 0x00	; 0
    5532:	f9 01       	movw	r30, r18
    5534:	20 81       	ld	r18, Z
    5536:	21 60       	ori	r18, 0x01	; 1
    5538:	fc 01       	movw	r30, r24
    553a:	20 83       	st	Z, r18
    553c:	81 e8       	ldi	r24, 0x81	; 129
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	fc 01       	movw	r30, r24
    5542:	10 82       	st	Z, r1
    5544:	81 e8       	ldi	r24, 0x81	; 129
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	21 e8       	ldi	r18, 0x81	; 129
    554a:	30 e0       	ldi	r19, 0x00	; 0
    554c:	f9 01       	movw	r30, r18
    554e:	20 81       	ld	r18, Z
    5550:	22 60       	ori	r18, 0x02	; 2
    5552:	fc 01       	movw	r30, r24
    5554:	20 83       	st	Z, r18
    5556:	81 e8       	ldi	r24, 0x81	; 129
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	21 e8       	ldi	r18, 0x81	; 129
    555c:	30 e0       	ldi	r19, 0x00	; 0
    555e:	f9 01       	movw	r30, r18
    5560:	20 81       	ld	r18, Z
    5562:	21 60       	ori	r18, 0x01	; 1
    5564:	fc 01       	movw	r30, r24
    5566:	20 83       	st	Z, r18
    5568:	80 e8       	ldi	r24, 0x80	; 128
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	20 e8       	ldi	r18, 0x80	; 128
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	f9 01       	movw	r30, r18
    5572:	20 81       	ld	r18, Z
    5574:	21 60       	ori	r18, 0x01	; 1
    5576:	fc 01       	movw	r30, r24
    5578:	20 83       	st	Z, r18
    557a:	81 eb       	ldi	r24, 0xB1	; 177
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	21 eb       	ldi	r18, 0xB1	; 177
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	f9 01       	movw	r30, r18
    5584:	20 81       	ld	r18, Z
    5586:	24 60       	ori	r18, 0x04	; 4
    5588:	fc 01       	movw	r30, r24
    558a:	20 83       	st	Z, r18
    558c:	80 eb       	ldi	r24, 0xB0	; 176
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	20 eb       	ldi	r18, 0xB0	; 176
    5592:	30 e0       	ldi	r19, 0x00	; 0
    5594:	f9 01       	movw	r30, r18
    5596:	20 81       	ld	r18, Z
    5598:	21 60       	ori	r18, 0x01	; 1
    559a:	fc 01       	movw	r30, r24
    559c:	20 83       	st	Z, r18
    559e:	8a e7       	ldi	r24, 0x7A	; 122
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	2a e7       	ldi	r18, 0x7A	; 122
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	f9 01       	movw	r30, r18
    55a8:	20 81       	ld	r18, Z
    55aa:	24 60       	ori	r18, 0x04	; 4
    55ac:	fc 01       	movw	r30, r24
    55ae:	20 83       	st	Z, r18
    55b0:	8a e7       	ldi	r24, 0x7A	; 122
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	2a e7       	ldi	r18, 0x7A	; 122
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	f9 01       	movw	r30, r18
    55ba:	20 81       	ld	r18, Z
    55bc:	22 60       	ori	r18, 0x02	; 2
    55be:	fc 01       	movw	r30, r24
    55c0:	20 83       	st	Z, r18
    55c2:	8a e7       	ldi	r24, 0x7A	; 122
    55c4:	90 e0       	ldi	r25, 0x00	; 0
    55c6:	2a e7       	ldi	r18, 0x7A	; 122
    55c8:	30 e0       	ldi	r19, 0x00	; 0
    55ca:	f9 01       	movw	r30, r18
    55cc:	20 81       	ld	r18, Z
    55ce:	21 60       	ori	r18, 0x01	; 1
    55d0:	fc 01       	movw	r30, r24
    55d2:	20 83       	st	Z, r18
    55d4:	8a e7       	ldi	r24, 0x7A	; 122
    55d6:	90 e0       	ldi	r25, 0x00	; 0
    55d8:	2a e7       	ldi	r18, 0x7A	; 122
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	f9 01       	movw	r30, r18
    55de:	20 81       	ld	r18, Z
    55e0:	20 68       	ori	r18, 0x80	; 128
    55e2:	fc 01       	movw	r30, r24
    55e4:	20 83       	st	Z, r18
    55e6:	81 ec       	ldi	r24, 0xC1	; 193
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	fc 01       	movw	r30, r24
    55ec:	10 82       	st	Z, r1
    55ee:	df 91       	pop	r29
    55f0:	cf 91       	pop	r28
    55f2:	08 95       	ret

000055f4 <pinMode>:
    55f4:	cf 93       	push	r28
    55f6:	df 93       	push	r29
    55f8:	cd b7       	in	r28, 0x3d	; 61
    55fa:	de b7       	in	r29, 0x3e	; 62
    55fc:	69 97       	sbiw	r28, 0x19	; 25
    55fe:	0f b6       	in	r0, 0x3f	; 63
    5600:	f8 94       	cli
    5602:	de bf       	out	0x3e, r29	; 62
    5604:	0f be       	out	0x3f, r0	; 63
    5606:	cd bf       	out	0x3d, r28	; 61
    5608:	88 8f       	std	Y+24, r24	; 0x18
    560a:	69 8f       	std	Y+25, r22	; 0x19
    560c:	88 8d       	ldd	r24, Y+24	; 0x18
    560e:	88 2f       	mov	r24, r24
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	83 52       	subi	r24, 0x23	; 35
    5614:	9b 4e       	sbci	r25, 0xEB	; 235
    5616:	9a 83       	std	Y+2, r25	; 0x02
    5618:	89 83       	std	Y+1, r24	; 0x01
    561a:	89 81       	ldd	r24, Y+1	; 0x01
    561c:	9a 81       	ldd	r25, Y+2	; 0x02
    561e:	fc 01       	movw	r30, r24
    5620:	84 91       	lpm	r24, Z
    5622:	8b 83       	std	Y+3, r24	; 0x03
    5624:	8b 81       	ldd	r24, Y+3	; 0x03
    5626:	8c 83       	std	Y+4, r24	; 0x04
    5628:	88 8d       	ldd	r24, Y+24	; 0x18
    562a:	88 2f       	mov	r24, r24
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	87 53       	subi	r24, 0x37	; 55
    5630:	9b 4e       	sbci	r25, 0xEB	; 235
    5632:	9e 83       	std	Y+6, r25	; 0x06
    5634:	8d 83       	std	Y+5, r24	; 0x05
    5636:	8d 81       	ldd	r24, Y+5	; 0x05
    5638:	9e 81       	ldd	r25, Y+6	; 0x06
    563a:	fc 01       	movw	r30, r24
    563c:	84 91       	lpm	r24, Z
    563e:	8f 83       	std	Y+7, r24	; 0x07
    5640:	8f 81       	ldd	r24, Y+7	; 0x07
    5642:	88 87       	std	Y+8, r24	; 0x08
    5644:	88 85       	ldd	r24, Y+8	; 0x08
    5646:	88 23       	and	r24, r24
    5648:	09 f4       	brne	.+2      	; 0x564c <pinMode+0x58>
    564a:	94 c0       	rjmp	.+296    	; 0x5774 <pinMode+0x180>
    564c:	88 85       	ldd	r24, Y+8	; 0x08
    564e:	88 2f       	mov	r24, r24
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	88 0f       	add	r24, r24
    5654:	99 1f       	adc	r25, r25
    5656:	8b 54       	subi	r24, 0x4B	; 75
    5658:	9b 4e       	sbci	r25, 0xEB	; 235
    565a:	9a 87       	std	Y+10, r25	; 0x0a
    565c:	89 87       	std	Y+9, r24	; 0x09
    565e:	89 85       	ldd	r24, Y+9	; 0x09
    5660:	9a 85       	ldd	r25, Y+10	; 0x0a
    5662:	fc 01       	movw	r30, r24
    5664:	25 91       	lpm	r18, Z+
    5666:	34 91       	lpm	r19, Z
    5668:	cf 01       	movw	r24, r30
    566a:	3c 87       	std	Y+12, r19	; 0x0c
    566c:	2b 87       	std	Y+11, r18	; 0x0b
    566e:	9a 87       	std	Y+10, r25	; 0x0a
    5670:	89 87       	std	Y+9, r24	; 0x09
    5672:	8b 85       	ldd	r24, Y+11	; 0x0b
    5674:	9c 85       	ldd	r25, Y+12	; 0x0c
    5676:	9e 87       	std	Y+14, r25	; 0x0e
    5678:	8d 87       	std	Y+13, r24	; 0x0d
    567a:	88 85       	ldd	r24, Y+8	; 0x08
    567c:	88 2f       	mov	r24, r24
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	88 0f       	add	r24, r24
    5682:	99 1f       	adc	r25, r25
    5684:	81 54       	subi	r24, 0x41	; 65
    5686:	9b 4e       	sbci	r25, 0xEB	; 235
    5688:	98 8b       	std	Y+16, r25	; 0x10
    568a:	8f 87       	std	Y+15, r24	; 0x0f
    568c:	8f 85       	ldd	r24, Y+15	; 0x0f
    568e:	98 89       	ldd	r25, Y+16	; 0x10
    5690:	fc 01       	movw	r30, r24
    5692:	25 91       	lpm	r18, Z+
    5694:	34 91       	lpm	r19, Z
    5696:	cf 01       	movw	r24, r30
    5698:	3a 8b       	std	Y+18, r19	; 0x12
    569a:	29 8b       	std	Y+17, r18	; 0x11
    569c:	98 8b       	std	Y+16, r25	; 0x10
    569e:	8f 87       	std	Y+15, r24	; 0x0f
    56a0:	89 89       	ldd	r24, Y+17	; 0x11
    56a2:	9a 89       	ldd	r25, Y+18	; 0x12
    56a4:	9c 8b       	std	Y+20, r25	; 0x14
    56a6:	8b 8b       	std	Y+19, r24	; 0x13
    56a8:	89 8d       	ldd	r24, Y+25	; 0x19
    56aa:	88 23       	and	r24, r24
    56ac:	31 f5       	brne	.+76     	; 0x56fa <pinMode+0x106>
    56ae:	8f e5       	ldi	r24, 0x5F	; 95
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	fc 01       	movw	r30, r24
    56b4:	80 81       	ld	r24, Z
    56b6:	8d 8b       	std	Y+21, r24	; 0x15
    56b8:	f8 94       	cli
    56ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    56bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    56be:	fc 01       	movw	r30, r24
    56c0:	80 81       	ld	r24, Z
    56c2:	98 2f       	mov	r25, r24
    56c4:	8c 81       	ldd	r24, Y+4	; 0x04
    56c6:	80 95       	com	r24
    56c8:	89 23       	and	r24, r25
    56ca:	28 2f       	mov	r18, r24
    56cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    56ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    56d0:	fc 01       	movw	r30, r24
    56d2:	20 83       	st	Z, r18
    56d4:	8b 89       	ldd	r24, Y+19	; 0x13
    56d6:	9c 89       	ldd	r25, Y+20	; 0x14
    56d8:	fc 01       	movw	r30, r24
    56da:	80 81       	ld	r24, Z
    56dc:	98 2f       	mov	r25, r24
    56de:	8c 81       	ldd	r24, Y+4	; 0x04
    56e0:	80 95       	com	r24
    56e2:	89 23       	and	r24, r25
    56e4:	28 2f       	mov	r18, r24
    56e6:	8b 89       	ldd	r24, Y+19	; 0x13
    56e8:	9c 89       	ldd	r25, Y+20	; 0x14
    56ea:	fc 01       	movw	r30, r24
    56ec:	20 83       	st	Z, r18
    56ee:	8f e5       	ldi	r24, 0x5F	; 95
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	2d 89       	ldd	r18, Y+21	; 0x15
    56f4:	fc 01       	movw	r30, r24
    56f6:	20 83       	st	Z, r18
    56f8:	3d c0       	rjmp	.+122    	; 0x5774 <pinMode+0x180>
    56fa:	89 8d       	ldd	r24, Y+25	; 0x19
    56fc:	82 30       	cpi	r24, 0x02	; 2
    56fe:	21 f5       	brne	.+72     	; 0x5748 <pinMode+0x154>
    5700:	8f e5       	ldi	r24, 0x5F	; 95
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	fc 01       	movw	r30, r24
    5706:	80 81       	ld	r24, Z
    5708:	8e 8b       	std	Y+22, r24	; 0x16
    570a:	f8 94       	cli
    570c:	8d 85       	ldd	r24, Y+13	; 0x0d
    570e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5710:	fc 01       	movw	r30, r24
    5712:	80 81       	ld	r24, Z
    5714:	98 2f       	mov	r25, r24
    5716:	8c 81       	ldd	r24, Y+4	; 0x04
    5718:	80 95       	com	r24
    571a:	89 23       	and	r24, r25
    571c:	28 2f       	mov	r18, r24
    571e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5720:	9e 85       	ldd	r25, Y+14	; 0x0e
    5722:	fc 01       	movw	r30, r24
    5724:	20 83       	st	Z, r18
    5726:	8b 89       	ldd	r24, Y+19	; 0x13
    5728:	9c 89       	ldd	r25, Y+20	; 0x14
    572a:	fc 01       	movw	r30, r24
    572c:	90 81       	ld	r25, Z
    572e:	8c 81       	ldd	r24, Y+4	; 0x04
    5730:	29 2f       	mov	r18, r25
    5732:	28 2b       	or	r18, r24
    5734:	8b 89       	ldd	r24, Y+19	; 0x13
    5736:	9c 89       	ldd	r25, Y+20	; 0x14
    5738:	fc 01       	movw	r30, r24
    573a:	20 83       	st	Z, r18
    573c:	8f e5       	ldi	r24, 0x5F	; 95
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	2e 89       	ldd	r18, Y+22	; 0x16
    5742:	fc 01       	movw	r30, r24
    5744:	20 83       	st	Z, r18
    5746:	16 c0       	rjmp	.+44     	; 0x5774 <pinMode+0x180>
    5748:	8f e5       	ldi	r24, 0x5F	; 95
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	fc 01       	movw	r30, r24
    574e:	80 81       	ld	r24, Z
    5750:	8f 8b       	std	Y+23, r24	; 0x17
    5752:	f8 94       	cli
    5754:	8d 85       	ldd	r24, Y+13	; 0x0d
    5756:	9e 85       	ldd	r25, Y+14	; 0x0e
    5758:	fc 01       	movw	r30, r24
    575a:	90 81       	ld	r25, Z
    575c:	8c 81       	ldd	r24, Y+4	; 0x04
    575e:	29 2f       	mov	r18, r25
    5760:	28 2b       	or	r18, r24
    5762:	8d 85       	ldd	r24, Y+13	; 0x0d
    5764:	9e 85       	ldd	r25, Y+14	; 0x0e
    5766:	fc 01       	movw	r30, r24
    5768:	20 83       	st	Z, r18
    576a:	8f e5       	ldi	r24, 0x5F	; 95
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	2f 89       	ldd	r18, Y+23	; 0x17
    5770:	fc 01       	movw	r30, r24
    5772:	20 83       	st	Z, r18
    5774:	69 96       	adiw	r28, 0x19	; 25
    5776:	0f b6       	in	r0, 0x3f	; 63
    5778:	f8 94       	cli
    577a:	de bf       	out	0x3e, r29	; 62
    577c:	0f be       	out	0x3f, r0	; 63
    577e:	cd bf       	out	0x3d, r28	; 61
    5780:	df 91       	pop	r29
    5782:	cf 91       	pop	r28
    5784:	08 95       	ret

00005786 <turnOffPWM>:
    5786:	cf 93       	push	r28
    5788:	df 93       	push	r29
    578a:	1f 92       	push	r1
    578c:	cd b7       	in	r28, 0x3d	; 61
    578e:	de b7       	in	r29, 0x3e	; 62
    5790:	89 83       	std	Y+1, r24	; 0x01
    5792:	89 81       	ldd	r24, Y+1	; 0x01
    5794:	88 2f       	mov	r24, r24
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	83 30       	cpi	r24, 0x03	; 3
    579a:	91 05       	cpc	r25, r1
    579c:	a1 f0       	breq	.+40     	; 0x57c6 <turnOffPWM+0x40>
    579e:	84 30       	cpi	r24, 0x04	; 4
    57a0:	91 05       	cpc	r25, r1
    57a2:	3c f4       	brge	.+14     	; 0x57b2 <turnOffPWM+0x2c>
    57a4:	81 30       	cpi	r24, 0x01	; 1
    57a6:	91 05       	cpc	r25, r1
    57a8:	11 f1       	breq	.+68     	; 0x57ee <turnOffPWM+0x68>
    57aa:	82 30       	cpi	r24, 0x02	; 2
    57ac:	91 05       	cpc	r25, r1
    57ae:	49 f1       	breq	.+82     	; 0x5802 <turnOffPWM+0x7c>
    57b0:	46 c0       	rjmp	.+140    	; 0x583e <turnOffPWM+0xb8>
    57b2:	86 30       	cpi	r24, 0x06	; 6
    57b4:	91 05       	cpc	r25, r1
    57b6:	79 f1       	breq	.+94     	; 0x5816 <turnOffPWM+0x90>
    57b8:	87 30       	cpi	r24, 0x07	; 7
    57ba:	91 05       	cpc	r25, r1
    57bc:	b1 f1       	breq	.+108    	; 0x582a <turnOffPWM+0xa4>
    57be:	84 30       	cpi	r24, 0x04	; 4
    57c0:	91 05       	cpc	r25, r1
    57c2:	59 f0       	breq	.+22     	; 0x57da <turnOffPWM+0x54>
    57c4:	3c c0       	rjmp	.+120    	; 0x583e <turnOffPWM+0xb8>
    57c6:	80 e8       	ldi	r24, 0x80	; 128
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	20 e8       	ldi	r18, 0x80	; 128
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	f9 01       	movw	r30, r18
    57d0:	20 81       	ld	r18, Z
    57d2:	2f 77       	andi	r18, 0x7F	; 127
    57d4:	fc 01       	movw	r30, r24
    57d6:	20 83       	st	Z, r18
    57d8:	32 c0       	rjmp	.+100    	; 0x583e <turnOffPWM+0xb8>
    57da:	80 e8       	ldi	r24, 0x80	; 128
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	20 e8       	ldi	r18, 0x80	; 128
    57e0:	30 e0       	ldi	r19, 0x00	; 0
    57e2:	f9 01       	movw	r30, r18
    57e4:	20 81       	ld	r18, Z
    57e6:	2f 7d       	andi	r18, 0xDF	; 223
    57e8:	fc 01       	movw	r30, r24
    57ea:	20 83       	st	Z, r18
    57ec:	28 c0       	rjmp	.+80     	; 0x583e <turnOffPWM+0xb8>
    57ee:	84 e4       	ldi	r24, 0x44	; 68
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	24 e4       	ldi	r18, 0x44	; 68
    57f4:	30 e0       	ldi	r19, 0x00	; 0
    57f6:	f9 01       	movw	r30, r18
    57f8:	20 81       	ld	r18, Z
    57fa:	2f 77       	andi	r18, 0x7F	; 127
    57fc:	fc 01       	movw	r30, r24
    57fe:	20 83       	st	Z, r18
    5800:	1e c0       	rjmp	.+60     	; 0x583e <turnOffPWM+0xb8>
    5802:	84 e4       	ldi	r24, 0x44	; 68
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	24 e4       	ldi	r18, 0x44	; 68
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	f9 01       	movw	r30, r18
    580c:	20 81       	ld	r18, Z
    580e:	2f 7d       	andi	r18, 0xDF	; 223
    5810:	fc 01       	movw	r30, r24
    5812:	20 83       	st	Z, r18
    5814:	14 c0       	rjmp	.+40     	; 0x583e <turnOffPWM+0xb8>
    5816:	80 eb       	ldi	r24, 0xB0	; 176
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	20 eb       	ldi	r18, 0xB0	; 176
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	f9 01       	movw	r30, r18
    5820:	20 81       	ld	r18, Z
    5822:	2f 77       	andi	r18, 0x7F	; 127
    5824:	fc 01       	movw	r30, r24
    5826:	20 83       	st	Z, r18
    5828:	0a c0       	rjmp	.+20     	; 0x583e <turnOffPWM+0xb8>
    582a:	80 eb       	ldi	r24, 0xB0	; 176
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	20 eb       	ldi	r18, 0xB0	; 176
    5830:	30 e0       	ldi	r19, 0x00	; 0
    5832:	f9 01       	movw	r30, r18
    5834:	20 81       	ld	r18, Z
    5836:	2f 7d       	andi	r18, 0xDF	; 223
    5838:	fc 01       	movw	r30, r24
    583a:	20 83       	st	Z, r18
    583c:	00 00       	nop
    583e:	0f 90       	pop	r0
    5840:	df 91       	pop	r29
    5842:	cf 91       	pop	r28
    5844:	08 95       	ret

00005846 <digitalWrite>:
    5846:	cf 93       	push	r28
    5848:	df 93       	push	r29
    584a:	cd b7       	in	r28, 0x3d	; 61
    584c:	de b7       	in	r29, 0x3e	; 62
    584e:	65 97       	sbiw	r28, 0x15	; 21
    5850:	0f b6       	in	r0, 0x3f	; 63
    5852:	f8 94       	cli
    5854:	de bf       	out	0x3e, r29	; 62
    5856:	0f be       	out	0x3f, r0	; 63
    5858:	cd bf       	out	0x3d, r28	; 61
    585a:	8c 8b       	std	Y+20, r24	; 0x14
    585c:	6d 8b       	std	Y+21, r22	; 0x15
    585e:	8c 89       	ldd	r24, Y+20	; 0x14
    5860:	88 2f       	mov	r24, r24
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	8f 50       	subi	r24, 0x0F	; 15
    5866:	9b 4e       	sbci	r25, 0xEB	; 235
    5868:	9a 83       	std	Y+2, r25	; 0x02
    586a:	89 83       	std	Y+1, r24	; 0x01
    586c:	89 81       	ldd	r24, Y+1	; 0x01
    586e:	9a 81       	ldd	r25, Y+2	; 0x02
    5870:	fc 01       	movw	r30, r24
    5872:	84 91       	lpm	r24, Z
    5874:	8b 83       	std	Y+3, r24	; 0x03
    5876:	8b 81       	ldd	r24, Y+3	; 0x03
    5878:	8c 83       	std	Y+4, r24	; 0x04
    587a:	8c 89       	ldd	r24, Y+20	; 0x14
    587c:	88 2f       	mov	r24, r24
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	83 52       	subi	r24, 0x23	; 35
    5882:	9b 4e       	sbci	r25, 0xEB	; 235
    5884:	9e 83       	std	Y+6, r25	; 0x06
    5886:	8d 83       	std	Y+5, r24	; 0x05
    5888:	8d 81       	ldd	r24, Y+5	; 0x05
    588a:	9e 81       	ldd	r25, Y+6	; 0x06
    588c:	fc 01       	movw	r30, r24
    588e:	84 91       	lpm	r24, Z
    5890:	8f 83       	std	Y+7, r24	; 0x07
    5892:	8f 81       	ldd	r24, Y+7	; 0x07
    5894:	88 87       	std	Y+8, r24	; 0x08
    5896:	8c 89       	ldd	r24, Y+20	; 0x14
    5898:	88 2f       	mov	r24, r24
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	87 53       	subi	r24, 0x37	; 55
    589e:	9b 4e       	sbci	r25, 0xEB	; 235
    58a0:	9a 87       	std	Y+10, r25	; 0x0a
    58a2:	89 87       	std	Y+9, r24	; 0x09
    58a4:	89 85       	ldd	r24, Y+9	; 0x09
    58a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    58a8:	fc 01       	movw	r30, r24
    58aa:	84 91       	lpm	r24, Z
    58ac:	8b 87       	std	Y+11, r24	; 0x0b
    58ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    58b0:	8c 87       	std	Y+12, r24	; 0x0c
    58b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    58b4:	88 23       	and	r24, r24
    58b6:	09 f4       	brne	.+2      	; 0x58ba <digitalWrite+0x74>
    58b8:	44 c0       	rjmp	.+136    	; 0x5942 <digitalWrite+0xfc>
    58ba:	8c 81       	ldd	r24, Y+4	; 0x04
    58bc:	88 23       	and	r24, r24
    58be:	19 f0       	breq	.+6      	; 0x58c6 <digitalWrite+0x80>
    58c0:	8c 81       	ldd	r24, Y+4	; 0x04
    58c2:	0e 94 c3 2b 	call	0x5786	; 0x5786 <turnOffPWM>
    58c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    58c8:	88 2f       	mov	r24, r24
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	88 0f       	add	r24, r24
    58ce:	99 1f       	adc	r25, r25
    58d0:	81 54       	subi	r24, 0x41	; 65
    58d2:	9b 4e       	sbci	r25, 0xEB	; 235
    58d4:	9e 87       	std	Y+14, r25	; 0x0e
    58d6:	8d 87       	std	Y+13, r24	; 0x0d
    58d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    58da:	9e 85       	ldd	r25, Y+14	; 0x0e
    58dc:	fc 01       	movw	r30, r24
    58de:	25 91       	lpm	r18, Z+
    58e0:	34 91       	lpm	r19, Z
    58e2:	cf 01       	movw	r24, r30
    58e4:	38 8b       	std	Y+16, r19	; 0x10
    58e6:	2f 87       	std	Y+15, r18	; 0x0f
    58e8:	9e 87       	std	Y+14, r25	; 0x0e
    58ea:	8d 87       	std	Y+13, r24	; 0x0d
    58ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    58ee:	98 89       	ldd	r25, Y+16	; 0x10
    58f0:	9a 8b       	std	Y+18, r25	; 0x12
    58f2:	89 8b       	std	Y+17, r24	; 0x11
    58f4:	8f e5       	ldi	r24, 0x5F	; 95
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	fc 01       	movw	r30, r24
    58fa:	80 81       	ld	r24, Z
    58fc:	8b 8b       	std	Y+19, r24	; 0x13
    58fe:	f8 94       	cli
    5900:	8d 89       	ldd	r24, Y+21	; 0x15
    5902:	88 23       	and	r24, r24
    5904:	71 f4       	brne	.+28     	; 0x5922 <digitalWrite+0xdc>
    5906:	89 89       	ldd	r24, Y+17	; 0x11
    5908:	9a 89       	ldd	r25, Y+18	; 0x12
    590a:	fc 01       	movw	r30, r24
    590c:	80 81       	ld	r24, Z
    590e:	98 2f       	mov	r25, r24
    5910:	88 85       	ldd	r24, Y+8	; 0x08
    5912:	80 95       	com	r24
    5914:	89 23       	and	r24, r25
    5916:	28 2f       	mov	r18, r24
    5918:	89 89       	ldd	r24, Y+17	; 0x11
    591a:	9a 89       	ldd	r25, Y+18	; 0x12
    591c:	fc 01       	movw	r30, r24
    591e:	20 83       	st	Z, r18
    5920:	0b c0       	rjmp	.+22     	; 0x5938 <digitalWrite+0xf2>
    5922:	89 89       	ldd	r24, Y+17	; 0x11
    5924:	9a 89       	ldd	r25, Y+18	; 0x12
    5926:	fc 01       	movw	r30, r24
    5928:	90 81       	ld	r25, Z
    592a:	88 85       	ldd	r24, Y+8	; 0x08
    592c:	29 2f       	mov	r18, r25
    592e:	28 2b       	or	r18, r24
    5930:	89 89       	ldd	r24, Y+17	; 0x11
    5932:	9a 89       	ldd	r25, Y+18	; 0x12
    5934:	fc 01       	movw	r30, r24
    5936:	20 83       	st	Z, r18
    5938:	8f e5       	ldi	r24, 0x5F	; 95
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	2b 89       	ldd	r18, Y+19	; 0x13
    593e:	fc 01       	movw	r30, r24
    5940:	20 83       	st	Z, r18
    5942:	65 96       	adiw	r28, 0x15	; 21
    5944:	0f b6       	in	r0, 0x3f	; 63
    5946:	f8 94       	cli
    5948:	de bf       	out	0x3e, r29	; 62
    594a:	0f be       	out	0x3f, r0	; 63
    594c:	cd bf       	out	0x3d, r28	; 61
    594e:	df 91       	pop	r29
    5950:	cf 91       	pop	r28
    5952:	08 95       	ret

00005954 <__cmpsf2>:
    5954:	03 d0       	rcall	.+6      	; 0x595c <__fp_cmp>
    5956:	08 f4       	brcc	.+2      	; 0x595a <__cmpsf2+0x6>
    5958:	81 e0       	ldi	r24, 0x01	; 1
    595a:	08 95       	ret

0000595c <__fp_cmp>:
    595c:	99 0f       	add	r25, r25
    595e:	00 08       	sbc	r0, r0
    5960:	55 0f       	add	r21, r21
    5962:	aa 0b       	sbc	r26, r26
    5964:	e0 e8       	ldi	r30, 0x80	; 128
    5966:	fe ef       	ldi	r31, 0xFE	; 254
    5968:	16 16       	cp	r1, r22
    596a:	17 06       	cpc	r1, r23
    596c:	e8 07       	cpc	r30, r24
    596e:	f9 07       	cpc	r31, r25
    5970:	c0 f0       	brcs	.+48     	; 0x59a2 <__fp_cmp+0x46>
    5972:	12 16       	cp	r1, r18
    5974:	13 06       	cpc	r1, r19
    5976:	e4 07       	cpc	r30, r20
    5978:	f5 07       	cpc	r31, r21
    597a:	98 f0       	brcs	.+38     	; 0x59a2 <__fp_cmp+0x46>
    597c:	62 1b       	sub	r22, r18
    597e:	73 0b       	sbc	r23, r19
    5980:	84 0b       	sbc	r24, r20
    5982:	95 0b       	sbc	r25, r21
    5984:	39 f4       	brne	.+14     	; 0x5994 <__fp_cmp+0x38>
    5986:	0a 26       	eor	r0, r26
    5988:	61 f0       	breq	.+24     	; 0x59a2 <__fp_cmp+0x46>
    598a:	23 2b       	or	r18, r19
    598c:	24 2b       	or	r18, r20
    598e:	25 2b       	or	r18, r21
    5990:	21 f4       	brne	.+8      	; 0x599a <__fp_cmp+0x3e>
    5992:	08 95       	ret
    5994:	0a 26       	eor	r0, r26
    5996:	09 f4       	brne	.+2      	; 0x599a <__fp_cmp+0x3e>
    5998:	a1 40       	sbci	r26, 0x01	; 1
    599a:	a6 95       	lsr	r26
    599c:	8f ef       	ldi	r24, 0xFF	; 255
    599e:	81 1d       	adc	r24, r1
    59a0:	81 1d       	adc	r24, r1
    59a2:	08 95       	ret

000059a4 <__gesf2>:
    59a4:	db df       	rcall	.-74     	; 0x595c <__fp_cmp>
    59a6:	08 f4       	brcc	.+2      	; 0x59aa <__gesf2+0x6>
    59a8:	8f ef       	ldi	r24, 0xFF	; 255
    59aa:	08 95       	ret

000059ac <__unordsf2>:
    59ac:	d7 df       	rcall	.-82     	; 0x595c <__fp_cmp>
    59ae:	88 0b       	sbc	r24, r24
    59b0:	99 0b       	sbc	r25, r25
    59b2:	08 95       	ret

000059b4 <__udivmodsi4>:
    59b4:	a1 e2       	ldi	r26, 0x21	; 33
    59b6:	1a 2e       	mov	r1, r26
    59b8:	aa 1b       	sub	r26, r26
    59ba:	bb 1b       	sub	r27, r27
    59bc:	fd 01       	movw	r30, r26
    59be:	0d c0       	rjmp	.+26     	; 0x59da <__udivmodsi4_ep>

000059c0 <__udivmodsi4_loop>:
    59c0:	aa 1f       	adc	r26, r26
    59c2:	bb 1f       	adc	r27, r27
    59c4:	ee 1f       	adc	r30, r30
    59c6:	ff 1f       	adc	r31, r31
    59c8:	a2 17       	cp	r26, r18
    59ca:	b3 07       	cpc	r27, r19
    59cc:	e4 07       	cpc	r30, r20
    59ce:	f5 07       	cpc	r31, r21
    59d0:	20 f0       	brcs	.+8      	; 0x59da <__udivmodsi4_ep>
    59d2:	a2 1b       	sub	r26, r18
    59d4:	b3 0b       	sbc	r27, r19
    59d6:	e4 0b       	sbc	r30, r20
    59d8:	f5 0b       	sbc	r31, r21

000059da <__udivmodsi4_ep>:
    59da:	66 1f       	adc	r22, r22
    59dc:	77 1f       	adc	r23, r23
    59de:	88 1f       	adc	r24, r24
    59e0:	99 1f       	adc	r25, r25
    59e2:	1a 94       	dec	r1
    59e4:	69 f7       	brne	.-38     	; 0x59c0 <__udivmodsi4_loop>
    59e6:	60 95       	com	r22
    59e8:	70 95       	com	r23
    59ea:	80 95       	com	r24
    59ec:	90 95       	com	r25
    59ee:	9b 01       	movw	r18, r22
    59f0:	ac 01       	movw	r20, r24
    59f2:	bd 01       	movw	r22, r26
    59f4:	cf 01       	movw	r24, r30
    59f6:	08 95       	ret

000059f8 <__tablejump2__>:
    59f8:	ee 0f       	add	r30, r30
    59fa:	ff 1f       	adc	r31, r31

000059fc <__tablejump__>:
    59fc:	05 90       	lpm	r0, Z+
    59fe:	f4 91       	lpm	r31, Z
    5a00:	e0 2d       	mov	r30, r0
    5a02:	09 94       	ijmp

00005a04 <malloc>:
    5a04:	cf 93       	push	r28
    5a06:	df 93       	push	r29
    5a08:	82 30       	cpi	r24, 0x02	; 2
    5a0a:	91 05       	cpc	r25, r1
    5a0c:	10 f4       	brcc	.+4      	; 0x5a12 <malloc+0xe>
    5a0e:	82 e0       	ldi	r24, 0x02	; 2
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	e0 91 5f 03 	lds	r30, 0x035F
    5a16:	f0 91 60 03 	lds	r31, 0x0360
    5a1a:	20 e0       	ldi	r18, 0x00	; 0
    5a1c:	30 e0       	ldi	r19, 0x00	; 0
    5a1e:	a0 e0       	ldi	r26, 0x00	; 0
    5a20:	b0 e0       	ldi	r27, 0x00	; 0
    5a22:	30 97       	sbiw	r30, 0x00	; 0
    5a24:	39 f1       	breq	.+78     	; 0x5a74 <malloc+0x70>
    5a26:	40 81       	ld	r20, Z
    5a28:	51 81       	ldd	r21, Z+1	; 0x01
    5a2a:	48 17       	cp	r20, r24
    5a2c:	59 07       	cpc	r21, r25
    5a2e:	b8 f0       	brcs	.+46     	; 0x5a5e <malloc+0x5a>
    5a30:	48 17       	cp	r20, r24
    5a32:	59 07       	cpc	r21, r25
    5a34:	71 f4       	brne	.+28     	; 0x5a52 <malloc+0x4e>
    5a36:	82 81       	ldd	r24, Z+2	; 0x02
    5a38:	93 81       	ldd	r25, Z+3	; 0x03
    5a3a:	10 97       	sbiw	r26, 0x00	; 0
    5a3c:	29 f0       	breq	.+10     	; 0x5a48 <malloc+0x44>
    5a3e:	13 96       	adiw	r26, 0x03	; 3
    5a40:	9c 93       	st	X, r25
    5a42:	8e 93       	st	-X, r24
    5a44:	12 97       	sbiw	r26, 0x02	; 2
    5a46:	2c c0       	rjmp	.+88     	; 0x5aa0 <malloc+0x9c>
    5a48:	90 93 60 03 	sts	0x0360, r25
    5a4c:	80 93 5f 03 	sts	0x035F, r24
    5a50:	27 c0       	rjmp	.+78     	; 0x5aa0 <malloc+0x9c>
    5a52:	21 15       	cp	r18, r1
    5a54:	31 05       	cpc	r19, r1
    5a56:	31 f0       	breq	.+12     	; 0x5a64 <malloc+0x60>
    5a58:	42 17       	cp	r20, r18
    5a5a:	53 07       	cpc	r21, r19
    5a5c:	18 f0       	brcs	.+6      	; 0x5a64 <malloc+0x60>
    5a5e:	a9 01       	movw	r20, r18
    5a60:	db 01       	movw	r26, r22
    5a62:	01 c0       	rjmp	.+2      	; 0x5a66 <malloc+0x62>
    5a64:	ef 01       	movw	r28, r30
    5a66:	9a 01       	movw	r18, r20
    5a68:	bd 01       	movw	r22, r26
    5a6a:	df 01       	movw	r26, r30
    5a6c:	02 80       	ldd	r0, Z+2	; 0x02
    5a6e:	f3 81       	ldd	r31, Z+3	; 0x03
    5a70:	e0 2d       	mov	r30, r0
    5a72:	d7 cf       	rjmp	.-82     	; 0x5a22 <malloc+0x1e>
    5a74:	21 15       	cp	r18, r1
    5a76:	31 05       	cpc	r19, r1
    5a78:	f9 f0       	breq	.+62     	; 0x5ab8 <malloc+0xb4>
    5a7a:	28 1b       	sub	r18, r24
    5a7c:	39 0b       	sbc	r19, r25
    5a7e:	24 30       	cpi	r18, 0x04	; 4
    5a80:	31 05       	cpc	r19, r1
    5a82:	80 f4       	brcc	.+32     	; 0x5aa4 <malloc+0xa0>
    5a84:	8a 81       	ldd	r24, Y+2	; 0x02
    5a86:	9b 81       	ldd	r25, Y+3	; 0x03
    5a88:	61 15       	cp	r22, r1
    5a8a:	71 05       	cpc	r23, r1
    5a8c:	21 f0       	breq	.+8      	; 0x5a96 <malloc+0x92>
    5a8e:	fb 01       	movw	r30, r22
    5a90:	93 83       	std	Z+3, r25	; 0x03
    5a92:	82 83       	std	Z+2, r24	; 0x02
    5a94:	04 c0       	rjmp	.+8      	; 0x5a9e <malloc+0x9a>
    5a96:	90 93 60 03 	sts	0x0360, r25
    5a9a:	80 93 5f 03 	sts	0x035F, r24
    5a9e:	fe 01       	movw	r30, r28
    5aa0:	32 96       	adiw	r30, 0x02	; 2
    5aa2:	44 c0       	rjmp	.+136    	; 0x5b2c <malloc+0x128>
    5aa4:	fe 01       	movw	r30, r28
    5aa6:	e2 0f       	add	r30, r18
    5aa8:	f3 1f       	adc	r31, r19
    5aaa:	81 93       	st	Z+, r24
    5aac:	91 93       	st	Z+, r25
    5aae:	22 50       	subi	r18, 0x02	; 2
    5ab0:	31 09       	sbc	r19, r1
    5ab2:	39 83       	std	Y+1, r19	; 0x01
    5ab4:	28 83       	st	Y, r18
    5ab6:	3a c0       	rjmp	.+116    	; 0x5b2c <malloc+0x128>
    5ab8:	20 91 5d 03 	lds	r18, 0x035D
    5abc:	30 91 5e 03 	lds	r19, 0x035E
    5ac0:	23 2b       	or	r18, r19
    5ac2:	41 f4       	brne	.+16     	; 0x5ad4 <malloc+0xd0>
    5ac4:	20 91 02 01 	lds	r18, 0x0102
    5ac8:	30 91 03 01 	lds	r19, 0x0103
    5acc:	30 93 5e 03 	sts	0x035E, r19
    5ad0:	20 93 5d 03 	sts	0x035D, r18
    5ad4:	20 91 00 01 	lds	r18, 0x0100
    5ad8:	30 91 01 01 	lds	r19, 0x0101
    5adc:	21 15       	cp	r18, r1
    5ade:	31 05       	cpc	r19, r1
    5ae0:	41 f4       	brne	.+16     	; 0x5af2 <malloc+0xee>
    5ae2:	2d b7       	in	r18, 0x3d	; 61
    5ae4:	3e b7       	in	r19, 0x3e	; 62
    5ae6:	40 91 04 01 	lds	r20, 0x0104
    5aea:	50 91 05 01 	lds	r21, 0x0105
    5aee:	24 1b       	sub	r18, r20
    5af0:	35 0b       	sbc	r19, r21
    5af2:	e0 91 5d 03 	lds	r30, 0x035D
    5af6:	f0 91 5e 03 	lds	r31, 0x035E
    5afa:	e2 17       	cp	r30, r18
    5afc:	f3 07       	cpc	r31, r19
    5afe:	a0 f4       	brcc	.+40     	; 0x5b28 <malloc+0x124>
    5b00:	2e 1b       	sub	r18, r30
    5b02:	3f 0b       	sbc	r19, r31
    5b04:	28 17       	cp	r18, r24
    5b06:	39 07       	cpc	r19, r25
    5b08:	78 f0       	brcs	.+30     	; 0x5b28 <malloc+0x124>
    5b0a:	ac 01       	movw	r20, r24
    5b0c:	4e 5f       	subi	r20, 0xFE	; 254
    5b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    5b10:	24 17       	cp	r18, r20
    5b12:	35 07       	cpc	r19, r21
    5b14:	48 f0       	brcs	.+18     	; 0x5b28 <malloc+0x124>
    5b16:	4e 0f       	add	r20, r30
    5b18:	5f 1f       	adc	r21, r31
    5b1a:	50 93 5e 03 	sts	0x035E, r21
    5b1e:	40 93 5d 03 	sts	0x035D, r20
    5b22:	81 93       	st	Z+, r24
    5b24:	91 93       	st	Z+, r25
    5b26:	02 c0       	rjmp	.+4      	; 0x5b2c <malloc+0x128>
    5b28:	e0 e0       	ldi	r30, 0x00	; 0
    5b2a:	f0 e0       	ldi	r31, 0x00	; 0
    5b2c:	cf 01       	movw	r24, r30
    5b2e:	df 91       	pop	r29
    5b30:	cf 91       	pop	r28
    5b32:	08 95       	ret

00005b34 <free>:
    5b34:	cf 93       	push	r28
    5b36:	df 93       	push	r29
    5b38:	00 97       	sbiw	r24, 0x00	; 0
    5b3a:	09 f4       	brne	.+2      	; 0x5b3e <free+0xa>
    5b3c:	87 c0       	rjmp	.+270    	; 0x5c4c <free+0x118>
    5b3e:	fc 01       	movw	r30, r24
    5b40:	32 97       	sbiw	r30, 0x02	; 2
    5b42:	13 82       	std	Z+3, r1	; 0x03
    5b44:	12 82       	std	Z+2, r1	; 0x02
    5b46:	c0 91 5f 03 	lds	r28, 0x035F
    5b4a:	d0 91 60 03 	lds	r29, 0x0360
    5b4e:	20 97       	sbiw	r28, 0x00	; 0
    5b50:	81 f4       	brne	.+32     	; 0x5b72 <free+0x3e>
    5b52:	20 81       	ld	r18, Z
    5b54:	31 81       	ldd	r19, Z+1	; 0x01
    5b56:	28 0f       	add	r18, r24
    5b58:	39 1f       	adc	r19, r25
    5b5a:	80 91 5d 03 	lds	r24, 0x035D
    5b5e:	90 91 5e 03 	lds	r25, 0x035E
    5b62:	82 17       	cp	r24, r18
    5b64:	93 07       	cpc	r25, r19
    5b66:	79 f5       	brne	.+94     	; 0x5bc6 <free+0x92>
    5b68:	f0 93 5e 03 	sts	0x035E, r31
    5b6c:	e0 93 5d 03 	sts	0x035D, r30
    5b70:	6d c0       	rjmp	.+218    	; 0x5c4c <free+0x118>
    5b72:	de 01       	movw	r26, r28
    5b74:	20 e0       	ldi	r18, 0x00	; 0
    5b76:	30 e0       	ldi	r19, 0x00	; 0
    5b78:	ae 17       	cp	r26, r30
    5b7a:	bf 07       	cpc	r27, r31
    5b7c:	50 f4       	brcc	.+20     	; 0x5b92 <free+0x5e>
    5b7e:	12 96       	adiw	r26, 0x02	; 2
    5b80:	4d 91       	ld	r20, X+
    5b82:	5c 91       	ld	r21, X
    5b84:	13 97       	sbiw	r26, 0x03	; 3
    5b86:	9d 01       	movw	r18, r26
    5b88:	41 15       	cp	r20, r1
    5b8a:	51 05       	cpc	r21, r1
    5b8c:	09 f1       	breq	.+66     	; 0x5bd0 <free+0x9c>
    5b8e:	da 01       	movw	r26, r20
    5b90:	f3 cf       	rjmp	.-26     	; 0x5b78 <free+0x44>
    5b92:	b3 83       	std	Z+3, r27	; 0x03
    5b94:	a2 83       	std	Z+2, r26	; 0x02
    5b96:	40 81       	ld	r20, Z
    5b98:	51 81       	ldd	r21, Z+1	; 0x01
    5b9a:	84 0f       	add	r24, r20
    5b9c:	95 1f       	adc	r25, r21
    5b9e:	8a 17       	cp	r24, r26
    5ba0:	9b 07       	cpc	r25, r27
    5ba2:	71 f4       	brne	.+28     	; 0x5bc0 <free+0x8c>
    5ba4:	8d 91       	ld	r24, X+
    5ba6:	9c 91       	ld	r25, X
    5ba8:	11 97       	sbiw	r26, 0x01	; 1
    5baa:	84 0f       	add	r24, r20
    5bac:	95 1f       	adc	r25, r21
    5bae:	02 96       	adiw	r24, 0x02	; 2
    5bb0:	91 83       	std	Z+1, r25	; 0x01
    5bb2:	80 83       	st	Z, r24
    5bb4:	12 96       	adiw	r26, 0x02	; 2
    5bb6:	8d 91       	ld	r24, X+
    5bb8:	9c 91       	ld	r25, X
    5bba:	13 97       	sbiw	r26, 0x03	; 3
    5bbc:	93 83       	std	Z+3, r25	; 0x03
    5bbe:	82 83       	std	Z+2, r24	; 0x02
    5bc0:	21 15       	cp	r18, r1
    5bc2:	31 05       	cpc	r19, r1
    5bc4:	29 f4       	brne	.+10     	; 0x5bd0 <free+0x9c>
    5bc6:	f0 93 60 03 	sts	0x0360, r31
    5bca:	e0 93 5f 03 	sts	0x035F, r30
    5bce:	3e c0       	rjmp	.+124    	; 0x5c4c <free+0x118>
    5bd0:	d9 01       	movw	r26, r18
    5bd2:	13 96       	adiw	r26, 0x03	; 3
    5bd4:	fc 93       	st	X, r31
    5bd6:	ee 93       	st	-X, r30
    5bd8:	12 97       	sbiw	r26, 0x02	; 2
    5bda:	4d 91       	ld	r20, X+
    5bdc:	5d 91       	ld	r21, X+
    5bde:	a4 0f       	add	r26, r20
    5be0:	b5 1f       	adc	r27, r21
    5be2:	ea 17       	cp	r30, r26
    5be4:	fb 07       	cpc	r31, r27
    5be6:	79 f4       	brne	.+30     	; 0x5c06 <free+0xd2>
    5be8:	80 81       	ld	r24, Z
    5bea:	91 81       	ldd	r25, Z+1	; 0x01
    5bec:	84 0f       	add	r24, r20
    5bee:	95 1f       	adc	r25, r21
    5bf0:	02 96       	adiw	r24, 0x02	; 2
    5bf2:	d9 01       	movw	r26, r18
    5bf4:	11 96       	adiw	r26, 0x01	; 1
    5bf6:	9c 93       	st	X, r25
    5bf8:	8e 93       	st	-X, r24
    5bfa:	82 81       	ldd	r24, Z+2	; 0x02
    5bfc:	93 81       	ldd	r25, Z+3	; 0x03
    5bfe:	13 96       	adiw	r26, 0x03	; 3
    5c00:	9c 93       	st	X, r25
    5c02:	8e 93       	st	-X, r24
    5c04:	12 97       	sbiw	r26, 0x02	; 2
    5c06:	e0 e0       	ldi	r30, 0x00	; 0
    5c08:	f0 e0       	ldi	r31, 0x00	; 0
    5c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    5c0e:	00 97       	sbiw	r24, 0x00	; 0
    5c10:	19 f0       	breq	.+6      	; 0x5c18 <free+0xe4>
    5c12:	fe 01       	movw	r30, r28
    5c14:	ec 01       	movw	r28, r24
    5c16:	f9 cf       	rjmp	.-14     	; 0x5c0a <free+0xd6>
    5c18:	ce 01       	movw	r24, r28
    5c1a:	02 96       	adiw	r24, 0x02	; 2
    5c1c:	28 81       	ld	r18, Y
    5c1e:	39 81       	ldd	r19, Y+1	; 0x01
    5c20:	82 0f       	add	r24, r18
    5c22:	93 1f       	adc	r25, r19
    5c24:	20 91 5d 03 	lds	r18, 0x035D
    5c28:	30 91 5e 03 	lds	r19, 0x035E
    5c2c:	28 17       	cp	r18, r24
    5c2e:	39 07       	cpc	r19, r25
    5c30:	69 f4       	brne	.+26     	; 0x5c4c <free+0x118>
    5c32:	30 97       	sbiw	r30, 0x00	; 0
    5c34:	29 f4       	brne	.+10     	; 0x5c40 <free+0x10c>
    5c36:	10 92 60 03 	sts	0x0360, r1
    5c3a:	10 92 5f 03 	sts	0x035F, r1
    5c3e:	02 c0       	rjmp	.+4      	; 0x5c44 <free+0x110>
    5c40:	13 82       	std	Z+3, r1	; 0x03
    5c42:	12 82       	std	Z+2, r1	; 0x02
    5c44:	d0 93 5e 03 	sts	0x035E, r29
    5c48:	c0 93 5d 03 	sts	0x035D, r28
    5c4c:	df 91       	pop	r29
    5c4e:	cf 91       	pop	r28
    5c50:	08 95       	ret

00005c52 <realloc>:
    5c52:	a0 e0       	ldi	r26, 0x00	; 0
    5c54:	b0 e0       	ldi	r27, 0x00	; 0
    5c56:	ef e2       	ldi	r30, 0x2F	; 47
    5c58:	fe e2       	ldi	r31, 0x2E	; 46
    5c5a:	0c 94 16 2f 	jmp	0x5e2c	; 0x5e2c <__prologue_saves__+0x8>
    5c5e:	ec 01       	movw	r28, r24
    5c60:	cb 01       	movw	r24, r22
    5c62:	20 97       	sbiw	r28, 0x00	; 0
    5c64:	19 f4       	brne	.+6      	; 0x5c6c <realloc+0x1a>
    5c66:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <malloc>
    5c6a:	b8 c0       	rjmp	.+368    	; 0x5ddc <realloc+0x18a>
    5c6c:	fe 01       	movw	r30, r28
    5c6e:	e6 0f       	add	r30, r22
    5c70:	f7 1f       	adc	r31, r23
    5c72:	9e 01       	movw	r18, r28
    5c74:	22 50       	subi	r18, 0x02	; 2
    5c76:	31 09       	sbc	r19, r1
    5c78:	e2 17       	cp	r30, r18
    5c7a:	f3 07       	cpc	r31, r19
    5c7c:	08 f4       	brcc	.+2      	; 0x5c80 <realloc+0x2e>
    5c7e:	ac c0       	rjmp	.+344    	; 0x5dd8 <realloc+0x186>
    5c80:	d9 01       	movw	r26, r18
    5c82:	0d 91       	ld	r16, X+
    5c84:	1c 91       	ld	r17, X
    5c86:	11 97       	sbiw	r26, 0x01	; 1
    5c88:	06 17       	cp	r16, r22
    5c8a:	17 07       	cpc	r17, r23
    5c8c:	b8 f0       	brcs	.+46     	; 0x5cbc <realloc+0x6a>
    5c8e:	05 30       	cpi	r16, 0x05	; 5
    5c90:	11 05       	cpc	r17, r1
    5c92:	08 f4       	brcc	.+2      	; 0x5c96 <realloc+0x44>
    5c94:	9f c0       	rjmp	.+318    	; 0x5dd4 <realloc+0x182>
    5c96:	a8 01       	movw	r20, r16
    5c98:	44 50       	subi	r20, 0x04	; 4
    5c9a:	51 09       	sbc	r21, r1
    5c9c:	46 17       	cp	r20, r22
    5c9e:	57 07       	cpc	r21, r23
    5ca0:	08 f4       	brcc	.+2      	; 0x5ca4 <realloc+0x52>
    5ca2:	98 c0       	rjmp	.+304    	; 0x5dd4 <realloc+0x182>
    5ca4:	02 50       	subi	r16, 0x02	; 2
    5ca6:	11 09       	sbc	r17, r1
    5ca8:	06 1b       	sub	r16, r22
    5caa:	17 0b       	sbc	r17, r23
    5cac:	01 93       	st	Z+, r16
    5cae:	11 93       	st	Z+, r17
    5cb0:	6d 93       	st	X+, r22
    5cb2:	7c 93       	st	X, r23
    5cb4:	cf 01       	movw	r24, r30
    5cb6:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <free>
    5cba:	8c c0       	rjmp	.+280    	; 0x5dd4 <realloc+0x182>
    5cbc:	5b 01       	movw	r10, r22
    5cbe:	a0 1a       	sub	r10, r16
    5cc0:	b1 0a       	sbc	r11, r17
    5cc2:	4e 01       	movw	r8, r28
    5cc4:	80 0e       	add	r8, r16
    5cc6:	91 1e       	adc	r9, r17
    5cc8:	a0 91 5f 03 	lds	r26, 0x035F
    5ccc:	b0 91 60 03 	lds	r27, 0x0360
    5cd0:	61 2c       	mov	r6, r1
    5cd2:	71 2c       	mov	r7, r1
    5cd4:	60 e0       	ldi	r22, 0x00	; 0
    5cd6:	70 e0       	ldi	r23, 0x00	; 0
    5cd8:	10 97       	sbiw	r26, 0x00	; 0
    5cda:	09 f4       	brne	.+2      	; 0x5cde <realloc+0x8c>
    5cdc:	49 c0       	rjmp	.+146    	; 0x5d70 <realloc+0x11e>
    5cde:	a8 15       	cp	r26, r8
    5ce0:	b9 05       	cpc	r27, r9
    5ce2:	c9 f5       	brne	.+114    	; 0x5d56 <realloc+0x104>
    5ce4:	ed 90       	ld	r14, X+
    5ce6:	fc 90       	ld	r15, X
    5ce8:	11 97       	sbiw	r26, 0x01	; 1
    5cea:	67 01       	movw	r12, r14
    5cec:	42 e0       	ldi	r20, 0x02	; 2
    5cee:	c4 0e       	add	r12, r20
    5cf0:	d1 1c       	adc	r13, r1
    5cf2:	ca 14       	cp	r12, r10
    5cf4:	db 04       	cpc	r13, r11
    5cf6:	78 f1       	brcs	.+94     	; 0x5d56 <realloc+0x104>
    5cf8:	47 01       	movw	r8, r14
    5cfa:	8a 18       	sub	r8, r10
    5cfc:	9b 08       	sbc	r9, r11
    5cfe:	64 01       	movw	r12, r8
    5d00:	42 e0       	ldi	r20, 0x02	; 2
    5d02:	c4 0e       	add	r12, r20
    5d04:	d1 1c       	adc	r13, r1
    5d06:	12 96       	adiw	r26, 0x02	; 2
    5d08:	bc 90       	ld	r11, X
    5d0a:	12 97       	sbiw	r26, 0x02	; 2
    5d0c:	13 96       	adiw	r26, 0x03	; 3
    5d0e:	ac 91       	ld	r26, X
    5d10:	b5 e0       	ldi	r27, 0x05	; 5
    5d12:	cb 16       	cp	r12, r27
    5d14:	d1 04       	cpc	r13, r1
    5d16:	40 f0       	brcs	.+16     	; 0x5d28 <realloc+0xd6>
    5d18:	b2 82       	std	Z+2, r11	; 0x02
    5d1a:	a3 83       	std	Z+3, r26	; 0x03
    5d1c:	91 82       	std	Z+1, r9	; 0x01
    5d1e:	80 82       	st	Z, r8
    5d20:	d9 01       	movw	r26, r18
    5d22:	8d 93       	st	X+, r24
    5d24:	9c 93       	st	X, r25
    5d26:	09 c0       	rjmp	.+18     	; 0x5d3a <realloc+0xe8>
    5d28:	0e 5f       	subi	r16, 0xFE	; 254
    5d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d2c:	0e 0d       	add	r16, r14
    5d2e:	1f 1d       	adc	r17, r15
    5d30:	f9 01       	movw	r30, r18
    5d32:	11 83       	std	Z+1, r17	; 0x01
    5d34:	00 83       	st	Z, r16
    5d36:	eb 2d       	mov	r30, r11
    5d38:	fa 2f       	mov	r31, r26
    5d3a:	61 15       	cp	r22, r1
    5d3c:	71 05       	cpc	r23, r1
    5d3e:	31 f0       	breq	.+12     	; 0x5d4c <realloc+0xfa>
    5d40:	db 01       	movw	r26, r22
    5d42:	13 96       	adiw	r26, 0x03	; 3
    5d44:	fc 93       	st	X, r31
    5d46:	ee 93       	st	-X, r30
    5d48:	12 97       	sbiw	r26, 0x02	; 2
    5d4a:	44 c0       	rjmp	.+136    	; 0x5dd4 <realloc+0x182>
    5d4c:	f0 93 60 03 	sts	0x0360, r31
    5d50:	e0 93 5f 03 	sts	0x035F, r30
    5d54:	3f c0       	rjmp	.+126    	; 0x5dd4 <realloc+0x182>
    5d56:	6d 91       	ld	r22, X+
    5d58:	7c 91       	ld	r23, X
    5d5a:	11 97       	sbiw	r26, 0x01	; 1
    5d5c:	66 16       	cp	r6, r22
    5d5e:	77 06       	cpc	r7, r23
    5d60:	08 f4       	brcc	.+2      	; 0x5d64 <realloc+0x112>
    5d62:	3b 01       	movw	r6, r22
    5d64:	bd 01       	movw	r22, r26
    5d66:	12 96       	adiw	r26, 0x02	; 2
    5d68:	0d 90       	ld	r0, X+
    5d6a:	bc 91       	ld	r27, X
    5d6c:	a0 2d       	mov	r26, r0
    5d6e:	b4 cf       	rjmp	.-152    	; 0x5cd8 <realloc+0x86>
    5d70:	60 91 5d 03 	lds	r22, 0x035D
    5d74:	70 91 5e 03 	lds	r23, 0x035E
    5d78:	68 15       	cp	r22, r8
    5d7a:	79 05       	cpc	r23, r9
    5d7c:	e9 f4       	brne	.+58     	; 0x5db8 <realloc+0x166>
    5d7e:	68 16       	cp	r6, r24
    5d80:	79 06       	cpc	r7, r25
    5d82:	d0 f4       	brcc	.+52     	; 0x5db8 <realloc+0x166>
    5d84:	40 91 00 01 	lds	r20, 0x0100
    5d88:	50 91 01 01 	lds	r21, 0x0101
    5d8c:	41 15       	cp	r20, r1
    5d8e:	51 05       	cpc	r21, r1
    5d90:	41 f4       	brne	.+16     	; 0x5da2 <realloc+0x150>
    5d92:	4d b7       	in	r20, 0x3d	; 61
    5d94:	5e b7       	in	r21, 0x3e	; 62
    5d96:	60 91 04 01 	lds	r22, 0x0104
    5d9a:	70 91 05 01 	lds	r23, 0x0105
    5d9e:	46 1b       	sub	r20, r22
    5da0:	57 0b       	sbc	r21, r23
    5da2:	e4 17       	cp	r30, r20
    5da4:	f5 07       	cpc	r31, r21
    5da6:	c0 f4       	brcc	.+48     	; 0x5dd8 <realloc+0x186>
    5da8:	f0 93 5e 03 	sts	0x035E, r31
    5dac:	e0 93 5d 03 	sts	0x035D, r30
    5db0:	f9 01       	movw	r30, r18
    5db2:	91 83       	std	Z+1, r25	; 0x01
    5db4:	80 83       	st	Z, r24
    5db6:	0e c0       	rjmp	.+28     	; 0x5dd4 <realloc+0x182>
    5db8:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <malloc>
    5dbc:	7c 01       	movw	r14, r24
    5dbe:	00 97       	sbiw	r24, 0x00	; 0
    5dc0:	59 f0       	breq	.+22     	; 0x5dd8 <realloc+0x186>
    5dc2:	a8 01       	movw	r20, r16
    5dc4:	be 01       	movw	r22, r28
    5dc6:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <memcpy>
    5dca:	ce 01       	movw	r24, r28
    5dcc:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <free>
    5dd0:	c7 01       	movw	r24, r14
    5dd2:	04 c0       	rjmp	.+8      	; 0x5ddc <realloc+0x18a>
    5dd4:	ce 01       	movw	r24, r28
    5dd6:	02 c0       	rjmp	.+4      	; 0x5ddc <realloc+0x18a>
    5dd8:	80 e0       	ldi	r24, 0x00	; 0
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	cd b7       	in	r28, 0x3d	; 61
    5dde:	de b7       	in	r29, 0x3e	; 62
    5de0:	ee e0       	ldi	r30, 0x0E	; 14
    5de2:	0c 94 32 2f 	jmp	0x5e64	; 0x5e64 <__epilogue_restores__+0x8>

00005de6 <memcmp>:
    5de6:	fb 01       	movw	r30, r22
    5de8:	dc 01       	movw	r26, r24
    5dea:	04 c0       	rjmp	.+8      	; 0x5df4 <memcmp+0xe>
    5dec:	8d 91       	ld	r24, X+
    5dee:	01 90       	ld	r0, Z+
    5df0:	80 19       	sub	r24, r0
    5df2:	21 f4       	brne	.+8      	; 0x5dfc <memcmp+0x16>
    5df4:	41 50       	subi	r20, 0x01	; 1
    5df6:	50 40       	sbci	r21, 0x00	; 0
    5df8:	c8 f7       	brcc	.-14     	; 0x5dec <memcmp+0x6>
    5dfa:	88 1b       	sub	r24, r24
    5dfc:	99 0b       	sbc	r25, r25
    5dfe:	08 95       	ret

00005e00 <memcpy>:
    5e00:	fb 01       	movw	r30, r22
    5e02:	dc 01       	movw	r26, r24
    5e04:	02 c0       	rjmp	.+4      	; 0x5e0a <memcpy+0xa>
    5e06:	01 90       	ld	r0, Z+
    5e08:	0d 92       	st	X+, r0
    5e0a:	41 50       	subi	r20, 0x01	; 1
    5e0c:	50 40       	sbci	r21, 0x00	; 0
    5e0e:	d8 f7       	brcc	.-10     	; 0x5e06 <memcpy+0x6>
    5e10:	08 95       	ret

00005e12 <strlen>:
    5e12:	fc 01       	movw	r30, r24
    5e14:	01 90       	ld	r0, Z+
    5e16:	00 20       	and	r0, r0
    5e18:	e9 f7       	brne	.-6      	; 0x5e14 <strlen+0x2>
    5e1a:	80 95       	com	r24
    5e1c:	90 95       	com	r25
    5e1e:	8e 0f       	add	r24, r30
    5e20:	9f 1f       	adc	r25, r31
    5e22:	08 95       	ret

00005e24 <__prologue_saves__>:
    5e24:	2f 92       	push	r2
    5e26:	3f 92       	push	r3
    5e28:	4f 92       	push	r4
    5e2a:	5f 92       	push	r5
    5e2c:	6f 92       	push	r6
    5e2e:	7f 92       	push	r7
    5e30:	8f 92       	push	r8
    5e32:	9f 92       	push	r9
    5e34:	af 92       	push	r10
    5e36:	bf 92       	push	r11
    5e38:	cf 92       	push	r12
    5e3a:	df 92       	push	r13
    5e3c:	ef 92       	push	r14
    5e3e:	ff 92       	push	r15
    5e40:	0f 93       	push	r16
    5e42:	1f 93       	push	r17
    5e44:	cf 93       	push	r28
    5e46:	df 93       	push	r29
    5e48:	cd b7       	in	r28, 0x3d	; 61
    5e4a:	de b7       	in	r29, 0x3e	; 62
    5e4c:	ca 1b       	sub	r28, r26
    5e4e:	db 0b       	sbc	r29, r27
    5e50:	0f b6       	in	r0, 0x3f	; 63
    5e52:	f8 94       	cli
    5e54:	de bf       	out	0x3e, r29	; 62
    5e56:	0f be       	out	0x3f, r0	; 63
    5e58:	cd bf       	out	0x3d, r28	; 61
    5e5a:	09 94       	ijmp

00005e5c <__epilogue_restores__>:
    5e5c:	2a 88       	ldd	r2, Y+18	; 0x12
    5e5e:	39 88       	ldd	r3, Y+17	; 0x11
    5e60:	48 88       	ldd	r4, Y+16	; 0x10
    5e62:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e64:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e66:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e68:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e6e:	b9 84       	ldd	r11, Y+9	; 0x09
    5e70:	c8 84       	ldd	r12, Y+8	; 0x08
    5e72:	df 80       	ldd	r13, Y+7	; 0x07
    5e74:	ee 80       	ldd	r14, Y+6	; 0x06
    5e76:	fd 80       	ldd	r15, Y+5	; 0x05
    5e78:	0c 81       	ldd	r16, Y+4	; 0x04
    5e7a:	1b 81       	ldd	r17, Y+3	; 0x03
    5e7c:	aa 81       	ldd	r26, Y+2	; 0x02
    5e7e:	b9 81       	ldd	r27, Y+1	; 0x01
    5e80:	ce 0f       	add	r28, r30
    5e82:	d1 1d       	adc	r29, r1
    5e84:	0f b6       	in	r0, 0x3f	; 63
    5e86:	f8 94       	cli
    5e88:	de bf       	out	0x3e, r29	; 62
    5e8a:	0f be       	out	0x3f, r0	; 63
    5e8c:	cd bf       	out	0x3d, r28	; 61
    5e8e:	ed 01       	movw	r28, r26
    5e90:	08 95       	ret

00005e92 <_exit>:
    5e92:	f8 94       	cli

00005e94 <__stop_program>:
    5e94:	ff cf       	rjmp	.-2      	; 0x5e94 <__stop_program>
