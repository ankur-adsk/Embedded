In archive libAVRCore.a:

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000570  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ca3  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000570  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ca3  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000010d4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000153d  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN5PrintC2Ev 0000002c  00000000  00000000  00002645  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6StreamC2Ev 00000040  00000000  00000000  00002671  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z10store_charhP11ring_buffer 00000090  00000000  00000000  000026b1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z11serialEventv 0000000e  00000000  00000000  00002741  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.__vector_18 00000096  00000000  00000000  0000274f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__vector_19 000000a8  00000000  00000000  000027e5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh 0000010e  00000000  00000000  0000288d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh 0000010e  00000000  00000000  0000299b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN14HardwareSerial5beginEm 000001ec  00000000  00000000  00002aa9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN14HardwareSerial5beginEmh 000001f6  00000000  00000000  00002c95  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN14HardwareSerial3endEv 00000146  00000000  00000000  00002e8b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN14HardwareSerial9availableEv 0000004c  00000000  00000000  00002fd1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._Z14serialEventRunv 0000002e  00000000  00000000  0000301d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN14HardwareSerial4peekEv 00000090  00000000  00000000  0000304b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN14HardwareSerial4readEv 000000c0  00000000  00000000  000030db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN14HardwareSerial5flushEv 00000056  00000000  00000000  0000319b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN14HardwareSerial5writeEh 000000fc  00000000  00000000  000031f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN14HardwareSerialcvbEv 0000001a  00000000  00000000  000032ed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._Z41__static_initialization_and_destruction_0ii 000000d2  00000000  00000000  00003307  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._GLOBAL__I_rx_buffer 0000001a  00000000  00000000  000033d9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .ctors        00000002  00000000  00000000  000033f3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 26 .bss.rx_buffer 00000044  00000000  00000000  000033f5  2**0
                  ALLOC
 27 .bss.tx_buffer 00000044  00000000  00000000  000033f5  2**0
                  ALLOC
 28 .bss.Serial   00000022  00000000  00000000  000033f5  2**0
                  ALLOC
 29 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  000033f5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 30 .rodata._ZTV6Stream 00000010  00000000  00000000  00003405  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN5PrintC2Ev:

00000000 <_ZN5PrintC2Ev>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5PrintC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	91 83       	std	Z+1, r25	; 0x01
  18:	80 83       	st	Z, r24
  1a:	e9 81       	ldd	r30, Y+1	; 0x01
  1c:	fa 81       	ldd	r31, Y+2	; 0x02
  1e:	13 82       	std	Z+3, r1	; 0x03
  20:	12 82       	std	Z+2, r1	; 0x02
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

Disassembly of section .text._ZN6StreamC2Ev:

00000000 <_ZN6StreamC2Ev>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StreamC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6StreamC2Ev>
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	91 83       	std	Z+1, r25	; 0x01
  20:	80 83       	st	Z, r24
  22:	e9 81       	ldd	r30, Y+1	; 0x01
  24:	fa 81       	ldd	r31, Y+2	; 0x02
  26:	88 ee       	ldi	r24, 0xE8	; 232
  28:	93 e0       	ldi	r25, 0x03	; 3
  2a:	a0 e0       	ldi	r26, 0x00	; 0
  2c:	b0 e0       	ldi	r27, 0x00	; 0
  2e:	84 83       	std	Z+4, r24	; 0x04
  30:	95 83       	std	Z+5, r25	; 0x05
  32:	a6 83       	std	Z+6, r26	; 0x06
  34:	b7 83       	std	Z+7, r27	; 0x07
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	cf 91       	pop	r28
  3c:	df 91       	pop	r29
  3e:	08 95       	ret

Disassembly of section .text._Z10store_charhP11ring_buffer:

00000000 <_Z10store_charhP11ring_buffer>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z10store_charhP11ring_buffer+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_Z10store_charhP11ring_buffer+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_Z10store_charhP11ring_buffer+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	7d 83       	std	Y+5, r23	; 0x05
  12:	6c 83       	std	Y+4, r22	; 0x04
  14:	8c 81       	ldd	r24, Y+4	; 0x04
  16:	9d 81       	ldd	r25, Y+5	; 0x05
  18:	fc 01       	movw	r30, r24
  1a:	e0 5c       	subi	r30, 0xC0	; 192
  1c:	ff 4f       	sbci	r31, 0xFF	; 255
  1e:	80 81       	ld	r24, Z
  20:	91 81       	ldd	r25, Z+1	; 0x01
  22:	01 96       	adiw	r24, 0x01	; 1
  24:	8f 73       	andi	r24, 0x3F	; 63
  26:	90 70       	andi	r25, 0x00	; 0
  28:	9a 83       	std	Y+2, r25	; 0x02
  2a:	89 83       	std	Y+1, r24	; 0x01
  2c:	29 81       	ldd	r18, Y+1	; 0x01
  2e:	3a 81       	ldd	r19, Y+2	; 0x02
  30:	8c 81       	ldd	r24, Y+4	; 0x04
  32:	9d 81       	ldd	r25, Y+5	; 0x05
  34:	fc 01       	movw	r30, r24
  36:	ee 5b       	subi	r30, 0xBE	; 190
  38:	ff 4f       	sbci	r31, 0xFF	; 255
  3a:	80 81       	ld	r24, Z
  3c:	91 81       	ldd	r25, Z+1	; 0x01
  3e:	1e 82       	std	Y+6, r1	; 0x06
  40:	28 17       	cp	r18, r24
  42:	39 07       	cpc	r19, r25
  44:	01 f0       	breq	.+0      	; 0x46 <_Z10store_charhP11ring_buffer+0x46>
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	8e 83       	std	Y+6, r24	; 0x06
  4a:	8e 81       	ldd	r24, Y+6	; 0x06
  4c:	88 23       	and	r24, r24
  4e:	01 f0       	breq	.+0      	; 0x50 <_Z10store_charhP11ring_buffer+0x50>
  50:	8c 81       	ldd	r24, Y+4	; 0x04
  52:	9d 81       	ldd	r25, Y+5	; 0x05
  54:	fc 01       	movw	r30, r24
  56:	e0 5c       	subi	r30, 0xC0	; 192
  58:	ff 4f       	sbci	r31, 0xFF	; 255
  5a:	20 81       	ld	r18, Z
  5c:	31 81       	ldd	r19, Z+1	; 0x01
  5e:	8c 81       	ldd	r24, Y+4	; 0x04
  60:	9d 81       	ldd	r25, Y+5	; 0x05
  62:	fc 01       	movw	r30, r24
  64:	e2 0f       	add	r30, r18
  66:	f3 1f       	adc	r31, r19
  68:	8b 81       	ldd	r24, Y+3	; 0x03
  6a:	80 83       	st	Z, r24
  6c:	29 81       	ldd	r18, Y+1	; 0x01
  6e:	3a 81       	ldd	r19, Y+2	; 0x02
  70:	8c 81       	ldd	r24, Y+4	; 0x04
  72:	9d 81       	ldd	r25, Y+5	; 0x05
  74:	fc 01       	movw	r30, r24
  76:	e0 5c       	subi	r30, 0xC0	; 192
  78:	ff 4f       	sbci	r31, 0xFF	; 255
  7a:	31 83       	std	Z+1, r19	; 0x01
  7c:	20 83       	st	Z, r18
  7e:	26 96       	adiw	r28, 0x06	; 6
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	f8 94       	cli
  84:	de bf       	out	0x3e, r29	; 62
  86:	0f be       	out	0x3f, r0	; 63
  88:	cd bf       	out	0x3d, r28	; 61
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

Disassembly of section .text._Z11serialEventv:

00000000 <_Z11serialEventv>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	cf 91       	pop	r28
   a:	df 91       	pop	r29
   c:	08 95       	ret

Disassembly of section .text.__vector_18:

00000000 <__vector_18>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	00 d0       	rcall	.+0      	; 0x28 <__vector_18+0x28>
  28:	0f 92       	push	r0
  2a:	cd b7       	in	r28, 0x3d	; 61
  2c:	de b7       	in	r29, 0x3e	; 62
  2e:	e0 ec       	ldi	r30, 0xC0	; 192
  30:	f0 e0       	ldi	r31, 0x00	; 0
  32:	80 81       	ld	r24, Z
  34:	88 2f       	mov	r24, r24
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	84 70       	andi	r24, 0x04	; 4
  3a:	90 70       	andi	r25, 0x00	; 0
  3c:	1b 82       	std	Y+3, r1	; 0x03
  3e:	00 97       	sbiw	r24, 0x00	; 0
  40:	01 f4       	brne	.+0      	; 0x42 <__vector_18+0x42>
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	8b 83       	std	Y+3, r24	; 0x03
  46:	8b 81       	ldd	r24, Y+3	; 0x03
  48:	88 23       	and	r24, r24
  4a:	01 f0       	breq	.+0      	; 0x4c <__vector_18+0x4c>
  4c:	e6 ec       	ldi	r30, 0xC6	; 198
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	80 81       	ld	r24, Z
  52:	8a 83       	std	Y+2, r24	; 0x02
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	30 e0       	ldi	r19, 0x00	; 0
  58:	8a 81       	ldd	r24, Y+2	; 0x02
  5a:	b9 01       	movw	r22, r18
  5c:	0e 94 00 00 	call	0	; 0x0 <__vector_18>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__vector_18+0x62>
  62:	e6 ec       	ldi	r30, 0xC6	; 198
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	80 81       	ld	r24, Z
  68:	89 83       	std	Y+1, r24	; 0x01
  6a:	0f 90       	pop	r0
  6c:	0f 90       	pop	r0
  6e:	0f 90       	pop	r0
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	ff 91       	pop	r31
  76:	ef 91       	pop	r30
  78:	bf 91       	pop	r27
  7a:	af 91       	pop	r26
  7c:	9f 91       	pop	r25
  7e:	8f 91       	pop	r24
  80:	7f 91       	pop	r23
  82:	6f 91       	pop	r22
  84:	5f 91       	pop	r21
  86:	4f 91       	pop	r20
  88:	3f 91       	pop	r19
  8a:	2f 91       	pop	r18
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

Disassembly of section .text.__vector_19:

00000000 <__vector_19>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	af 93       	push	r26
  14:	bf 93       	push	r27
  16:	ef 93       	push	r30
  18:	ff 93       	push	r31
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	00 d0       	rcall	.+0      	; 0x20 <__vector_19+0x20>
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	20 91 00 00 	lds	r18, 0x0000
  28:	30 91 00 00 	lds	r19, 0x0000
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	1a 82       	std	Y+2, r1	; 0x02
  36:	28 17       	cp	r18, r24
  38:	39 07       	cpc	r19, r25
  3a:	01 f4       	brne	.+0      	; 0x3c <__vector_19+0x3c>
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	8a 83       	std	Y+2, r24	; 0x02
  40:	8a 81       	ldd	r24, Y+2	; 0x02
  42:	88 23       	and	r24, r24
  44:	01 f0       	breq	.+0      	; 0x46 <__vector_19+0x46>
  46:	a1 ec       	ldi	r26, 0xC1	; 193
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	e1 ec       	ldi	r30, 0xC1	; 193
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	8f 7d       	andi	r24, 0xDF	; 223
  52:	8c 93       	st	X, r24
  54:	00 c0       	rjmp	.+0      	; 0x56 <__vector_19+0x56>
  56:	80 91 00 00 	lds	r24, 0x0000
  5a:	90 91 00 00 	lds	r25, 0x0000
  5e:	fc 01       	movw	r30, r24
  60:	e0 50       	subi	r30, 0x00	; 0
  62:	f0 40       	sbci	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	89 83       	std	Y+1, r24	; 0x01
  68:	80 91 00 00 	lds	r24, 0x0000
  6c:	90 91 00 00 	lds	r25, 0x0000
  70:	01 96       	adiw	r24, 0x01	; 1
  72:	8f 73       	andi	r24, 0x3F	; 63
  74:	90 70       	andi	r25, 0x00	; 0
  76:	90 93 00 00 	sts	0x0000, r25
  7a:	80 93 00 00 	sts	0x0000, r24
  7e:	e6 ec       	ldi	r30, 0xC6	; 198
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	80 83       	st	Z, r24
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	ff 91       	pop	r31
  90:	ef 91       	pop	r30
  92:	bf 91       	pop	r27
  94:	af 91       	pop	r26
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	3f 91       	pop	r19
  9c:	2f 91       	pop	r18
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

Disassembly of section .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	62 97       	sbiw	r28, 0x12	; 18
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	9a 83       	std	Y+2, r25	; 0x02
  2a:	89 83       	std	Y+1, r24	; 0x01
  2c:	7c 83       	std	Y+4, r23	; 0x04
  2e:	6b 83       	std	Y+3, r22	; 0x03
  30:	5e 83       	std	Y+6, r21	; 0x06
  32:	4d 83       	std	Y+5, r20	; 0x05
  34:	38 87       	std	Y+8, r19	; 0x08
  36:	2f 83       	std	Y+7, r18	; 0x07
  38:	1a 87       	std	Y+10, r17	; 0x0a
  3a:	09 87       	std	Y+9, r16	; 0x09
  3c:	fc 86       	std	Y+12, r15	; 0x0c
  3e:	eb 86       	std	Y+11, r14	; 0x0b
  40:	de 86       	std	Y+14, r13	; 0x0e
  42:	cd 86       	std	Y+13, r12	; 0x0d
  44:	b8 8a       	std	Y+16, r11	; 0x10
  46:	af 86       	std	Y+15, r10	; 0x0f
  48:	9a 8a       	std	Y+18, r9	; 0x12
  4a:	89 8a       	std	Y+17, r8	; 0x11
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
  54:	e9 81       	ldd	r30, Y+1	; 0x01
  56:	fa 81       	ldd	r31, Y+2	; 0x02
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	91 83       	std	Z+1, r25	; 0x01
  5e:	80 83       	st	Z, r24
  60:	e9 81       	ldd	r30, Y+1	; 0x01
  62:	fa 81       	ldd	r31, Y+2	; 0x02
  64:	8b 81       	ldd	r24, Y+3	; 0x03
  66:	9c 81       	ldd	r25, Y+4	; 0x04
  68:	95 87       	std	Z+13, r25	; 0x0d
  6a:	84 87       	std	Z+12, r24	; 0x0c
  6c:	e9 81       	ldd	r30, Y+1	; 0x01
  6e:	fa 81       	ldd	r31, Y+2	; 0x02
  70:	8d 81       	ldd	r24, Y+5	; 0x05
  72:	9e 81       	ldd	r25, Y+6	; 0x06
  74:	97 87       	std	Z+15, r25	; 0x0f
  76:	86 87       	std	Z+14, r24	; 0x0e
  78:	e9 81       	ldd	r30, Y+1	; 0x01
  7a:	fa 81       	ldd	r31, Y+2	; 0x02
  7c:	8f 81       	ldd	r24, Y+7	; 0x07
  7e:	98 85       	ldd	r25, Y+8	; 0x08
  80:	91 8b       	std	Z+17, r25	; 0x11
  82:	80 8b       	std	Z+16, r24	; 0x10
  84:	e9 81       	ldd	r30, Y+1	; 0x01
  86:	fa 81       	ldd	r31, Y+2	; 0x02
  88:	89 85       	ldd	r24, Y+9	; 0x09
  8a:	9a 85       	ldd	r25, Y+10	; 0x0a
  8c:	93 8b       	std	Z+19, r25	; 0x13
  8e:	82 8b       	std	Z+18, r24	; 0x12
  90:	e9 81       	ldd	r30, Y+1	; 0x01
  92:	fa 81       	ldd	r31, Y+2	; 0x02
  94:	8b 85       	ldd	r24, Y+11	; 0x0b
  96:	9c 85       	ldd	r25, Y+12	; 0x0c
  98:	95 8b       	std	Z+21, r25	; 0x15
  9a:	84 8b       	std	Z+20, r24	; 0x14
  9c:	e9 81       	ldd	r30, Y+1	; 0x01
  9e:	fa 81       	ldd	r31, Y+2	; 0x02
  a0:	8d 85       	ldd	r24, Y+13	; 0x0d
  a2:	9e 85       	ldd	r25, Y+14	; 0x0e
  a4:	97 8b       	std	Z+23, r25	; 0x17
  a6:	86 8b       	std	Z+22, r24	; 0x16
  a8:	e9 81       	ldd	r30, Y+1	; 0x01
  aa:	fa 81       	ldd	r31, Y+2	; 0x02
  ac:	8f 85       	ldd	r24, Y+15	; 0x0f
  ae:	98 89       	ldd	r25, Y+16	; 0x10
  b0:	91 8f       	std	Z+25, r25	; 0x19
  b2:	80 8f       	std	Z+24, r24	; 0x18
  b4:	e9 81       	ldd	r30, Y+1	; 0x01
  b6:	fa 81       	ldd	r31, Y+2	; 0x02
  b8:	89 89       	ldd	r24, Y+17	; 0x11
  ba:	9a 89       	ldd	r25, Y+18	; 0x12
  bc:	93 8f       	std	Z+27, r25	; 0x1b
  be:	82 8f       	std	Z+26, r24	; 0x1a
  c0:	e9 81       	ldd	r30, Y+1	; 0x01
  c2:	fa 81       	ldd	r31, Y+2	; 0x02
  c4:	89 a1       	ldd	r24, Y+33	; 0x21
  c6:	84 8f       	std	Z+28, r24	; 0x1c
  c8:	e9 81       	ldd	r30, Y+1	; 0x01
  ca:	fa 81       	ldd	r31, Y+2	; 0x02
  cc:	8a a1       	ldd	r24, Y+34	; 0x22
  ce:	85 8f       	std	Z+29, r24	; 0x1d
  d0:	e9 81       	ldd	r30, Y+1	; 0x01
  d2:	fa 81       	ldd	r31, Y+2	; 0x02
  d4:	8b a1       	ldd	r24, Y+35	; 0x23
  d6:	86 8f       	std	Z+30, r24	; 0x1e
  d8:	e9 81       	ldd	r30, Y+1	; 0x01
  da:	fa 81       	ldd	r31, Y+2	; 0x02
  dc:	8c a1       	ldd	r24, Y+36	; 0x24
  de:	87 8f       	std	Z+31, r24	; 0x1f
  e0:	e9 81       	ldd	r30, Y+1	; 0x01
  e2:	fa 81       	ldd	r31, Y+2	; 0x02
  e4:	8d a1       	ldd	r24, Y+37	; 0x25
  e6:	80 a3       	std	Z+32, r24	; 0x20
  e8:	62 96       	adiw	r28, 0x12	; 18
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	ff 90       	pop	r15
  fe:	ef 90       	pop	r14
 100:	df 90       	pop	r13
 102:	cf 90       	pop	r12
 104:	bf 90       	pop	r11
 106:	af 90       	pop	r10
 108:	9f 90       	pop	r9
 10a:	8f 90       	pop	r8
 10c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	62 97       	sbiw	r28, 0x12	; 18
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	9a 83       	std	Y+2, r25	; 0x02
  2a:	89 83       	std	Y+1, r24	; 0x01
  2c:	7c 83       	std	Y+4, r23	; 0x04
  2e:	6b 83       	std	Y+3, r22	; 0x03
  30:	5e 83       	std	Y+6, r21	; 0x06
  32:	4d 83       	std	Y+5, r20	; 0x05
  34:	38 87       	std	Y+8, r19	; 0x08
  36:	2f 83       	std	Y+7, r18	; 0x07
  38:	1a 87       	std	Y+10, r17	; 0x0a
  3a:	09 87       	std	Y+9, r16	; 0x09
  3c:	fc 86       	std	Y+12, r15	; 0x0c
  3e:	eb 86       	std	Y+11, r14	; 0x0b
  40:	de 86       	std	Y+14, r13	; 0x0e
  42:	cd 86       	std	Y+13, r12	; 0x0d
  44:	b8 8a       	std	Y+16, r11	; 0x10
  46:	af 86       	std	Y+15, r10	; 0x0f
  48:	9a 8a       	std	Y+18, r9	; 0x12
  4a:	89 8a       	std	Y+17, r8	; 0x11
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
  54:	e9 81       	ldd	r30, Y+1	; 0x01
  56:	fa 81       	ldd	r31, Y+2	; 0x02
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	91 83       	std	Z+1, r25	; 0x01
  5e:	80 83       	st	Z, r24
  60:	e9 81       	ldd	r30, Y+1	; 0x01
  62:	fa 81       	ldd	r31, Y+2	; 0x02
  64:	8b 81       	ldd	r24, Y+3	; 0x03
  66:	9c 81       	ldd	r25, Y+4	; 0x04
  68:	95 87       	std	Z+13, r25	; 0x0d
  6a:	84 87       	std	Z+12, r24	; 0x0c
  6c:	e9 81       	ldd	r30, Y+1	; 0x01
  6e:	fa 81       	ldd	r31, Y+2	; 0x02
  70:	8d 81       	ldd	r24, Y+5	; 0x05
  72:	9e 81       	ldd	r25, Y+6	; 0x06
  74:	97 87       	std	Z+15, r25	; 0x0f
  76:	86 87       	std	Z+14, r24	; 0x0e
  78:	e9 81       	ldd	r30, Y+1	; 0x01
  7a:	fa 81       	ldd	r31, Y+2	; 0x02
  7c:	8f 81       	ldd	r24, Y+7	; 0x07
  7e:	98 85       	ldd	r25, Y+8	; 0x08
  80:	91 8b       	std	Z+17, r25	; 0x11
  82:	80 8b       	std	Z+16, r24	; 0x10
  84:	e9 81       	ldd	r30, Y+1	; 0x01
  86:	fa 81       	ldd	r31, Y+2	; 0x02
  88:	89 85       	ldd	r24, Y+9	; 0x09
  8a:	9a 85       	ldd	r25, Y+10	; 0x0a
  8c:	93 8b       	std	Z+19, r25	; 0x13
  8e:	82 8b       	std	Z+18, r24	; 0x12
  90:	e9 81       	ldd	r30, Y+1	; 0x01
  92:	fa 81       	ldd	r31, Y+2	; 0x02
  94:	8b 85       	ldd	r24, Y+11	; 0x0b
  96:	9c 85       	ldd	r25, Y+12	; 0x0c
  98:	95 8b       	std	Z+21, r25	; 0x15
  9a:	84 8b       	std	Z+20, r24	; 0x14
  9c:	e9 81       	ldd	r30, Y+1	; 0x01
  9e:	fa 81       	ldd	r31, Y+2	; 0x02
  a0:	8d 85       	ldd	r24, Y+13	; 0x0d
  a2:	9e 85       	ldd	r25, Y+14	; 0x0e
  a4:	97 8b       	std	Z+23, r25	; 0x17
  a6:	86 8b       	std	Z+22, r24	; 0x16
  a8:	e9 81       	ldd	r30, Y+1	; 0x01
  aa:	fa 81       	ldd	r31, Y+2	; 0x02
  ac:	8f 85       	ldd	r24, Y+15	; 0x0f
  ae:	98 89       	ldd	r25, Y+16	; 0x10
  b0:	91 8f       	std	Z+25, r25	; 0x19
  b2:	80 8f       	std	Z+24, r24	; 0x18
  b4:	e9 81       	ldd	r30, Y+1	; 0x01
  b6:	fa 81       	ldd	r31, Y+2	; 0x02
  b8:	89 89       	ldd	r24, Y+17	; 0x11
  ba:	9a 89       	ldd	r25, Y+18	; 0x12
  bc:	93 8f       	std	Z+27, r25	; 0x1b
  be:	82 8f       	std	Z+26, r24	; 0x1a
  c0:	e9 81       	ldd	r30, Y+1	; 0x01
  c2:	fa 81       	ldd	r31, Y+2	; 0x02
  c4:	89 a1       	ldd	r24, Y+33	; 0x21
  c6:	84 8f       	std	Z+28, r24	; 0x1c
  c8:	e9 81       	ldd	r30, Y+1	; 0x01
  ca:	fa 81       	ldd	r31, Y+2	; 0x02
  cc:	8a a1       	ldd	r24, Y+34	; 0x22
  ce:	85 8f       	std	Z+29, r24	; 0x1d
  d0:	e9 81       	ldd	r30, Y+1	; 0x01
  d2:	fa 81       	ldd	r31, Y+2	; 0x02
  d4:	8b a1       	ldd	r24, Y+35	; 0x23
  d6:	86 8f       	std	Z+30, r24	; 0x1e
  d8:	e9 81       	ldd	r30, Y+1	; 0x01
  da:	fa 81       	ldd	r31, Y+2	; 0x02
  dc:	8c a1       	ldd	r24, Y+36	; 0x24
  de:	87 8f       	std	Z+31, r24	; 0x1f
  e0:	e9 81       	ldd	r30, Y+1	; 0x01
  e2:	fa 81       	ldd	r31, Y+2	; 0x02
  e4:	8d a1       	ldd	r24, Y+37	; 0x25
  e6:	80 a3       	std	Z+32, r24	; 0x20
  e8:	62 96       	adiw	r28, 0x12	; 18
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	ff 90       	pop	r15
  fe:	ef 90       	pop	r14
 100:	df 90       	pop	r13
 102:	cf 90       	pop	r12
 104:	bf 90       	pop	r11
 106:	af 90       	pop	r10
 108:	9f 90       	pop	r9
 10a:	8f 90       	pop	r8
 10c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEm:

00000000 <_ZN14HardwareSerial5beginEm>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9d 83       	std	Y+5, r25	; 0x05
  16:	8c 83       	std	Y+4, r24	; 0x04
  18:	4e 83       	std	Y+6, r20	; 0x06
  1a:	5f 83       	std	Y+7, r21	; 0x07
  1c:	68 87       	std	Y+8, r22	; 0x08
  1e:	79 87       	std	Y+9, r23	; 0x09
  20:	81 e0       	ldi	r24, 0x01	; 1
  22:	89 83       	std	Y+1, r24	; 0x01
  24:	8e 81       	ldd	r24, Y+6	; 0x06
  26:	9f 81       	ldd	r25, Y+7	; 0x07
  28:	a8 85       	ldd	r26, Y+8	; 0x08
  2a:	b9 85       	ldd	r27, Y+9	; 0x09
  2c:	80 30       	cpi	r24, 0x00	; 0
  2e:	21 ee       	ldi	r18, 0xE1	; 225
  30:	92 07       	cpc	r25, r18
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 07       	cpc	r26, r18
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	b2 07       	cpc	r27, r18
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN14HardwareSerial5beginEm+0x3c>
  3c:	19 82       	std	Y+1, r1	; 0x01
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	88 23       	and	r24, r24
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN14HardwareSerial5beginEm+0x44>
  44:	ec 81       	ldd	r30, Y+4	; 0x04
  46:	fd 81       	ldd	r31, Y+5	; 0x05
  48:	a4 89       	ldd	r26, Z+20	; 0x14
  4a:	b5 89       	ldd	r27, Z+21	; 0x15
  4c:	ec 81       	ldd	r30, Y+4	; 0x04
  4e:	fd 81       	ldd	r31, Y+5	; 0x05
  50:	80 a1       	ldd	r24, Z+32	; 0x20
  52:	28 2f       	mov	r18, r24
  54:	30 e0       	ldi	r19, 0x00	; 0
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN14HardwareSerial5beginEm+0x5c>
  5c:	88 0f       	add	r24, r24
  5e:	99 1f       	adc	r25, r25
  60:	2a 95       	dec	r18
  62:	02 f4       	brpl	.+0      	; 0x64 <_ZN14HardwareSerial5beginEm+0x64>
  64:	8c 93       	st	X, r24
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	99 e0       	ldi	r25, 0x09	; 9
  6a:	ad e3       	ldi	r26, 0x3D	; 61
  6c:	b0 e0       	ldi	r27, 0x00	; 0
  6e:	2e 81       	ldd	r18, Y+6	; 0x06
  70:	3f 81       	ldd	r19, Y+7	; 0x07
  72:	48 85       	ldd	r20, Y+8	; 0x08
  74:	59 85       	ldd	r21, Y+9	; 0x09
  76:	bc 01       	movw	r22, r24
  78:	cd 01       	movw	r24, r26
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEm>
  7e:	da 01       	movw	r26, r20
  80:	c9 01       	movw	r24, r18
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	a1 09       	sbc	r26, r1
  86:	b1 09       	sbc	r27, r1
  88:	b6 95       	lsr	r27
  8a:	a7 95       	ror	r26
  8c:	97 95       	ror	r25
  8e:	87 95       	ror	r24
  90:	9b 83       	std	Y+3, r25	; 0x03
  92:	8a 83       	std	Y+2, r24	; 0x02
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN14HardwareSerial5beginEm+0x96>
  96:	ec 81       	ldd	r30, Y+4	; 0x04
  98:	fd 81       	ldd	r31, Y+5	; 0x05
  9a:	04 88       	ldd	r0, Z+20	; 0x14
  9c:	f5 89       	ldd	r31, Z+21	; 0x15
  9e:	e0 2d       	mov	r30, r0
  a0:	10 82       	st	Z, r1
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	94 e8       	ldi	r25, 0x84	; 132
  a6:	ae e1       	ldi	r26, 0x1E	; 30
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	2e 81       	ldd	r18, Y+6	; 0x06
  ac:	3f 81       	ldd	r19, Y+7	; 0x07
  ae:	48 85       	ldd	r20, Y+8	; 0x08
  b0:	59 85       	ldd	r21, Y+9	; 0x09
  b2:	bc 01       	movw	r22, r24
  b4:	cd 01       	movw	r24, r26
  b6:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEm>
  ba:	da 01       	movw	r26, r20
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	a1 09       	sbc	r26, r1
  c2:	b1 09       	sbc	r27, r1
  c4:	b6 95       	lsr	r27
  c6:	a7 95       	ror	r26
  c8:	97 95       	ror	r25
  ca:	87 95       	ror	r24
  cc:	9b 83       	std	Y+3, r25	; 0x03
  ce:	8a 83       	std	Y+2, r24	; 0x02
  d0:	8a 81       	ldd	r24, Y+2	; 0x02
  d2:	9b 81       	ldd	r25, Y+3	; 0x03
  d4:	20 e1       	ldi	r18, 0x10	; 16
  d6:	80 30       	cpi	r24, 0x00	; 0
  d8:	92 07       	cpc	r25, r18
  da:	00 f0       	brcs	.+0      	; 0xdc <_ZN14HardwareSerial5beginEm+0xdc>
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	88 23       	and	r24, r24
  e0:	01 f0       	breq	.+0      	; 0xe2 <_ZN14HardwareSerial5beginEm+0xe2>
  e2:	19 82       	std	Y+1, r1	; 0x01
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_ZN14HardwareSerial5beginEm+0xe6>
  e6:	ec 81       	ldd	r30, Y+4	; 0x04
  e8:	fd 81       	ldd	r31, Y+5	; 0x05
  ea:	00 88       	ldd	r0, Z+16	; 0x10
  ec:	f1 89       	ldd	r31, Z+17	; 0x11
  ee:	e0 2d       	mov	r30, r0
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	9b 81       	ldd	r25, Y+3	; 0x03
  f4:	89 2f       	mov	r24, r25
  f6:	99 27       	eor	r25, r25
  f8:	80 83       	st	Z, r24
  fa:	ec 81       	ldd	r30, Y+4	; 0x04
  fc:	fd 81       	ldd	r31, Y+5	; 0x05
  fe:	02 88       	ldd	r0, Z+18	; 0x12
 100:	f3 89       	ldd	r31, Z+19	; 0x13
 102:	e0 2d       	mov	r30, r0
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	80 83       	st	Z, r24
 108:	ec 81       	ldd	r30, Y+4	; 0x04
 10a:	fd 81       	ldd	r31, Y+5	; 0x05
 10c:	11 a2       	std	Z+33, r1	; 0x21
 10e:	ec 81       	ldd	r30, Y+4	; 0x04
 110:	fd 81       	ldd	r31, Y+5	; 0x05
 112:	a6 89       	ldd	r26, Z+22	; 0x16
 114:	b7 89       	ldd	r27, Z+23	; 0x17
 116:	ec 81       	ldd	r30, Y+4	; 0x04
 118:	fd 81       	ldd	r31, Y+5	; 0x05
 11a:	06 88       	ldd	r0, Z+22	; 0x16
 11c:	f7 89       	ldd	r31, Z+23	; 0x17
 11e:	e0 2d       	mov	r30, r0
 120:	80 81       	ld	r24, Z
 122:	48 2f       	mov	r20, r24
 124:	ec 81       	ldd	r30, Y+4	; 0x04
 126:	fd 81       	ldd	r31, Y+5	; 0x05
 128:	84 8d       	ldd	r24, Z+28	; 0x1c
 12a:	28 2f       	mov	r18, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	00 c0       	rjmp	.+0      	; 0x134 <_ZN14HardwareSerial5beginEm+0x134>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	2a 95       	dec	r18
 13a:	02 f4       	brpl	.+0      	; 0x13c <_ZN14HardwareSerial5beginEm+0x13c>
 13c:	84 2b       	or	r24, r20
 13e:	8c 93       	st	X, r24
 140:	ec 81       	ldd	r30, Y+4	; 0x04
 142:	fd 81       	ldd	r31, Y+5	; 0x05
 144:	a6 89       	ldd	r26, Z+22	; 0x16
 146:	b7 89       	ldd	r27, Z+23	; 0x17
 148:	ec 81       	ldd	r30, Y+4	; 0x04
 14a:	fd 81       	ldd	r31, Y+5	; 0x05
 14c:	06 88       	ldd	r0, Z+22	; 0x16
 14e:	f7 89       	ldd	r31, Z+23	; 0x17
 150:	e0 2d       	mov	r30, r0
 152:	80 81       	ld	r24, Z
 154:	48 2f       	mov	r20, r24
 156:	ec 81       	ldd	r30, Y+4	; 0x04
 158:	fd 81       	ldd	r31, Y+5	; 0x05
 15a:	85 8d       	ldd	r24, Z+29	; 0x1d
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	00 c0       	rjmp	.+0      	; 0x166 <_ZN14HardwareSerial5beginEm+0x166>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	2a 95       	dec	r18
 16c:	02 f4       	brpl	.+0      	; 0x16e <_ZN14HardwareSerial5beginEm+0x16e>
 16e:	84 2b       	or	r24, r20
 170:	8c 93       	st	X, r24
 172:	ec 81       	ldd	r30, Y+4	; 0x04
 174:	fd 81       	ldd	r31, Y+5	; 0x05
 176:	a6 89       	ldd	r26, Z+22	; 0x16
 178:	b7 89       	ldd	r27, Z+23	; 0x17
 17a:	ec 81       	ldd	r30, Y+4	; 0x04
 17c:	fd 81       	ldd	r31, Y+5	; 0x05
 17e:	06 88       	ldd	r0, Z+22	; 0x16
 180:	f7 89       	ldd	r31, Z+23	; 0x17
 182:	e0 2d       	mov	r30, r0
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	ec 81       	ldd	r30, Y+4	; 0x04
 18a:	fd 81       	ldd	r31, Y+5	; 0x05
 18c:	86 8d       	ldd	r24, Z+30	; 0x1e
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	00 c0       	rjmp	.+0      	; 0x198 <_ZN14HardwareSerial5beginEm+0x198>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	2a 95       	dec	r18
 19e:	02 f4       	brpl	.+0      	; 0x1a0 <_ZN14HardwareSerial5beginEm+0x1a0>
 1a0:	84 2b       	or	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	ec 81       	ldd	r30, Y+4	; 0x04
 1a6:	fd 81       	ldd	r31, Y+5	; 0x05
 1a8:	a6 89       	ldd	r26, Z+22	; 0x16
 1aa:	b7 89       	ldd	r27, Z+23	; 0x17
 1ac:	ec 81       	ldd	r30, Y+4	; 0x04
 1ae:	fd 81       	ldd	r31, Y+5	; 0x05
 1b0:	06 88       	ldd	r0, Z+22	; 0x16
 1b2:	f7 89       	ldd	r31, Z+23	; 0x17
 1b4:	e0 2d       	mov	r30, r0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	ec 81       	ldd	r30, Y+4	; 0x04
 1bc:	fd 81       	ldd	r31, Y+5	; 0x05
 1be:	87 8d       	ldd	r24, Z+31	; 0x1f
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 2e       	mov	r0, r18
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_ZN14HardwareSerial5beginEm+0x1cc>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	0a 94       	dec	r0
 1d2:	02 f4       	brpl	.+0      	; 0x1d4 <_ZN14HardwareSerial5beginEm+0x1d4>
 1d4:	80 95       	com	r24
 1d6:	84 23       	and	r24, r20
 1d8:	8c 93       	st	X, r24
 1da:	29 96       	adiw	r28, 0x09	; 9
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEmh:

00000000 <_ZN14HardwareSerial5beginEmh>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2b 97       	sbiw	r28, 0x0b	; 11
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9e 83       	std	Y+6, r25	; 0x06
  16:	8d 83       	std	Y+5, r24	; 0x05
  18:	4f 83       	std	Y+7, r20	; 0x07
  1a:	58 87       	std	Y+8, r21	; 0x08
  1c:	69 87       	std	Y+9, r22	; 0x09
  1e:	7a 87       	std	Y+10, r23	; 0x0a
  20:	2b 87       	std	Y+11, r18	; 0x0b
  22:	81 e0       	ldi	r24, 0x01	; 1
  24:	89 83       	std	Y+1, r24	; 0x01
  26:	8f 81       	ldd	r24, Y+7	; 0x07
  28:	98 85       	ldd	r25, Y+8	; 0x08
  2a:	a9 85       	ldd	r26, Y+9	; 0x09
  2c:	ba 85       	ldd	r27, Y+10	; 0x0a
  2e:	80 30       	cpi	r24, 0x00	; 0
  30:	21 ee       	ldi	r18, 0xE1	; 225
  32:	92 07       	cpc	r25, r18
  34:	20 e0       	ldi	r18, 0x00	; 0
  36:	a2 07       	cpc	r26, r18
  38:	20 e0       	ldi	r18, 0x00	; 0
  3a:	b2 07       	cpc	r27, r18
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN14HardwareSerial5beginEmh+0x3e>
  3e:	19 82       	std	Y+1, r1	; 0x01
  40:	89 81       	ldd	r24, Y+1	; 0x01
  42:	88 23       	and	r24, r24
  44:	01 f0       	breq	.+0      	; 0x46 <_ZN14HardwareSerial5beginEmh+0x46>
  46:	ed 81       	ldd	r30, Y+5	; 0x05
  48:	fe 81       	ldd	r31, Y+6	; 0x06
  4a:	a4 89       	ldd	r26, Z+20	; 0x14
  4c:	b5 89       	ldd	r27, Z+21	; 0x15
  4e:	ed 81       	ldd	r30, Y+5	; 0x05
  50:	fe 81       	ldd	r31, Y+6	; 0x06
  52:	80 a1       	ldd	r24, Z+32	; 0x20
  54:	28 2f       	mov	r18, r24
  56:	30 e0       	ldi	r19, 0x00	; 0
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_ZN14HardwareSerial5beginEmh+0x5e>
  5e:	88 0f       	add	r24, r24
  60:	99 1f       	adc	r25, r25
  62:	2a 95       	dec	r18
  64:	02 f4       	brpl	.+0      	; 0x66 <_ZN14HardwareSerial5beginEmh+0x66>
  66:	8c 93       	st	X, r24
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	99 e0       	ldi	r25, 0x09	; 9
  6c:	ad e3       	ldi	r26, 0x3D	; 61
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	2f 81       	ldd	r18, Y+7	; 0x07
  72:	38 85       	ldd	r19, Y+8	; 0x08
  74:	49 85       	ldd	r20, Y+9	; 0x09
  76:	5a 85       	ldd	r21, Y+10	; 0x0a
  78:	bc 01       	movw	r22, r24
  7a:	cd 01       	movw	r24, r26
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEmh>
  80:	da 01       	movw	r26, r20
  82:	c9 01       	movw	r24, r18
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	a1 09       	sbc	r26, r1
  88:	b1 09       	sbc	r27, r1
  8a:	b6 95       	lsr	r27
  8c:	a7 95       	ror	r26
  8e:	97 95       	ror	r25
  90:	87 95       	ror	r24
  92:	9c 83       	std	Y+4, r25	; 0x04
  94:	8b 83       	std	Y+3, r24	; 0x03
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZN14HardwareSerial5beginEmh+0x98>
  98:	ed 81       	ldd	r30, Y+5	; 0x05
  9a:	fe 81       	ldd	r31, Y+6	; 0x06
  9c:	04 88       	ldd	r0, Z+20	; 0x14
  9e:	f5 89       	ldd	r31, Z+21	; 0x15
  a0:	e0 2d       	mov	r30, r0
  a2:	10 82       	st	Z, r1
  a4:	80 e8       	ldi	r24, 0x80	; 128
  a6:	94 e8       	ldi	r25, 0x84	; 132
  a8:	ae e1       	ldi	r26, 0x1E	; 30
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	2f 81       	ldd	r18, Y+7	; 0x07
  ae:	38 85       	ldd	r19, Y+8	; 0x08
  b0:	49 85       	ldd	r20, Y+9	; 0x09
  b2:	5a 85       	ldd	r21, Y+10	; 0x0a
  b4:	bc 01       	movw	r22, r24
  b6:	cd 01       	movw	r24, r26
  b8:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEmh>
  bc:	da 01       	movw	r26, r20
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	a1 09       	sbc	r26, r1
  c4:	b1 09       	sbc	r27, r1
  c6:	b6 95       	lsr	r27
  c8:	a7 95       	ror	r26
  ca:	97 95       	ror	r25
  cc:	87 95       	ror	r24
  ce:	9c 83       	std	Y+4, r25	; 0x04
  d0:	8b 83       	std	Y+3, r24	; 0x03
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	9c 81       	ldd	r25, Y+4	; 0x04
  d6:	20 e1       	ldi	r18, 0x10	; 16
  d8:	80 30       	cpi	r24, 0x00	; 0
  da:	92 07       	cpc	r25, r18
  dc:	00 f0       	brcs	.+0      	; 0xde <_ZN14HardwareSerial5beginEmh+0xde>
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	88 23       	and	r24, r24
  e2:	01 f0       	breq	.+0      	; 0xe4 <_ZN14HardwareSerial5beginEmh+0xe4>
  e4:	19 82       	std	Y+1, r1	; 0x01
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_ZN14HardwareSerial5beginEmh+0xe8>
  e8:	ed 81       	ldd	r30, Y+5	; 0x05
  ea:	fe 81       	ldd	r31, Y+6	; 0x06
  ec:	00 88       	ldd	r0, Z+16	; 0x10
  ee:	f1 89       	ldd	r31, Z+17	; 0x11
  f0:	e0 2d       	mov	r30, r0
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	9c 81       	ldd	r25, Y+4	; 0x04
  f6:	89 2f       	mov	r24, r25
  f8:	99 27       	eor	r25, r25
  fa:	80 83       	st	Z, r24
  fc:	ed 81       	ldd	r30, Y+5	; 0x05
  fe:	fe 81       	ldd	r31, Y+6	; 0x06
 100:	02 88       	ldd	r0, Z+18	; 0x12
 102:	f3 89       	ldd	r31, Z+19	; 0x13
 104:	e0 2d       	mov	r30, r0
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	80 83       	st	Z, r24
 10a:	ed 81       	ldd	r30, Y+5	; 0x05
 10c:	fe 81       	ldd	r31, Y+6	; 0x06
 10e:	00 8c       	ldd	r0, Z+24	; 0x18
 110:	f1 8d       	ldd	r31, Z+25	; 0x19
 112:	e0 2d       	mov	r30, r0
 114:	8b 85       	ldd	r24, Y+11	; 0x0b
 116:	80 83       	st	Z, r24
 118:	ed 81       	ldd	r30, Y+5	; 0x05
 11a:	fe 81       	ldd	r31, Y+6	; 0x06
 11c:	a6 89       	ldd	r26, Z+22	; 0x16
 11e:	b7 89       	ldd	r27, Z+23	; 0x17
 120:	ed 81       	ldd	r30, Y+5	; 0x05
 122:	fe 81       	ldd	r31, Y+6	; 0x06
 124:	06 88       	ldd	r0, Z+22	; 0x16
 126:	f7 89       	ldd	r31, Z+23	; 0x17
 128:	e0 2d       	mov	r30, r0
 12a:	80 81       	ld	r24, Z
 12c:	48 2f       	mov	r20, r24
 12e:	ed 81       	ldd	r30, Y+5	; 0x05
 130:	fe 81       	ldd	r31, Y+6	; 0x06
 132:	84 8d       	ldd	r24, Z+28	; 0x1c
 134:	28 2f       	mov	r18, r24
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	00 c0       	rjmp	.+0      	; 0x13e <_ZN14HardwareSerial5beginEmh+0x13e>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	2a 95       	dec	r18
 144:	02 f4       	brpl	.+0      	; 0x146 <_ZN14HardwareSerial5beginEmh+0x146>
 146:	84 2b       	or	r24, r20
 148:	8c 93       	st	X, r24
 14a:	ed 81       	ldd	r30, Y+5	; 0x05
 14c:	fe 81       	ldd	r31, Y+6	; 0x06
 14e:	a6 89       	ldd	r26, Z+22	; 0x16
 150:	b7 89       	ldd	r27, Z+23	; 0x17
 152:	ed 81       	ldd	r30, Y+5	; 0x05
 154:	fe 81       	ldd	r31, Y+6	; 0x06
 156:	06 88       	ldd	r0, Z+22	; 0x16
 158:	f7 89       	ldd	r31, Z+23	; 0x17
 15a:	e0 2d       	mov	r30, r0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	ed 81       	ldd	r30, Y+5	; 0x05
 162:	fe 81       	ldd	r31, Y+6	; 0x06
 164:	85 8d       	ldd	r24, Z+29	; 0x1d
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	00 c0       	rjmp	.+0      	; 0x170 <_ZN14HardwareSerial5beginEmh+0x170>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	2a 95       	dec	r18
 176:	02 f4       	brpl	.+0      	; 0x178 <_ZN14HardwareSerial5beginEmh+0x178>
 178:	84 2b       	or	r24, r20
 17a:	8c 93       	st	X, r24
 17c:	ed 81       	ldd	r30, Y+5	; 0x05
 17e:	fe 81       	ldd	r31, Y+6	; 0x06
 180:	a6 89       	ldd	r26, Z+22	; 0x16
 182:	b7 89       	ldd	r27, Z+23	; 0x17
 184:	ed 81       	ldd	r30, Y+5	; 0x05
 186:	fe 81       	ldd	r31, Y+6	; 0x06
 188:	06 88       	ldd	r0, Z+22	; 0x16
 18a:	f7 89       	ldd	r31, Z+23	; 0x17
 18c:	e0 2d       	mov	r30, r0
 18e:	80 81       	ld	r24, Z
 190:	48 2f       	mov	r20, r24
 192:	ed 81       	ldd	r30, Y+5	; 0x05
 194:	fe 81       	ldd	r31, Y+6	; 0x06
 196:	86 8d       	ldd	r24, Z+30	; 0x1e
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_ZN14HardwareSerial5beginEmh+0x1a2>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	2a 95       	dec	r18
 1a8:	02 f4       	brpl	.+0      	; 0x1aa <_ZN14HardwareSerial5beginEmh+0x1aa>
 1aa:	84 2b       	or	r24, r20
 1ac:	8c 93       	st	X, r24
 1ae:	ed 81       	ldd	r30, Y+5	; 0x05
 1b0:	fe 81       	ldd	r31, Y+6	; 0x06
 1b2:	a6 89       	ldd	r26, Z+22	; 0x16
 1b4:	b7 89       	ldd	r27, Z+23	; 0x17
 1b6:	ed 81       	ldd	r30, Y+5	; 0x05
 1b8:	fe 81       	ldd	r31, Y+6	; 0x06
 1ba:	06 88       	ldd	r0, Z+22	; 0x16
 1bc:	f7 89       	ldd	r31, Z+23	; 0x17
 1be:	e0 2d       	mov	r30, r0
 1c0:	80 81       	ld	r24, Z
 1c2:	48 2f       	mov	r20, r24
 1c4:	ed 81       	ldd	r30, Y+5	; 0x05
 1c6:	fe 81       	ldd	r31, Y+6	; 0x06
 1c8:	87 8d       	ldd	r24, Z+31	; 0x1f
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 2e       	mov	r0, r18
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_ZN14HardwareSerial5beginEmh+0x1d6>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	02 f4       	brpl	.+0      	; 0x1de <_ZN14HardwareSerial5beginEmh+0x1de>
 1de:	80 95       	com	r24
 1e0:	84 23       	and	r24, r20
 1e2:	8c 93       	st	X, r24
 1e4:	2b 96       	adiw	r28, 0x0b	; 11
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial3endEv:

00000000 <_ZN14HardwareSerial3endEv>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN14HardwareSerial3endEv+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	e9 81       	ldd	r30, Y+1	; 0x01
  12:	fa 81       	ldd	r31, Y+2	; 0x02
  14:	86 85       	ldd	r24, Z+14	; 0x0e
  16:	97 85       	ldd	r25, Z+15	; 0x0f
  18:	fc 01       	movw	r30, r24
  1a:	e0 5c       	subi	r30, 0xC0	; 192
  1c:	ff 4f       	sbci	r31, 0xFF	; 255
  1e:	20 81       	ld	r18, Z
  20:	31 81       	ldd	r19, Z+1	; 0x01
  22:	e9 81       	ldd	r30, Y+1	; 0x01
  24:	fa 81       	ldd	r31, Y+2	; 0x02
  26:	86 85       	ldd	r24, Z+14	; 0x0e
  28:	97 85       	ldd	r25, Z+15	; 0x0f
  2a:	fc 01       	movw	r30, r24
  2c:	ee 5b       	subi	r30, 0xBE	; 190
  2e:	ff 4f       	sbci	r31, 0xFF	; 255
  30:	80 81       	ld	r24, Z
  32:	91 81       	ldd	r25, Z+1	; 0x01
  34:	1b 82       	std	Y+3, r1	; 0x03
  36:	28 17       	cp	r18, r24
  38:	39 07       	cpc	r19, r25
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN14HardwareSerial3endEv+0x3c>
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	8b 83       	std	Y+3, r24	; 0x03
  40:	8b 81       	ldd	r24, Y+3	; 0x03
  42:	88 23       	and	r24, r24
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN14HardwareSerial3endEv+0x46>
  46:	e9 81       	ldd	r30, Y+1	; 0x01
  48:	fa 81       	ldd	r31, Y+2	; 0x02
  4a:	a6 89       	ldd	r26, Z+22	; 0x16
  4c:	b7 89       	ldd	r27, Z+23	; 0x17
  4e:	e9 81       	ldd	r30, Y+1	; 0x01
  50:	fa 81       	ldd	r31, Y+2	; 0x02
  52:	06 88       	ldd	r0, Z+22	; 0x16
  54:	f7 89       	ldd	r31, Z+23	; 0x17
  56:	e0 2d       	mov	r30, r0
  58:	80 81       	ld	r24, Z
  5a:	48 2f       	mov	r20, r24
  5c:	e9 81       	ldd	r30, Y+1	; 0x01
  5e:	fa 81       	ldd	r31, Y+2	; 0x02
  60:	84 8d       	ldd	r24, Z+28	; 0x1c
  62:	28 2f       	mov	r18, r24
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN14HardwareSerial3endEv+0x6c>
  6c:	88 0f       	add	r24, r24
  6e:	99 1f       	adc	r25, r25
  70:	2a 95       	dec	r18
  72:	02 f4       	brpl	.+0      	; 0x74 <_ZN14HardwareSerial3endEv+0x74>
  74:	80 95       	com	r24
  76:	84 23       	and	r24, r20
  78:	8c 93       	st	X, r24
  7a:	e9 81       	ldd	r30, Y+1	; 0x01
  7c:	fa 81       	ldd	r31, Y+2	; 0x02
  7e:	a6 89       	ldd	r26, Z+22	; 0x16
  80:	b7 89       	ldd	r27, Z+23	; 0x17
  82:	e9 81       	ldd	r30, Y+1	; 0x01
  84:	fa 81       	ldd	r31, Y+2	; 0x02
  86:	06 88       	ldd	r0, Z+22	; 0x16
  88:	f7 89       	ldd	r31, Z+23	; 0x17
  8a:	e0 2d       	mov	r30, r0
  8c:	80 81       	ld	r24, Z
  8e:	48 2f       	mov	r20, r24
  90:	e9 81       	ldd	r30, Y+1	; 0x01
  92:	fa 81       	ldd	r31, Y+2	; 0x02
  94:	85 8d       	ldd	r24, Z+29	; 0x1d
  96:	28 2f       	mov	r18, r24
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN14HardwareSerial3endEv+0xa0>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	2a 95       	dec	r18
  a6:	02 f4       	brpl	.+0      	; 0xa8 <_ZN14HardwareSerial3endEv+0xa8>
  a8:	80 95       	com	r24
  aa:	84 23       	and	r24, r20
  ac:	8c 93       	st	X, r24
  ae:	e9 81       	ldd	r30, Y+1	; 0x01
  b0:	fa 81       	ldd	r31, Y+2	; 0x02
  b2:	a6 89       	ldd	r26, Z+22	; 0x16
  b4:	b7 89       	ldd	r27, Z+23	; 0x17
  b6:	e9 81       	ldd	r30, Y+1	; 0x01
  b8:	fa 81       	ldd	r31, Y+2	; 0x02
  ba:	06 88       	ldd	r0, Z+22	; 0x16
  bc:	f7 89       	ldd	r31, Z+23	; 0x17
  be:	e0 2d       	mov	r30, r0
  c0:	80 81       	ld	r24, Z
  c2:	48 2f       	mov	r20, r24
  c4:	e9 81       	ldd	r30, Y+1	; 0x01
  c6:	fa 81       	ldd	r31, Y+2	; 0x02
  c8:	86 8d       	ldd	r24, Z+30	; 0x1e
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZN14HardwareSerial3endEv+0xd4>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	2a 95       	dec	r18
  da:	02 f4       	brpl	.+0      	; 0xdc <_ZN14HardwareSerial3endEv+0xdc>
  dc:	80 95       	com	r24
  de:	84 23       	and	r24, r20
  e0:	8c 93       	st	X, r24
  e2:	e9 81       	ldd	r30, Y+1	; 0x01
  e4:	fa 81       	ldd	r31, Y+2	; 0x02
  e6:	a6 89       	ldd	r26, Z+22	; 0x16
  e8:	b7 89       	ldd	r27, Z+23	; 0x17
  ea:	e9 81       	ldd	r30, Y+1	; 0x01
  ec:	fa 81       	ldd	r31, Y+2	; 0x02
  ee:	06 88       	ldd	r0, Z+22	; 0x16
  f0:	f7 89       	ldd	r31, Z+23	; 0x17
  f2:	e0 2d       	mov	r30, r0
  f4:	80 81       	ld	r24, Z
  f6:	48 2f       	mov	r20, r24
  f8:	e9 81       	ldd	r30, Y+1	; 0x01
  fa:	fa 81       	ldd	r31, Y+2	; 0x02
  fc:	87 8d       	ldd	r24, Z+31	; 0x1f
  fe:	28 2f       	mov	r18, r24
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	00 c0       	rjmp	.+0      	; 0x108 <_ZN14HardwareSerial3endEv+0x108>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	2a 95       	dec	r18
 10e:	02 f4       	brpl	.+0      	; 0x110 <_ZN14HardwareSerial3endEv+0x110>
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	8c 93       	st	X, r24
 116:	e9 81       	ldd	r30, Y+1	; 0x01
 118:	fa 81       	ldd	r31, Y+2	; 0x02
 11a:	24 85       	ldd	r18, Z+12	; 0x0c
 11c:	35 85       	ldd	r19, Z+13	; 0x0d
 11e:	e9 81       	ldd	r30, Y+1	; 0x01
 120:	fa 81       	ldd	r31, Y+2	; 0x02
 122:	84 85       	ldd	r24, Z+12	; 0x0c
 124:	95 85       	ldd	r25, Z+13	; 0x0d
 126:	fc 01       	movw	r30, r24
 128:	ee 5b       	subi	r30, 0xBE	; 190
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
 12e:	91 81       	ldd	r25, Z+1	; 0x01
 130:	f9 01       	movw	r30, r18
 132:	e0 5c       	subi	r30, 0xC0	; 192
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	91 83       	std	Z+1, r25	; 0x01
 138:	80 83       	st	Z, r24
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN14HardwareSerial9availableEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	84 85       	ldd	r24, Z+12	; 0x0c
  14:	95 85       	ldd	r25, Z+13	; 0x0d
  16:	fc 01       	movw	r30, r24
  18:	e0 5c       	subi	r30, 0xC0	; 192
  1a:	ff 4f       	sbci	r31, 0xFF	; 255
  1c:	20 81       	ld	r18, Z
  1e:	31 81       	ldd	r19, Z+1	; 0x01
  20:	e9 81       	ldd	r30, Y+1	; 0x01
  22:	fa 81       	ldd	r31, Y+2	; 0x02
  24:	84 85       	ldd	r24, Z+12	; 0x0c
  26:	95 85       	ldd	r25, Z+13	; 0x0d
  28:	fc 01       	movw	r30, r24
  2a:	ee 5b       	subi	r30, 0xBE	; 190
  2c:	ff 4f       	sbci	r31, 0xFF	; 255
  2e:	80 81       	ld	r24, Z
  30:	91 81       	ldd	r25, Z+1	; 0x01
  32:	a9 01       	movw	r20, r18
  34:	48 1b       	sub	r20, r24
  36:	59 0b       	sbc	r21, r25
  38:	ca 01       	movw	r24, r20
  3a:	80 5c       	subi	r24, 0xC0	; 192
  3c:	9f 4f       	sbci	r25, 0xFF	; 255
  3e:	8f 73       	andi	r24, 0x3F	; 63
  40:	90 70       	andi	r25, 0x00	; 0
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	cf 91       	pop	r28
  48:	df 91       	pop	r29
  4a:	08 95       	ret

Disassembly of section .text._Z14serialEventRunv:

00000000 <_Z14serialEventRunv>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  12:	19 82       	std	Y+1, r1	; 0x01
  14:	00 97       	sbiw	r24, 0x00	; 0
  16:	01 f0       	breq	.+0      	; 0x18 <_Z14serialEventRunv+0x18>
  18:	81 e0       	ldi	r24, 0x01	; 1
  1a:	89 83       	std	Y+1, r24	; 0x01
  1c:	89 81       	ldd	r24, Y+1	; 0x01
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <_Z14serialEventRunv+0x22>
  22:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  26:	0f 90       	pop	r0
  28:	cf 91       	pop	r28
  2a:	df 91       	pop	r29
  2c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000000 <_ZN14HardwareSerial4peekEv>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN14HardwareSerial4peekEv+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN14HardwareSerial4peekEv+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	e9 81       	ldd	r30, Y+1	; 0x01
  14:	fa 81       	ldd	r31, Y+2	; 0x02
  16:	84 85       	ldd	r24, Z+12	; 0x0c
  18:	95 85       	ldd	r25, Z+13	; 0x0d
  1a:	fc 01       	movw	r30, r24
  1c:	e0 5c       	subi	r30, 0xC0	; 192
  1e:	ff 4f       	sbci	r31, 0xFF	; 255
  20:	20 81       	ld	r18, Z
  22:	31 81       	ldd	r19, Z+1	; 0x01
  24:	e9 81       	ldd	r30, Y+1	; 0x01
  26:	fa 81       	ldd	r31, Y+2	; 0x02
  28:	84 85       	ldd	r24, Z+12	; 0x0c
  2a:	95 85       	ldd	r25, Z+13	; 0x0d
  2c:	fc 01       	movw	r30, r24
  2e:	ee 5b       	subi	r30, 0xBE	; 190
  30:	ff 4f       	sbci	r31, 0xFF	; 255
  32:	80 81       	ld	r24, Z
  34:	91 81       	ldd	r25, Z+1	; 0x01
  36:	1d 82       	std	Y+5, r1	; 0x05
  38:	28 17       	cp	r18, r24
  3a:	39 07       	cpc	r19, r25
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN14HardwareSerial4peekEv+0x3e>
  3e:	21 e0       	ldi	r18, 0x01	; 1
  40:	2d 83       	std	Y+5, r18	; 0x05
  42:	3d 81       	ldd	r19, Y+5	; 0x05
  44:	33 23       	and	r19, r19
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN14HardwareSerial4peekEv+0x48>
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	9f ef       	ldi	r25, 0xFF	; 255
  4c:	9c 83       	std	Y+4, r25	; 0x04
  4e:	8b 83       	std	Y+3, r24	; 0x03
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN14HardwareSerial4peekEv+0x52>
  52:	e9 81       	ldd	r30, Y+1	; 0x01
  54:	fa 81       	ldd	r31, Y+2	; 0x02
  56:	24 85       	ldd	r18, Z+12	; 0x0c
  58:	35 85       	ldd	r19, Z+13	; 0x0d
  5a:	e9 81       	ldd	r30, Y+1	; 0x01
  5c:	fa 81       	ldd	r31, Y+2	; 0x02
  5e:	84 85       	ldd	r24, Z+12	; 0x0c
  60:	95 85       	ldd	r25, Z+13	; 0x0d
  62:	fc 01       	movw	r30, r24
  64:	ee 5b       	subi	r30, 0xBE	; 190
  66:	ff 4f       	sbci	r31, 0xFF	; 255
  68:	80 81       	ld	r24, Z
  6a:	91 81       	ldd	r25, Z+1	; 0x01
  6c:	f9 01       	movw	r30, r18
  6e:	e8 0f       	add	r30, r24
  70:	f9 1f       	adc	r31, r25
  72:	80 81       	ld	r24, Z
  74:	28 2f       	mov	r18, r24
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	3c 83       	std	Y+4, r19	; 0x04
  7a:	2b 83       	std	Y+3, r18	; 0x03
  7c:	8b 81       	ldd	r24, Y+3	; 0x03
  7e:	9c 81       	ldd	r25, Y+4	; 0x04
  80:	0f 90       	pop	r0
  82:	0f 90       	pop	r0
  84:	0f 90       	pop	r0
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4readEv:

00000000 <_ZN14HardwareSerial4readEv>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN14HardwareSerial4readEv+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN14HardwareSerial4readEv+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN14HardwareSerial4readEv+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9b 83       	std	Y+3, r25	; 0x03
  10:	8a 83       	std	Y+2, r24	; 0x02
  12:	ea 81       	ldd	r30, Y+2	; 0x02
  14:	fb 81       	ldd	r31, Y+3	; 0x03
  16:	84 85       	ldd	r24, Z+12	; 0x0c
  18:	95 85       	ldd	r25, Z+13	; 0x0d
  1a:	fc 01       	movw	r30, r24
  1c:	e0 5c       	subi	r30, 0xC0	; 192
  1e:	ff 4f       	sbci	r31, 0xFF	; 255
  20:	20 81       	ld	r18, Z
  22:	31 81       	ldd	r19, Z+1	; 0x01
  24:	ea 81       	ldd	r30, Y+2	; 0x02
  26:	fb 81       	ldd	r31, Y+3	; 0x03
  28:	84 85       	ldd	r24, Z+12	; 0x0c
  2a:	95 85       	ldd	r25, Z+13	; 0x0d
  2c:	fc 01       	movw	r30, r24
  2e:	ee 5b       	subi	r30, 0xBE	; 190
  30:	ff 4f       	sbci	r31, 0xFF	; 255
  32:	80 81       	ld	r24, Z
  34:	91 81       	ldd	r25, Z+1	; 0x01
  36:	1e 82       	std	Y+6, r1	; 0x06
  38:	28 17       	cp	r18, r24
  3a:	39 07       	cpc	r19, r25
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN14HardwareSerial4readEv+0x3e>
  3e:	21 e0       	ldi	r18, 0x01	; 1
  40:	2e 83       	std	Y+6, r18	; 0x06
  42:	3e 81       	ldd	r19, Y+6	; 0x06
  44:	33 23       	and	r19, r19
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN14HardwareSerial4readEv+0x48>
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	9f ef       	ldi	r25, 0xFF	; 255
  4c:	9d 83       	std	Y+5, r25	; 0x05
  4e:	8c 83       	std	Y+4, r24	; 0x04
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN14HardwareSerial4readEv+0x52>
  52:	ea 81       	ldd	r30, Y+2	; 0x02
  54:	fb 81       	ldd	r31, Y+3	; 0x03
  56:	24 85       	ldd	r18, Z+12	; 0x0c
  58:	35 85       	ldd	r19, Z+13	; 0x0d
  5a:	ea 81       	ldd	r30, Y+2	; 0x02
  5c:	fb 81       	ldd	r31, Y+3	; 0x03
  5e:	84 85       	ldd	r24, Z+12	; 0x0c
  60:	95 85       	ldd	r25, Z+13	; 0x0d
  62:	fc 01       	movw	r30, r24
  64:	ee 5b       	subi	r30, 0xBE	; 190
  66:	ff 4f       	sbci	r31, 0xFF	; 255
  68:	80 81       	ld	r24, Z
  6a:	91 81       	ldd	r25, Z+1	; 0x01
  6c:	f9 01       	movw	r30, r18
  6e:	e8 0f       	add	r30, r24
  70:	f9 1f       	adc	r31, r25
  72:	80 81       	ld	r24, Z
  74:	89 83       	std	Y+1, r24	; 0x01
  76:	ea 81       	ldd	r30, Y+2	; 0x02
  78:	fb 81       	ldd	r31, Y+3	; 0x03
  7a:	24 85       	ldd	r18, Z+12	; 0x0c
  7c:	35 85       	ldd	r19, Z+13	; 0x0d
  7e:	ea 81       	ldd	r30, Y+2	; 0x02
  80:	fb 81       	ldd	r31, Y+3	; 0x03
  82:	84 85       	ldd	r24, Z+12	; 0x0c
  84:	95 85       	ldd	r25, Z+13	; 0x0d
  86:	fc 01       	movw	r30, r24
  88:	ee 5b       	subi	r30, 0xBE	; 190
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	80 81       	ld	r24, Z
  8e:	91 81       	ldd	r25, Z+1	; 0x01
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	8f 73       	andi	r24, 0x3F	; 63
  94:	90 70       	andi	r25, 0x00	; 0
  96:	f9 01       	movw	r30, r18
  98:	ee 5b       	subi	r30, 0xBE	; 190
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	91 83       	std	Z+1, r25	; 0x01
  9e:	80 83       	st	Z, r24
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	28 2f       	mov	r18, r24
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	3d 83       	std	Y+5, r19	; 0x05
  a8:	2c 83       	std	Y+4, r18	; 0x04
  aa:	8c 81       	ldd	r24, Y+4	; 0x04
  ac:	9d 81       	ldd	r25, Y+5	; 0x05
  ae:	26 96       	adiw	r28, 0x06	; 6
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000000 <_ZN14HardwareSerial5flushEv>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN14HardwareSerial5flushEv+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	e9 81       	ldd	r30, Y+1	; 0x01
  12:	fa 81       	ldd	r31, Y+2	; 0x02
  14:	91 a1       	ldd	r25, Z+33	; 0x21
  16:	81 e0       	ldi	r24, 0x01	; 1
  18:	89 27       	eor	r24, r25
  1a:	88 23       	and	r24, r24
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN14HardwareSerial5flushEv+0x1e>
  1e:	e9 81       	ldd	r30, Y+1	; 0x01
  20:	fa 81       	ldd	r31, Y+2	; 0x02
  22:	04 88       	ldd	r0, Z+20	; 0x14
  24:	f5 89       	ldd	r31, Z+21	; 0x15
  26:	e0 2d       	mov	r30, r0
  28:	80 81       	ld	r24, Z
  2a:	88 2f       	mov	r24, r24
  2c:	90 e0       	ldi	r25, 0x00	; 0
  2e:	80 74       	andi	r24, 0x40	; 64
  30:	90 70       	andi	r25, 0x00	; 0
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN14HardwareSerial5flushEv+0x36>
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	8b 83       	std	Y+3, r24	; 0x03
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN14HardwareSerial5flushEv+0x3c>
  3c:	1b 82       	std	Y+3, r1	; 0x03
  3e:	8b 81       	ldd	r24, Y+3	; 0x03
  40:	88 23       	and	r24, r24
  42:	01 f4       	brne	.+0      	; 0x44 <_ZN14HardwareSerial5flushEv+0x44>
  44:	e9 81       	ldd	r30, Y+1	; 0x01
  46:	fa 81       	ldd	r31, Y+2	; 0x02
  48:	11 a2       	std	Z+33, r1	; 0x21
  4a:	0f 90       	pop	r0
  4c:	0f 90       	pop	r0
  4e:	0f 90       	pop	r0
  50:	cf 91       	pop	r28
  52:	df 91       	pop	r29
  54:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5writeEh:

00000000 <_ZN14HardwareSerial5writeEh>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN14HardwareSerial5writeEh+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN14HardwareSerial5writeEh+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN14HardwareSerial5writeEh+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	6d 83       	std	Y+5, r22	; 0x05
  14:	eb 81       	ldd	r30, Y+3	; 0x03
  16:	fc 81       	ldd	r31, Y+4	; 0x04
  18:	86 85       	ldd	r24, Z+14	; 0x0e
  1a:	97 85       	ldd	r25, Z+15	; 0x0f
  1c:	fc 01       	movw	r30, r24
  1e:	e0 5c       	subi	r30, 0xC0	; 192
  20:	ff 4f       	sbci	r31, 0xFF	; 255
  22:	80 81       	ld	r24, Z
  24:	91 81       	ldd	r25, Z+1	; 0x01
  26:	01 96       	adiw	r24, 0x01	; 1
  28:	8f 73       	andi	r24, 0x3F	; 63
  2a:	90 70       	andi	r25, 0x00	; 0
  2c:	9a 83       	std	Y+2, r25	; 0x02
  2e:	89 83       	std	Y+1, r24	; 0x01
  30:	29 81       	ldd	r18, Y+1	; 0x01
  32:	3a 81       	ldd	r19, Y+2	; 0x02
  34:	eb 81       	ldd	r30, Y+3	; 0x03
  36:	fc 81       	ldd	r31, Y+4	; 0x04
  38:	86 85       	ldd	r24, Z+14	; 0x0e
  3a:	97 85       	ldd	r25, Z+15	; 0x0f
  3c:	fc 01       	movw	r30, r24
  3e:	ee 5b       	subi	r30, 0xBE	; 190
  40:	ff 4f       	sbci	r31, 0xFF	; 255
  42:	80 81       	ld	r24, Z
  44:	91 81       	ldd	r25, Z+1	; 0x01
  46:	1e 82       	std	Y+6, r1	; 0x06
  48:	28 17       	cp	r18, r24
  4a:	39 07       	cpc	r19, r25
  4c:	01 f4       	brne	.+0      	; 0x4e <_ZN14HardwareSerial5writeEh+0x4e>
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	8e 83       	std	Y+6, r24	; 0x06
  52:	8e 81       	ldd	r24, Y+6	; 0x06
  54:	88 23       	and	r24, r24
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN14HardwareSerial5writeEh+0x58>
  58:	eb 81       	ldd	r30, Y+3	; 0x03
  5a:	fc 81       	ldd	r31, Y+4	; 0x04
  5c:	26 85       	ldd	r18, Z+14	; 0x0e
  5e:	37 85       	ldd	r19, Z+15	; 0x0f
  60:	eb 81       	ldd	r30, Y+3	; 0x03
  62:	fc 81       	ldd	r31, Y+4	; 0x04
  64:	86 85       	ldd	r24, Z+14	; 0x0e
  66:	97 85       	ldd	r25, Z+15	; 0x0f
  68:	fc 01       	movw	r30, r24
  6a:	e0 5c       	subi	r30, 0xC0	; 192
  6c:	ff 4f       	sbci	r31, 0xFF	; 255
  6e:	80 81       	ld	r24, Z
  70:	91 81       	ldd	r25, Z+1	; 0x01
  72:	f9 01       	movw	r30, r18
  74:	e8 0f       	add	r30, r24
  76:	f9 1f       	adc	r31, r25
  78:	8d 81       	ldd	r24, Y+5	; 0x05
  7a:	80 83       	st	Z, r24
  7c:	eb 81       	ldd	r30, Y+3	; 0x03
  7e:	fc 81       	ldd	r31, Y+4	; 0x04
  80:	86 85       	ldd	r24, Z+14	; 0x0e
  82:	97 85       	ldd	r25, Z+15	; 0x0f
  84:	29 81       	ldd	r18, Y+1	; 0x01
  86:	3a 81       	ldd	r19, Y+2	; 0x02
  88:	fc 01       	movw	r30, r24
  8a:	e0 5c       	subi	r30, 0xC0	; 192
  8c:	ff 4f       	sbci	r31, 0xFF	; 255
  8e:	31 83       	std	Z+1, r19	; 0x01
  90:	20 83       	st	Z, r18
  92:	eb 81       	ldd	r30, Y+3	; 0x03
  94:	fc 81       	ldd	r31, Y+4	; 0x04
  96:	a6 89       	ldd	r26, Z+22	; 0x16
  98:	b7 89       	ldd	r27, Z+23	; 0x17
  9a:	eb 81       	ldd	r30, Y+3	; 0x03
  9c:	fc 81       	ldd	r31, Y+4	; 0x04
  9e:	06 88       	ldd	r0, Z+22	; 0x16
  a0:	f7 89       	ldd	r31, Z+23	; 0x17
  a2:	e0 2d       	mov	r30, r0
  a4:	80 81       	ld	r24, Z
  a6:	48 2f       	mov	r20, r24
  a8:	eb 81       	ldd	r30, Y+3	; 0x03
  aa:	fc 81       	ldd	r31, Y+4	; 0x04
  ac:	87 8d       	ldd	r24, Z+31	; 0x1f
  ae:	28 2f       	mov	r18, r24
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 2e       	mov	r0, r18
  b8:	00 c0       	rjmp	.+0      	; 0xba <_ZN14HardwareSerial5writeEh+0xba>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	0a 94       	dec	r0
  c0:	02 f4       	brpl	.+0      	; 0xc2 <_ZN14HardwareSerial5writeEh+0xc2>
  c2:	84 2b       	or	r24, r20
  c4:	8c 93       	st	X, r24
  c6:	eb 81       	ldd	r30, Y+3	; 0x03
  c8:	fc 81       	ldd	r31, Y+4	; 0x04
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	81 a3       	std	Z+33, r24	; 0x21
  ce:	eb 81       	ldd	r30, Y+3	; 0x03
  d0:	fc 81       	ldd	r31, Y+4	; 0x04
  d2:	a4 89       	ldd	r26, Z+20	; 0x14
  d4:	b5 89       	ldd	r27, Z+21	; 0x15
  d6:	eb 81       	ldd	r30, Y+3	; 0x03
  d8:	fc 81       	ldd	r31, Y+4	; 0x04
  da:	04 88       	ldd	r0, Z+20	; 0x14
  dc:	f5 89       	ldd	r31, Z+21	; 0x15
  de:	e0 2d       	mov	r30, r0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	8c 93       	st	X, r24
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	26 96       	adiw	r28, 0x06	; 6
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerialcvbEv:

00000000 <_ZN14HardwareSerialcvbEv>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN14HardwareSerialcvbEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	81 e0       	ldi	r24, 0x01	; 1
  10:	0f 90       	pop	r0
  12:	0f 90       	pop	r0
  14:	cf 91       	pop	r28
  16:	df 91       	pop	r29
  18:	08 95       	ret

Disassembly of section .text._Z41__static_initialization_and_destruction_0ii:

00000000 <_Z41__static_initialization_and_destruction_0ii>:
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	00 d0       	rcall	.+0      	; 0x1a <_Z41__static_initialization_and_destruction_0ii+0x1a>
  1a:	00 d0       	rcall	.+0      	; 0x1c <_Z41__static_initialization_and_destruction_0ii+0x1c>
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
  20:	9a 83       	std	Y+2, r25	; 0x02
  22:	89 83       	std	Y+1, r24	; 0x01
  24:	7c 83       	std	Y+4, r23	; 0x04
  26:	6b 83       	std	Y+3, r22	; 0x03
  28:	89 81       	ldd	r24, Y+1	; 0x01
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
  2c:	81 30       	cpi	r24, 0x01	; 1
  2e:	91 05       	cpc	r25, r1
  30:	01 f0       	breq	.+0      	; 0x32 <_Z41__static_initialization_and_destruction_0ii+0x32>
  32:	00 c0       	rjmp	.+0      	; 0x34 <_Z41__static_initialization_and_destruction_0ii+0x34>
  34:	8b 81       	ldd	r24, Y+3	; 0x03
  36:	9c 81       	ldd	r25, Y+4	; 0x04
  38:	2f ef       	ldi	r18, 0xFF	; 255
  3a:	8f 3f       	cpi	r24, 0xFF	; 255
  3c:	92 07       	cpc	r25, r18
  3e:	01 f4       	brne	.+0      	; 0x40 <_Z41__static_initialization_and_destruction_0ii+0x40>
  40:	00 d0       	rcall	.+0      	; 0x42 <_Z41__static_initialization_and_destruction_0ii+0x42>
  42:	00 d0       	rcall	.+0      	; 0x44 <_Z41__static_initialization_and_destruction_0ii+0x44>
  44:	0f 92       	push	r0
  46:	ed b7       	in	r30, 0x3d	; 61
  48:	fe b7       	in	r31, 0x3e	; 62
  4a:	31 96       	adiw	r30, 0x01	; 1
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	30 e0       	ldi	r19, 0x00	; 0
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	50 e0       	ldi	r21, 0x00	; 0
  54:	a0 e0       	ldi	r26, 0x00	; 0
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	84 e0       	ldi	r24, 0x04	; 4
  5a:	80 83       	st	Z, r24
  5c:	83 e0       	ldi	r24, 0x03	; 3
  5e:	81 83       	std	Z+1, r24	; 0x01
  60:	87 e0       	ldi	r24, 0x07	; 7
  62:	82 83       	std	Z+2, r24	; 0x02
  64:	85 e0       	ldi	r24, 0x05	; 5
  66:	83 83       	std	Z+3, r24	; 0x03
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	84 83       	std	Z+4, r24	; 0x04
  6c:	c9 01       	movw	r24, r18
  6e:	ba 01       	movw	r22, r20
  70:	ad 01       	movw	r20, r26
  72:	25 ec       	ldi	r18, 0xC5	; 197
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	04 ec       	ldi	r16, 0xC4	; 196
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	0f 2e       	mov	r0, r31
  7c:	f0 ec       	ldi	r31, 0xC0	; 192
  7e:	ef 2e       	mov	r14, r31
  80:	ff 24       	eor	r15, r15
  82:	f0 2d       	mov	r31, r0
  84:	0f 2e       	mov	r0, r31
  86:	f1 ec       	ldi	r31, 0xC1	; 193
  88:	cf 2e       	mov	r12, r31
  8a:	dd 24       	eor	r13, r13
  8c:	f0 2d       	mov	r31, r0
  8e:	0f 2e       	mov	r0, r31
  90:	f2 ec       	ldi	r31, 0xC2	; 194
  92:	af 2e       	mov	r10, r31
  94:	bb 24       	eor	r11, r11
  96:	f0 2d       	mov	r31, r0
  98:	0f 2e       	mov	r0, r31
  9a:	f6 ec       	ldi	r31, 0xC6	; 198
  9c:	8f 2e       	mov	r8, r31
  9e:	99 24       	eor	r9, r9
  a0:	f0 2d       	mov	r31, r0
  a2:	0e 94 00 00 	call	0	; 0x0 <_Z41__static_initialization_and_destruction_0ii>
  a6:	0f 90       	pop	r0
  a8:	0f 90       	pop	r0
  aa:	0f 90       	pop	r0
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	1f 91       	pop	r17
  be:	0f 91       	pop	r16
  c0:	ff 90       	pop	r15
  c2:	ef 90       	pop	r14
  c4:	df 90       	pop	r13
  c6:	cf 90       	pop	r12
  c8:	bf 90       	pop	r11
  ca:	af 90       	pop	r10
  cc:	9f 90       	pop	r9
  ce:	8f 90       	pop	r8
  d0:	08 95       	ret

Disassembly of section .text._GLOBAL__I_rx_buffer:

00000000 <_GLOBAL__I_rx_buffer>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	81 e0       	ldi	r24, 0x01	; 1
   a:	90 e0       	ldi	r25, 0x00	; 0
   c:	6f ef       	ldi	r22, 0xFF	; 255
   e:	7f ef       	ldi	r23, 0xFF	; 255
  10:	0e 94 00 00 	call	0	; 0x0 <_GLOBAL__I_rx_buffer>
  14:	cf 91       	pop	r28
  16:	df 91       	pop	r29
  18:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b34  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000011b8  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN9PrintableC2Ev 00000024  00000000  00000000  00001d20  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN9IPAddressC2Ehhhh 00000064  00000000  00000000  00001d44  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN9IPAddressC1Ehhhh 00000064  00000000  00000000  00001da8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z41__static_initialization_and_destruction_0ii 0000004c  00000000  00000000  00001e0c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._GLOBAL__I__ZN9IPAddressC2Ev 0000001a  00000000  00000000  00001e58  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .ctors        00000002  00000000  00000000  00001e72  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 11 .text._ZNK9IPAddress7printToER5Print 000000b8  00000000  00000000  00001e74  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9IPAddresseqEPKh 0000004a  00000000  00000000  00001f2c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN9IPAddressaSEm 00000046  00000000  00000000  00001f76  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN9IPAddressaSEPKh 0000003a  00000000  00000000  00001fbc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN9IPAddressC1EPKh 0000004a  00000000  00000000  00001ff6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN9IPAddressC2EPKh 0000004a  00000000  00000000  00002040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN9IPAddressC1Em 00000056  00000000  00000000  0000208a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN9IPAddressC2Em 00000056  00000000  00000000  000020e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN9IPAddressC1Ev 0000003e  00000000  00000000  00002136  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN9IPAddressC2Ev 0000003e  00000000  00000000  00002174  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .rodata._ZTV9IPAddress 00000006  00000000  00000000  000021b2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 22 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  000021b8  2**0
                  ALLOC
 23 .rodata._ZTV9Printable 00000006  00000000  00000000  000021b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN9PrintableC2Ev:

00000000 <_ZN9PrintableC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9PrintableC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	91 83       	std	Z+1, r25	; 0x01
  18:	80 83       	st	Z, r24
  1a:	0f 90       	pop	r0
  1c:	0f 90       	pop	r0
  1e:	cf 91       	pop	r28
  20:	df 91       	pop	r29
{
    memset(_address, 0, sizeof(_address));
  22:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ehhhh:

00000000 <_ZN9IPAddressC2Ehhhh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	0f 93       	push	r16
   2:	df 93       	push	r29
   4:	cf 93       	push	r28
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC2Ehhhh+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN9IPAddressC2Ehhhh+0xa>
   a:	00 d0       	rcall	.+0      	; 0xc <_ZN9IPAddressC2Ehhhh+0xc>
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	9a 83       	std	Y+2, r25	; 0x02
  12:	89 83       	std	Y+1, r24	; 0x01
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	4c 83       	std	Y+4, r20	; 0x04
  18:	2d 83       	std	Y+5, r18	; 0x05
  1a:	0e 83       	std	Y+6, r16	; 0x06
  1c:	89 81       	ldd	r24, Y+1	; 0x01
  1e:	9a 81       	ldd	r25, Y+2	; 0x02
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC2Ehhhh>
{
    memset(_address, 0, sizeof(_address));
  24:	e9 81       	ldd	r30, Y+1	; 0x01
  26:	fa 81       	ldd	r31, Y+2	; 0x02
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	91 83       	std	Z+1, r25	; 0x01
  2e:	80 83       	st	Z, r24
  30:	e9 81       	ldd	r30, Y+1	; 0x01
  32:	fa 81       	ldd	r31, Y+2	; 0x02
}
  34:	8b 81       	ldd	r24, Y+3	; 0x03
  36:	82 83       	std	Z+2, r24	; 0x02
  38:	e9 81       	ldd	r30, Y+1	; 0x01
  3a:	fa 81       	ldd	r31, Y+2	; 0x02
  3c:	8c 81       	ldd	r24, Y+4	; 0x04
  3e:	83 83       	std	Z+3, r24	; 0x03
  40:	e9 81       	ldd	r30, Y+1	; 0x01
  42:	fa 81       	ldd	r31, Y+2	; 0x02
  44:	8d 81       	ldd	r24, Y+5	; 0x05
  46:	84 83       	std	Z+4, r24	; 0x04
  48:	e9 81       	ldd	r30, Y+1	; 0x01
  4a:	fa 81       	ldd	r31, Y+2	; 0x02
  4c:	8e 81       	ldd	r24, Y+6	; 0x06
  4e:	85 83       	std	Z+5, r24	; 0x05
  50:	26 96       	adiw	r28, 0x06	; 6
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	0f 91       	pop	r16
  62:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1Ehhhh:

00000000 <_ZN9IPAddressC1Ehhhh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	0f 93       	push	r16
   2:	df 93       	push	r29
   4:	cf 93       	push	r28
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC1Ehhhh+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN9IPAddressC1Ehhhh+0xa>
   a:	00 d0       	rcall	.+0      	; 0xc <_ZN9IPAddressC1Ehhhh+0xc>
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	9a 83       	std	Y+2, r25	; 0x02
  12:	89 83       	std	Y+1, r24	; 0x01
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	4c 83       	std	Y+4, r20	; 0x04
  18:	2d 83       	std	Y+5, r18	; 0x05
  1a:	0e 83       	std	Y+6, r16	; 0x06
  1c:	89 81       	ldd	r24, Y+1	; 0x01
  1e:	9a 81       	ldd	r25, Y+2	; 0x02
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC1Ehhhh>
{
    memset(_address, 0, sizeof(_address));
  24:	e9 81       	ldd	r30, Y+1	; 0x01
  26:	fa 81       	ldd	r31, Y+2	; 0x02
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	91 83       	std	Z+1, r25	; 0x01
  2e:	80 83       	st	Z, r24
  30:	e9 81       	ldd	r30, Y+1	; 0x01
  32:	fa 81       	ldd	r31, Y+2	; 0x02
}
  34:	8b 81       	ldd	r24, Y+3	; 0x03
  36:	82 83       	std	Z+2, r24	; 0x02
  38:	e9 81       	ldd	r30, Y+1	; 0x01
  3a:	fa 81       	ldd	r31, Y+2	; 0x02
  3c:	8c 81       	ldd	r24, Y+4	; 0x04
  3e:	83 83       	std	Z+3, r24	; 0x03
  40:	e9 81       	ldd	r30, Y+1	; 0x01
  42:	fa 81       	ldd	r31, Y+2	; 0x02
  44:	8d 81       	ldd	r24, Y+5	; 0x05
  46:	84 83       	std	Z+4, r24	; 0x04
  48:	e9 81       	ldd	r30, Y+1	; 0x01
  4a:	fa 81       	ldd	r31, Y+2	; 0x02
  4c:	8e 81       	ldd	r24, Y+6	; 0x06
  4e:	85 83       	std	Z+5, r24	; 0x05
  50:	26 96       	adiw	r28, 0x06	; 6
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	0f 91       	pop	r16
  62:	08 95       	ret

Disassembly of section .text._Z41__static_initialization_and_destruction_0ii:

00000000 <_Z41__static_initialization_and_destruction_0ii>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	0f 93       	push	r16
   2:	df 93       	push	r29
   4:	cf 93       	push	r28
   6:	00 d0       	rcall	.+0      	; 0x8 <_Z41__static_initialization_and_destruction_0ii+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_Z41__static_initialization_and_destruction_0ii+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
  1a:	81 30       	cpi	r24, 0x01	; 1
  1c:	91 05       	cpc	r25, r1
  1e:	01 f4       	brne	.+0      	; 0x20 <_Z41__static_initialization_and_destruction_0ii+0x20>
  20:	8b 81       	ldd	r24, Y+3	; 0x03
{
    memset(_address, 0, sizeof(_address));
  22:	9c 81       	ldd	r25, Y+4	; 0x04
  24:	2f ef       	ldi	r18, 0xFF	; 255
  26:	8f 3f       	cpi	r24, 0xFF	; 255
  28:	92 07       	cpc	r25, r18
  2a:	01 f4       	brne	.+0      	; 0x2c <_Z41__static_initialization_and_destruction_0ii+0x2c>
  2c:	80 e0       	ldi	r24, 0x00	; 0
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	60 e0       	ldi	r22, 0x00	; 0
  32:	40 e0       	ldi	r20, 0x00	; 0
}
  34:	20 e0       	ldi	r18, 0x00	; 0
  36:	00 e0       	ldi	r16, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_Z41__static_initialization_and_destruction_0ii>
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	0f 90       	pop	r0
  44:	cf 91       	pop	r28
  46:	df 91       	pop	r29
  48:	0f 91       	pop	r16
  4a:	08 95       	ret

Disassembly of section .text._GLOBAL__I__ZN9IPAddressC2Ev:

00000000 <_GLOBAL__I__ZN9IPAddressC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	81 e0       	ldi	r24, 0x01	; 1
   a:	90 e0       	ldi	r25, 0x00	; 0
   c:	6f ef       	ldi	r22, 0xFF	; 255
   e:	7f ef       	ldi	r23, 0xFF	; 255
  10:	0e 94 00 00 	call	0	; 0x0 <_GLOBAL__I__ZN9IPAddressC2Ev>
  14:	cf 91       	pop	r28
  16:	df 91       	pop	r29
  18:	08 95       	ret

Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9e 83       	std	Y+6, r25	; 0x06
  16:	8d 83       	std	Y+5, r24	; 0x05
  18:	78 87       	std	Y+8, r23	; 0x08
  1a:	6f 83       	std	Y+7, r22	; 0x07
  1c:	1c 82       	std	Y+4, r1	; 0x04
  1e:	1b 82       	std	Y+3, r1	; 0x03
  20:	1a 82       	std	Y+2, r1	; 0x02
{
    memset(_address, 0, sizeof(_address));
  22:	19 82       	std	Y+1, r1	; 0x01
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZNK9IPAddress7printToER5Print+0x26>
  26:	29 81       	ldd	r18, Y+1	; 0x01
  28:	3a 81       	ldd	r19, Y+2	; 0x02
  2a:	8d 81       	ldd	r24, Y+5	; 0x05
  2c:	9e 81       	ldd	r25, Y+6	; 0x06
  2e:	82 0f       	add	r24, r18
  30:	93 1f       	adc	r25, r19
  32:	fc 01       	movw	r30, r24
}
  34:	32 96       	adiw	r30, 0x02	; 2
  36:	20 81       	ld	r18, Z
  38:	8f 81       	ldd	r24, Y+7	; 0x07
  3a:	98 85       	ldd	r25, Y+8	; 0x08
  3c:	62 2f       	mov	r22, r18
  3e:	4a e0       	ldi	r20, 0x0A	; 10
  40:	50 e0       	ldi	r21, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  46:	9c 01       	movw	r18, r24
  48:	8b 81       	ldd	r24, Y+3	; 0x03
  4a:	9c 81       	ldd	r25, Y+4	; 0x04
  4c:	82 0f       	add	r24, r18
  4e:	93 1f       	adc	r25, r19
  50:	9c 83       	std	Y+4, r25	; 0x04
  52:	8b 83       	std	Y+3, r24	; 0x03
  54:	8f 81       	ldd	r24, Y+7	; 0x07
  56:	98 85       	ldd	r25, Y+8	; 0x08
  58:	6e e2       	ldi	r22, 0x2E	; 46
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  5e:	9c 01       	movw	r18, r24
  60:	8b 81       	ldd	r24, Y+3	; 0x03
  62:	9c 81       	ldd	r25, Y+4	; 0x04
  64:	82 0f       	add	r24, r18
  66:	93 1f       	adc	r25, r19
  68:	9c 83       	std	Y+4, r25	; 0x04
  6a:	8b 83       	std	Y+3, r24	; 0x03
  6c:	89 81       	ldd	r24, Y+1	; 0x01
  6e:	9a 81       	ldd	r25, Y+2	; 0x02
  70:	01 96       	adiw	r24, 0x01	; 1
  72:	9a 83       	std	Y+2, r25	; 0x02
  74:	89 83       	std	Y+1, r24	; 0x01
  76:	89 81       	ldd	r24, Y+1	; 0x01
  78:	9a 81       	ldd	r25, Y+2	; 0x02
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	91 05       	cpc	r25, r1
  7e:	04 f0       	brlt	.+0      	; 0x80 <_ZNK9IPAddress7printToER5Print+0x80>
  80:	ed 81       	ldd	r30, Y+5	; 0x05
  82:	fe 81       	ldd	r31, Y+6	; 0x06
  84:	25 81       	ldd	r18, Z+5	; 0x05
  86:	8f 81       	ldd	r24, Y+7	; 0x07
  88:	98 85       	ldd	r25, Y+8	; 0x08
  8a:	62 2f       	mov	r22, r18
  8c:	4a e0       	ldi	r20, 0x0A	; 10
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  94:	9c 01       	movw	r18, r24
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	9c 81       	ldd	r25, Y+4	; 0x04
  9a:	82 0f       	add	r24, r18
  9c:	93 1f       	adc	r25, r19
  9e:	9c 83       	std	Y+4, r25	; 0x04
  a0:	8b 83       	std	Y+3, r24	; 0x03
  a2:	8b 81       	ldd	r24, Y+3	; 0x03
  a4:	9c 81       	ldd	r25, Y+4	; 0x04
  a6:	28 96       	adiw	r28, 0x08	; 8
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
  b2:	cf 91       	pop	r28
  b4:	df 91       	pop	r29
  b6:	08 95       	ret

Disassembly of section .text._ZN9IPAddresseqEPKh:

00000000 <_ZN9IPAddresseqEPKh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddresseqEPKh+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddresseqEPKh+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
  1a:	9c 01       	movw	r18, r24
  1c:	2e 5f       	subi	r18, 0xFE	; 254
  1e:	3f 4f       	sbci	r19, 0xFF	; 255
  20:	8b 81       	ldd	r24, Y+3	; 0x03
{
    memset(_address, 0, sizeof(_address));
  22:	9c 81       	ldd	r25, Y+4	; 0x04
  24:	b9 01       	movw	r22, r18
  26:	44 e0       	ldi	r20, 0x04	; 4
  28:	50 e0       	ldi	r21, 0x00	; 0
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresseqEPKh>
  2e:	1d 82       	std	Y+5, r1	; 0x05
  30:	00 97       	sbiw	r24, 0x00	; 0
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN9IPAddresseqEPKh+0x34>
}
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	8d 83       	std	Y+5, r24	; 0x05
  38:	8d 81       	ldd	r24, Y+5	; 0x05
  3a:	0f 90       	pop	r0
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	0f 90       	pop	r0
  44:	cf 91       	pop	r28
  46:	df 91       	pop	r29
  48:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEm:

00000000 <_ZN9IPAddressaSEm>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressaSEm+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressaSEm+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN9IPAddressaSEm+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	4b 83       	std	Y+3, r20	; 0x03
  14:	5c 83       	std	Y+4, r21	; 0x04
  16:	6d 83       	std	Y+5, r22	; 0x05
  18:	7e 83       	std	Y+6, r23	; 0x06
  1a:	89 81       	ldd	r24, Y+1	; 0x01
  1c:	9a 81       	ldd	r25, Y+2	; 0x02
  1e:	02 96       	adiw	r24, 0x02	; 2
  20:	9e 01       	movw	r18, r28
{
    memset(_address, 0, sizeof(_address));
  22:	2d 5f       	subi	r18, 0xFD	; 253
  24:	3f 4f       	sbci	r19, 0xFF	; 255
  26:	b9 01       	movw	r22, r18
  28:	44 e0       	ldi	r20, 0x04	; 4
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressaSEm>
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	9a 81       	ldd	r25, Y+2	; 0x02
}
  34:	26 96       	adiw	r28, 0x06	; 6
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	f8 94       	cli
  3a:	de bf       	out	0x3e, r29	; 62
  3c:	0f be       	out	0x3f, r0	; 63
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	cf 91       	pop	r28
  42:	df 91       	pop	r29
  44:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEPKh:

00000000 <_ZN9IPAddressaSEPKh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressaSEPKh+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressaSEPKh+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	02 96       	adiw	r24, 0x02	; 2
  1a:	2b 81       	ldd	r18, Y+3	; 0x03
  1c:	3c 81       	ldd	r19, Y+4	; 0x04
  1e:	b9 01       	movw	r22, r18
  20:	44 e0       	ldi	r20, 0x04	; 4
{
    memset(_address, 0, sizeof(_address));
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressaSEPKh>
  28:	89 81       	ldd	r24, Y+1	; 0x01
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
  2c:	0f 90       	pop	r0
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	0f 90       	pop	r0
}
  34:	cf 91       	pop	r28
  36:	df 91       	pop	r29
  38:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1EPKh:

00000000 <_ZN9IPAddressC1EPKh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC1EPKh+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC1EPKh+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC1EPKh>
  1c:	e9 81       	ldd	r30, Y+1	; 0x01
  1e:	fa 81       	ldd	r31, Y+2	; 0x02
  20:	80 e0       	ldi	r24, 0x00	; 0
{
    memset(_address, 0, sizeof(_address));
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	91 83       	std	Z+1, r25	; 0x01
  26:	80 83       	st	Z, r24
  28:	89 81       	ldd	r24, Y+1	; 0x01
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
  2c:	02 96       	adiw	r24, 0x02	; 2
  2e:	2b 81       	ldd	r18, Y+3	; 0x03
  30:	3c 81       	ldd	r19, Y+4	; 0x04
  32:	b9 01       	movw	r22, r18
}
  34:	44 e0       	ldi	r20, 0x04	; 4
  36:	50 e0       	ldi	r21, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC1EPKh>
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	0f 90       	pop	r0
  44:	cf 91       	pop	r28
  46:	df 91       	pop	r29
  48:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2EPKh:

00000000 <_ZN9IPAddressC2EPKh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC2EPKh+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC2EPKh+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC2EPKh>
  1c:	e9 81       	ldd	r30, Y+1	; 0x01
  1e:	fa 81       	ldd	r31, Y+2	; 0x02
  20:	80 e0       	ldi	r24, 0x00	; 0
{
    memset(_address, 0, sizeof(_address));
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	91 83       	std	Z+1, r25	; 0x01
  26:	80 83       	st	Z, r24
  28:	89 81       	ldd	r24, Y+1	; 0x01
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
  2c:	02 96       	adiw	r24, 0x02	; 2
  2e:	2b 81       	ldd	r18, Y+3	; 0x03
  30:	3c 81       	ldd	r19, Y+4	; 0x04
  32:	b9 01       	movw	r22, r18
}
  34:	44 e0       	ldi	r20, 0x04	; 4
  36:	50 e0       	ldi	r21, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC2EPKh>
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	0f 90       	pop	r0
  44:	cf 91       	pop	r28
  46:	df 91       	pop	r29
  48:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1Em:

00000000 <_ZN9IPAddressC1Em>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC1Em+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC1Em+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN9IPAddressC1Em+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	4b 83       	std	Y+3, r20	; 0x03
  14:	5c 83       	std	Y+4, r21	; 0x04
  16:	6d 83       	std	Y+5, r22	; 0x05
  18:	7e 83       	std	Y+6, r23	; 0x06
  1a:	89 81       	ldd	r24, Y+1	; 0x01
  1c:	9a 81       	ldd	r25, Y+2	; 0x02
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC1Em>
{
    memset(_address, 0, sizeof(_address));
  22:	e9 81       	ldd	r30, Y+1	; 0x01
  24:	fa 81       	ldd	r31, Y+2	; 0x02
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	91 83       	std	Z+1, r25	; 0x01
  2c:	80 83       	st	Z, r24
  2e:	89 81       	ldd	r24, Y+1	; 0x01
  30:	9a 81       	ldd	r25, Y+2	; 0x02
  32:	02 96       	adiw	r24, 0x02	; 2
}
  34:	9e 01       	movw	r18, r28
  36:	2d 5f       	subi	r18, 0xFD	; 253
  38:	3f 4f       	sbci	r19, 0xFF	; 255
  3a:	b9 01       	movw	r22, r18
  3c:	44 e0       	ldi	r20, 0x04	; 4
  3e:	50 e0       	ldi	r21, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC1Em>
  44:	26 96       	adiw	r28, 0x06	; 6
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	cf 91       	pop	r28
  52:	df 91       	pop	r29
  54:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Em:

00000000 <_ZN9IPAddressC2Em>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC2Em+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC2Em+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN9IPAddressC2Em+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	4b 83       	std	Y+3, r20	; 0x03
  14:	5c 83       	std	Y+4, r21	; 0x04
  16:	6d 83       	std	Y+5, r22	; 0x05
  18:	7e 83       	std	Y+6, r23	; 0x06
  1a:	89 81       	ldd	r24, Y+1	; 0x01
  1c:	9a 81       	ldd	r25, Y+2	; 0x02
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC2Em>
{
    memset(_address, 0, sizeof(_address));
  22:	e9 81       	ldd	r30, Y+1	; 0x01
  24:	fa 81       	ldd	r31, Y+2	; 0x02
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	91 83       	std	Z+1, r25	; 0x01
  2c:	80 83       	st	Z, r24
  2e:	89 81       	ldd	r24, Y+1	; 0x01
  30:	9a 81       	ldd	r25, Y+2	; 0x02
  32:	02 96       	adiw	r24, 0x02	; 2
}
  34:	9e 01       	movw	r18, r28
  36:	2d 5f       	subi	r18, 0xFD	; 253
  38:	3f 4f       	sbci	r19, 0xFF	; 255
  3a:	b9 01       	movw	r22, r18
  3c:	44 e0       	ldi	r20, 0x04	; 4
  3e:	50 e0       	ldi	r21, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC2Em>
  44:	26 96       	adiw	r28, 0x06	; 6
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	cf 91       	pop	r28
  52:	df 91       	pop	r29
  54:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1Ev:

00000000 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC1Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC1Ev>
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	91 83       	std	Z+1, r25	; 0x01
  20:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
  22:	89 81       	ldd	r24, Y+1	; 0x01
  24:	9a 81       	ldd	r25, Y+2	; 0x02
  26:	02 96       	adiw	r24, 0x02	; 2
  28:	60 e0       	ldi	r22, 0x00	; 0
  2a:	70 e0       	ldi	r23, 0x00	; 0
  2c:	44 e0       	ldi	r20, 0x04	; 4
  2e:	50 e0       	ldi	r21, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC1Ev>
}
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	cf 91       	pop	r28
  3a:	df 91       	pop	r29
  3c:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ev:

00000000 <_ZN9IPAddressC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC2Ev>
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	91 83       	std	Z+1, r25	; 0x01
  20:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
  22:	89 81       	ldd	r24, Y+1	; 0x01
  24:	9a 81       	ldd	r25, Y+2	; 0x02
  26:	02 96       	adiw	r24, 0x02	; 2
  28:	60 e0       	ldi	r22, 0x00	; 0
  2a:	70 e0       	ldi	r23, 0x00	; 0
  2c:	44 e0       	ldi	r20, 0x04	; 4
  2e:	50 e0       	ldi	r21, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddressC2Ev>
}
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	cf 91       	pop	r28
  3a:	df 91       	pop	r29
  3c:	08 95       	ret

PWMMotorControl.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000e13  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z12CheckMotorIdi 00000042  00000000  00000000  0000179b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z13SetMotorSpeedii 000000b6  00000000  00000000  000017dd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__vector_9 00000066  00000000  00000000  00001893  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z17SetMotorDirectionii 000000ba  00000000  00000000  000018f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z9StopMotori 00000050  00000000  00000000  000019b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z16PWMMotorCtrlInitv 00000084  00000000  00000000  00001a03  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .bss.MotorId  00000002  00000000  00000000  00001a87  2**0
                  ALLOC
 12 .bss.Speed    00000002  00000000  00000000  00001a87  2**0
                  ALLOC

Disassembly of section .text._Z12CheckMotorIdi:

00000000 <_Z12CheckMotorIdi>:
  digitalWrite(I2, LOW);
  digitalWrite(I3, LOW);
  digitalWrite(I4, LOW);
}

int CheckMotorId(int _motorId)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z12CheckMotorIdi+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_Z12CheckMotorIdi+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
{
	// Motor id can be 0 or 1
	if ((_motorId != 0) && (_motorId != 1)) return INVALID_MOTOR_ID;
  10:	89 81       	ldd	r24, Y+1	; 0x01
  12:	9a 81       	ldd	r25, Y+2	; 0x02
  14:	00 97       	sbiw	r24, 0x00	; 0
  16:	01 f0       	breq	.+0      	; 0x18 <_Z12CheckMotorIdi+0x18>
  18:	89 81       	ldd	r24, Y+1	; 0x01
  1a:	9a 81       	ldd	r25, Y+2	; 0x02
  1c:	81 30       	cpi	r24, 0x01	; 1
  1e:	91 05       	cpc	r25, r1
  20:	01 f0       	breq	.+0      	; 0x22 <_Z12CheckMotorIdi+0x22>
  22:	81 e0       	ldi	r24, 0x01	; 1
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	9c 83       	std	Y+4, r25	; 0x04
  28:	8b 83       	std	Y+3, r24	; 0x03
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_Z12CheckMotorIdi+0x2c>
	return MOTOR_ID_OK;
  2c:	1c 82       	std	Y+4, r1	; 0x04
  2e:	1b 82       	std	Y+3, r1	; 0x03
  30:	8b 81       	ldd	r24, Y+3	; 0x03
  32:	9c 81       	ldd	r25, Y+4	; 0x04
}
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	0f 90       	pop	r0
  3c:	cf 91       	pop	r28
  3e:	df 91       	pop	r29
  40:	08 95       	ret

Disassembly of section .text._Z13SetMotorSpeedii:

00000000 <_Z13SetMotorSpeedii>:
  digitalWrite(I2, LOW);
  digitalWrite(I3, LOW);
  digitalWrite(I4, LOW);
}

int CheckMotorId(int _motorId)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
{
	// Motor id can be 0 or 1
	if ((_motorId != 0) && (_motorId != 1)) return INVALID_MOTOR_ID;
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9e 83       	std	Y+6, r25	; 0x06
  16:	8d 83       	std	Y+5, r24	; 0x05
  18:	78 87       	std	Y+8, r23	; 0x08
  1a:	6f 83       	std	Y+7, r22	; 0x07
  1c:	8d 81       	ldd	r24, Y+5	; 0x05
  1e:	9e 81       	ldd	r25, Y+6	; 0x06
  20:	0e 94 00 00 	call	0	; 0x0 <_Z13SetMotorSpeedii>
  24:	9c 83       	std	Y+4, r25	; 0x04
  26:	8b 83       	std	Y+3, r24	; 0x03
  28:	1b 86       	std	Y+11, r1	; 0x0b
  2a:	8b 81       	ldd	r24, Y+3	; 0x03
	return MOTOR_ID_OK;
  2c:	9c 81       	ldd	r25, Y+4	; 0x04
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <_Z13SetMotorSpeedii+0x32>
  32:	81 e0       	ldi	r24, 0x01	; 1
}
  34:	8b 87       	std	Y+11, r24	; 0x0b
  36:	9b 85       	ldd	r25, Y+11	; 0x0b
  38:	99 23       	and	r25, r25
  3a:	01 f0       	breq	.+0      	; 0x3c <_Z13SetMotorSpeedii+0x3c>
  3c:	8b 81       	ldd	r24, Y+3	; 0x03
  3e:	9c 81       	ldd	r25, Y+4	; 0x04
  40:	9d 87       	std	Y+13, r25	; 0x0d
  42:	8c 87       	std	Y+12, r24	; 0x0c
  44:	8c 85       	ldd	r24, Y+12	; 0x0c
  46:	9d 85       	ldd	r25, Y+13	; 0x0d
  48:	00 c0       	rjmp	.+0      	; 0x4a <_Z13SetMotorSpeedii+0x4a>
  4a:	8f 81       	ldd	r24, Y+7	; 0x07
  4c:	98 85       	ldd	r25, Y+8	; 0x08
  4e:	99 23       	and	r25, r25
  50:	04 f4       	brge	.+0      	; 0x52 <_Z13SetMotorSpeedii+0x52>
  52:	8f 81       	ldd	r24, Y+7	; 0x07
  54:	98 85       	ldd	r25, Y+8	; 0x08
  56:	9a 87       	std	Y+10, r25	; 0x0a
  58:	89 87       	std	Y+9, r24	; 0x09
  5a:	89 85       	ldd	r24, Y+9	; 0x09
  5c:	9a 85       	ldd	r25, Y+10	; 0x0a
  5e:	99 23       	and	r25, r25
  60:	04 f4       	brge	.+0      	; 0x62 <_Z13SetMotorSpeedii+0x62>
  62:	1a 86       	std	Y+10, r1	; 0x0a
  64:	19 86       	std	Y+9, r1	; 0x09
  66:	00 c0       	rjmp	.+0      	; 0x68 <_Z13SetMotorSpeedii+0x68>
  68:	8f 81       	ldd	r24, Y+7	; 0x07
  6a:	98 85       	ldd	r25, Y+8	; 0x08
  6c:	9a 87       	std	Y+10, r25	; 0x0a
  6e:	89 87       	std	Y+9, r24	; 0x09
  70:	89 85       	ldd	r24, Y+9	; 0x09
  72:	9a 85       	ldd	r25, Y+10	; 0x0a
  74:	8f 3f       	cpi	r24, 0xFF	; 255
  76:	91 05       	cpc	r25, r1
  78:	01 f0       	breq	.+0      	; 0x7a <_Z13SetMotorSpeedii+0x7a>
  7a:	04 f0       	brlt	.+0      	; 0x7c <_Z13SetMotorSpeedii+0x7c>
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	9a 87       	std	Y+10, r25	; 0x0a
  82:	89 87       	std	Y+9, r24	; 0x09
  84:	89 85       	ldd	r24, Y+9	; 0x09
  86:	9a 85       	ldd	r25, Y+10	; 0x0a
  88:	9a 83       	std	Y+2, r25	; 0x02
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	8f 81       	ldd	r24, Y+7	; 0x07
  8e:	98 85       	ldd	r25, Y+8	; 0x08
  90:	90 93 00 00 	sts	0x0000, r25
  94:	80 93 00 00 	sts	0x0000, r24
  98:	8d 81       	ldd	r24, Y+5	; 0x05
  9a:	9e 81       	ldd	r25, Y+6	; 0x06
  9c:	90 93 00 00 	sts	0x0000, r25
  a0:	80 93 00 00 	sts	0x0000, r24
  a4:	2d 96       	adiw	r28, 0x0d	; 13
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

Disassembly of section .text.__vector_9:

00000000 <__vector_9>:
  digitalWrite(I2, LOW);
  digitalWrite(I3, LOW);
  digitalWrite(I4, LOW);
}

int CheckMotorId(int _motorId)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	8f 93       	push	r24
   c:	9f 93       	push	r25
   e:	ef 93       	push	r30
{
	// Motor id can be 0 or 1
	if ((_motorId != 0) && (_motorId != 1)) return INVALID_MOTOR_ID;
  10:	ff 93       	push	r31
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	80 91 00 00 	lds	r24, 0x0000
  1e:	90 91 00 00 	lds	r25, 0x0000
  22:	00 97       	sbiw	r24, 0x00	; 0
  24:	01 f4       	brne	.+0      	; 0x26 <__vector_9+0x26>
  26:	e4 eb       	ldi	r30, 0xB4	; 180
  28:	f0 e0       	ldi	r31, 0x00	; 0
  2a:	80 91 00 00 	lds	r24, 0x0000
	return MOTOR_ID_OK;
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	80 83       	st	Z, r24
}
  34:	80 91 00 00 	lds	r24, 0x0000
  38:	90 91 00 00 	lds	r25, 0x0000
  3c:	81 30       	cpi	r24, 0x01	; 1
  3e:	91 05       	cpc	r25, r1
  40:	01 f4       	brne	.+0      	; 0x42 <__vector_9+0x42>
  42:	e3 eb       	ldi	r30, 0xB3	; 179
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	80 91 00 00 	lds	r24, 0x0000
  4a:	90 91 00 00 	lds	r25, 0x0000
  4e:	80 83       	st	Z, r24
  50:	cf 91       	pop	r28
  52:	df 91       	pop	r29
  54:	ff 91       	pop	r31
  56:	ef 91       	pop	r30
  58:	9f 91       	pop	r25
  5a:	8f 91       	pop	r24
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

Disassembly of section .text._Z17SetMotorDirectionii:

00000000 <_Z17SetMotorDirectionii>:
  digitalWrite(I2, LOW);
  digitalWrite(I3, LOW);
  digitalWrite(I4, LOW);
}

int CheckMotorId(int _motorId)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
{
	// Motor id can be 0 or 1
	if ((_motorId != 0) && (_motorId != 1)) return INVALID_MOTOR_ID;
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	9c 81       	ldd	r25, Y+4	; 0x04
  20:	0e 94 00 00 	call	0	; 0x0 <_Z17SetMotorDirectionii>
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  28:	1f 82       	std	Y+7, r1	; 0x07
  2a:	89 81       	ldd	r24, Y+1	; 0x01
	return MOTOR_ID_OK;
  2c:	9a 81       	ldd	r25, Y+2	; 0x02
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <_Z17SetMotorDirectionii+0x32>
  32:	81 e0       	ldi	r24, 0x01	; 1
}
  34:	8f 83       	std	Y+7, r24	; 0x07
  36:	8f 81       	ldd	r24, Y+7	; 0x07
  38:	88 23       	and	r24, r24
  3a:	01 f0       	breq	.+0      	; 0x3c <_Z17SetMotorDirectionii+0x3c>
  3c:	89 81       	ldd	r24, Y+1	; 0x01
  3e:	9a 81       	ldd	r25, Y+2	; 0x02
  40:	99 87       	std	Y+9, r25	; 0x09
  42:	88 87       	std	Y+8, r24	; 0x08
  44:	88 85       	ldd	r24, Y+8	; 0x08
  46:	99 85       	ldd	r25, Y+9	; 0x09
  48:	00 c0       	rjmp	.+0      	; 0x4a <_Z17SetMotorDirectionii+0x4a>
  4a:	8b 81       	ldd	r24, Y+3	; 0x03
  4c:	9c 81       	ldd	r25, Y+4	; 0x04
  4e:	00 97       	sbiw	r24, 0x00	; 0
  50:	01 f4       	brne	.+0      	; 0x52 <_Z17SetMotorDirectionii+0x52>
  52:	8d 81       	ldd	r24, Y+5	; 0x05
  54:	9e 81       	ldd	r25, Y+6	; 0x06
  56:	00 97       	sbiw	r24, 0x00	; 0
  58:	01 f0       	breq	.+0      	; 0x5a <_Z17SetMotorDirectionii+0x5a>
  5a:	88 e0       	ldi	r24, 0x08	; 8
  5c:	60 e0       	ldi	r22, 0x00	; 0
  5e:	0e 94 00 00 	call	0	; 0x0 <_Z17SetMotorDirectionii>
  62:	89 e0       	ldi	r24, 0x09	; 9
  64:	61 e0       	ldi	r22, 0x01	; 1
  66:	0e 94 00 00 	call	0	; 0x0 <_Z17SetMotorDirectionii>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_Z17SetMotorDirectionii+0x6c>
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	61 e0       	ldi	r22, 0x01	; 1
  70:	0e 94 00 00 	call	0	; 0x0 <_Z17SetMotorDirectionii>
  74:	89 e0       	ldi	r24, 0x09	; 9
  76:	60 e0       	ldi	r22, 0x00	; 0
  78:	0e 94 00 00 	call	0	; 0x0 <_Z17SetMotorDirectionii>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_Z17SetMotorDirectionii+0x7e>
  7e:	8d 81       	ldd	r24, Y+5	; 0x05
  80:	9e 81       	ldd	r25, Y+6	; 0x06
  82:	00 97       	sbiw	r24, 0x00	; 0
  84:	01 f0       	breq	.+0      	; 0x86 <_Z17SetMotorDirectionii+0x86>
  86:	8c e0       	ldi	r24, 0x0C	; 12
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	0e 94 00 00 	call	0	; 0x0 <_Z17SetMotorDirectionii>
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	0e 94 00 00 	call	0	; 0x0 <_Z17SetMotorDirectionii>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_Z17SetMotorDirectionii+0x98>
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_Z17SetMotorDirectionii>
  a0:	8d e0       	ldi	r24, 0x0D	; 13
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	0e 94 00 00 	call	0	; 0x0 <_Z17SetMotorDirectionii>
  a8:	29 96       	adiw	r28, 0x09	; 9
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	08 95       	ret

Disassembly of section .text._Z9StopMotori:

00000000 <_Z9StopMotori>:
  digitalWrite(I2, LOW);
  digitalWrite(I3, LOW);
  digitalWrite(I4, LOW);
}

int CheckMotorId(int _motorId)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z9StopMotori+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_Z9StopMotori+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
{
	// Motor id can be 0 or 1
	if ((_motorId != 0) && (_motorId != 1)) return INVALID_MOTOR_ID;
  10:	89 81       	ldd	r24, Y+1	; 0x01
  12:	9a 81       	ldd	r25, Y+2	; 0x02
  14:	00 97       	sbiw	r24, 0x00	; 0
  16:	01 f4       	brne	.+0      	; 0x18 <_Z9StopMotori+0x18>
  18:	88 e0       	ldi	r24, 0x08	; 8
  1a:	60 e0       	ldi	r22, 0x00	; 0
  1c:	0e 94 00 00 	call	0	; 0x0 <_Z9StopMotori>
  20:	89 e0       	ldi	r24, 0x09	; 9
  22:	60 e0       	ldi	r22, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_Z9StopMotori>
  28:	89 81       	ldd	r24, Y+1	; 0x01
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
	return MOTOR_ID_OK;
  2c:	81 30       	cpi	r24, 0x01	; 1
  2e:	91 05       	cpc	r25, r1
  30:	01 f4       	brne	.+0      	; 0x32 <_Z9StopMotori+0x32>
  32:	8c e0       	ldi	r24, 0x0C	; 12
}
  34:	60 e0       	ldi	r22, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_Z9StopMotori>
  3a:	8d e0       	ldi	r24, 0x0D	; 13
  3c:	60 e0       	ldi	r22, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_Z9StopMotori>
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	08 95       	ret

Disassembly of section .text._Z16PWMMotorCtrlInitv:

00000000 <_Z16PWMMotorCtrlInitv>:
  digitalWrite(I2, LOW);
  digitalWrite(I3, LOW);
  digitalWrite(I4, LOW);
}

int CheckMotorId(int _motorId)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	83 e0       	ldi	r24, 0x03	; 3
   a:	61 e0       	ldi	r22, 0x01	; 1
   c:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
{
	// Motor id can be 0 or 1
	if ((_motorId != 0) && (_motorId != 1)) return INVALID_MOTOR_ID;
  10:	8b e0       	ldi	r24, 0x0B	; 11
  12:	61 e0       	ldi	r22, 0x01	; 1
  14:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
  18:	88 e0       	ldi	r24, 0x08	; 8
  1a:	61 e0       	ldi	r22, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
  20:	89 e0       	ldi	r24, 0x09	; 9
  22:	61 e0       	ldi	r22, 0x01	; 1
  24:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
  28:	8c e0       	ldi	r24, 0x0C	; 12
  2a:	61 e0       	ldi	r22, 0x01	; 1
	return MOTOR_ID_OK;
  2c:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
  30:	8d e0       	ldi	r24, 0x0D	; 13
  32:	61 e0       	ldi	r22, 0x01	; 1
}
  34:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
  38:	78 94       	sei
  3a:	e0 eb       	ldi	r30, 0xB0	; 176
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	83 ea       	ldi	r24, 0xA3	; 163
  40:	80 83       	st	Z, r24
  42:	e1 eb       	ldi	r30, 0xB1	; 177
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	84 e0       	ldi	r24, 0x04	; 4
  48:	80 83       	st	Z, r24
  4a:	e3 eb       	ldi	r30, 0xB3	; 179
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	10 82       	st	Z, r1
  50:	e4 eb       	ldi	r30, 0xB4	; 180
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	10 82       	st	Z, r1
  56:	e0 e7       	ldi	r30, 0x70	; 112
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	80 83       	st	Z, r24
  5e:	88 e0       	ldi	r24, 0x08	; 8
  60:	60 e0       	ldi	r22, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
  66:	89 e0       	ldi	r24, 0x09	; 9
  68:	60 e0       	ldi	r22, 0x00	; 0
  6a:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
  6e:	8c e0       	ldi	r24, 0x0C	; 12
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
  76:	8d e0       	ldi	r24, 0x0D	; 13
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	0e 94 00 00 	call	0	; 0x0 <_Z16PWMMotorCtrlInitv>
  7e:	cf 91       	pop	r28
  80:	df 91       	pop	r29
  82:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000042  2**0
                  ALLOC
  3 .stab         00001548  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001592  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZNK6String6lengthEv 00000020  00000000  00000000  00002b1e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN5Print5writeEPKhj 00000090  00000000  00000000  00002b3e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN5Print5printEPK19__FlashStringHelper 0000008a  00000000  00000000  00002bce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Print5printEc 00000038  00000000  00000000  00002c58  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN5Print5printERK9Printable 0000003e  00000000  00000000  00002c90  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN5Print7printlnEv 00000048  00000000  00000000  00002cce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000054  00000000  00000000  00002d16  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Print7printlnEc 0000004c  00000000  00000000  00002d6a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN5Print7printlnERK9Printable 00000054  00000000  00000000  00002db6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN5Print5writeEPKc 00000078  00000000  00000000  00002e0a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Print11printNumberEmh 000000f6  00000000  00000000  00002e82  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print5printEmi 0000007e  00000000  00000000  00002f78  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print7printlnEmi 0000006e  00000000  00000000  00002ff6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print5printEji 00000048  00000000  00000000  00003064  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print7printlnEji 00000062  00000000  00000000  000030ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print5printEhi 00000044  00000000  00000000  0000310e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print7printlnEhi 0000005e  00000000  00000000  00003152  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print5printEli 00000106  00000000  00000000  000031b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print7printlnEli 0000006e  00000000  00000000  000032b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print5printEii 0000004c  00000000  00000000  00003324  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print7printlnEii 00000062  00000000  00000000  00003370  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print5printEPKc 00000030  00000000  00000000  000033d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print10printFloatEdh 00000312  00000000  00000000  00003402  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print5printEdi 0000004e  00000000  00000000  00003714  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print7printlnEdi 0000006e  00000000  00000000  00003762  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print7printlnEPKc 00000054  00000000  00000000  000037d0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN5Print5printERK6String 000000a4  00000000  00000000  00003824  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN5Print7printlnERK6String 00000054  00000000  00000000  000038c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .rodata._ZTV5Print 00000008  00000000  00000000  0000391c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZNK6String6lengthEv:

00000000 <_ZNK6String6lengthEv>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String6lengthEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	84 81       	ldd	r24, Z+4	; 0x04
  14:	95 81       	ldd	r25, Z+5	; 0x05
{
  size_t n = print(s);
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	cf 91       	pop	r28
  1c:	df 91       	pop	r29
  1e:	08 95       	ret

Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
{
  size_t n = print(s);
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	58 87       	std	Y+8, r21	; 0x08
  1e:	4f 83       	std	Y+7, r20	; 0x07
  20:	1a 82       	std	Y+2, r1	; 0x02
  22:	19 82       	std	Y+1, r1	; 0x01
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN5Print5writeEPKhj+0x26>
  26:	eb 81       	ldd	r30, Y+3	; 0x03
  n += println();
  28:	fc 81       	ldd	r31, Y+4	; 0x04
  2a:	01 90       	ld	r0, Z+
  2c:	f0 81       	ld	r31, Z
  2e:	e0 2d       	mov	r30, r0
  30:	20 81       	ld	r18, Z
  32:	31 81       	ldd	r19, Z+1	; 0x01
  34:	ed 81       	ldd	r30, Y+5	; 0x05
  36:	fe 81       	ldd	r31, Y+6	; 0x06
  38:	40 81       	ld	r20, Z
  3a:	8d 81       	ldd	r24, Y+5	; 0x05
  3c:	9e 81       	ldd	r25, Y+6	; 0x06
  return n;
  3e:	01 96       	adiw	r24, 0x01	; 1
  40:	9e 83       	std	Y+6, r25	; 0x06
}
  42:	8d 83       	std	Y+5, r24	; 0x05
  44:	8b 81       	ldd	r24, Y+3	; 0x03
  46:	9c 81       	ldd	r25, Y+4	; 0x04
  48:	64 2f       	mov	r22, r20
  4a:	f9 01       	movw	r30, r18
  4c:	09 95       	icall
  4e:	9c 01       	movw	r18, r24
  50:	89 81       	ldd	r24, Y+1	; 0x01
  52:	9a 81       	ldd	r25, Y+2	; 0x02
  54:	82 0f       	add	r24, r18
  56:	93 1f       	adc	r25, r19
  58:	9a 83       	std	Y+2, r25	; 0x02
  5a:	89 83       	std	Y+1, r24	; 0x01
  5c:	19 86       	std	Y+9, r1	; 0x09
  5e:	8f 81       	ldd	r24, Y+7	; 0x07
  60:	98 85       	ldd	r25, Y+8	; 0x08
  62:	00 97       	sbiw	r24, 0x00	; 0
  64:	01 f0       	breq	.+0      	; 0x66 <_ZN5Print5writeEPKhj+0x66>
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	89 87       	std	Y+9, r24	; 0x09
  6a:	8f 81       	ldd	r24, Y+7	; 0x07
  6c:	98 85       	ldd	r25, Y+8	; 0x08
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	98 87       	std	Y+8, r25	; 0x08
  72:	8f 83       	std	Y+7, r24	; 0x07
  74:	89 85       	ldd	r24, Y+9	; 0x09
  76:	88 23       	and	r24, r24
  78:	01 f4       	brne	.+0      	; 0x7a <_ZN5Print5writeEPKhj+0x7a>
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	9a 81       	ldd	r25, Y+2	; 0x02
  7e:	29 96       	adiw	r28, 0x09	; 9
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	f8 94       	cli
  84:	de bf       	out	0x3e, r29	; 62
  86:	0f be       	out	0x3f, r0	; 63
  88:	cd bf       	out	0x3d, r28	; 61
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

00000000 <_ZN5Print5printEPK19__FlashStringHelper>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2c 97       	sbiw	r28, 0x0c	; 12
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9a 87       	std	Y+10, r25	; 0x0a
{
  size_t n = print(s);
  16:	89 87       	std	Y+9, r24	; 0x09
  18:	7c 87       	std	Y+12, r23	; 0x0c
  1a:	6b 87       	std	Y+11, r22	; 0x0b
  1c:	8b 85       	ldd	r24, Y+11	; 0x0b
  1e:	9c 85       	ldd	r25, Y+12	; 0x0c
  20:	98 87       	std	Y+8, r25	; 0x08
  22:	8f 83       	std	Y+7, r24	; 0x07
  24:	1e 82       	std	Y+6, r1	; 0x06
  26:	1d 82       	std	Y+5, r1	; 0x05
  n += println();
  28:	8f 81       	ldd	r24, Y+7	; 0x07
  2a:	98 85       	ldd	r25, Y+8	; 0x08
  2c:	9b 83       	std	Y+3, r25	; 0x03
  2e:	8a 83       	std	Y+2, r24	; 0x02
  30:	8f 81       	ldd	r24, Y+7	; 0x07
  32:	98 85       	ldd	r25, Y+8	; 0x08
  34:	01 96       	adiw	r24, 0x01	; 1
  36:	98 87       	std	Y+8, r25	; 0x08
  38:	8f 83       	std	Y+7, r24	; 0x07
  3a:	ea 81       	ldd	r30, Y+2	; 0x02
  3c:	fb 81       	ldd	r31, Y+3	; 0x03
  return n;
  3e:	84 91       	lpm	r24, Z+
  40:	89 83       	std	Y+1, r24	; 0x01
}
  42:	89 81       	ldd	r24, Y+1	; 0x01
  44:	8c 83       	std	Y+4, r24	; 0x04
  46:	8c 81       	ldd	r24, Y+4	; 0x04
  48:	88 23       	and	r24, r24
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN5Print5printEPK19__FlashStringHelper+0x4c>
  4c:	e9 85       	ldd	r30, Y+9	; 0x09
  4e:	fa 85       	ldd	r31, Y+10	; 0x0a
  50:	01 90       	ld	r0, Z+
  52:	f0 81       	ld	r31, Z
  54:	e0 2d       	mov	r30, r0
  56:	01 90       	ld	r0, Z+
  58:	f0 81       	ld	r31, Z
  5a:	e0 2d       	mov	r30, r0
  5c:	89 85       	ldd	r24, Y+9	; 0x09
  5e:	9a 85       	ldd	r25, Y+10	; 0x0a
  60:	6c 81       	ldd	r22, Y+4	; 0x04
  62:	09 95       	icall
  64:	9c 01       	movw	r18, r24
  66:	8d 81       	ldd	r24, Y+5	; 0x05
  68:	9e 81       	ldd	r25, Y+6	; 0x06
  6a:	82 0f       	add	r24, r18
  6c:	93 1f       	adc	r25, r19
  6e:	9e 83       	std	Y+6, r25	; 0x06
  70:	8d 83       	std	Y+5, r24	; 0x05
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZN5Print5printEPK19__FlashStringHelper+0x74>
  74:	8d 81       	ldd	r24, Y+5	; 0x05
  76:	9e 81       	ldd	r25, Y+6	; 0x06
  78:	2c 96       	adiw	r28, 0x0c	; 12
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	f8 94       	cli
  7e:	de bf       	out	0x3e, r29	; 62
  80:	0f be       	out	0x3f, r0	; 63
  82:	cd bf       	out	0x3d, r28	; 61
  84:	cf 91       	pop	r28
  86:	df 91       	pop	r29
  88:	08 95       	ret

Disassembly of section .text._ZN5Print5printEc:

00000000 <_ZN5Print5printEc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print5printEc+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	e9 81       	ldd	r30, Y+1	; 0x01
  14:	fa 81       	ldd	r31, Y+2	; 0x02
{
  size_t n = print(s);
  16:	01 90       	ld	r0, Z+
  18:	f0 81       	ld	r31, Z
  1a:	e0 2d       	mov	r30, r0
  1c:	01 90       	ld	r0, Z+
  1e:	f0 81       	ld	r31, Z
  20:	e0 2d       	mov	r30, r0
  22:	2b 81       	ldd	r18, Y+3	; 0x03
  24:	89 81       	ldd	r24, Y+1	; 0x01
  26:	9a 81       	ldd	r25, Y+2	; 0x02
  n += println();
  28:	62 2f       	mov	r22, r18
  2a:	09 95       	icall
  2c:	0f 90       	pop	r0
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	cf 91       	pop	r28
  34:	df 91       	pop	r29
  36:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK9Printable:

00000000 <_ZN5Print5printERK9Printable>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print5printERK9Printable+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print5printERK9Printable+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	eb 81       	ldd	r30, Y+3	; 0x03
{
  size_t n = print(s);
  16:	fc 81       	ldd	r31, Y+4	; 0x04
  18:	01 90       	ld	r0, Z+
  1a:	f0 81       	ld	r31, Z
  1c:	e0 2d       	mov	r30, r0
  1e:	01 90       	ld	r0, Z+
  20:	f0 81       	ld	r31, Z
  22:	e0 2d       	mov	r30, r0
  24:	8b 81       	ldd	r24, Y+3	; 0x03
  26:	9c 81       	ldd	r25, Y+4	; 0x04
  n += println();
  28:	29 81       	ldd	r18, Y+1	; 0x01
  2a:	3a 81       	ldd	r19, Y+2	; 0x02
  2c:	b9 01       	movw	r22, r18
  2e:	09 95       	icall
  30:	0f 90       	pop	r0
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	cf 91       	pop	r28
  3a:	df 91       	pop	r29
  3c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEv:

00000000 <_ZN5Print7printlnEv>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print7printlnEv+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print7printlnEv+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9c 83       	std	Y+4, r25	; 0x04
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	8b 81       	ldd	r24, Y+3	; 0x03
  12:	9c 81       	ldd	r25, Y+4	; 0x04
  14:	6d e0       	ldi	r22, 0x0D	; 13
{
  size_t n = print(s);
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEv>
  1a:	9a 83       	std	Y+2, r25	; 0x02
  1c:	89 83       	std	Y+1, r24	; 0x01
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	9c 81       	ldd	r25, Y+4	; 0x04
  22:	6a e0       	ldi	r22, 0x0A	; 10
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEv>
  n += println();
  28:	9c 01       	movw	r18, r24
  2a:	89 81       	ldd	r24, Y+1	; 0x01
  2c:	9a 81       	ldd	r25, Y+2	; 0x02
  2e:	82 0f       	add	r24, r18
  30:	93 1f       	adc	r25, r19
  32:	9a 83       	std	Y+2, r25	; 0x02
  34:	89 83       	std	Y+1, r24	; 0x01
  36:	89 81       	ldd	r24, Y+1	; 0x01
  38:	9a 81       	ldd	r25, Y+2	; 0x02
  3a:	0f 90       	pop	r0
  3c:	0f 90       	pop	r0
  return n;
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
}
  42:	cf 91       	pop	r28
  44:	df 91       	pop	r29
  46:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00000000 <_ZN5Print7printlnEPK19__FlashStringHelper>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print7printlnEPK19__FlashStringHelper+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print7printlnEPK19__FlashStringHelper+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN5Print7printlnEPK19__FlashStringHelper+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	7e 83       	std	Y+6, r23	; 0x06
  14:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(s);
  16:	8b 81       	ldd	r24, Y+3	; 0x03
  18:	9c 81       	ldd	r25, Y+4	; 0x04
  1a:	2d 81       	ldd	r18, Y+5	; 0x05
  1c:	3e 81       	ldd	r19, Y+6	; 0x06
  1e:	b9 01       	movw	r22, r18
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  n += println();
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	9c 81       	ldd	r25, Y+4	; 0x04
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  30:	9c 01       	movw	r18, r24
  32:	89 81       	ldd	r24, Y+1	; 0x01
  34:	9a 81       	ldd	r25, Y+2	; 0x02
  36:	82 0f       	add	r24, r18
  38:	93 1f       	adc	r25, r19
  3a:	9a 83       	std	Y+2, r25	; 0x02
  3c:	89 83       	std	Y+1, r24	; 0x01
  return n;
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
}
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEc:

00000000 <_ZN5Print7printlnEc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print7printlnEc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print7printlnEc+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	6d 83       	std	Y+5, r22	; 0x05
  14:	8b 81       	ldd	r24, Y+3	; 0x03
{
  size_t n = print(s);
  16:	9c 81       	ldd	r25, Y+4	; 0x04
  18:	6d 81       	ldd	r22, Y+5	; 0x05
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
  1e:	9a 83       	std	Y+2, r25	; 0x02
  20:	89 83       	std	Y+1, r24	; 0x01
  22:	8b 81       	ldd	r24, Y+3	; 0x03
  24:	9c 81       	ldd	r25, Y+4	; 0x04
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
  n += println();
  2a:	9c 01       	movw	r18, r24
  2c:	89 81       	ldd	r24, Y+1	; 0x01
  2e:	9a 81       	ldd	r25, Y+2	; 0x02
  30:	82 0f       	add	r24, r18
  32:	93 1f       	adc	r25, r19
  34:	9a 83       	std	Y+2, r25	; 0x02
  36:	89 83       	std	Y+1, r24	; 0x01
  38:	89 81       	ldd	r24, Y+1	; 0x01
  3a:	9a 81       	ldd	r25, Y+2	; 0x02
  3c:	0f 90       	pop	r0
  return n;
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
}
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	cf 91       	pop	r28
  48:	df 91       	pop	r29
  4a:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK9Printable:

00000000 <_ZN5Print7printlnERK9Printable>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print7printlnERK9Printable+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print7printlnERK9Printable+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN5Print7printlnERK9Printable+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	7e 83       	std	Y+6, r23	; 0x06
  14:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(s);
  16:	8b 81       	ldd	r24, Y+3	; 0x03
  18:	9c 81       	ldd	r25, Y+4	; 0x04
  1a:	2d 81       	ldd	r18, Y+5	; 0x05
  1c:	3e 81       	ldd	r19, Y+6	; 0x06
  1e:	b9 01       	movw	r22, r18
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  n += println();
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	9c 81       	ldd	r25, Y+4	; 0x04
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
  30:	9c 01       	movw	r18, r24
  32:	89 81       	ldd	r24, Y+1	; 0x01
  34:	9a 81       	ldd	r25, Y+2	; 0x02
  36:	82 0f       	add	r24, r18
  38:	93 1f       	adc	r25, r19
  3a:	9a 83       	std	Y+2, r25	; 0x02
  3c:	89 83       	std	Y+1, r24	; 0x01
  return n;
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
}
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	08 95       	ret

Disassembly of section .text._ZN5Print5writeEPKc:

00000000 <_ZN5Print5writeEPKc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN5Print5writeEPKc+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN5Print5writeEPKc+0x10>
  10:	00 d0       	rcall	.+0      	; 0x12 <_ZN5Print5writeEPKc+0x12>
  12:	cd b7       	in	r28, 0x3d	; 61
  14:	de b7       	in	r29, 0x3e	; 62
{
  size_t n = print(s);
  16:	9a 83       	std	Y+2, r25	; 0x02
  18:	89 83       	std	Y+1, r24	; 0x01
  1a:	7c 83       	std	Y+4, r23	; 0x04
  1c:	6b 83       	std	Y+3, r22	; 0x03
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	9c 81       	ldd	r25, Y+4	; 0x04
  22:	00 97       	sbiw	r24, 0x00	; 0
  24:	01 f4       	brne	.+0      	; 0x26 <_ZN5Print5writeEPKc+0x26>
  26:	1e 82       	std	Y+6, r1	; 0x06
  n += println();
  28:	1d 82       	std	Y+5, r1	; 0x05
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN5Print5writeEPKc+0x2c>
  2c:	e9 81       	ldd	r30, Y+1	; 0x01
  2e:	fa 81       	ldd	r31, Y+2	; 0x02
  30:	80 81       	ld	r24, Z
  32:	91 81       	ldd	r25, Z+1	; 0x01
  34:	fc 01       	movw	r30, r24
  36:	32 96       	adiw	r30, 0x02	; 2
  38:	e0 80       	ld	r14, Z
  3a:	f1 80       	ldd	r15, Z+1	; 0x01
  3c:	0b 81       	ldd	r16, Y+3	; 0x03
  return n;
  3e:	1c 81       	ldd	r17, Y+4	; 0x04
  40:	8b 81       	ldd	r24, Y+3	; 0x03
}
  42:	9c 81       	ldd	r25, Y+4	; 0x04
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5writeEPKc>
  48:	9c 01       	movw	r18, r24
  4a:	89 81       	ldd	r24, Y+1	; 0x01
  4c:	9a 81       	ldd	r25, Y+2	; 0x02
  4e:	b8 01       	movw	r22, r16
  50:	a9 01       	movw	r20, r18
  52:	f7 01       	movw	r30, r14
  54:	09 95       	icall
  56:	9e 83       	std	Y+6, r25	; 0x06
  58:	8d 83       	std	Y+5, r24	; 0x05
  5a:	8d 81       	ldd	r24, Y+5	; 0x05
  5c:	9e 81       	ldd	r25, Y+6	; 0x06
  5e:	26 96       	adiw	r28, 0x06	; 6
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	f8 94       	cli
  64:	de bf       	out	0x3e, r29	; 62
  66:	0f be       	out	0x3f, r0	; 63
  68:	cd bf       	out	0x3d, r28	; 61
  6a:	cf 91       	pop	r28
  6c:	df 91       	pop	r29
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	08 95       	ret

Disassembly of section .text._ZN5Print11printNumberEmh:

00000000 <_ZN5Print11printNumberEmh>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	1f 93       	push	r17
   2:	df 93       	push	r29
   4:	cf 93       	push	r28
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	e0 97       	sbiw	r28, 0x30	; 48
   c:	0f b6       	in	r0, 0x3f	; 63
   e:	f8 94       	cli
  10:	de bf       	out	0x3e, r29	; 62
  12:	0f be       	out	0x3f, r0	; 63
  14:	cd bf       	out	0x3d, r28	; 61
{
  size_t n = print(s);
  16:	9a a7       	std	Y+42, r25	; 0x2a
  18:	89 a7       	std	Y+41, r24	; 0x29
  1a:	4b a7       	std	Y+43, r20	; 0x2b
  1c:	5c a7       	std	Y+44, r21	; 0x2c
  1e:	6d a7       	std	Y+45, r22	; 0x2d
  20:	7e a7       	std	Y+46, r23	; 0x2e
  22:	2f a7       	std	Y+47, r18	; 0x2f
  24:	ce 01       	movw	r24, r28
  26:	08 96       	adiw	r24, 0x08	; 8
  n += println();
  28:	80 96       	adiw	r24, 0x20	; 32
  2a:	9f 83       	std	Y+7, r25	; 0x07
  2c:	8e 83       	std	Y+6, r24	; 0x06
  2e:	ee 81       	ldd	r30, Y+6	; 0x06
  30:	ff 81       	ldd	r31, Y+7	; 0x07
  32:	10 82       	st	Z, r1
  34:	8f a5       	ldd	r24, Y+47	; 0x2f
  36:	82 30       	cpi	r24, 0x02	; 2
  38:	00 f4       	brcc	.+0      	; 0x3a <_ZN5Print11printNumberEmh+0x3a>
  3a:	8a e0       	ldi	r24, 0x0A	; 10
  3c:	8f a7       	std	Y+47, r24	; 0x2f
  return n;
  3e:	8b a5       	ldd	r24, Y+43	; 0x2b
  40:	9c a5       	ldd	r25, Y+44	; 0x2c
}
  42:	ad a5       	ldd	r26, Y+45	; 0x2d
  44:	be a5       	ldd	r27, Y+46	; 0x2e
  46:	8a 83       	std	Y+2, r24	; 0x02
  48:	9b 83       	std	Y+3, r25	; 0x03
  4a:	ac 83       	std	Y+4, r26	; 0x04
  4c:	bd 83       	std	Y+5, r27	; 0x05
  4e:	8f a5       	ldd	r24, Y+47	; 0x2f
  50:	28 2f       	mov	r18, r24
  52:	30 e0       	ldi	r19, 0x00	; 0
  54:	40 e0       	ldi	r20, 0x00	; 0
  56:	50 e0       	ldi	r21, 0x00	; 0
  58:	8b a5       	ldd	r24, Y+43	; 0x2b
  5a:	9c a5       	ldd	r25, Y+44	; 0x2c
  5c:	ad a5       	ldd	r26, Y+45	; 0x2d
  5e:	be a5       	ldd	r27, Y+46	; 0x2e
  60:	bc 01       	movw	r22, r24
  62:	cd 01       	movw	r24, r26
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  68:	da 01       	movw	r26, r20
  6a:	c9 01       	movw	r24, r18
  6c:	8b a7       	std	Y+43, r24	; 0x2b
  6e:	9c a7       	std	Y+44, r25	; 0x2c
  70:	ad a7       	std	Y+45, r26	; 0x2d
  72:	be a7       	std	Y+46, r27	; 0x2e
  74:	1a 81       	ldd	r17, Y+2	; 0x02
  76:	8f a5       	ldd	r24, Y+47	; 0x2f
  78:	88 2f       	mov	r24, r24
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	a0 e0       	ldi	r26, 0x00	; 0
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	2b a5       	ldd	r18, Y+43	; 0x2b
  82:	3c a5       	ldd	r19, Y+44	; 0x2c
  84:	4d a5       	ldd	r20, Y+45	; 0x2d
  86:	5e a5       	ldd	r21, Y+46	; 0x2e
  88:	bc 01       	movw	r22, r24
  8a:	cd 01       	movw	r24, r26
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  90:	dc 01       	movw	r26, r24
  92:	cb 01       	movw	r24, r22
  94:	91 2f       	mov	r25, r17
  96:	98 1b       	sub	r25, r24
  98:	89 2f       	mov	r24, r25
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	8e 81       	ldd	r24, Y+6	; 0x06
  9e:	9f 81       	ldd	r25, Y+7	; 0x07
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	9f 83       	std	Y+7, r25	; 0x07
  a4:	8e 83       	std	Y+6, r24	; 0x06
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	8a 30       	cpi	r24, 0x0A	; 10
  aa:	04 f4       	brge	.+0      	; 0xac <_ZN5Print11printNumberEmh+0xac>
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	80 5d       	subi	r24, 0xD0	; 208
  b0:	88 ab       	std	Y+48, r24	; 0x30
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN5Print11printNumberEmh+0xb4>
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	89 5c       	subi	r24, 0xC9	; 201
  b8:	88 ab       	std	Y+48, r24	; 0x30
  ba:	ee 81       	ldd	r30, Y+6	; 0x06
  bc:	ff 81       	ldd	r31, Y+7	; 0x07
  be:	88 a9       	ldd	r24, Y+48	; 0x30
  c0:	80 83       	st	Z, r24
  c2:	8b a5       	ldd	r24, Y+43	; 0x2b
  c4:	9c a5       	ldd	r25, Y+44	; 0x2c
  c6:	ad a5       	ldd	r26, Y+45	; 0x2d
  c8:	be a5       	ldd	r27, Y+46	; 0x2e
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	a1 05       	cpc	r26, r1
  ce:	b1 05       	cpc	r27, r1
  d0:	01 f0       	breq	.+0      	; 0xd2 <_ZN5Print11printNumberEmh+0xd2>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZN5Print11printNumberEmh+0xd4>
  d4:	89 a5       	ldd	r24, Y+41	; 0x29
  d6:	9a a5       	ldd	r25, Y+42	; 0x2a
  d8:	2e 81       	ldd	r18, Y+6	; 0x06
  da:	3f 81       	ldd	r19, Y+7	; 0x07
  dc:	b9 01       	movw	r22, r18
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  e2:	e0 96       	adiw	r28, 0x30	; 48
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	1f 91       	pop	r17
  f4:	08 95       	ret

Disassembly of section .text._ZN5Print5printEmi:

00000000 <_ZN5Print5printEmi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9a 83       	std	Y+2, r25	; 0x02
{
  size_t n = print(s);
  16:	89 83       	std	Y+1, r24	; 0x01
  18:	4b 83       	std	Y+3, r20	; 0x03
  1a:	5c 83       	std	Y+4, r21	; 0x04
  1c:	6d 83       	std	Y+5, r22	; 0x05
  1e:	7e 83       	std	Y+6, r23	; 0x06
  20:	38 87       	std	Y+8, r19	; 0x08
  22:	2f 83       	std	Y+7, r18	; 0x07
  24:	8f 81       	ldd	r24, Y+7	; 0x07
  26:	98 85       	ldd	r25, Y+8	; 0x08
  n += println();
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN5Print5printEmi+0x2c>
  2c:	e9 81       	ldd	r30, Y+1	; 0x01
  2e:	fa 81       	ldd	r31, Y+2	; 0x02
  30:	01 90       	ld	r0, Z+
  32:	f0 81       	ld	r31, Z
  34:	e0 2d       	mov	r30, r0
  36:	01 90       	ld	r0, Z+
  38:	f0 81       	ld	r31, Z
  3a:	e0 2d       	mov	r30, r0
  3c:	2b 81       	ldd	r18, Y+3	; 0x03
  return n;
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
}
  42:	62 2f       	mov	r22, r18
  44:	09 95       	icall
  46:	9a 87       	std	Y+10, r25	; 0x0a
  48:	89 87       	std	Y+9, r24	; 0x09
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN5Print5printEmi+0x4c>
  4c:	ef 81       	ldd	r30, Y+7	; 0x07
  4e:	89 81       	ldd	r24, Y+1	; 0x01
  50:	9a 81       	ldd	r25, Y+2	; 0x02
  52:	2b 81       	ldd	r18, Y+3	; 0x03
  54:	3c 81       	ldd	r19, Y+4	; 0x04
  56:	4d 81       	ldd	r20, Y+5	; 0x05
  58:	5e 81       	ldd	r21, Y+6	; 0x06
  5a:	ba 01       	movw	r22, r20
  5c:	a9 01       	movw	r20, r18
  5e:	2e 2f       	mov	r18, r30
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEmi>
  64:	9a 87       	std	Y+10, r25	; 0x0a
  66:	89 87       	std	Y+9, r24	; 0x09
  68:	89 85       	ldd	r24, Y+9	; 0x09
  6a:	9a 85       	ldd	r25, Y+10	; 0x0a
  6c:	2a 96       	adiw	r28, 0x0a	; 10
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	f8 94       	cli
  72:	de bf       	out	0x3e, r29	; 62
  74:	0f be       	out	0x3f, r0	; 63
  76:	cd bf       	out	0x3d, r28	; 61
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEmi:

00000000 <_ZN5Print7printlnEmi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
{
  size_t n = print(s);
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	4d 83       	std	Y+5, r20	; 0x05
  1a:	5e 83       	std	Y+6, r21	; 0x06
  1c:	6f 83       	std	Y+7, r22	; 0x07
  1e:	78 87       	std	Y+8, r23	; 0x08
  20:	3a 87       	std	Y+10, r19	; 0x0a
  22:	29 87       	std	Y+9, r18	; 0x09
  24:	8b 81       	ldd	r24, Y+3	; 0x03
  26:	9c 81       	ldd	r25, Y+4	; 0x04
  n += println();
  28:	2d 81       	ldd	r18, Y+5	; 0x05
  2a:	3e 81       	ldd	r19, Y+6	; 0x06
  2c:	4f 81       	ldd	r20, Y+7	; 0x07
  2e:	58 85       	ldd	r21, Y+8	; 0x08
  30:	e9 85       	ldd	r30, Y+9	; 0x09
  32:	fa 85       	ldd	r31, Y+10	; 0x0a
  34:	ba 01       	movw	r22, r20
  36:	a9 01       	movw	r20, r18
  38:	9f 01       	movw	r18, r30
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
  return n;
  3e:	9a 83       	std	Y+2, r25	; 0x02
  40:	89 83       	std	Y+1, r24	; 0x01
}
  42:	8b 81       	ldd	r24, Y+3	; 0x03
  44:	9c 81       	ldd	r25, Y+4	; 0x04
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
  4a:	9c 01       	movw	r18, r24
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	82 0f       	add	r24, r18
  52:	93 1f       	adc	r25, r19
  54:	9a 83       	std	Y+2, r25	; 0x02
  56:	89 83       	std	Y+1, r24	; 0x01
  58:	89 81       	ldd	r24, Y+1	; 0x01
  5a:	9a 81       	ldd	r25, Y+2	; 0x02
  5c:	2a 96       	adiw	r28, 0x0a	; 10
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	f8 94       	cli
  62:	de bf       	out	0x3e, r29	; 62
  64:	0f be       	out	0x3f, r0	; 63
  66:	cd bf       	out	0x3d, r28	; 61
  68:	cf 91       	pop	r28
  6a:	df 91       	pop	r29
  6c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEji:

00000000 <_ZN5Print5printEji>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print5printEji+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print5printEji+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN5Print5printEji+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
{
  size_t n = print(s);
  16:	5e 83       	std	Y+6, r21	; 0x06
  18:	4d 83       	std	Y+5, r20	; 0x05
  1a:	8b 81       	ldd	r24, Y+3	; 0x03
  1c:	9c 81       	ldd	r25, Y+4	; 0x04
  1e:	9c 01       	movw	r18, r24
  20:	40 e0       	ldi	r20, 0x00	; 0
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	89 81       	ldd	r24, Y+1	; 0x01
  26:	9a 81       	ldd	r25, Y+2	; 0x02
  n += println();
  28:	ed 81       	ldd	r30, Y+5	; 0x05
  2a:	fe 81       	ldd	r31, Y+6	; 0x06
  2c:	ba 01       	movw	r22, r20
  2e:	a9 01       	movw	r20, r18
  30:	9f 01       	movw	r18, r30
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEji>
  36:	26 96       	adiw	r28, 0x06	; 6
  38:	0f b6       	in	r0, 0x3f	; 63
  3a:	f8 94       	cli
  3c:	de bf       	out	0x3e, r29	; 62
  return n;
  3e:	0f be       	out	0x3f, r0	; 63
  40:	cd bf       	out	0x3d, r28	; 61
}
  42:	cf 91       	pop	r28
  44:	df 91       	pop	r29
  46:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEji:

00000000 <_ZN5Print7printlnEji>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
{
  size_t n = print(s);
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	58 87       	std	Y+8, r21	; 0x08
  1e:	4f 83       	std	Y+7, r20	; 0x07
  20:	8b 81       	ldd	r24, Y+3	; 0x03
  22:	9c 81       	ldd	r25, Y+4	; 0x04
  24:	2d 81       	ldd	r18, Y+5	; 0x05
  26:	3e 81       	ldd	r19, Y+6	; 0x06
  n += println();
  28:	4f 81       	ldd	r20, Y+7	; 0x07
  2a:	58 85       	ldd	r21, Y+8	; 0x08
  2c:	b9 01       	movw	r22, r18
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  32:	9a 83       	std	Y+2, r25	; 0x02
  34:	89 83       	std	Y+1, r24	; 0x01
  36:	8b 81       	ldd	r24, Y+3	; 0x03
  38:	9c 81       	ldd	r25, Y+4	; 0x04
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  return n;
  3e:	9c 01       	movw	r18, r24
  40:	89 81       	ldd	r24, Y+1	; 0x01
}
  42:	9a 81       	ldd	r25, Y+2	; 0x02
  44:	82 0f       	add	r24, r18
  46:	93 1f       	adc	r25, r19
  48:	9a 83       	std	Y+2, r25	; 0x02
  4a:	89 83       	std	Y+1, r24	; 0x01
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	28 96       	adiw	r28, 0x08	; 8
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	08 95       	ret

Disassembly of section .text._ZN5Print5printEhi:

00000000 <_ZN5Print5printEhi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print5printEhi+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print5printEhi+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	5d 83       	std	Y+5, r21	; 0x05
{
  size_t n = print(s);
  16:	4c 83       	std	Y+4, r20	; 0x04
  18:	8b 81       	ldd	r24, Y+3	; 0x03
  1a:	28 2f       	mov	r18, r24
  1c:	30 e0       	ldi	r19, 0x00	; 0
  1e:	40 e0       	ldi	r20, 0x00	; 0
  20:	50 e0       	ldi	r21, 0x00	; 0
  22:	89 81       	ldd	r24, Y+1	; 0x01
  24:	9a 81       	ldd	r25, Y+2	; 0x02
  26:	ec 81       	ldd	r30, Y+4	; 0x04
  n += println();
  28:	fd 81       	ldd	r31, Y+5	; 0x05
  2a:	ba 01       	movw	r22, r20
  2c:	a9 01       	movw	r20, r18
  2e:	9f 01       	movw	r18, r30
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEhi>
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	0f 90       	pop	r0
  3c:	0f 90       	pop	r0
  return n;
  3e:	cf 91       	pop	r28
  40:	df 91       	pop	r29
}
  42:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEhi:

00000000 <_ZN5Print7printlnEhi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
{
  size_t n = print(s);
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	6d 83       	std	Y+5, r22	; 0x05
  1a:	5f 83       	std	Y+7, r21	; 0x07
  1c:	4e 83       	std	Y+6, r20	; 0x06
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	9c 81       	ldd	r25, Y+4	; 0x04
  22:	2e 81       	ldd	r18, Y+6	; 0x06
  24:	3f 81       	ldd	r19, Y+7	; 0x07
  26:	6d 81       	ldd	r22, Y+5	; 0x05
  n += println();
  28:	a9 01       	movw	r20, r18
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  2e:	9a 83       	std	Y+2, r25	; 0x02
  30:	89 83       	std	Y+1, r24	; 0x01
  32:	8b 81       	ldd	r24, Y+3	; 0x03
  34:	9c 81       	ldd	r25, Y+4	; 0x04
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  3a:	9c 01       	movw	r18, r24
  3c:	89 81       	ldd	r24, Y+1	; 0x01
  return n;
  3e:	9a 81       	ldd	r25, Y+2	; 0x02
  40:	82 0f       	add	r24, r18
}
  42:	93 1f       	adc	r25, r19
  44:	9a 83       	std	Y+2, r25	; 0x02
  46:	89 83       	std	Y+1, r24	; 0x01
  48:	89 81       	ldd	r24, Y+1	; 0x01
  4a:	9a 81       	ldd	r25, Y+2	; 0x02
  4c:	27 96       	adiw	r28, 0x07	; 7
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEli:

00000000 <_ZN5Print5printEli>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2c 97       	sbiw	r28, 0x0c	; 12
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
{
  size_t n = print(s);
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	4d 83       	std	Y+5, r20	; 0x05
  1a:	5e 83       	std	Y+6, r21	; 0x06
  1c:	6f 83       	std	Y+7, r22	; 0x07
  1e:	78 87       	std	Y+8, r23	; 0x08
  20:	3a 87       	std	Y+10, r19	; 0x0a
  22:	29 87       	std	Y+9, r18	; 0x09
  24:	89 85       	ldd	r24, Y+9	; 0x09
  26:	9a 85       	ldd	r25, Y+10	; 0x0a
  n += println();
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN5Print5printEli+0x2c>
  2c:	eb 81       	ldd	r30, Y+3	; 0x03
  2e:	fc 81       	ldd	r31, Y+4	; 0x04
  30:	01 90       	ld	r0, Z+
  32:	f0 81       	ld	r31, Z
  34:	e0 2d       	mov	r30, r0
  36:	01 90       	ld	r0, Z+
  38:	f0 81       	ld	r31, Z
  3a:	e0 2d       	mov	r30, r0
  3c:	2d 81       	ldd	r18, Y+5	; 0x05
  return n;
  3e:	8b 81       	ldd	r24, Y+3	; 0x03
  40:	9c 81       	ldd	r25, Y+4	; 0x04
}
  42:	62 2f       	mov	r22, r18
  44:	09 95       	icall
  46:	9c 87       	std	Y+12, r25	; 0x0c
  48:	8b 87       	std	Y+11, r24	; 0x0b
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN5Print5printEli+0x4c>
  4c:	89 85       	ldd	r24, Y+9	; 0x09
  4e:	9a 85       	ldd	r25, Y+10	; 0x0a
  50:	8a 30       	cpi	r24, 0x0A	; 10
  52:	91 05       	cpc	r25, r1
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN5Print5printEli+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN5Print5printEli+0x58>
  58:	8d 81       	ldd	r24, Y+5	; 0x05
  5a:	9e 81       	ldd	r25, Y+6	; 0x06
  5c:	af 81       	ldd	r26, Y+7	; 0x07
  5e:	b8 85       	ldd	r27, Y+8	; 0x08
  60:	bb 23       	and	r27, r27
  62:	04 f4       	brge	.+0      	; 0x64 <_ZN5Print5printEli+0x64>
  64:	8b 81       	ldd	r24, Y+3	; 0x03
  66:	9c 81       	ldd	r25, Y+4	; 0x04
  68:	6d e2       	ldi	r22, 0x2D	; 45
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  6e:	9a 83       	std	Y+2, r25	; 0x02
  70:	89 83       	std	Y+1, r24	; 0x01
  72:	8d 81       	ldd	r24, Y+5	; 0x05
  74:	9e 81       	ldd	r25, Y+6	; 0x06
  76:	af 81       	ldd	r26, Y+7	; 0x07
  78:	b8 85       	ldd	r27, Y+8	; 0x08
  7a:	b0 95       	com	r27
  7c:	a0 95       	com	r26
  7e:	90 95       	com	r25
  80:	81 95       	neg	r24
  82:	9f 4f       	sbci	r25, 0xFF	; 255
  84:	af 4f       	sbci	r26, 0xFF	; 255
  86:	bf 4f       	sbci	r27, 0xFF	; 255
  88:	8d 83       	std	Y+5, r24	; 0x05
  8a:	9e 83       	std	Y+6, r25	; 0x06
  8c:	af 83       	std	Y+7, r26	; 0x07
  8e:	b8 87       	std	Y+8, r27	; 0x08
  90:	2d 81       	ldd	r18, Y+5	; 0x05
  92:	3e 81       	ldd	r19, Y+6	; 0x06
  94:	4f 81       	ldd	r20, Y+7	; 0x07
  96:	58 85       	ldd	r21, Y+8	; 0x08
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	9c 81       	ldd	r25, Y+4	; 0x04
  9c:	ba 01       	movw	r22, r20
  9e:	a9 01       	movw	r20, r18
  a0:	2a e0       	ldi	r18, 0x0A	; 10
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  a6:	9c 01       	movw	r18, r24
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	a9 01       	movw	r20, r18
  ae:	48 0f       	add	r20, r24
  b0:	59 1f       	adc	r21, r25
  b2:	5c 87       	std	Y+12, r21	; 0x0c
  b4:	4b 87       	std	Y+11, r20	; 0x0b
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_ZN5Print5printEli+0xb8>
  b8:	2d 81       	ldd	r18, Y+5	; 0x05
  ba:	3e 81       	ldd	r19, Y+6	; 0x06
  bc:	4f 81       	ldd	r20, Y+7	; 0x07
  be:	58 85       	ldd	r21, Y+8	; 0x08
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	9c 81       	ldd	r25, Y+4	; 0x04
  c4:	ba 01       	movw	r22, r20
  c6:	a9 01       	movw	r20, r18
  c8:	2a e0       	ldi	r18, 0x0A	; 10
  ca:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  ce:	9c 87       	std	Y+12, r25	; 0x0c
  d0:	8b 87       	std	Y+11, r24	; 0x0b
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZN5Print5printEli+0xd4>
  d4:	2d 81       	ldd	r18, Y+5	; 0x05
  d6:	3e 81       	ldd	r19, Y+6	; 0x06
  d8:	4f 81       	ldd	r20, Y+7	; 0x07
  da:	58 85       	ldd	r21, Y+8	; 0x08
  dc:	e9 85       	ldd	r30, Y+9	; 0x09
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	9c 81       	ldd	r25, Y+4	; 0x04
  e2:	ba 01       	movw	r22, r20
  e4:	a9 01       	movw	r20, r18
  e6:	2e 2f       	mov	r18, r30
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  ec:	9c 87       	std	Y+12, r25	; 0x0c
  ee:	8b 87       	std	Y+11, r24	; 0x0b
  f0:	8b 85       	ldd	r24, Y+11	; 0x0b
  f2:	9c 85       	ldd	r25, Y+12	; 0x0c
  f4:	2c 96       	adiw	r28, 0x0c	; 12
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEli:

00000000 <_ZN5Print7printlnEli>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
{
  size_t n = print(s);
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	4d 83       	std	Y+5, r20	; 0x05
  1a:	5e 83       	std	Y+6, r21	; 0x06
  1c:	6f 83       	std	Y+7, r22	; 0x07
  1e:	78 87       	std	Y+8, r23	; 0x08
  20:	3a 87       	std	Y+10, r19	; 0x0a
  22:	29 87       	std	Y+9, r18	; 0x09
  24:	8b 81       	ldd	r24, Y+3	; 0x03
  26:	9c 81       	ldd	r25, Y+4	; 0x04
  n += println();
  28:	2d 81       	ldd	r18, Y+5	; 0x05
  2a:	3e 81       	ldd	r19, Y+6	; 0x06
  2c:	4f 81       	ldd	r20, Y+7	; 0x07
  2e:	58 85       	ldd	r21, Y+8	; 0x08
  30:	e9 85       	ldd	r30, Y+9	; 0x09
  32:	fa 85       	ldd	r31, Y+10	; 0x0a
  34:	ba 01       	movw	r22, r20
  36:	a9 01       	movw	r20, r18
  38:	9f 01       	movw	r18, r30
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
  return n;
  3e:	9a 83       	std	Y+2, r25	; 0x02
  40:	89 83       	std	Y+1, r24	; 0x01
}
  42:	8b 81       	ldd	r24, Y+3	; 0x03
  44:	9c 81       	ldd	r25, Y+4	; 0x04
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
  4a:	9c 01       	movw	r18, r24
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	82 0f       	add	r24, r18
  52:	93 1f       	adc	r25, r19
  54:	9a 83       	std	Y+2, r25	; 0x02
  56:	89 83       	std	Y+1, r24	; 0x01
  58:	89 81       	ldd	r24, Y+1	; 0x01
  5a:	9a 81       	ldd	r25, Y+2	; 0x02
  5c:	2a 96       	adiw	r28, 0x0a	; 10
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	f8 94       	cli
  62:	de bf       	out	0x3e, r29	; 62
  64:	0f be       	out	0x3f, r0	; 63
  66:	cd bf       	out	0x3d, r28	; 61
  68:	cf 91       	pop	r28
  6a:	df 91       	pop	r29
  6c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEii:

00000000 <_ZN5Print5printEii>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print5printEii+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print5printEii+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN5Print5printEii+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
{
  size_t n = print(s);
  16:	5e 83       	std	Y+6, r21	; 0x06
  18:	4d 83       	std	Y+5, r20	; 0x05
  1a:	8b 81       	ldd	r24, Y+3	; 0x03
  1c:	9c 81       	ldd	r25, Y+4	; 0x04
  1e:	9c 01       	movw	r18, r24
  20:	44 27       	eor	r20, r20
  22:	37 fd       	sbrc	r19, 7
  24:	40 95       	com	r20
  26:	54 2f       	mov	r21, r20
  n += println();
  28:	89 81       	ldd	r24, Y+1	; 0x01
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
  2c:	ed 81       	ldd	r30, Y+5	; 0x05
  2e:	fe 81       	ldd	r31, Y+6	; 0x06
  30:	ba 01       	movw	r22, r20
  32:	a9 01       	movw	r20, r18
  34:	9f 01       	movw	r18, r30
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEii>
  3a:	26 96       	adiw	r28, 0x06	; 6
  3c:	0f b6       	in	r0, 0x3f	; 63
  return n;
  3e:	f8 94       	cli
  40:	de bf       	out	0x3e, r29	; 62
}
  42:	0f be       	out	0x3f, r0	; 63
  44:	cd bf       	out	0x3d, r28	; 61
  46:	cf 91       	pop	r28
  48:	df 91       	pop	r29
  4a:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEii:

00000000 <_ZN5Print7printlnEii>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
{
  size_t n = print(s);
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	58 87       	std	Y+8, r21	; 0x08
  1e:	4f 83       	std	Y+7, r20	; 0x07
  20:	8b 81       	ldd	r24, Y+3	; 0x03
  22:	9c 81       	ldd	r25, Y+4	; 0x04
  24:	2d 81       	ldd	r18, Y+5	; 0x05
  26:	3e 81       	ldd	r19, Y+6	; 0x06
  n += println();
  28:	4f 81       	ldd	r20, Y+7	; 0x07
  2a:	58 85       	ldd	r21, Y+8	; 0x08
  2c:	b9 01       	movw	r22, r18
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  32:	9a 83       	std	Y+2, r25	; 0x02
  34:	89 83       	std	Y+1, r24	; 0x01
  36:	8b 81       	ldd	r24, Y+3	; 0x03
  38:	9c 81       	ldd	r25, Y+4	; 0x04
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  return n;
  3e:	9c 01       	movw	r18, r24
  40:	89 81       	ldd	r24, Y+1	; 0x01
}
  42:	9a 81       	ldd	r25, Y+2	; 0x02
  44:	82 0f       	add	r24, r18
  46:	93 1f       	adc	r25, r19
  48:	9a 83       	std	Y+2, r25	; 0x02
  4a:	89 83       	std	Y+1, r24	; 0x01
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	28 96       	adiw	r28, 0x08	; 8
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPKc:

00000000 <_ZN5Print5printEPKc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print5printEPKc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print5printEPKc+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
{
  size_t n = print(s);
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	2b 81       	ldd	r18, Y+3	; 0x03
  1a:	3c 81       	ldd	r19, Y+4	; 0x04
  1c:	b9 01       	movw	r22, r18
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEPKc>
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	0f 90       	pop	r0
  n += println();
  28:	0f 90       	pop	r0
  2a:	cf 91       	pop	r28
  2c:	df 91       	pop	r29
  2e:	08 95       	ret

Disassembly of section .text._ZN5Print10printFloatEdh:

00000000 <_ZN5Print10printFloatEdh>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	a1 97       	sbiw	r28, 0x21	; 33
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9b 8b       	std	Y+19, r25	; 0x13
{
  size_t n = print(s);
  16:	8a 8b       	std	Y+18, r24	; 0x12
  18:	4c 8b       	std	Y+20, r20	; 0x14
  1a:	5d 8b       	std	Y+21, r21	; 0x15
  1c:	6e 8b       	std	Y+22, r22	; 0x16
  1e:	7f 8b       	std	Y+23, r23	; 0x17
  20:	28 8f       	std	Y+24, r18	; 0x18
  22:	19 8a       	std	Y+17, r1	; 0x11
  24:	18 8a       	std	Y+16, r1	; 0x10
  26:	6c 89       	ldd	r22, Y+20	; 0x14
  n += println();
  28:	7d 89       	ldd	r23, Y+21	; 0x15
  2a:	8e 89       	ldd	r24, Y+22	; 0x16
  2c:	9f 89       	ldd	r25, Y+23	; 0x17
  2e:	2c 89       	ldd	r18, Y+20	; 0x14
  30:	3d 89       	ldd	r19, Y+21	; 0x15
  32:	4e 89       	ldd	r20, Y+22	; 0x16
  34:	5f 89       	ldd	r21, Y+23	; 0x17
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  3a:	88 23       	and	r24, r24
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN5Print10printFloatEdh+0x3e>
  return n;
  3e:	8a 89       	ldd	r24, Y+18	; 0x12
  40:	9b 89       	ldd	r25, Y+19	; 0x13
}
  42:	20 e0       	ldi	r18, 0x00	; 0
  44:	30 e0       	ldi	r19, 0x00	; 0
  46:	b9 01       	movw	r22, r18
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  4c:	9c 8f       	std	Y+28, r25	; 0x1c
  4e:	8b 8f       	std	Y+27, r24	; 0x1b
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN5Print10printFloatEdh+0x52>
  52:	1a 8e       	std	Y+26, r1	; 0x1a
  54:	19 8e       	std	Y+25, r1	; 0x19
  56:	8c 89       	ldd	r24, Y+20	; 0x14
  58:	9d 89       	ldd	r25, Y+21	; 0x15
  5a:	ae 89       	ldd	r26, Y+22	; 0x16
  5c:	bf 89       	ldd	r27, Y+23	; 0x17
  5e:	bf 77       	andi	r27, 0x7F	; 127
  60:	8d 8f       	std	Y+29, r24	; 0x1d
  62:	9e 8f       	std	Y+30, r25	; 0x1e
  64:	af 8f       	std	Y+31, r26	; 0x1f
  66:	b8 a3       	std	Y+32, r27	; 0x20
  68:	6d 8d       	ldd	r22, Y+29	; 0x1d
  6a:	7e 8d       	ldd	r23, Y+30	; 0x1e
  6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
  6e:	98 a1       	ldd	r25, Y+32	; 0x20
  70:	2f ef       	ldi	r18, 0xFF	; 255
  72:	3f ef       	ldi	r19, 0xFF	; 255
  74:	4f e7       	ldi	r20, 0x7F	; 127
  76:	5f e7       	ldi	r21, 0x7F	; 127
  78:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  7c:	88 23       	and	r24, r24
  7e:	01 f4       	brne	.+0      	; 0x80 <_ZN5Print10printFloatEdh+0x80>
  80:	6d 8d       	ldd	r22, Y+29	; 0x1d
  82:	7e 8d       	ldd	r23, Y+30	; 0x1e
  84:	8f 8d       	ldd	r24, Y+31	; 0x1f
  86:	98 a1       	ldd	r25, Y+32	; 0x20
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	3f ef       	ldi	r19, 0xFF	; 255
  8c:	4f e7       	ldi	r20, 0x7F	; 127
  8e:	5f e7       	ldi	r21, 0x7F	; 127
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  94:	18 16       	cp	r1, r24
  96:	04 f0       	brlt	.+0      	; 0x98 <_ZN5Print10printFloatEdh+0x98>
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	3a 8f       	std	Y+26, r19	; 0x1a
  9e:	29 8f       	std	Y+25, r18	; 0x19
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	29 8d       	ldd	r18, Y+25	; 0x19
  a6:	3a 8d       	ldd	r19, Y+26	; 0x1a
  a8:	28 27       	eor	r18, r24
  aa:	39 27       	eor	r19, r25
  ac:	3a 8f       	std	Y+26, r19	; 0x1a
  ae:	29 8f       	std	Y+25, r18	; 0x19
  b0:	89 8d       	ldd	r24, Y+25	; 0x19
  b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	01 f0       	breq	.+0      	; 0xb8 <_ZN5Print10printFloatEdh+0xb8>
  b8:	8a 89       	ldd	r24, Y+18	; 0x12
  ba:	9b 89       	ldd	r25, Y+19	; 0x13
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	b9 01       	movw	r22, r18
  c2:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  c6:	9c 8f       	std	Y+28, r25	; 0x1c
  c8:	8b 8f       	std	Y+27, r24	; 0x1b
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN5Print10printFloatEdh+0xcc>
  cc:	6c 89       	ldd	r22, Y+20	; 0x14
  ce:	7d 89       	ldd	r23, Y+21	; 0x15
  d0:	8e 89       	ldd	r24, Y+22	; 0x16
  d2:	9f 89       	ldd	r25, Y+23	; 0x17
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	3f ef       	ldi	r19, 0xFF	; 255
  d8:	4f e7       	ldi	r20, 0x7F	; 127
  da:	5f e4       	ldi	r21, 0x4F	; 79
  dc:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  e0:	18 16       	cp	r1, r24
  e2:	04 f4       	brge	.+0      	; 0xe4 <_ZN5Print10printFloatEdh+0xe4>
  e4:	8a 89       	ldd	r24, Y+18	; 0x12
  e6:	9b 89       	ldd	r25, Y+19	; 0x13
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  f2:	9c 8f       	std	Y+28, r25	; 0x1c
  f4:	8b 8f       	std	Y+27, r24	; 0x1b
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_ZN5Print10printFloatEdh+0xf8>
  f8:	6c 89       	ldd	r22, Y+20	; 0x14
  fa:	7d 89       	ldd	r23, Y+21	; 0x15
  fc:	8e 89       	ldd	r24, Y+22	; 0x16
  fe:	9f 89       	ldd	r25, Y+23	; 0x17
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	3f ef       	ldi	r19, 0xFF	; 255
 104:	4f e7       	ldi	r20, 0x7F	; 127
 106:	5f ec       	ldi	r21, 0xCF	; 207
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 10c:	88 23       	and	r24, r24
 10e:	04 f4       	brge	.+0      	; 0x110 <_ZN5Print10printFloatEdh+0x110>
 110:	8a 89       	ldd	r24, Y+18	; 0x12
 112:	9b 89       	ldd	r25, Y+19	; 0x13
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	b9 01       	movw	r22, r18
 11a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 11e:	9c 8f       	std	Y+28, r25	; 0x1c
 120:	8b 8f       	std	Y+27, r24	; 0x1b
 122:	00 c0       	rjmp	.+0      	; 0x124 <_ZN5Print10printFloatEdh+0x124>
 124:	6c 89       	ldd	r22, Y+20	; 0x14
 126:	7d 89       	ldd	r23, Y+21	; 0x15
 128:	8e 89       	ldd	r24, Y+22	; 0x16
 12a:	9f 89       	ldd	r25, Y+23	; 0x17
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 138:	88 23       	and	r24, r24
 13a:	04 f4       	brge	.+0      	; 0x13c <_ZN5Print10printFloatEdh+0x13c>
 13c:	8a 89       	ldd	r24, Y+18	; 0x12
 13e:	9b 89       	ldd	r25, Y+19	; 0x13
 140:	6d e2       	ldi	r22, 0x2D	; 45
 142:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 146:	9c 01       	movw	r18, r24
 148:	88 89       	ldd	r24, Y+16	; 0x10
 14a:	99 89       	ldd	r25, Y+17	; 0x11
 14c:	82 0f       	add	r24, r18
 14e:	93 1f       	adc	r25, r19
 150:	99 8b       	std	Y+17, r25	; 0x11
 152:	88 8b       	std	Y+16, r24	; 0x10
 154:	8c 89       	ldd	r24, Y+20	; 0x14
 156:	9d 89       	ldd	r25, Y+21	; 0x15
 158:	ae 89       	ldd	r26, Y+22	; 0x16
 15a:	bf 89       	ldd	r27, Y+23	; 0x17
 15c:	b0 58       	subi	r27, 0x80	; 128
 15e:	8c 8b       	std	Y+20, r24	; 0x14
 160:	9d 8b       	std	Y+21, r25	; 0x15
 162:	ae 8b       	std	Y+22, r26	; 0x16
 164:	bf 8b       	std	Y+23, r27	; 0x17
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a0 e0       	ldi	r26, 0x00	; 0
 16c:	bf e3       	ldi	r27, 0x3F	; 63
 16e:	8c 87       	std	Y+12, r24	; 0x0c
 170:	9d 87       	std	Y+13, r25	; 0x0d
 172:	ae 87       	std	Y+14, r26	; 0x0e
 174:	bf 87       	std	Y+15, r27	; 0x0f
 176:	1b 82       	std	Y+3, r1	; 0x03
 178:	00 c0       	rjmp	.+0      	; 0x17a <_ZN5Print10printFloatEdh+0x17a>
 17a:	6c 85       	ldd	r22, Y+12	; 0x0c
 17c:	7d 85       	ldd	r23, Y+13	; 0x0d
 17e:	8e 85       	ldd	r24, Y+14	; 0x0e
 180:	9f 85       	ldd	r25, Y+15	; 0x0f
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e2       	ldi	r20, 0x20	; 32
 188:	51 e4       	ldi	r21, 0x41	; 65
 18a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	8c 87       	std	Y+12, r24	; 0x0c
 194:	9d 87       	std	Y+13, r25	; 0x0d
 196:	ae 87       	std	Y+14, r26	; 0x0e
 198:	bf 87       	std	Y+15, r27	; 0x0f
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	8b 83       	std	Y+3, r24	; 0x03
 1a0:	9b 81       	ldd	r25, Y+3	; 0x03
 1a2:	88 8d       	ldd	r24, Y+24	; 0x18
 1a4:	98 17       	cp	r25, r24
 1a6:	00 f0       	brcs	.+0      	; 0x1a8 <_ZN5Print10printFloatEdh+0x1a8>
 1a8:	6c 89       	ldd	r22, Y+20	; 0x14
 1aa:	7d 89       	ldd	r23, Y+21	; 0x15
 1ac:	8e 89       	ldd	r24, Y+22	; 0x16
 1ae:	9f 89       	ldd	r25, Y+23	; 0x17
 1b0:	2c 85       	ldd	r18, Y+12	; 0x0c
 1b2:	3d 85       	ldd	r19, Y+13	; 0x0d
 1b4:	4e 85       	ldd	r20, Y+14	; 0x0e
 1b6:	5f 85       	ldd	r21, Y+15	; 0x0f
 1b8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1bc:	dc 01       	movw	r26, r24
 1be:	cb 01       	movw	r24, r22
 1c0:	8c 8b       	std	Y+20, r24	; 0x14
 1c2:	9d 8b       	std	Y+21, r25	; 0x15
 1c4:	ae 8b       	std	Y+22, r26	; 0x16
 1c6:	bf 8b       	std	Y+23, r27	; 0x17
 1c8:	6c 89       	ldd	r22, Y+20	; 0x14
 1ca:	7d 89       	ldd	r23, Y+21	; 0x15
 1cc:	8e 89       	ldd	r24, Y+22	; 0x16
 1ce:	9f 89       	ldd	r25, Y+23	; 0x17
 1d0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1d4:	dc 01       	movw	r26, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	88 87       	std	Y+8, r24	; 0x08
 1da:	99 87       	std	Y+9, r25	; 0x09
 1dc:	aa 87       	std	Y+10, r26	; 0x0a
 1de:	bb 87       	std	Y+11, r27	; 0x0b
 1e0:	68 85       	ldd	r22, Y+8	; 0x08
 1e2:	79 85       	ldd	r23, Y+9	; 0x09
 1e4:	8a 85       	ldd	r24, Y+10	; 0x0a
 1e6:	9b 85       	ldd	r25, Y+11	; 0x0b
 1e8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1ec:	9b 01       	movw	r18, r22
 1ee:	ac 01       	movw	r20, r24
 1f0:	6c 89       	ldd	r22, Y+20	; 0x14
 1f2:	7d 89       	ldd	r23, Y+21	; 0x15
 1f4:	8e 89       	ldd	r24, Y+22	; 0x16
 1f6:	9f 89       	ldd	r25, Y+23	; 0x17
 1f8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1fc:	dc 01       	movw	r26, r24
 1fe:	cb 01       	movw	r24, r22
 200:	8c 83       	std	Y+4, r24	; 0x04
 202:	9d 83       	std	Y+5, r25	; 0x05
 204:	ae 83       	std	Y+6, r26	; 0x06
 206:	bf 83       	std	Y+7, r27	; 0x07
 208:	8a 89       	ldd	r24, Y+18	; 0x12
 20a:	9b 89       	ldd	r25, Y+19	; 0x13
 20c:	28 85       	ldd	r18, Y+8	; 0x08
 20e:	39 85       	ldd	r19, Y+9	; 0x09
 210:	4a 85       	ldd	r20, Y+10	; 0x0a
 212:	5b 85       	ldd	r21, Y+11	; 0x0b
 214:	ba 01       	movw	r22, r20
 216:	a9 01       	movw	r20, r18
 218:	2a e0       	ldi	r18, 0x0A	; 10
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 220:	9c 01       	movw	r18, r24
 222:	88 89       	ldd	r24, Y+16	; 0x10
 224:	99 89       	ldd	r25, Y+17	; 0x11
 226:	82 0f       	add	r24, r18
 228:	93 1f       	adc	r25, r19
 22a:	99 8b       	std	Y+17, r25	; 0x11
 22c:	88 8b       	std	Y+16, r24	; 0x10
 22e:	88 8d       	ldd	r24, Y+24	; 0x18
 230:	88 23       	and	r24, r24
 232:	01 f4       	brne	.+0      	; 0x234 <_ZN5Print10printFloatEdh+0x234>
 234:	00 c0       	rjmp	.+0      	; 0x236 <_ZN5Print10printFloatEdh+0x236>
 236:	8a 89       	ldd	r24, Y+18	; 0x12
 238:	9b 89       	ldd	r25, Y+19	; 0x13
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	b9 01       	movw	r22, r18
 240:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 244:	9c 01       	movw	r18, r24
 246:	88 89       	ldd	r24, Y+16	; 0x10
 248:	99 89       	ldd	r25, Y+17	; 0x11
 24a:	82 0f       	add	r24, r18
 24c:	93 1f       	adc	r25, r19
 24e:	99 8b       	std	Y+17, r25	; 0x11
 250:	88 8b       	std	Y+16, r24	; 0x10
 252:	00 c0       	rjmp	.+0      	; 0x254 <_ZN5Print10printFloatEdh+0x254>
 254:	6c 81       	ldd	r22, Y+4	; 0x04
 256:	7d 81       	ldd	r23, Y+5	; 0x05
 258:	8e 81       	ldd	r24, Y+6	; 0x06
 25a:	9f 81       	ldd	r25, Y+7	; 0x07
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	40 e2       	ldi	r20, 0x20	; 32
 262:	51 e4       	ldi	r21, 0x41	; 65
 264:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 268:	dc 01       	movw	r26, r24
 26a:	cb 01       	movw	r24, r22
 26c:	8c 83       	std	Y+4, r24	; 0x04
 26e:	9d 83       	std	Y+5, r25	; 0x05
 270:	ae 83       	std	Y+6, r26	; 0x06
 272:	bf 83       	std	Y+7, r27	; 0x07
 274:	6c 81       	ldd	r22, Y+4	; 0x04
 276:	7d 81       	ldd	r23, Y+5	; 0x05
 278:	8e 81       	ldd	r24, Y+6	; 0x06
 27a:	9f 81       	ldd	r25, Y+7	; 0x07
 27c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 280:	dc 01       	movw	r26, r24
 282:	cb 01       	movw	r24, r22
 284:	9a 83       	std	Y+2, r25	; 0x02
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	8a 89       	ldd	r24, Y+18	; 0x12
 28a:	9b 89       	ldd	r25, Y+19	; 0x13
 28c:	29 81       	ldd	r18, Y+1	; 0x01
 28e:	3a 81       	ldd	r19, Y+2	; 0x02
 290:	b9 01       	movw	r22, r18
 292:	4a e0       	ldi	r20, 0x0A	; 10
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 29a:	9c 01       	movw	r18, r24
 29c:	88 89       	ldd	r24, Y+16	; 0x10
 29e:	99 89       	ldd	r25, Y+17	; 0x11
 2a0:	82 0f       	add	r24, r18
 2a2:	93 1f       	adc	r25, r19
 2a4:	99 8b       	std	Y+17, r25	; 0x11
 2a6:	88 8b       	std	Y+16, r24	; 0x10
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	9a 81       	ldd	r25, Y+2	; 0x02
 2ac:	aa 27       	eor	r26, r26
 2ae:	97 fd       	sbrc	r25, 7
 2b0:	a0 95       	com	r26
 2b2:	ba 2f       	mov	r27, r26
 2b4:	bc 01       	movw	r22, r24
 2b6:	cd 01       	movw	r24, r26
 2b8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	6c 81       	ldd	r22, Y+4	; 0x04
 2c2:	7d 81       	ldd	r23, Y+5	; 0x05
 2c4:	8e 81       	ldd	r24, Y+6	; 0x06
 2c6:	9f 81       	ldd	r25, Y+7	; 0x07
 2c8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 2cc:	dc 01       	movw	r26, r24
 2ce:	cb 01       	movw	r24, r22
 2d0:	8c 83       	std	Y+4, r24	; 0x04
 2d2:	9d 83       	std	Y+5, r25	; 0x05
 2d4:	ae 83       	std	Y+6, r26	; 0x06
 2d6:	bf 83       	std	Y+7, r27	; 0x07
 2d8:	98 8d       	ldd	r25, Y+24	; 0x18
 2da:	99 a3       	std	Y+33, r25	; 0x21
 2dc:	29 a1       	ldd	r18, Y+33	; 0x21
 2de:	22 23       	and	r18, r18
 2e0:	01 f0       	breq	.+0      	; 0x2e2 <_ZN5Print10printFloatEdh+0x2e2>
 2e2:	31 e0       	ldi	r19, 0x01	; 1
 2e4:	39 a3       	std	Y+33, r19	; 0x21
 2e6:	89 a1       	ldd	r24, Y+33	; 0x21
 2e8:	98 8d       	ldd	r25, Y+24	; 0x18
 2ea:	91 50       	subi	r25, 0x01	; 1
 2ec:	98 8f       	std	Y+24, r25	; 0x18
 2ee:	88 23       	and	r24, r24
 2f0:	01 f0       	breq	.+0      	; 0x2f2 <_ZN5Print10printFloatEdh+0x2f2>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <_ZN5Print10printFloatEdh+0x2f4>
 2f4:	88 89       	ldd	r24, Y+16	; 0x10
 2f6:	99 89       	ldd	r25, Y+17	; 0x11
 2f8:	9c 8f       	std	Y+28, r25	; 0x1c
 2fa:	8b 8f       	std	Y+27, r24	; 0x1b
 2fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
 300:	a1 96       	adiw	r28, 0x21	; 33
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	cf 91       	pop	r28
 30e:	df 91       	pop	r29
 310:	08 95       	ret

Disassembly of section .text._ZN5Print5printEdi:

00000000 <_ZN5Print5printEdi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9a 83       	std	Y+2, r25	; 0x02
{
  size_t n = print(s);
  16:	89 83       	std	Y+1, r24	; 0x01
  18:	4b 83       	std	Y+3, r20	; 0x03
  1a:	5c 83       	std	Y+4, r21	; 0x04
  1c:	6d 83       	std	Y+5, r22	; 0x05
  1e:	7e 83       	std	Y+6, r23	; 0x06
  20:	38 87       	std	Y+8, r19	; 0x08
  22:	2f 83       	std	Y+7, r18	; 0x07
  24:	ef 81       	ldd	r30, Y+7	; 0x07
  26:	89 81       	ldd	r24, Y+1	; 0x01
  n += println();
  28:	9a 81       	ldd	r25, Y+2	; 0x02
  2a:	2b 81       	ldd	r18, Y+3	; 0x03
  2c:	3c 81       	ldd	r19, Y+4	; 0x04
  2e:	4d 81       	ldd	r20, Y+5	; 0x05
  30:	5e 81       	ldd	r21, Y+6	; 0x06
  32:	ba 01       	movw	r22, r20
  34:	a9 01       	movw	r20, r18
  36:	2e 2f       	mov	r18, r30
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEdi>
  3c:	28 96       	adiw	r28, 0x08	; 8
  return n;
  3e:	0f b6       	in	r0, 0x3f	; 63
  40:	f8 94       	cli
}
  42:	de bf       	out	0x3e, r29	; 62
  44:	0f be       	out	0x3f, r0	; 63
  46:	cd bf       	out	0x3d, r28	; 61
  48:	cf 91       	pop	r28
  4a:	df 91       	pop	r29
  4c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEdi:

00000000 <_ZN5Print7printlnEdi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
{
  size_t n = print(s);
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	4d 83       	std	Y+5, r20	; 0x05
  1a:	5e 83       	std	Y+6, r21	; 0x06
  1c:	6f 83       	std	Y+7, r22	; 0x07
  1e:	78 87       	std	Y+8, r23	; 0x08
  20:	3a 87       	std	Y+10, r19	; 0x0a
  22:	29 87       	std	Y+9, r18	; 0x09
  24:	8b 81       	ldd	r24, Y+3	; 0x03
  26:	9c 81       	ldd	r25, Y+4	; 0x04
  n += println();
  28:	2d 81       	ldd	r18, Y+5	; 0x05
  2a:	3e 81       	ldd	r19, Y+6	; 0x06
  2c:	4f 81       	ldd	r20, Y+7	; 0x07
  2e:	58 85       	ldd	r21, Y+8	; 0x08
  30:	e9 85       	ldd	r30, Y+9	; 0x09
  32:	fa 85       	ldd	r31, Y+10	; 0x0a
  34:	ba 01       	movw	r22, r20
  36:	a9 01       	movw	r20, r18
  38:	9f 01       	movw	r18, r30
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
  return n;
  3e:	9a 83       	std	Y+2, r25	; 0x02
  40:	89 83       	std	Y+1, r24	; 0x01
}
  42:	8b 81       	ldd	r24, Y+3	; 0x03
  44:	9c 81       	ldd	r25, Y+4	; 0x04
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
  4a:	9c 01       	movw	r18, r24
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	82 0f       	add	r24, r18
  52:	93 1f       	adc	r25, r19
  54:	9a 83       	std	Y+2, r25	; 0x02
  56:	89 83       	std	Y+1, r24	; 0x01
  58:	89 81       	ldd	r24, Y+1	; 0x01
  5a:	9a 81       	ldd	r25, Y+2	; 0x02
  5c:	2a 96       	adiw	r28, 0x0a	; 10
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	f8 94       	cli
  62:	de bf       	out	0x3e, r29	; 62
  64:	0f be       	out	0x3f, r0	; 63
  66:	cd bf       	out	0x3d, r28	; 61
  68:	cf 91       	pop	r28
  6a:	df 91       	pop	r29
  6c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPKc:

00000000 <_ZN5Print7printlnEPKc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print7printlnEPKc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print7printlnEPKc+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN5Print7printlnEPKc+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	7e 83       	std	Y+6, r23	; 0x06
  14:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(s);
  16:	8b 81       	ldd	r24, Y+3	; 0x03
  18:	9c 81       	ldd	r25, Y+4	; 0x04
  1a:	2d 81       	ldd	r18, Y+5	; 0x05
  1c:	3e 81       	ldd	r19, Y+6	; 0x06
  1e:	b9 01       	movw	r22, r18
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  n += println();
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	9c 81       	ldd	r25, Y+4	; 0x04
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
  30:	9c 01       	movw	r18, r24
  32:	89 81       	ldd	r24, Y+1	; 0x01
  34:	9a 81       	ldd	r25, Y+2	; 0x02
  36:	82 0f       	add	r24, r18
  38:	93 1f       	adc	r25, r19
  3a:	9a 83       	std	Y+2, r25	; 0x02
  3c:	89 83       	std	Y+1, r24	; 0x01
  return n;
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
}
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK6String:

00000000 <_ZN5Print5printERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	29 97       	sbiw	r28, 0x09	; 9
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
{
  size_t n = print(s);
  16:	cd bf       	out	0x3d, r28	; 61
  18:	9e 83       	std	Y+6, r25	; 0x06
  1a:	8d 83       	std	Y+5, r24	; 0x05
  1c:	78 87       	std	Y+8, r23	; 0x08
  1e:	6f 83       	std	Y+7, r22	; 0x07
  20:	1c 82       	std	Y+4, r1	; 0x04
  22:	1b 82       	std	Y+3, r1	; 0x03
  24:	1a 82       	std	Y+2, r1	; 0x02
  26:	19 82       	std	Y+1, r1	; 0x01
  n += println();
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN5Print5printERK6String+0x2a>
  2a:	ed 81       	ldd	r30, Y+5	; 0x05
  2c:	fe 81       	ldd	r31, Y+6	; 0x06
  2e:	01 90       	ld	r0, Z+
  30:	f0 81       	ld	r31, Z
  32:	e0 2d       	mov	r30, r0
  34:	00 81       	ld	r16, Z
  36:	11 81       	ldd	r17, Z+1	; 0x01
  38:	8f 81       	ldd	r24, Y+7	; 0x07
  3a:	98 85       	ldd	r25, Y+8	; 0x08
  3c:	29 81       	ldd	r18, Y+1	; 0x01
  return n;
  3e:	3a 81       	ldd	r19, Y+2	; 0x02
  40:	b9 01       	movw	r22, r18
}
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printERK6String>
  46:	28 2f       	mov	r18, r24
  48:	8d 81       	ldd	r24, Y+5	; 0x05
  4a:	9e 81       	ldd	r25, Y+6	; 0x06
  4c:	62 2f       	mov	r22, r18
  4e:	f8 01       	movw	r30, r16
  50:	09 95       	icall
  52:	9c 01       	movw	r18, r24
  54:	8b 81       	ldd	r24, Y+3	; 0x03
  56:	9c 81       	ldd	r25, Y+4	; 0x04
  58:	82 0f       	add	r24, r18
  5a:	93 1f       	adc	r25, r19
  5c:	9c 83       	std	Y+4, r25	; 0x04
  5e:	8b 83       	std	Y+3, r24	; 0x03
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	9a 81       	ldd	r25, Y+2	; 0x02
  64:	01 96       	adiw	r24, 0x01	; 1
  66:	9a 83       	std	Y+2, r25	; 0x02
  68:	89 83       	std	Y+1, r24	; 0x01
  6a:	8f 81       	ldd	r24, Y+7	; 0x07
  6c:	98 85       	ldd	r25, Y+8	; 0x08
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printERK6String>
  72:	9c 01       	movw	r18, r24
  74:	19 86       	std	Y+9, r1	; 0x09
  76:	89 81       	ldd	r24, Y+1	; 0x01
  78:	9a 81       	ldd	r25, Y+2	; 0x02
  7a:	82 17       	cp	r24, r18
  7c:	93 07       	cpc	r25, r19
  7e:	00 f4       	brcc	.+0      	; 0x80 <_ZN5Print5printERK6String+0x80>
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	89 87       	std	Y+9, r24	; 0x09
  84:	89 85       	ldd	r24, Y+9	; 0x09
  86:	88 23       	and	r24, r24
  88:	01 f4       	brne	.+0      	; 0x8a <_ZN5Print5printERK6String+0x8a>
  8a:	8b 81       	ldd	r24, Y+3	; 0x03
  8c:	9c 81       	ldd	r25, Y+4	; 0x04
  8e:	29 96       	adiw	r28, 0x09	; 9
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	1f 91       	pop	r17
  a0:	0f 91       	pop	r16
  a2:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK6String:

00000000 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5Print7printlnERK6String+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN5Print7printlnERK6String+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN5Print7printlnERK6String+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	7e 83       	std	Y+6, r23	; 0x06
  14:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(s);
  16:	8b 81       	ldd	r24, Y+3	; 0x03
  18:	9c 81       	ldd	r25, Y+4	; 0x04
  1a:	2d 81       	ldd	r18, Y+5	; 0x05
  1c:	3e 81       	ldd	r19, Y+6	; 0x06
  1e:	b9 01       	movw	r22, r18
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  n += println();
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	9c 81       	ldd	r25, Y+4	; 0x04
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
  30:	9c 01       	movw	r18, r24
  32:	89 81       	ldd	r24, Y+1	; 0x01
  34:	9a 81       	ldd	r25, Y+2	; 0x02
  36:	82 0f       	add	r24, r18
  38:	93 1f       	adc	r25, r19
  3a:	9a 83       	std	Y+2, r25	; 0x02
  3c:	89 83       	std	Y+1, r24	; 0x01
  return n;
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
}
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .stab         00001074  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000011f6  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6Stream10setTimeoutEm 00000040  00000000  00000000  000022a2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6StringpLEc 0000002c  00000000  00000000  000022e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6Stream9timedPeekEv 000000b6  00000000  00000000  0000230e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream13peekNextDigitEv 00000092  00000000  00000000  000023c4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN6Stream10parseFloatEc 000001b6  00000000  00000000  00002456  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream10parseFloatEv 0000002a  00000000  00000000  0000260c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream8parseIntEc 0000015a  00000000  00000000  00002636  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6Stream8parseIntEv 0000002a  00000000  00000000  00002790  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6Stream9timedReadEv 000000b6  00000000  00000000  000027ba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6Stream15readStringUntilEc 00000088  00000000  00000000  00002870  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream10readStringEv 00000072  00000000  00000000  000028f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream14readBytesUntilEcPcj 000000a6  00000000  00000000  0000296a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream9readBytesEPcj 0000007a  00000000  00000000  00002a10  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream9findUntilEPcjS0_j 0000014c  00000000  00000000  00002a8a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6Stream9findUntilEPcS0_ 00000060  00000000  00000000  00002bd6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6Stream4findEPc 00000034  00000000  00000000  00002c36  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6Stream4findEPcj 0000004e  00000000  00000000  00002c6a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000000 <_ZN6Stream10setTimeoutEm>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6Stream10setTimeoutEm+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6Stream10setTimeoutEm+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6Stream10setTimeoutEm+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	4b 83       	std	Y+3, r20	; 0x03
  14:	5c 83       	std	Y+4, r21	; 0x04
  16:	6d 83       	std	Y+5, r22	; 0x05
  18:	7e 83       	std	Y+6, r23	; 0x06
  1a:	e9 81       	ldd	r30, Y+1	; 0x01
  1c:	fa 81       	ldd	r31, Y+2	; 0x02
{
  return findUntil(target, length, NULL, 0);
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	9c 81       	ldd	r25, Y+4	; 0x04
  22:	ad 81       	ldd	r26, Y+5	; 0x05
  24:	be 81       	ldd	r27, Y+6	; 0x06
  26:	84 83       	std	Z+4, r24	; 0x04
  28:	95 83       	std	Z+5, r25	; 0x05
  2a:	a6 83       	std	Z+6, r26	; 0x06
  2c:	b7 83       	std	Z+7, r27	; 0x07
  2e:	26 96       	adiw	r28, 0x06	; 6
  30:	0f b6       	in	r0, 0x3f	; 63
  32:	f8 94       	cli
  34:	de bf       	out	0x3e, r29	; 62
  36:	0f be       	out	0x3f, r0	; 63
}
  38:	cd bf       	out	0x3d, r28	; 61
  3a:	cf 91       	pop	r28
  3c:	df 91       	pop	r29
  3e:	08 95       	ret

Disassembly of section .text._ZN6StringpLEc:

00000000 <_ZN6StringpLEc>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringpLEc+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	89 81       	ldd	r24, Y+1	; 0x01
  14:	9a 81       	ldd	r25, Y+2	; 0x02
  16:	6b 81       	ldd	r22, Y+3	; 0x03
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringpLEc>
  1c:	89 81       	ldd	r24, Y+1	; 0x01
{
  return findUntil(target, length, NULL, 0);
  1e:	9a 81       	ldd	r25, Y+2	; 0x02
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedPeekEv:

00000000 <_ZN6Stream9timedPeekEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
  1c:	dc 01       	movw	r26, r24
{
  return findUntil(target, length, NULL, 0);
  1e:	cb 01       	movw	r24, r22
  20:	eb 81       	ldd	r30, Y+3	; 0x03
  22:	fc 81       	ldd	r31, Y+4	; 0x04
  24:	80 87       	std	Z+8, r24	; 0x08
  26:	91 87       	std	Z+9, r25	; 0x09
  28:	a2 87       	std	Z+10, r26	; 0x0a
  2a:	b3 87       	std	Z+11, r27	; 0x0b
  2c:	eb 81       	ldd	r30, Y+3	; 0x03
  2e:	fc 81       	ldd	r31, Y+4	; 0x04
  30:	80 81       	ld	r24, Z
  32:	91 81       	ldd	r25, Z+1	; 0x01
  34:	fc 01       	movw	r30, r24
  36:	38 96       	adiw	r30, 0x08	; 8
}
  38:	01 90       	ld	r0, Z+
  3a:	f0 81       	ld	r31, Z
  3c:	e0 2d       	mov	r30, r0
  3e:	8b 81       	ldd	r24, Y+3	; 0x03
  40:	9c 81       	ldd	r25, Y+4	; 0x04
  42:	09 95       	icall
  44:	9a 83       	std	Y+2, r25	; 0x02
  46:	89 83       	std	Y+1, r24	; 0x01
  48:	89 81       	ldd	r24, Y+1	; 0x01
  4a:	9a 81       	ldd	r25, Y+2	; 0x02
  4c:	99 23       	and	r25, r25
  4e:	04 f0       	brlt	.+0      	; 0x50 <_ZN6Stream9timedPeekEv+0x50>
  50:	89 81       	ldd	r24, Y+1	; 0x01
  52:	9a 81       	ldd	r25, Y+2	; 0x02
  54:	9e 83       	std	Y+6, r25	; 0x06
  56:	8d 83       	std	Y+5, r24	; 0x05
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN6Stream9timedPeekEv+0x5a>
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
  5e:	9b 01       	movw	r18, r22
  60:	ac 01       	movw	r20, r24
  62:	eb 81       	ldd	r30, Y+3	; 0x03
  64:	fc 81       	ldd	r31, Y+4	; 0x04
  66:	80 85       	ldd	r24, Z+8	; 0x08
  68:	91 85       	ldd	r25, Z+9	; 0x09
  6a:	a2 85       	ldd	r26, Z+10	; 0x0a
  6c:	b3 85       	ldd	r27, Z+11	; 0x0b
  6e:	28 1b       	sub	r18, r24
  70:	39 0b       	sbc	r19, r25
  72:	4a 0b       	sbc	r20, r26
  74:	5b 0b       	sbc	r21, r27
  76:	eb 81       	ldd	r30, Y+3	; 0x03
  78:	fc 81       	ldd	r31, Y+4	; 0x04
  7a:	84 81       	ldd	r24, Z+4	; 0x04
  7c:	95 81       	ldd	r25, Z+5	; 0x05
  7e:	a6 81       	ldd	r26, Z+6	; 0x06
  80:	b7 81       	ldd	r27, Z+7	; 0x07
  82:	1f 82       	std	Y+7, r1	; 0x07
  84:	28 17       	cp	r18, r24
  86:	39 07       	cpc	r19, r25
  88:	4a 07       	cpc	r20, r26
  8a:	5b 07       	cpc	r21, r27
  8c:	00 f4       	brcc	.+0      	; 0x8e <_ZN6Stream9timedPeekEv+0x8e>
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	9f 83       	std	Y+7, r25	; 0x07
  92:	8f 81       	ldd	r24, Y+7	; 0x07
  94:	88 23       	and	r24, r24
  96:	01 f4       	brne	.+0      	; 0x98 <_ZN6Stream9timedPeekEv+0x98>
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	9f ef       	ldi	r25, 0xFF	; 255
  9c:	9e 83       	std	Y+6, r25	; 0x06
  9e:	8d 83       	std	Y+5, r24	; 0x05
  a0:	8d 81       	ldd	r24, Y+5	; 0x05
  a2:	9e 81       	ldd	r25, Y+6	; 0x06
  a4:	27 96       	adiw	r28, 0x07	; 7
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

Disassembly of section .text._ZN6Stream13peekNextDigitEv:

00000000 <_ZN6Stream13peekNextDigitEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6Stream13peekNextDigitEv+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6Stream13peekNextDigitEv+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6Stream13peekNextDigitEv+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	8b 81       	ldd	r24, Y+3	; 0x03
  14:	9c 81       	ldd	r25, Y+4	; 0x04
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream13peekNextDigitEv>
  1a:	9a 83       	std	Y+2, r25	; 0x02
  1c:	89 83       	std	Y+1, r24	; 0x01
{
  return findUntil(target, length, NULL, 0);
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	9a 81       	ldd	r25, Y+2	; 0x02
  22:	99 23       	and	r25, r25
  24:	04 f4       	brge	.+0      	; 0x26 <_ZN6Stream13peekNextDigitEv+0x26>
  26:	89 81       	ldd	r24, Y+1	; 0x01
  28:	9a 81       	ldd	r25, Y+2	; 0x02
  2a:	9e 83       	std	Y+6, r25	; 0x06
  2c:	8d 83       	std	Y+5, r24	; 0x05
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN6Stream13peekNextDigitEv+0x30>
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	9a 81       	ldd	r25, Y+2	; 0x02
  34:	8d 32       	cpi	r24, 0x2D	; 45
  36:	91 05       	cpc	r25, r1
}
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6Stream13peekNextDigitEv+0x3a>
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	9a 81       	ldd	r25, Y+2	; 0x02
  3e:	9e 83       	std	Y+6, r25	; 0x06
  40:	8d 83       	std	Y+5, r24	; 0x05
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN6Stream13peekNextDigitEv+0x44>
  44:	89 81       	ldd	r24, Y+1	; 0x01
  46:	9a 81       	ldd	r25, Y+2	; 0x02
  48:	80 33       	cpi	r24, 0x30	; 48
  4a:	91 05       	cpc	r25, r1
  4c:	04 f0       	brlt	.+0      	; 0x4e <_ZN6Stream13peekNextDigitEv+0x4e>
  4e:	89 81       	ldd	r24, Y+1	; 0x01
  50:	9a 81       	ldd	r25, Y+2	; 0x02
  52:	8a 33       	cpi	r24, 0x3A	; 58
  54:	91 05       	cpc	r25, r1
  56:	04 f4       	brge	.+0      	; 0x58 <_ZN6Stream13peekNextDigitEv+0x58>
  58:	89 81       	ldd	r24, Y+1	; 0x01
  5a:	9a 81       	ldd	r25, Y+2	; 0x02
  5c:	9e 83       	std	Y+6, r25	; 0x06
  5e:	8d 83       	std	Y+5, r24	; 0x05
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN6Stream13peekNextDigitEv+0x62>
  62:	eb 81       	ldd	r30, Y+3	; 0x03
  64:	fc 81       	ldd	r31, Y+4	; 0x04
  66:	80 81       	ld	r24, Z
  68:	91 81       	ldd	r25, Z+1	; 0x01
  6a:	fc 01       	movw	r30, r24
  6c:	36 96       	adiw	r30, 0x06	; 6
  6e:	01 90       	ld	r0, Z+
  70:	f0 81       	ld	r31, Z
  72:	e0 2d       	mov	r30, r0
  74:	8b 81       	ldd	r24, Y+3	; 0x03
  76:	9c 81       	ldd	r25, Y+4	; 0x04
  78:	09 95       	icall
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZN6Stream13peekNextDigitEv+0x7c>
  7c:	8d 81       	ldd	r24, Y+5	; 0x05
  7e:	9e 81       	ldd	r25, Y+6	; 0x06
  80:	26 96       	adiw	r28, 0x06	; 6
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	f8 94       	cli
  86:	de bf       	out	0x3e, r29	; 62
  88:	0f be       	out	0x3f, r0	; 63
  8a:	cd bf       	out	0x3d, r28	; 61
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEc:

00000000 <_ZN6Stream10parseFloatEc>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	62 97       	sbiw	r28, 0x12	; 18
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9d 87       	std	Y+13, r25	; 0x0d
  16:	8c 87       	std	Y+12, r24	; 0x0c
  18:	6e 87       	std	Y+14, r22	; 0x0e
  1a:	1b 86       	std	Y+11, r1	; 0x0b
  1c:	1a 86       	std	Y+10, r1	; 0x0a
{
  return findUntil(target, length, NULL, 0);
  1e:	1e 82       	std	Y+6, r1	; 0x06
  20:	1f 82       	std	Y+7, r1	; 0x07
  22:	18 86       	std	Y+8, r1	; 0x08
  24:	19 86       	std	Y+9, r1	; 0x09
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	a0 e8       	ldi	r26, 0x80	; 128
  2c:	bf e3       	ldi	r27, 0x3F	; 63
  2e:	89 83       	std	Y+1, r24	; 0x01
  30:	9a 83       	std	Y+2, r25	; 0x02
  32:	ab 83       	std	Y+3, r26	; 0x03
  34:	bc 83       	std	Y+4, r27	; 0x04
  36:	8c 85       	ldd	r24, Y+12	; 0x0c
}
  38:	9d 85       	ldd	r25, Y+13	; 0x0d
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  3e:	8d 83       	std	Y+5, r24	; 0x05
  40:	8d 81       	ldd	r24, Y+5	; 0x05
  42:	88 23       	and	r24, r24
  44:	04 f4       	brge	.+0      	; 0x46 <_ZN6Stream10parseFloatEc+0x46>
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	8f 87       	std	Y+15, r24	; 0x0f
  50:	98 8b       	std	Y+16, r25	; 0x10
  52:	a9 8b       	std	Y+17, r26	; 0x11
  54:	ba 8b       	std	Y+18, r27	; 0x12
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN6Stream10parseFloatEc+0x58>
  58:	9d 81       	ldd	r25, Y+5	; 0x05
  5a:	8e 85       	ldd	r24, Y+14	; 0x0e
  5c:	98 17       	cp	r25, r24
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN6Stream10parseFloatEc+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN6Stream10parseFloatEc+0x62>
  62:	8d 81       	ldd	r24, Y+5	; 0x05
  64:	8d 32       	cpi	r24, 0x2D	; 45
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN6Stream10parseFloatEc+0x68>
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	8b 87       	std	Y+11, r24	; 0x0b
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6Stream10parseFloatEc+0x6e>
  6e:	8d 81       	ldd	r24, Y+5	; 0x05
  70:	8e 32       	cpi	r24, 0x2E	; 46
  72:	01 f4       	brne	.+0      	; 0x74 <_ZN6Stream10parseFloatEc+0x74>
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	8a 87       	std	Y+10, r24	; 0x0a
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZN6Stream10parseFloatEc+0x7a>
  7a:	8d 81       	ldd	r24, Y+5	; 0x05
  7c:	80 33       	cpi	r24, 0x30	; 48
  7e:	04 f0       	brlt	.+0      	; 0x80 <_ZN6Stream10parseFloatEc+0x80>
  80:	8d 81       	ldd	r24, Y+5	; 0x05
  82:	8a 33       	cpi	r24, 0x3A	; 58
  84:	04 f4       	brge	.+0      	; 0x86 <_ZN6Stream10parseFloatEc+0x86>
  86:	8e 81       	ldd	r24, Y+6	; 0x06
  88:	9f 81       	ldd	r25, Y+7	; 0x07
  8a:	a8 85       	ldd	r26, Y+8	; 0x08
  8c:	b9 85       	ldd	r27, Y+9	; 0x09
  8e:	2a e0       	ldi	r18, 0x0A	; 10
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	bc 01       	movw	r22, r24
  98:	cd 01       	movw	r24, r26
  9a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  9e:	9b 01       	movw	r18, r22
  a0:	ac 01       	movw	r20, r24
  a2:	8d 81       	ldd	r24, Y+5	; 0x05
  a4:	99 27       	eor	r25, r25
  a6:	87 fd       	sbrc	r24, 7
  a8:	90 95       	com	r25
  aa:	a9 2f       	mov	r26, r25
  ac:	b9 2f       	mov	r27, r25
  ae:	82 0f       	add	r24, r18
  b0:	93 1f       	adc	r25, r19
  b2:	a4 1f       	adc	r26, r20
  b4:	b5 1f       	adc	r27, r21
  b6:	c0 97       	sbiw	r24, 0x30	; 48
  b8:	a1 09       	sbc	r26, r1
  ba:	b1 09       	sbc	r27, r1
  bc:	8e 83       	std	Y+6, r24	; 0x06
  be:	9f 83       	std	Y+7, r25	; 0x07
  c0:	a8 87       	std	Y+8, r26	; 0x08
  c2:	b9 87       	std	Y+9, r27	; 0x09
  c4:	8a 85       	ldd	r24, Y+10	; 0x0a
  c6:	88 23       	and	r24, r24
  c8:	01 f0       	breq	.+0      	; 0xca <_ZN6Stream10parseFloatEc+0xca>
  ca:	69 81       	ldd	r22, Y+1	; 0x01
  cc:	7a 81       	ldd	r23, Y+2	; 0x02
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	9c 81       	ldd	r25, Y+4	; 0x04
  d2:	2d ec       	ldi	r18, 0xCD	; 205
  d4:	3c ec       	ldi	r19, 0xCC	; 204
  d6:	4c ec       	ldi	r20, 0xCC	; 204
  d8:	5d e3       	ldi	r21, 0x3D	; 61
  da:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  de:	dc 01       	movw	r26, r24
  e0:	cb 01       	movw	r24, r22
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	9a 83       	std	Y+2, r25	; 0x02
  e6:	ab 83       	std	Y+3, r26	; 0x03
  e8:	bc 83       	std	Y+4, r27	; 0x04
  ea:	ec 85       	ldd	r30, Y+12	; 0x0c
  ec:	fd 85       	ldd	r31, Y+13	; 0x0d
  ee:	80 81       	ld	r24, Z
  f0:	91 81       	ldd	r25, Z+1	; 0x01
  f2:	fc 01       	movw	r30, r24
  f4:	36 96       	adiw	r30, 0x06	; 6
  f6:	01 90       	ld	r0, Z+
  f8:	f0 81       	ld	r31, Z
  fa:	e0 2d       	mov	r30, r0
  fc:	8c 85       	ldd	r24, Y+12	; 0x0c
  fe:	9d 85       	ldd	r25, Y+13	; 0x0d
 100:	09 95       	icall
 102:	8c 85       	ldd	r24, Y+12	; 0x0c
 104:	9d 85       	ldd	r25, Y+13	; 0x0d
 106:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 10a:	8d 83       	std	Y+5, r24	; 0x05
 10c:	8d 81       	ldd	r24, Y+5	; 0x05
 10e:	80 33       	cpi	r24, 0x30	; 48
 110:	04 f0       	brlt	.+0      	; 0x112 <_ZN6Stream10parseFloatEc+0x112>
 112:	8d 81       	ldd	r24, Y+5	; 0x05
 114:	8a 33       	cpi	r24, 0x3A	; 58
 116:	04 f4       	brge	.+0      	; 0x118 <_ZN6Stream10parseFloatEc+0x118>
 118:	00 c0       	rjmp	.+0      	; 0x11a <_ZN6Stream10parseFloatEc+0x11a>
 11a:	8d 81       	ldd	r24, Y+5	; 0x05
 11c:	8e 32       	cpi	r24, 0x2E	; 46
 11e:	01 f4       	brne	.+0      	; 0x120 <_ZN6Stream10parseFloatEc+0x120>
 120:	00 c0       	rjmp	.+0      	; 0x122 <_ZN6Stream10parseFloatEc+0x122>
 122:	9d 81       	ldd	r25, Y+5	; 0x05
 124:	8e 85       	ldd	r24, Y+14	; 0x0e
 126:	98 17       	cp	r25, r24
 128:	01 f4       	brne	.+0      	; 0x12a <_ZN6Stream10parseFloatEc+0x12a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <_ZN6Stream10parseFloatEc+0x12c>
 12c:	8b 85       	ldd	r24, Y+11	; 0x0b
 12e:	88 23       	and	r24, r24
 130:	01 f0       	breq	.+0      	; 0x132 <_ZN6Stream10parseFloatEc+0x132>
 132:	8e 81       	ldd	r24, Y+6	; 0x06
 134:	9f 81       	ldd	r25, Y+7	; 0x07
 136:	a8 85       	ldd	r26, Y+8	; 0x08
 138:	b9 85       	ldd	r27, Y+9	; 0x09
 13a:	b0 95       	com	r27
 13c:	a0 95       	com	r26
 13e:	90 95       	com	r25
 140:	81 95       	neg	r24
 142:	9f 4f       	sbci	r25, 0xFF	; 255
 144:	af 4f       	sbci	r26, 0xFF	; 255
 146:	bf 4f       	sbci	r27, 0xFF	; 255
 148:	8e 83       	std	Y+6, r24	; 0x06
 14a:	9f 83       	std	Y+7, r25	; 0x07
 14c:	a8 87       	std	Y+8, r26	; 0x08
 14e:	b9 87       	std	Y+9, r27	; 0x09
 150:	8a 85       	ldd	r24, Y+10	; 0x0a
 152:	88 23       	and	r24, r24
 154:	01 f0       	breq	.+0      	; 0x156 <_ZN6Stream10parseFloatEc+0x156>
 156:	6e 81       	ldd	r22, Y+6	; 0x06
 158:	7f 81       	ldd	r23, Y+7	; 0x07
 15a:	88 85       	ldd	r24, Y+8	; 0x08
 15c:	99 85       	ldd	r25, Y+9	; 0x09
 15e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 162:	dc 01       	movw	r26, r24
 164:	cb 01       	movw	r24, r22
 166:	bc 01       	movw	r22, r24
 168:	cd 01       	movw	r24, r26
 16a:	29 81       	ldd	r18, Y+1	; 0x01
 16c:	3a 81       	ldd	r19, Y+2	; 0x02
 16e:	4b 81       	ldd	r20, Y+3	; 0x03
 170:	5c 81       	ldd	r21, Y+4	; 0x04
 172:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 176:	dc 01       	movw	r26, r24
 178:	cb 01       	movw	r24, r22
 17a:	8f 87       	std	Y+15, r24	; 0x0f
 17c:	98 8b       	std	Y+16, r25	; 0x10
 17e:	a9 8b       	std	Y+17, r26	; 0x11
 180:	ba 8b       	std	Y+18, r27	; 0x12
 182:	00 c0       	rjmp	.+0      	; 0x184 <_ZN6Stream10parseFloatEc+0x184>
 184:	6e 81       	ldd	r22, Y+6	; 0x06
 186:	7f 81       	ldd	r23, Y+7	; 0x07
 188:	88 85       	ldd	r24, Y+8	; 0x08
 18a:	99 85       	ldd	r25, Y+9	; 0x09
 18c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 190:	6f 87       	std	Y+15, r22	; 0x0f
 192:	78 8b       	std	Y+16, r23	; 0x10
 194:	89 8b       	std	Y+17, r24	; 0x11
 196:	9a 8b       	std	Y+18, r25	; 0x12
 198:	8f 85       	ldd	r24, Y+15	; 0x0f
 19a:	98 89       	ldd	r25, Y+16	; 0x10
 19c:	a9 89       	ldd	r26, Y+17	; 0x11
 19e:	ba 89       	ldd	r27, Y+18	; 0x12
 1a0:	bc 01       	movw	r22, r24
 1a2:	cd 01       	movw	r24, r26
 1a4:	62 96       	adiw	r28, 0x12	; 18
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEv:

00000000 <_ZN6Stream10parseFloatEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6Stream10parseFloatEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	61 e0       	ldi	r22, 0x01	; 1
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEv>
  18:	dc 01       	movw	r26, r24
  1a:	cb 01       	movw	r24, r22
  1c:	bc 01       	movw	r22, r24
{
  return findUntil(target, length, NULL, 0);
  1e:	cd 01       	movw	r24, r26
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	cf 91       	pop	r28
  26:	df 91       	pop	r29
  28:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEc:

00000000 <_ZN6Stream8parseIntEc>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2e 97       	sbiw	r28, 0x0e	; 14
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	99 87       	std	Y+9, r25	; 0x09
  16:	88 87       	std	Y+8, r24	; 0x08
  18:	6a 87       	std	Y+10, r22	; 0x0a
  1a:	1f 82       	std	Y+7, r1	; 0x07
  1c:	1b 82       	std	Y+3, r1	; 0x03
{
  return findUntil(target, length, NULL, 0);
  1e:	1c 82       	std	Y+4, r1	; 0x04
  20:	1d 82       	std	Y+5, r1	; 0x05
  22:	1e 82       	std	Y+6, r1	; 0x06
  24:	88 85       	ldd	r24, Y+8	; 0x08
  26:	99 85       	ldd	r25, Y+9	; 0x09
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  2c:	9a 83       	std	Y+2, r25	; 0x02
  2e:	89 83       	std	Y+1, r24	; 0x01
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	9a 81       	ldd	r25, Y+2	; 0x02
  34:	99 23       	and	r25, r25
  36:	04 f4       	brge	.+0      	; 0x38 <_ZN6Stream8parseIntEc+0x38>
}
  38:	1b 86       	std	Y+11, r1	; 0x0b
  3a:	1c 86       	std	Y+12, r1	; 0x0c
  3c:	1d 86       	std	Y+13, r1	; 0x0d
  3e:	1e 86       	std	Y+14, r1	; 0x0e
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6Stream8parseIntEc+0x42>
  42:	8a 85       	ldd	r24, Y+10	; 0x0a
  44:	28 2f       	mov	r18, r24
  46:	33 27       	eor	r19, r19
  48:	27 fd       	sbrc	r18, 7
  4a:	30 95       	com	r19
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	28 17       	cp	r18, r24
  52:	39 07       	cpc	r19, r25
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN6Stream8parseIntEc+0x56>
  56:	89 81       	ldd	r24, Y+1	; 0x01
  58:	9a 81       	ldd	r25, Y+2	; 0x02
  5a:	8d 32       	cpi	r24, 0x2D	; 45
  5c:	91 05       	cpc	r25, r1
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN6Stream8parseIntEc+0x60>
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	8f 83       	std	Y+7, r24	; 0x07
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN6Stream8parseIntEc+0x66>
  66:	89 81       	ldd	r24, Y+1	; 0x01
  68:	9a 81       	ldd	r25, Y+2	; 0x02
  6a:	80 33       	cpi	r24, 0x30	; 48
  6c:	91 05       	cpc	r25, r1
  6e:	04 f0       	brlt	.+0      	; 0x70 <_ZN6Stream8parseIntEc+0x70>
  70:	89 81       	ldd	r24, Y+1	; 0x01
  72:	9a 81       	ldd	r25, Y+2	; 0x02
  74:	8a 33       	cpi	r24, 0x3A	; 58
  76:	91 05       	cpc	r25, r1
  78:	04 f4       	brge	.+0      	; 0x7a <_ZN6Stream8parseIntEc+0x7a>
  7a:	8b 81       	ldd	r24, Y+3	; 0x03
  7c:	9c 81       	ldd	r25, Y+4	; 0x04
  7e:	ad 81       	ldd	r26, Y+5	; 0x05
  80:	be 81       	ldd	r27, Y+6	; 0x06
  82:	2a e0       	ldi	r18, 0x0A	; 10
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	bc 01       	movw	r22, r24
  8c:	cd 01       	movw	r24, r26
  8e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  92:	9b 01       	movw	r18, r22
  94:	ac 01       	movw	r20, r24
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	9a 81       	ldd	r25, Y+2	; 0x02
  9a:	aa 27       	eor	r26, r26
  9c:	97 fd       	sbrc	r25, 7
  9e:	a0 95       	com	r26
  a0:	ba 2f       	mov	r27, r26
  a2:	82 0f       	add	r24, r18
  a4:	93 1f       	adc	r25, r19
  a6:	a4 1f       	adc	r26, r20
  a8:	b5 1f       	adc	r27, r21
  aa:	c0 97       	sbiw	r24, 0x30	; 48
  ac:	a1 09       	sbc	r26, r1
  ae:	b1 09       	sbc	r27, r1
  b0:	8b 83       	std	Y+3, r24	; 0x03
  b2:	9c 83       	std	Y+4, r25	; 0x04
  b4:	ad 83       	std	Y+5, r26	; 0x05
  b6:	be 83       	std	Y+6, r27	; 0x06
  b8:	e8 85       	ldd	r30, Y+8	; 0x08
  ba:	f9 85       	ldd	r31, Y+9	; 0x09
  bc:	80 81       	ld	r24, Z
  be:	91 81       	ldd	r25, Z+1	; 0x01
  c0:	fc 01       	movw	r30, r24
  c2:	36 96       	adiw	r30, 0x06	; 6
  c4:	01 90       	ld	r0, Z+
  c6:	f0 81       	ld	r31, Z
  c8:	e0 2d       	mov	r30, r0
  ca:	88 85       	ldd	r24, Y+8	; 0x08
  cc:	99 85       	ldd	r25, Y+9	; 0x09
  ce:	09 95       	icall
  d0:	88 85       	ldd	r24, Y+8	; 0x08
  d2:	99 85       	ldd	r25, Y+9	; 0x09
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  d8:	9a 83       	std	Y+2, r25	; 0x02
  da:	89 83       	std	Y+1, r24	; 0x01
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	80 33       	cpi	r24, 0x30	; 48
  e2:	91 05       	cpc	r25, r1
  e4:	04 f0       	brlt	.+0      	; 0xe6 <_ZN6Stream8parseIntEc+0xe6>
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	8a 33       	cpi	r24, 0x3A	; 58
  ec:	91 05       	cpc	r25, r1
  ee:	04 f4       	brge	.+0      	; 0xf0 <_ZN6Stream8parseIntEc+0xf0>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN6Stream8parseIntEc+0xf2>
  f2:	8a 85       	ldd	r24, Y+10	; 0x0a
  f4:	28 2f       	mov	r18, r24
  f6:	33 27       	eor	r19, r19
  f8:	27 fd       	sbrc	r18, 7
  fa:	30 95       	com	r19
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	01 f4       	brne	.+0      	; 0x106 <_ZN6Stream8parseIntEc+0x106>
 106:	00 c0       	rjmp	.+0      	; 0x108 <_ZN6Stream8parseIntEc+0x108>
 108:	8f 81       	ldd	r24, Y+7	; 0x07
 10a:	88 23       	and	r24, r24
 10c:	01 f0       	breq	.+0      	; 0x10e <_ZN6Stream8parseIntEc+0x10e>
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	9c 81       	ldd	r25, Y+4	; 0x04
 112:	ad 81       	ldd	r26, Y+5	; 0x05
 114:	be 81       	ldd	r27, Y+6	; 0x06
 116:	b0 95       	com	r27
 118:	a0 95       	com	r26
 11a:	90 95       	com	r25
 11c:	81 95       	neg	r24
 11e:	9f 4f       	sbci	r25, 0xFF	; 255
 120:	af 4f       	sbci	r26, 0xFF	; 255
 122:	bf 4f       	sbci	r27, 0xFF	; 255
 124:	8b 83       	std	Y+3, r24	; 0x03
 126:	9c 83       	std	Y+4, r25	; 0x04
 128:	ad 83       	std	Y+5, r26	; 0x05
 12a:	be 83       	std	Y+6, r27	; 0x06
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	9c 81       	ldd	r25, Y+4	; 0x04
 130:	ad 81       	ldd	r26, Y+5	; 0x05
 132:	be 81       	ldd	r27, Y+6	; 0x06
 134:	8b 87       	std	Y+11, r24	; 0x0b
 136:	9c 87       	std	Y+12, r25	; 0x0c
 138:	ad 87       	std	Y+13, r26	; 0x0d
 13a:	be 87       	std	Y+14, r27	; 0x0e
 13c:	8b 85       	ldd	r24, Y+11	; 0x0b
 13e:	9c 85       	ldd	r25, Y+12	; 0x0c
 140:	ad 85       	ldd	r26, Y+13	; 0x0d
 142:	be 85       	ldd	r27, Y+14	; 0x0e
 144:	bc 01       	movw	r22, r24
 146:	cd 01       	movw	r24, r26
 148:	2e 96       	adiw	r28, 0x0e	; 14
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	cf 91       	pop	r28
 156:	df 91       	pop	r29
 158:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEv:

00000000 <_ZN6Stream8parseIntEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6Stream8parseIntEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	61 e0       	ldi	r22, 0x01	; 1
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEv>
  18:	dc 01       	movw	r26, r24
  1a:	cb 01       	movw	r24, r22
  1c:	bc 01       	movw	r22, r24
{
  return findUntil(target, length, NULL, 0);
  1e:	cd 01       	movw	r24, r26
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	cf 91       	pop	r28
  26:	df 91       	pop	r29
  28:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  1c:	dc 01       	movw	r26, r24
{
  return findUntil(target, length, NULL, 0);
  1e:	cb 01       	movw	r24, r22
  20:	eb 81       	ldd	r30, Y+3	; 0x03
  22:	fc 81       	ldd	r31, Y+4	; 0x04
  24:	80 87       	std	Z+8, r24	; 0x08
  26:	91 87       	std	Z+9, r25	; 0x09
  28:	a2 87       	std	Z+10, r26	; 0x0a
  2a:	b3 87       	std	Z+11, r27	; 0x0b
  2c:	eb 81       	ldd	r30, Y+3	; 0x03
  2e:	fc 81       	ldd	r31, Y+4	; 0x04
  30:	80 81       	ld	r24, Z
  32:	91 81       	ldd	r25, Z+1	; 0x01
  34:	fc 01       	movw	r30, r24
  36:	36 96       	adiw	r30, 0x06	; 6
}
  38:	01 90       	ld	r0, Z+
  3a:	f0 81       	ld	r31, Z
  3c:	e0 2d       	mov	r30, r0
  3e:	8b 81       	ldd	r24, Y+3	; 0x03
  40:	9c 81       	ldd	r25, Y+4	; 0x04
  42:	09 95       	icall
  44:	9a 83       	std	Y+2, r25	; 0x02
  46:	89 83       	std	Y+1, r24	; 0x01
  48:	89 81       	ldd	r24, Y+1	; 0x01
  4a:	9a 81       	ldd	r25, Y+2	; 0x02
  4c:	99 23       	and	r25, r25
  4e:	04 f0       	brlt	.+0      	; 0x50 <_ZN6Stream9timedReadEv+0x50>
  50:	89 81       	ldd	r24, Y+1	; 0x01
  52:	9a 81       	ldd	r25, Y+2	; 0x02
  54:	9e 83       	std	Y+6, r25	; 0x06
  56:	8d 83       	std	Y+5, r24	; 0x05
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN6Stream9timedReadEv+0x5a>
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  5e:	9b 01       	movw	r18, r22
  60:	ac 01       	movw	r20, r24
  62:	eb 81       	ldd	r30, Y+3	; 0x03
  64:	fc 81       	ldd	r31, Y+4	; 0x04
  66:	80 85       	ldd	r24, Z+8	; 0x08
  68:	91 85       	ldd	r25, Z+9	; 0x09
  6a:	a2 85       	ldd	r26, Z+10	; 0x0a
  6c:	b3 85       	ldd	r27, Z+11	; 0x0b
  6e:	28 1b       	sub	r18, r24
  70:	39 0b       	sbc	r19, r25
  72:	4a 0b       	sbc	r20, r26
  74:	5b 0b       	sbc	r21, r27
  76:	eb 81       	ldd	r30, Y+3	; 0x03
  78:	fc 81       	ldd	r31, Y+4	; 0x04
  7a:	84 81       	ldd	r24, Z+4	; 0x04
  7c:	95 81       	ldd	r25, Z+5	; 0x05
  7e:	a6 81       	ldd	r26, Z+6	; 0x06
  80:	b7 81       	ldd	r27, Z+7	; 0x07
  82:	1f 82       	std	Y+7, r1	; 0x07
  84:	28 17       	cp	r18, r24
  86:	39 07       	cpc	r19, r25
  88:	4a 07       	cpc	r20, r26
  8a:	5b 07       	cpc	r21, r27
  8c:	00 f4       	brcc	.+0      	; 0x8e <_ZN6Stream9timedReadEv+0x8e>
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	9f 83       	std	Y+7, r25	; 0x07
  92:	8f 81       	ldd	r24, Y+7	; 0x07
  94:	88 23       	and	r24, r24
  96:	01 f4       	brne	.+0      	; 0x98 <_ZN6Stream9timedReadEv+0x98>
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	9f ef       	ldi	r25, 0xFF	; 255
  9c:	9e 83       	std	Y+6, r25	; 0x06
  9e:	8d 83       	std	Y+5, r24	; 0x05
  a0:	8d 81       	ldd	r24, Y+5	; 0x05
  a2:	9e 81       	ldd	r25, Y+6	; 0x06
  a4:	27 96       	adiw	r28, 0x07	; 7
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

Disassembly of section .text._ZN6Stream15readStringUntilEc:

00000000 <_ZN6Stream15readStringUntilEc>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2e 97       	sbiw	r28, 0x0e	; 14
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9e 87       	std	Y+14, r25	; 0x0e
  16:	8d 87       	std	Y+13, r24	; 0x0d
  18:	7b 87       	std	Y+11, r23	; 0x0b
  1a:	6a 87       	std	Y+10, r22	; 0x0a
  1c:	4c 87       	std	Y+12, r20	; 0x0c
{
  return findUntil(target, length, NULL, 0);
  1e:	8d 85       	ldd	r24, Y+13	; 0x0d
  20:	9e 85       	ldd	r25, Y+14	; 0x0e
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	b9 01       	movw	r22, r18
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  2c:	8a 85       	ldd	r24, Y+10	; 0x0a
  2e:	9b 85       	ldd	r25, Y+11	; 0x0b
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  34:	9a 83       	std	Y+2, r25	; 0x02
  36:	89 83       	std	Y+1, r24	; 0x01
}
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN6Stream15readStringUntilEc+0x3a>
  3a:	8d 85       	ldd	r24, Y+13	; 0x0d
  3c:	9e 85       	ldd	r25, Y+14	; 0x0e
  3e:	29 81       	ldd	r18, Y+1	; 0x01
  40:	62 2f       	mov	r22, r18
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  46:	8a 85       	ldd	r24, Y+10	; 0x0a
  48:	9b 85       	ldd	r25, Y+11	; 0x0b
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  4e:	9a 83       	std	Y+2, r25	; 0x02
  50:	89 83       	std	Y+1, r24	; 0x01
  52:	89 81       	ldd	r24, Y+1	; 0x01
  54:	9a 81       	ldd	r25, Y+2	; 0x02
  56:	99 23       	and	r25, r25
  58:	04 f0       	brlt	.+0      	; 0x5a <_ZN6Stream15readStringUntilEc+0x5a>
  5a:	8c 85       	ldd	r24, Y+12	; 0x0c
  5c:	28 2f       	mov	r18, r24
  5e:	33 27       	eor	r19, r19
  60:	27 fd       	sbrc	r18, 7
  62:	30 95       	com	r19
  64:	89 81       	ldd	r24, Y+1	; 0x01
  66:	9a 81       	ldd	r25, Y+2	; 0x02
  68:	28 17       	cp	r18, r24
  6a:	39 07       	cpc	r19, r25
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN6Stream15readStringUntilEc+0x6e>
  6e:	8d 85       	ldd	r24, Y+13	; 0x0d
  70:	9e 85       	ldd	r25, Y+14	; 0x0e
  72:	8d 85       	ldd	r24, Y+13	; 0x0d
  74:	9e 85       	ldd	r25, Y+14	; 0x0e
  76:	2e 96       	adiw	r28, 0x0e	; 14
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	f8 94       	cli
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	0f be       	out	0x3f, r0	; 63
  80:	cd bf       	out	0x3d, r28	; 61
  82:	cf 91       	pop	r28
  84:	df 91       	pop	r29
  86:	08 95       	ret

Disassembly of section .text._ZN6Stream10readStringEv:

00000000 <_ZN6Stream10readStringEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9d 87       	std	Y+13, r25	; 0x0d
  16:	8c 87       	std	Y+12, r24	; 0x0c
  18:	7b 87       	std	Y+11, r23	; 0x0b
  1a:	6a 87       	std	Y+10, r22	; 0x0a
  1c:	8c 85       	ldd	r24, Y+12	; 0x0c
{
  return findUntil(target, length, NULL, 0);
  1e:	9d 85       	ldd	r25, Y+13	; 0x0d
  20:	20 e0       	ldi	r18, 0x00	; 0
  22:	30 e0       	ldi	r19, 0x00	; 0
  24:	b9 01       	movw	r22, r18
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  2a:	8a 85       	ldd	r24, Y+10	; 0x0a
  2c:	9b 85       	ldd	r25, Y+11	; 0x0b
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  32:	9a 83       	std	Y+2, r25	; 0x02
  34:	89 83       	std	Y+1, r24	; 0x01
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6Stream10readStringEv+0x38>
}
  38:	8c 85       	ldd	r24, Y+12	; 0x0c
  3a:	9d 85       	ldd	r25, Y+13	; 0x0d
  3c:	29 81       	ldd	r18, Y+1	; 0x01
  3e:	62 2f       	mov	r22, r18
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  44:	8a 85       	ldd	r24, Y+10	; 0x0a
  46:	9b 85       	ldd	r25, Y+11	; 0x0b
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  4c:	9a 83       	std	Y+2, r25	; 0x02
  4e:	89 83       	std	Y+1, r24	; 0x01
  50:	89 81       	ldd	r24, Y+1	; 0x01
  52:	9a 81       	ldd	r25, Y+2	; 0x02
  54:	99 23       	and	r25, r25
  56:	04 f4       	brge	.+0      	; 0x58 <_ZN6Stream10readStringEv+0x58>
  58:	8c 85       	ldd	r24, Y+12	; 0x0c
  5a:	9d 85       	ldd	r25, Y+13	; 0x0d
  5c:	8c 85       	ldd	r24, Y+12	; 0x0c
  5e:	9d 85       	ldd	r25, Y+13	; 0x0d
  60:	2d 96       	adiw	r28, 0x0d	; 13
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	f8 94       	cli
  66:	de bf       	out	0x3e, r29	; 62
  68:	0f be       	out	0x3f, r0	; 63
  6a:	cd bf       	out	0x3d, r28	; 61
  6c:	cf 91       	pop	r28
  6e:	df 91       	pop	r29
  70:	08 95       	ret

Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

00000000 <_ZN6Stream14readBytesUntilEcPcj>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9e 83       	std	Y+6, r25	; 0x06
  16:	8d 83       	std	Y+5, r24	; 0x05
  18:	6f 83       	std	Y+7, r22	; 0x07
  1a:	59 87       	std	Y+9, r21	; 0x09
  1c:	48 87       	std	Y+8, r20	; 0x08
{
  return findUntil(target, length, NULL, 0);
  1e:	3b 87       	std	Y+11, r19	; 0x0b
  20:	2a 87       	std	Y+10, r18	; 0x0a
  22:	8a 85       	ldd	r24, Y+10	; 0x0a
  24:	9b 85       	ldd	r25, Y+11	; 0x0b
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN6Stream14readBytesUntilEcPcj+0x2a>
  2a:	1d 86       	std	Y+13, r1	; 0x0d
  2c:	1c 86       	std	Y+12, r1	; 0x0c
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN6Stream14readBytesUntilEcPcj+0x30>
  30:	1c 82       	std	Y+4, r1	; 0x04
  32:	1b 82       	std	Y+3, r1	; 0x03
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6Stream14readBytesUntilEcPcj+0x36>
  36:	8d 81       	ldd	r24, Y+5	; 0x05
}
  38:	9e 81       	ldd	r25, Y+6	; 0x06
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream14readBytesUntilEcPcj>
  3e:	9a 83       	std	Y+2, r25	; 0x02
  40:	89 83       	std	Y+1, r24	; 0x01
  42:	89 81       	ldd	r24, Y+1	; 0x01
  44:	9a 81       	ldd	r25, Y+2	; 0x02
  46:	99 23       	and	r25, r25
  48:	04 f0       	brlt	.+0      	; 0x4a <_ZN6Stream14readBytesUntilEcPcj+0x4a>
  4a:	8f 81       	ldd	r24, Y+7	; 0x07
  4c:	28 2f       	mov	r18, r24
  4e:	33 27       	eor	r19, r19
  50:	27 fd       	sbrc	r18, 7
  52:	30 95       	com	r19
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	9a 81       	ldd	r25, Y+2	; 0x02
  58:	28 17       	cp	r18, r24
  5a:	39 07       	cpc	r19, r25
  5c:	01 f0       	breq	.+0      	; 0x5e <_ZN6Stream14readBytesUntilEcPcj+0x5e>
  5e:	89 81       	ldd	r24, Y+1	; 0x01
  60:	e8 85       	ldd	r30, Y+8	; 0x08
  62:	f9 85       	ldd	r31, Y+9	; 0x09
  64:	80 83       	st	Z, r24
  66:	88 85       	ldd	r24, Y+8	; 0x08
  68:	99 85       	ldd	r25, Y+9	; 0x09
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	99 87       	std	Y+9, r25	; 0x09
  6e:	88 87       	std	Y+8, r24	; 0x08
  70:	8b 81       	ldd	r24, Y+3	; 0x03
  72:	9c 81       	ldd	r25, Y+4	; 0x04
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	9c 83       	std	Y+4, r25	; 0x04
  78:	8b 83       	std	Y+3, r24	; 0x03
  7a:	2b 81       	ldd	r18, Y+3	; 0x03
  7c:	3c 81       	ldd	r19, Y+4	; 0x04
  7e:	8a 85       	ldd	r24, Y+10	; 0x0a
  80:	9b 85       	ldd	r25, Y+11	; 0x0b
  82:	28 17       	cp	r18, r24
  84:	39 07       	cpc	r19, r25
  86:	00 f0       	brcs	.+0      	; 0x88 <_ZN6Stream14readBytesUntilEcPcj+0x88>
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	9c 81       	ldd	r25, Y+4	; 0x04
  8c:	9d 87       	std	Y+13, r25	; 0x0d
  8e:	8c 87       	std	Y+12, r24	; 0x0c
  90:	8c 85       	ldd	r24, Y+12	; 0x0c
  92:	9d 85       	ldd	r25, Y+13	; 0x0d
  94:	2d 96       	adiw	r28, 0x0d	; 13
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	08 95       	ret

Disassembly of section .text._ZN6Stream9readBytesEPcj:

00000000 <_ZN6Stream9readBytesEPcj>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9e 83       	std	Y+6, r25	; 0x06
  16:	8d 83       	std	Y+5, r24	; 0x05
  18:	78 87       	std	Y+8, r23	; 0x08
  1a:	6f 83       	std	Y+7, r22	; 0x07
  1c:	5a 87       	std	Y+10, r21	; 0x0a
{
  return findUntil(target, length, NULL, 0);
  1e:	49 87       	std	Y+9, r20	; 0x09
  20:	1c 82       	std	Y+4, r1	; 0x04
  22:	1b 82       	std	Y+3, r1	; 0x03
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9readBytesEPcj+0x26>
  26:	8d 81       	ldd	r24, Y+5	; 0x05
  28:	9e 81       	ldd	r25, Y+6	; 0x06
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9readBytesEPcj>
  2e:	9a 83       	std	Y+2, r25	; 0x02
  30:	89 83       	std	Y+1, r24	; 0x01
  32:	89 81       	ldd	r24, Y+1	; 0x01
  34:	9a 81       	ldd	r25, Y+2	; 0x02
  36:	99 23       	and	r25, r25
}
  38:	04 f0       	brlt	.+0      	; 0x3a <_ZN6Stream9readBytesEPcj+0x3a>
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	ef 81       	ldd	r30, Y+7	; 0x07
  3e:	f8 85       	ldd	r31, Y+8	; 0x08
  40:	80 83       	st	Z, r24
  42:	8f 81       	ldd	r24, Y+7	; 0x07
  44:	98 85       	ldd	r25, Y+8	; 0x08
  46:	01 96       	adiw	r24, 0x01	; 1
  48:	98 87       	std	Y+8, r25	; 0x08
  4a:	8f 83       	std	Y+7, r24	; 0x07
  4c:	8b 81       	ldd	r24, Y+3	; 0x03
  4e:	9c 81       	ldd	r25, Y+4	; 0x04
  50:	01 96       	adiw	r24, 0x01	; 1
  52:	9c 83       	std	Y+4, r25	; 0x04
  54:	8b 83       	std	Y+3, r24	; 0x03
  56:	2b 81       	ldd	r18, Y+3	; 0x03
  58:	3c 81       	ldd	r19, Y+4	; 0x04
  5a:	89 85       	ldd	r24, Y+9	; 0x09
  5c:	9a 85       	ldd	r25, Y+10	; 0x0a
  5e:	28 17       	cp	r18, r24
  60:	39 07       	cpc	r19, r25
  62:	00 f0       	brcs	.+0      	; 0x64 <_ZN6Stream9readBytesEPcj+0x64>
  64:	8b 81       	ldd	r24, Y+3	; 0x03
  66:	9c 81       	ldd	r25, Y+4	; 0x04
  68:	2a 96       	adiw	r28, 0x0a	; 10
  6a:	0f b6       	in	r0, 0x3f	; 63
  6c:	f8 94       	cli
  6e:	de bf       	out	0x3e, r29	; 62
  70:	0f be       	out	0x3f, r0	; 63
  72:	cd bf       	out	0x3d, r28	; 61
  74:	cf 91       	pop	r28
  76:	df 91       	pop	r29
  78:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

00000000 <_ZN6Stream9findUntilEPcjS0_j>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	64 97       	sbiw	r28, 0x14	; 20
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	98 87       	std	Y+8, r25	; 0x08
  1a:	8f 83       	std	Y+7, r24	; 0x07
  1c:	7a 87       	std	Y+10, r23	; 0x0a
{
  return findUntil(target, length, NULL, 0);
  1e:	69 87       	std	Y+9, r22	; 0x09
  20:	5c 87       	std	Y+12, r21	; 0x0c
  22:	4b 87       	std	Y+11, r20	; 0x0b
  24:	3e 87       	std	Y+14, r19	; 0x0e
  26:	2d 87       	std	Y+13, r18	; 0x0d
  28:	18 8b       	std	Y+16, r17	; 0x10
  2a:	0f 87       	std	Y+15, r16	; 0x0f
  2c:	1e 82       	std	Y+6, r1	; 0x06
  2e:	1d 82       	std	Y+5, r1	; 0x05
  30:	1c 82       	std	Y+4, r1	; 0x04
  32:	1b 82       	std	Y+3, r1	; 0x03
  34:	e9 85       	ldd	r30, Y+9	; 0x09
  36:	fa 85       	ldd	r31, Y+10	; 0x0a
}
  38:	80 81       	ld	r24, Z
  3a:	88 23       	and	r24, r24
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6Stream9findUntilEPcjS0_j+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN6Stream9findUntilEPcjS0_j+0x40>
  40:	81 e0       	ldi	r24, 0x01	; 1
  42:	8c 8b       	std	Y+20, r24	; 0x14
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN6Stream9findUntilEPcjS0_j+0x46>
  46:	29 85       	ldd	r18, Y+9	; 0x09
  48:	3a 85       	ldd	r19, Y+10	; 0x0a
  4a:	8d 81       	ldd	r24, Y+5	; 0x05
  4c:	9e 81       	ldd	r25, Y+6	; 0x06
  4e:	f9 01       	movw	r30, r18
  50:	e8 0f       	add	r30, r24
  52:	f9 1f       	adc	r31, r25
  54:	80 81       	ld	r24, Z
  56:	28 2f       	mov	r18, r24
  58:	33 27       	eor	r19, r19
  5a:	27 fd       	sbrc	r18, 7
  5c:	30 95       	com	r19
  5e:	89 81       	ldd	r24, Y+1	; 0x01
  60:	9a 81       	ldd	r25, Y+2	; 0x02
  62:	28 17       	cp	r18, r24
  64:	39 07       	cpc	r19, r25
  66:	01 f0       	breq	.+0      	; 0x68 <_ZN6Stream9findUntilEPcjS0_j+0x68>
  68:	1e 82       	std	Y+6, r1	; 0x06
  6a:	1d 82       	std	Y+5, r1	; 0x05
  6c:	29 85       	ldd	r18, Y+9	; 0x09
  6e:	3a 85       	ldd	r19, Y+10	; 0x0a
  70:	8d 81       	ldd	r24, Y+5	; 0x05
  72:	9e 81       	ldd	r25, Y+6	; 0x06
  74:	f9 01       	movw	r30, r18
  76:	e8 0f       	add	r30, r24
  78:	f9 1f       	adc	r31, r25
  7a:	80 81       	ld	r24, Z
  7c:	28 2f       	mov	r18, r24
  7e:	33 27       	eor	r19, r19
  80:	27 fd       	sbrc	r18, 7
  82:	30 95       	com	r19
  84:	89 81       	ldd	r24, Y+1	; 0x01
  86:	9a 81       	ldd	r25, Y+2	; 0x02
  88:	28 17       	cp	r18, r24
  8a:	39 07       	cpc	r19, r25
  8c:	01 f4       	brne	.+0      	; 0x8e <_ZN6Stream9findUntilEPcjS0_j+0x8e>
  8e:	8d 81       	ldd	r24, Y+5	; 0x05
  90:	9e 81       	ldd	r25, Y+6	; 0x06
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	9e 83       	std	Y+6, r25	; 0x06
  96:	8d 83       	std	Y+5, r24	; 0x05
  98:	1a 8a       	std	Y+18, r1	; 0x12
  9a:	2d 81       	ldd	r18, Y+5	; 0x05
  9c:	3e 81       	ldd	r19, Y+6	; 0x06
  9e:	8b 85       	ldd	r24, Y+11	; 0x0b
  a0:	9c 85       	ldd	r25, Y+12	; 0x0c
  a2:	28 17       	cp	r18, r24
  a4:	39 07       	cpc	r19, r25
  a6:	00 f0       	brcs	.+0      	; 0xa8 <_ZN6Stream9findUntilEPcjS0_j+0xa8>
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	8a 8b       	std	Y+18, r24	; 0x12
  ac:	8a 89       	ldd	r24, Y+18	; 0x12
  ae:	88 23       	and	r24, r24
  b0:	01 f0       	breq	.+0      	; 0xb2 <_ZN6Stream9findUntilEPcjS0_j+0xb2>
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	8c 8b       	std	Y+20, r24	; 0x14
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_ZN6Stream9findUntilEPcjS0_j+0xb8>
  b8:	8f 85       	ldd	r24, Y+15	; 0x0f
  ba:	98 89       	ldd	r25, Y+16	; 0x10
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	01 f0       	breq	.+0      	; 0xc0 <_ZN6Stream9findUntilEPcjS0_j+0xc0>
  c0:	2d 85       	ldd	r18, Y+13	; 0x0d
  c2:	3e 85       	ldd	r19, Y+14	; 0x0e
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	9c 81       	ldd	r25, Y+4	; 0x04
  c8:	f9 01       	movw	r30, r18
  ca:	e8 0f       	add	r30, r24
  cc:	f9 1f       	adc	r31, r25
  ce:	80 81       	ld	r24, Z
  d0:	28 2f       	mov	r18, r24
  d2:	33 27       	eor	r19, r19
  d4:	27 fd       	sbrc	r18, 7
  d6:	30 95       	com	r19
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	9a 81       	ldd	r25, Y+2	; 0x02
  dc:	28 17       	cp	r18, r24
  de:	39 07       	cpc	r19, r25
  e0:	01 f4       	brne	.+0      	; 0xe2 <_ZN6Stream9findUntilEPcjS0_j+0xe2>
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	9c 81       	ldd	r25, Y+4	; 0x04
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	9c 83       	std	Y+4, r25	; 0x04
  ea:	8b 83       	std	Y+3, r24	; 0x03
  ec:	19 8a       	std	Y+17, r1	; 0x11
  ee:	2b 81       	ldd	r18, Y+3	; 0x03
  f0:	3c 81       	ldd	r19, Y+4	; 0x04
  f2:	8f 85       	ldd	r24, Y+15	; 0x0f
  f4:	98 89       	ldd	r25, Y+16	; 0x10
  f6:	28 17       	cp	r18, r24
  f8:	39 07       	cpc	r19, r25
  fa:	00 f0       	brcs	.+0      	; 0xfc <_ZN6Stream9findUntilEPcjS0_j+0xfc>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	89 8b       	std	Y+17, r24	; 0x11
 100:	89 89       	ldd	r24, Y+17	; 0x11
 102:	88 23       	and	r24, r24
 104:	01 f0       	breq	.+0      	; 0x106 <_ZN6Stream9findUntilEPcjS0_j+0x106>
 106:	1c 8a       	std	Y+20, r1	; 0x14
 108:	00 c0       	rjmp	.+0      	; 0x10a <_ZN6Stream9findUntilEPcjS0_j+0x10a>
 10a:	1c 82       	std	Y+4, r1	; 0x04
 10c:	1b 82       	std	Y+3, r1	; 0x03
 10e:	8f 81       	ldd	r24, Y+7	; 0x07
 110:	98 85       	ldd	r25, Y+8	; 0x08
 112:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j>
 116:	9a 83       	std	Y+2, r25	; 0x02
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	1b 8a       	std	Y+19, r1	; 0x13
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	9a 81       	ldd	r25, Y+2	; 0x02
 120:	18 16       	cp	r1, r24
 122:	19 06       	cpc	r1, r25
 124:	04 f4       	brge	.+0      	; 0x126 <_ZN6Stream9findUntilEPcjS0_j+0x126>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	8b 8b       	std	Y+19, r24	; 0x13
 12a:	8b 89       	ldd	r24, Y+19	; 0x13
 12c:	88 23       	and	r24, r24
 12e:	01 f0       	breq	.+0      	; 0x130 <_ZN6Stream9findUntilEPcjS0_j+0x130>
 130:	00 c0       	rjmp	.+0      	; 0x132 <_ZN6Stream9findUntilEPcjS0_j+0x132>
 132:	1c 8a       	std	Y+20, r1	; 0x14
 134:	8c 89       	ldd	r24, Y+20	; 0x14
 136:	64 96       	adiw	r28, 0x14	; 20
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	cf 91       	pop	r28
 144:	df 91       	pop	r29
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

00000000 <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6Stream9findUntilEPcS0_+0xa>
   a:	00 d0       	rcall	.+0      	; 0xc <_ZN6Stream9findUntilEPcS0_+0xc>
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6Stream9findUntilEPcS0_+0xe>
   e:	cd b7       	in	r28, 0x3d	; 61
  10:	de b7       	in	r29, 0x3e	; 62
  12:	9a 83       	std	Y+2, r25	; 0x02
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	7c 83       	std	Y+4, r23	; 0x04
  18:	6b 83       	std	Y+3, r22	; 0x03
  1a:	5e 83       	std	Y+6, r21	; 0x06
  1c:	4d 83       	std	Y+5, r20	; 0x05
{
  return findUntil(target, length, NULL, 0);
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	9c 81       	ldd	r25, Y+4	; 0x04
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
  26:	8c 01       	movw	r16, r24
  28:	8d 81       	ldd	r24, Y+5	; 0x05
  2a:	9e 81       	ldd	r25, Y+6	; 0x06
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
  30:	dc 01       	movw	r26, r24
  32:	89 81       	ldd	r24, Y+1	; 0x01
  34:	9a 81       	ldd	r25, Y+2	; 0x02
  36:	2b 81       	ldd	r18, Y+3	; 0x03
}
  38:	3c 81       	ldd	r19, Y+4	; 0x04
  3a:	ed 81       	ldd	r30, Y+5	; 0x05
  3c:	fe 81       	ldd	r31, Y+6	; 0x06
  3e:	b9 01       	movw	r22, r18
  40:	a8 01       	movw	r20, r16
  42:	9f 01       	movw	r18, r30
  44:	8d 01       	movw	r16, r26
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
  4a:	26 96       	adiw	r28, 0x06	; 6
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPc:

00000000 <_ZN6Stream4findEPc>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6Stream4findEPc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6Stream4findEPc+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	2b 81       	ldd	r18, Y+3	; 0x03
  1a:	3c 81       	ldd	r19, Y+4	; 0x04
  1c:	b9 01       	movw	r22, r18
{
  return findUntil(target, length, NULL, 0);
  1e:	40 e0       	ldi	r20, 0x00	; 0
  20:	50 e0       	ldi	r21, 0x00	; 0
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPc>
  26:	0f 90       	pop	r0
  28:	0f 90       	pop	r0
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	cf 91       	pop	r28
  30:	df 91       	pop	r29
  32:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPcj:

00000000 <_ZN6Stream4findEPcj>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6Stream4findEPcj+0xa>
   a:	00 d0       	rcall	.+0      	; 0xc <_ZN6Stream4findEPcj+0xc>
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6Stream4findEPcj+0xe>
   e:	cd b7       	in	r28, 0x3d	; 61
  10:	de b7       	in	r29, 0x3e	; 62
  12:	9a 83       	std	Y+2, r25	; 0x02
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	7c 83       	std	Y+4, r23	; 0x04
  18:	6b 83       	std	Y+3, r22	; 0x03
  1a:	5e 83       	std	Y+6, r21	; 0x06
  1c:	4d 83       	std	Y+5, r20	; 0x05
{
  return findUntil(target, length, NULL, 0);
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	9a 81       	ldd	r25, Y+2	; 0x02
  22:	2b 81       	ldd	r18, Y+3	; 0x03
  24:	3c 81       	ldd	r19, Y+4	; 0x04
  26:	4d 81       	ldd	r20, Y+5	; 0x05
  28:	5e 81       	ldd	r21, Y+6	; 0x06
  2a:	b9 01       	movw	r22, r18
  2c:	20 e0       	ldi	r18, 0x00	; 0
  2e:	30 e0       	ldi	r19, 0x00	; 0
  30:	00 e0       	ldi	r16, 0x00	; 0
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPcj>
}
  38:	26 96       	adiw	r28, 0x06	; 6
  3a:	0f b6       	in	r0, 0x3f	; 63
  3c:	f8 94       	cli
  3e:	de bf       	out	0x3e, r29	; 62
  40:	0f be       	out	0x3f, r0	; 63
  42:	cd bf       	out	0x3d, r28	; 61
  44:	cf 91       	pop	r28
  46:	df 91       	pop	r29
  48:	1f 91       	pop	r17
  4a:	0f 91       	pop	r16
  4c:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000eb8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001048  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZL9toneBeginh 00000290  00000000  00000000  00001f34  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z12disableTimerh 00000084  00000000  00000000  000021c4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6noToneh 0000008c  00000000  00000000  00002248  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_7 000000ea  00000000  00000000  000022d4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z4tonehjm 00000440  00000000  00000000  000023be  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .bss.timer0_toggle_count 00000004  00000000  00000000  000027fe  2**0
                  ALLOC
 11 .bss.timer0_pin_port 00000002  00000000  00000000  000027fe  2**0
                  ALLOC
 12 .bss.timer0_pin_mask 00000001  00000000  00000000  000027fe  2**0
                  ALLOC
 13 .bss.timer1_toggle_count 00000004  00000000  00000000  000027fe  2**0
                  ALLOC
 14 .bss.timer1_pin_port 00000002  00000000  00000000  000027fe  2**0
                  ALLOC
 15 .bss.timer1_pin_mask 00000001  00000000  00000000  000027fe  2**0
                  ALLOC
 16 .bss.timer2_toggle_count 00000004  00000000  00000000  000027fe  2**0
                  ALLOC
 17 .bss.timer2_pin_port 00000002  00000000  00000000  000027fe  2**0
                  ALLOC
 18 .bss.timer2_pin_mask 00000001  00000000  00000000  000027fe  2**0
                  ALLOC
 19 .data._ZL9tone_pins 00000001  00000000  00000000  000027fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .progmem.data 00000001  00000000  00000000  000027ff  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZL9toneBeginh:

00000000 <_ZL9toneBeginh>:

#endif



static int8_t toneBegin(uint8_t _pin)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	ac 97       	sbiw	r28, 0x2c	; 44
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a a7       	std	Y+42, r24	; 0x2a
{
  int8_t _timer = -1;
  16:	8f ef       	ldi	r24, 0xFF	; 255
  18:	89 a7       	std	Y+41, r24	; 0x29

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  1a:	18 a6       	std	Y+40, r1	; 0x28
  1c:	1f a2       	std	Y+39, r1	; 0x27
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZL9toneBeginh+0x20>
    if (tone_pins[i] == _pin) {
  20:	8f a1       	ldd	r24, Y+39	; 0x27
  22:	98 a5       	ldd	r25, Y+40	; 0x28
  24:	fc 01       	movw	r30, r24
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	90 81       	ld	r25, Z
  2c:	8a a5       	ldd	r24, Y+42	; 0x2a
  2e:	98 17       	cp	r25, r24
  30:	01 f4       	brne	.+0      	; 0x32 <_ZL9toneBeginh+0x32>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  32:	8f a1       	ldd	r24, Y+39	; 0x27
  34:	98 a5       	ldd	r25, Y+40	; 0x28
  36:	80 50       	subi	r24, 0x00	; 0
  38:	90 40       	sbci	r25, 0x00	; 0
  3a:	9e a3       	std	Y+38, r25	; 0x26
  3c:	8d a3       	std	Y+37, r24	; 0x25
  3e:	ed a1       	ldd	r30, Y+37	; 0x25
  40:	fe a1       	ldd	r31, Y+38	; 0x26
  42:	84 91       	lpm	r24, Z+
  44:	8c a3       	std	Y+36, r24	; 0x24
  46:	8c a1       	ldd	r24, Y+36	; 0x24
  48:	8b a7       	std	Y+43, r24	; 0x2b
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZL9toneBeginh+0x4c>
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  4c:	8f a1       	ldd	r24, Y+39	; 0x27
  4e:	98 a5       	ldd	r25, Y+40	; 0x28
  50:	01 96       	adiw	r24, 0x01	; 1
  52:	98 a7       	std	Y+40, r25	; 0x28
  54:	8f a3       	std	Y+39, r24	; 0x27
  56:	8f a1       	ldd	r24, Y+39	; 0x27
  58:	98 a5       	ldd	r25, Y+40	; 0x28
  5a:	18 16       	cp	r1, r24
  5c:	19 06       	cpc	r1, r25
  5e:	04 f4       	brge	.+0      	; 0x60 <_ZL9toneBeginh+0x60>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  60:	1b a2       	std	Y+35, r1	; 0x23
  62:	1a a2       	std	Y+34, r1	; 0x22
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZL9toneBeginh+0x66>
    if (tone_pins[i] == 255) {
  66:	8a a1       	ldd	r24, Y+34	; 0x22
  68:	9b a1       	ldd	r25, Y+35	; 0x23
  6a:	fc 01       	movw	r30, r24
  6c:	e0 50       	subi	r30, 0x00	; 0
  6e:	f0 40       	sbci	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	8f 3f       	cpi	r24, 0xFF	; 255
  74:	01 f4       	brne	.+0      	; 0x76 <_ZL9toneBeginh+0x76>
      tone_pins[i] = _pin;
  76:	8a a1       	ldd	r24, Y+34	; 0x22
  78:	9b a1       	ldd	r25, Y+35	; 0x23
  7a:	fc 01       	movw	r30, r24
  7c:	e0 50       	subi	r30, 0x00	; 0
  7e:	f0 40       	sbci	r31, 0x00	; 0
  80:	8a a5       	ldd	r24, Y+42	; 0x2a
  82:	80 83       	st	Z, r24
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  84:	8a a1       	ldd	r24, Y+34	; 0x22
  86:	9b a1       	ldd	r25, Y+35	; 0x23
  88:	80 50       	subi	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	99 a3       	std	Y+33, r25	; 0x21
  8e:	88 a3       	std	Y+32, r24	; 0x20
  90:	e8 a1       	ldd	r30, Y+32	; 0x20
  92:	f9 a1       	ldd	r31, Y+33	; 0x21
  94:	84 91       	lpm	r24, Z+
  96:	8f 8f       	std	Y+31, r24	; 0x1f
  98:	8f 8d       	ldd	r24, Y+31	; 0x1f
  9a:	89 a7       	std	Y+41, r24	; 0x29
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZL9toneBeginh+0x9e>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  9e:	8a a1       	ldd	r24, Y+34	; 0x22
  a0:	9b a1       	ldd	r25, Y+35	; 0x23
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	9b a3       	std	Y+35, r25	; 0x23
  a6:	8a a3       	std	Y+34, r24	; 0x22
  a8:	8a a1       	ldd	r24, Y+34	; 0x22
  aa:	9b a1       	ldd	r25, Y+35	; 0x23
  ac:	18 16       	cp	r1, r24
  ae:	19 06       	cpc	r1, r25
  b0:	04 f4       	brge	.+0      	; 0xb2 <_ZL9toneBeginh+0xb2>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      break;
    }
  }
  
  if (_timer != -1)
  b2:	89 a5       	ldd	r24, Y+41	; 0x29
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	01 f4       	brne	.+0      	; 0xb8 <_ZL9toneBeginh+0xb8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <_ZL9toneBeginh+0xba>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  ba:	89 a5       	ldd	r24, Y+41	; 0x29
  bc:	8c a7       	std	Y+44, r24	; 0x2c
  be:	8c a5       	ldd	r24, Y+44	; 0x2c
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	01 f4       	brne	.+0      	; 0xc4 <_ZL9toneBeginh+0xc4>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZL9toneBeginh+0xc6>
  c6:	8c a5       	ldd	r24, Y+44	; 0x2c
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	01 f4       	brne	.+0      	; 0xcc <_ZL9toneBeginh+0xcc>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZL9toneBeginh+0xce>
  ce:	8c a5       	ldd	r24, Y+44	; 0x2c
  d0:	88 23       	and	r24, r24
  d2:	01 f0       	breq	.+0      	; 0xd4 <_ZL9toneBeginh+0xd4>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_ZL9toneBeginh+0xd6>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  d6:	e4 e4       	ldi	r30, 0x44	; 68
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
        TCCR0B = 0;
  dc:	e5 e4       	ldi	r30, 0x45	; 69
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
        bitWrite(TCCR0A, WGM01, 1);
  e2:	a4 e4       	ldi	r26, 0x44	; 68
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e4 e4       	ldi	r30, 0x44	; 68
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8c 93       	st	X, r24
        bitWrite(TCCR0B, CS00, 1);
  f0:	a5 e4       	ldi	r26, 0x45	; 69
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e5 e4       	ldi	r30, 0x45	; 69
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	8c 93       	st	X, r24
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
  fe:	8a a5       	ldd	r24, Y+42	; 0x2a
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	80 50       	subi	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	9a 8f       	std	Y+26, r25	; 0x1a
 10a:	89 8f       	std	Y+25, r24	; 0x19
 10c:	e9 8d       	ldd	r30, Y+25	; 0x19
 10e:	fa 8d       	ldd	r31, Y+26	; 0x1a
 110:	84 91       	lpm	r24, Z+
 112:	88 8f       	std	Y+24, r24	; 0x18
 114:	88 8d       	ldd	r24, Y+24	; 0x18
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	80 50       	subi	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	9e 8f       	std	Y+30, r25	; 0x1e
 124:	8d 8f       	std	Y+29, r24	; 0x1d
 126:	8d 8d       	ldd	r24, Y+29	; 0x1d
 128:	9e 8d       	ldd	r25, Y+30	; 0x1e
 12a:	fc 01       	movw	r30, r24
 12c:	85 91       	lpm	r24, Z+
 12e:	94 91       	lpm	r25, Z+
 130:	9c 8f       	std	Y+28, r25	; 0x1c
 132:	8b 8f       	std	Y+27, r24	; 0x1b
 134:	fe 8f       	std	Y+30, r31	; 0x1e
 136:	ed 8f       	std	Y+29, r30	; 0x1d
 138:	8b 8d       	ldd	r24, Y+27	; 0x1b
 13a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 13c:	90 93 00 00 	sts	0x0000, r25
 140:	80 93 00 00 	sts	0x0000, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
 144:	8a a5       	ldd	r24, Y+42	; 0x2a
 146:	88 2f       	mov	r24, r24
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	80 50       	subi	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	9f 8b       	std	Y+23, r25	; 0x17
 150:	8e 8b       	std	Y+22, r24	; 0x16
 152:	ee 89       	ldd	r30, Y+22	; 0x16
 154:	ff 89       	ldd	r31, Y+23	; 0x17
 156:	84 91       	lpm	r24, Z+
 158:	8d 8b       	std	Y+21, r24	; 0x15
 15a:	8d 89       	ldd	r24, Y+21	; 0x15
 15c:	80 93 00 00 	sts	0x0000, r24
 160:	00 c0       	rjmp	.+0      	; 0x162 <_ZL9toneBeginh+0x162>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
 162:	e0 e8       	ldi	r30, 0x80	; 128
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	10 82       	st	Z, r1
        TCCR1B = 0;
 168:	e1 e8       	ldi	r30, 0x81	; 129
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	10 82       	st	Z, r1
        bitWrite(TCCR1B, WGM12, 1);
 16e:	a1 e8       	ldi	r26, 0x81	; 129
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	8c 93       	st	X, r24
        bitWrite(TCCR1B, CS10, 1);
 17c:	a1 e8       	ldi	r26, 0x81	; 129
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e1 e8       	ldi	r30, 0x81	; 129
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	81 60       	ori	r24, 0x01	; 1
 188:	8c 93       	st	X, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
 18a:	8a a5       	ldd	r24, Y+42	; 0x2a
 18c:	88 2f       	mov	r24, r24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	80 50       	subi	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	98 8b       	std	Y+16, r25	; 0x10
 196:	8f 87       	std	Y+15, r24	; 0x0f
 198:	ef 85       	ldd	r30, Y+15	; 0x0f
 19a:	f8 89       	ldd	r31, Y+16	; 0x10
 19c:	84 91       	lpm	r24, Z+
 19e:	8e 87       	std	Y+14, r24	; 0x0e
 1a0:	8e 85       	ldd	r24, Y+14	; 0x0e
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	80 50       	subi	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	9c 8b       	std	Y+20, r25	; 0x14
 1b0:	8b 8b       	std	Y+19, r24	; 0x13
 1b2:	8b 89       	ldd	r24, Y+19	; 0x13
 1b4:	9c 89       	ldd	r25, Y+20	; 0x14
 1b6:	fc 01       	movw	r30, r24
 1b8:	85 91       	lpm	r24, Z+
 1ba:	94 91       	lpm	r25, Z+
 1bc:	9a 8b       	std	Y+18, r25	; 0x12
 1be:	89 8b       	std	Y+17, r24	; 0x11
 1c0:	fc 8b       	std	Y+20, r31	; 0x14
 1c2:	eb 8b       	std	Y+19, r30	; 0x13
 1c4:	89 89       	ldd	r24, Y+17	; 0x11
 1c6:	9a 89       	ldd	r25, Y+18	; 0x12
 1c8:	90 93 00 00 	sts	0x0000, r25
 1cc:	80 93 00 00 	sts	0x0000, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
 1d0:	8a a5       	ldd	r24, Y+42	; 0x2a
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	80 50       	subi	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	9d 87       	std	Y+13, r25	; 0x0d
 1dc:	8c 87       	std	Y+12, r24	; 0x0c
 1de:	ec 85       	ldd	r30, Y+12	; 0x0c
 1e0:	fd 85       	ldd	r31, Y+13	; 0x0d
 1e2:	84 91       	lpm	r24, Z+
 1e4:	8b 87       	std	Y+11, r24	; 0x0b
 1e6:	8b 85       	ldd	r24, Y+11	; 0x0b
 1e8:	80 93 00 00 	sts	0x0000, r24
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_ZL9toneBeginh+0x1ee>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
 1ee:	e0 eb       	ldi	r30, 0xB0	; 176
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	10 82       	st	Z, r1
        TCCR2B = 0;
 1f4:	e1 eb       	ldi	r30, 0xB1	; 177
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	10 82       	st	Z, r1
        bitWrite(TCCR2A, WGM21, 1);
 1fa:	a0 eb       	ldi	r26, 0xB0	; 176
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e0 eb       	ldi	r30, 0xB0	; 176
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	82 60       	ori	r24, 0x02	; 2
 206:	8c 93       	st	X, r24
        bitWrite(TCCR2B, CS20, 1);
 208:	a1 eb       	ldi	r26, 0xB1	; 177
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e1 eb       	ldi	r30, 0xB1	; 177
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	8c 93       	st	X, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 216:	8a a5       	ldd	r24, Y+42	; 0x2a
 218:	88 2f       	mov	r24, r24
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	80 50       	subi	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	9e 83       	std	Y+6, r25	; 0x06
 222:	8d 83       	std	Y+5, r24	; 0x05
 224:	ed 81       	ldd	r30, Y+5	; 0x05
 226:	fe 81       	ldd	r31, Y+6	; 0x06
 228:	84 91       	lpm	r24, Z+
 22a:	8c 83       	std	Y+4, r24	; 0x04
 22c:	8c 81       	ldd	r24, Y+4	; 0x04
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	80 50       	subi	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	9a 87       	std	Y+10, r25	; 0x0a
 23c:	89 87       	std	Y+9, r24	; 0x09
 23e:	89 85       	ldd	r24, Y+9	; 0x09
 240:	9a 85       	ldd	r25, Y+10	; 0x0a
 242:	fc 01       	movw	r30, r24
 244:	85 91       	lpm	r24, Z+
 246:	94 91       	lpm	r25, Z+
 248:	98 87       	std	Y+8, r25	; 0x08
 24a:	8f 83       	std	Y+7, r24	; 0x07
 24c:	fa 87       	std	Y+10, r31	; 0x0a
 24e:	e9 87       	std	Y+9, r30	; 0x09
 250:	8f 81       	ldd	r24, Y+7	; 0x07
 252:	98 85       	ldd	r25, Y+8	; 0x08
 254:	90 93 00 00 	sts	0x0000, r25
 258:	80 93 00 00 	sts	0x0000, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
 25c:	8a a5       	ldd	r24, Y+42	; 0x2a
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	80 50       	subi	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	9b 83       	std	Y+3, r25	; 0x03
 268:	8a 83       	std	Y+2, r24	; 0x02
 26a:	ea 81       	ldd	r30, Y+2	; 0x02
 26c:	fb 81       	ldd	r31, Y+3	; 0x03
 26e:	84 91       	lpm	r24, Z+
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	80 93 00 00 	sts	0x0000, r24
        break;
      #endif
    }
  }

  return _timer;
 278:	89 a5       	ldd	r24, Y+41	; 0x29
 27a:	8b a7       	std	Y+43, r24	; 0x2b
 27c:	8b a5       	ldd	r24, Y+43	; 0x2b
}
 27e:	ac 96       	adiw	r28, 0x2c	; 44
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	cf 91       	pop	r28
 28c:	df 91       	pop	r29
 28e:	08 95       	ret

Disassembly of section .text._Z12disableTimerh:

00000000 <_Z12disableTimerh>:

#endif



static int8_t toneBegin(uint8_t _pin)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z12disableTimerh+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	28 2f       	mov	r18, r24
  12:	30 e0       	ldi	r19, 0x00	; 0
  14:	3b 83       	std	Y+3, r19	; 0x03
{
  int8_t _timer = -1;
  16:	2a 83       	std	Y+2, r18	; 0x02
  18:	8a 81       	ldd	r24, Y+2	; 0x02

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  1a:	9b 81       	ldd	r25, Y+3	; 0x03
  1c:	81 30       	cpi	r24, 0x01	; 1
  1e:	91 05       	cpc	r25, r1
    if (tone_pins[i] == _pin) {
  20:	01 f0       	breq	.+0      	; 0x22 <_Z12disableTimerh+0x22>
  22:	2a 81       	ldd	r18, Y+2	; 0x02
  24:	3b 81       	ldd	r19, Y+3	; 0x03
  26:	22 30       	cpi	r18, 0x02	; 2
  28:	31 05       	cpc	r19, r1
  2a:	01 f0       	breq	.+0      	; 0x2c <_Z12disableTimerh+0x2c>
  2c:	8a 81       	ldd	r24, Y+2	; 0x02
  2e:	9b 81       	ldd	r25, Y+3	; 0x03
  30:	00 97       	sbiw	r24, 0x00	; 0
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  32:	01 f4       	brne	.+0      	; 0x34 <_Z12disableTimerh+0x34>
  34:	ee e6       	ldi	r30, 0x6E	; 110
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	10 82       	st	Z, r1
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_Z12disableTimerh+0x3c>
  3c:	af e6       	ldi	r26, 0x6F	; 111
  3e:	b0 e0       	ldi	r27, 0x00	; 0
  40:	ef e6       	ldi	r30, 0x6F	; 111
  42:	f0 e0       	ldi	r31, 0x00	; 0
  44:	80 81       	ld	r24, Z
  46:	8d 7f       	andi	r24, 0xFD	; 253
  48:	8c 93       	st	X, r24
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_Z12disableTimerh+0x4c>
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  4c:	a0 e7       	ldi	r26, 0x70	; 112
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	e0 e7       	ldi	r30, 0x70	; 112
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	80 81       	ld	r24, Z
  56:	8d 7f       	andi	r24, 0xFD	; 253
  58:	8c 93       	st	X, r24
  5a:	e0 eb       	ldi	r30, 0xB0	; 176
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	81 e0       	ldi	r24, 0x01	; 1
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  60:	80 83       	st	Z, r24
  62:	a1 eb       	ldi	r26, 0xB1	; 177
  64:	b0 e0       	ldi	r27, 0x00	; 0
    if (tone_pins[i] == 255) {
  66:	e1 eb       	ldi	r30, 0xB1	; 177
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	88 7f       	andi	r24, 0xF8	; 248
  6e:	84 60       	ori	r24, 0x04	; 4
  70:	8c 93       	st	X, r24
  72:	e3 eb       	ldi	r30, 0xB3	; 179
  74:	f0 e0       	ldi	r31, 0x00	; 0
      tone_pins[i] = _pin;
  76:	10 82       	st	Z, r1
  78:	0f 90       	pop	r0
  7a:	0f 90       	pop	r0
  7c:	0f 90       	pop	r0
  7e:	cf 91       	pop	r28
  80:	df 91       	pop	r29
  82:	08 95       	ret

Disassembly of section .text._Z6noToneh:

00000000 <_Z6noToneh>:

#endif



static int8_t toneBegin(uint8_t _pin)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8f 83       	std	Y+7, r24	; 0x07
{
  int8_t _timer = -1;
  16:	8f ef       	ldi	r24, 0xFF	; 255
  18:	8e 83       	std	Y+6, r24	; 0x06

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  1a:	1d 82       	std	Y+5, r1	; 0x05
  1c:	1c 82       	std	Y+4, r1	; 0x04
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_Z6noToneh+0x20>
    if (tone_pins[i] == _pin) {
  20:	8c 81       	ldd	r24, Y+4	; 0x04
  22:	9d 81       	ldd	r25, Y+5	; 0x05
  24:	fc 01       	movw	r30, r24
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	90 81       	ld	r25, Z
  2c:	8f 81       	ldd	r24, Y+7	; 0x07
  2e:	98 17       	cp	r25, r24
  30:	01 f4       	brne	.+0      	; 0x32 <_Z6noToneh+0x32>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  32:	8c 81       	ldd	r24, Y+4	; 0x04
  34:	9d 81       	ldd	r25, Y+5	; 0x05
  36:	80 50       	subi	r24, 0x00	; 0
  38:	90 40       	sbci	r25, 0x00	; 0
  3a:	9b 83       	std	Y+3, r25	; 0x03
  3c:	8a 83       	std	Y+2, r24	; 0x02
  3e:	ea 81       	ldd	r30, Y+2	; 0x02
  40:	fb 81       	ldd	r31, Y+3	; 0x03
  42:	84 91       	lpm	r24, Z+
  44:	89 83       	std	Y+1, r24	; 0x01
  46:	89 81       	ldd	r24, Y+1	; 0x01
  48:	8e 83       	std	Y+6, r24	; 0x06
  4a:	8c 81       	ldd	r24, Y+4	; 0x04
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  4c:	9d 81       	ldd	r25, Y+5	; 0x05
  4e:	fc 01       	movw	r30, r24
  50:	e0 50       	subi	r30, 0x00	; 0
  52:	f0 40       	sbci	r31, 0x00	; 0
  54:	8f ef       	ldi	r24, 0xFF	; 255
  56:	80 83       	st	Z, r24
  58:	8c 81       	ldd	r24, Y+4	; 0x04
  5a:	9d 81       	ldd	r25, Y+5	; 0x05
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	9d 83       	std	Y+5, r25	; 0x05
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  60:	8c 83       	std	Y+4, r24	; 0x04
  62:	8c 81       	ldd	r24, Y+4	; 0x04
  64:	9d 81       	ldd	r25, Y+5	; 0x05
    if (tone_pins[i] == 255) {
  66:	18 16       	cp	r1, r24
  68:	19 06       	cpc	r1, r25
  6a:	04 f4       	brge	.+0      	; 0x6c <_Z6noToneh+0x6c>
  6c:	8e 81       	ldd	r24, Y+6	; 0x06
  6e:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
  72:	8f 81       	ldd	r24, Y+7	; 0x07
  74:	60 e0       	ldi	r22, 0x00	; 0
      tone_pins[i] = _pin;
  76:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
  7a:	27 96       	adiw	r28, 0x07	; 7
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	f8 94       	cli
  80:	de bf       	out	0x3e, r29	; 62
  82:	0f be       	out	0x3f, r0	; 63
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  84:	cd bf       	out	0x3d, r28	; 61
  86:	cf 91       	pop	r28
  88:	df 91       	pop	r29
  8a:	08 95       	ret

Disassembly of section .text.__vector_7:

00000000 <__vector_7>:

#endif



static int8_t toneBegin(uint8_t _pin)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
{
  int8_t _timer = -1;
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
    if (tone_pins[i] == _pin) {
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	00 d0       	rcall	.+0      	; 0x28 <__vector_7+0x28>
  28:	cd b7       	in	r28, 0x3d	; 61
  2a:	de b7       	in	r29, 0x3e	; 62
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 91 00 00 	lds	r25, 0x0000
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  34:	a0 91 00 00 	lds	r26, 0x0000
  38:	b0 91 00 00 	lds	r27, 0x0000
  3c:	1a 82       	std	Y+2, r1	; 0x02
  3e:	00 97       	sbiw	r24, 0x00	; 0
  40:	a1 05       	cpc	r26, r1
  42:	b1 05       	cpc	r27, r1
  44:	01 f0       	breq	.+0      	; 0x46 <__vector_7+0x46>
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	8a 83       	std	Y+2, r24	; 0x02
  4a:	8a 81       	ldd	r24, Y+2	; 0x02
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  4c:	88 23       	and	r24, r24
  4e:	01 f0       	breq	.+0      	; 0x50 <__vector_7+0x50>
  50:	a0 91 00 00 	lds	r26, 0x0000
  54:	b0 91 00 00 	lds	r27, 0x0000
  58:	e0 91 00 00 	lds	r30, 0x0000
  5c:	f0 91 00 00 	lds	r31, 0x0000
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  60:	90 81       	ld	r25, Z
  62:	80 91 00 00 	lds	r24, 0x0000
    if (tone_pins[i] == 255) {
  66:	89 27       	eor	r24, r25
  68:	8c 93       	st	X, r24
  6a:	80 91 00 00 	lds	r24, 0x0000
  6e:	90 91 00 00 	lds	r25, 0x0000
  72:	a0 91 00 00 	lds	r26, 0x0000
      tone_pins[i] = _pin;
  76:	b0 91 00 00 	lds	r27, 0x0000
  7a:	19 82       	std	Y+1, r1	; 0x01
  7c:	18 16       	cp	r1, r24
  7e:	19 06       	cpc	r1, r25
  80:	1a 06       	cpc	r1, r26
  82:	1b 06       	cpc	r1, r27
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  84:	04 f4       	brge	.+0      	; 0x86 <__vector_7+0x86>
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	89 83       	std	Y+1, r24	; 0x01
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	88 23       	and	r24, r24
  8e:	01 f0       	breq	.+0      	; 0x90 <__vector_7+0x90>
  90:	80 91 00 00 	lds	r24, 0x0000
  94:	90 91 00 00 	lds	r25, 0x0000
  98:	a0 91 00 00 	lds	r26, 0x0000
  9c:	b0 91 00 00 	lds	r27, 0x0000
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	a1 09       	sbc	r26, r1
  a4:	b1 09       	sbc	r27, r1
  a6:	80 93 00 00 	sts	0x0000, r24
  aa:	90 93 00 00 	sts	0x0000, r25
  ae:	a0 93 00 00 	sts	0x0000, r26
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      break;
    }
  }
  
  if (_timer != -1)
  b2:	b0 93 00 00 	sts	0x0000, r27
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <__vector_7+0xb8>
  b8:	80 91 00 00 	lds	r24, 0x0000
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  bc:	0e 94 00 00 	call	0	; 0x0 <__vector_7>
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
        TCCR0B = 0;
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
        bitWrite(TCCR0A, WGM01, 1);
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:

#endif



static int8_t toneBegin(uint8_t _pin)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	65 97       	sbiw	r28, 0x15	; 21
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8b 87       	std	Y+11, r24	; 0x0b
{
  int8_t _timer = -1;
  16:	7d 87       	std	Y+13, r23	; 0x0d
  18:	6c 87       	std	Y+12, r22	; 0x0c

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  1a:	2e 87       	std	Y+14, r18	; 0x0e
  1c:	3f 87       	std	Y+15, r19	; 0x0f
  1e:	48 8b       	std	Y+16, r20	; 0x10
    if (tone_pins[i] == _pin) {
  20:	59 8b       	std	Y+17, r21	; 0x11
  22:	81 e0       	ldi	r24, 0x01	; 1
  24:	8a 87       	std	Y+10, r24	; 0x0a
  26:	1e 82       	std	Y+6, r1	; 0x06
  28:	1f 82       	std	Y+7, r1	; 0x07
  2a:	18 86       	std	Y+8, r1	; 0x08
  2c:	19 86       	std	Y+9, r1	; 0x09
  2e:	1a 82       	std	Y+2, r1	; 0x02
  30:	1b 82       	std	Y+3, r1	; 0x03
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  32:	1c 82       	std	Y+4, r1	; 0x04
  34:	1d 82       	std	Y+5, r1	; 0x05
  36:	8b 85       	ldd	r24, Y+11	; 0x0b
  38:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
  3c:	89 83       	std	Y+1, r24	; 0x01
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	88 23       	and	r24, r24
  42:	04 f4       	brge	.+0      	; 0x44 <_Z4tonehjm+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_Z4tonehjm+0x46>
  46:	8b 85       	ldd	r24, Y+11	; 0x0b
  48:	61 e0       	ldi	r22, 0x01	; 1
  4a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  4e:	89 81       	ldd	r24, Y+1	; 0x01
  50:	88 23       	and	r24, r24
  52:	01 f0       	breq	.+0      	; 0x54 <_Z4tonehjm+0x54>
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	82 30       	cpi	r24, 0x02	; 2
  58:	01 f0       	breq	.+0      	; 0x5a <_Z4tonehjm+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_Z4tonehjm+0x5c>
  5c:	8c 85       	ldd	r24, Y+12	; 0x0c
  5e:	9d 85       	ldd	r25, Y+13	; 0x0d
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  60:	9c 01       	movw	r18, r24
  62:	40 e0       	ldi	r20, 0x00	; 0
  64:	50 e0       	ldi	r21, 0x00	; 0
    if (tone_pins[i] == 255) {
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	92 e1       	ldi	r25, 0x12	; 18
  6a:	aa e7       	ldi	r26, 0x7A	; 122
  6c:	b0 e0       	ldi	r27, 0x00	; 0
  6e:	bc 01       	movw	r22, r24
  70:	cd 01       	movw	r24, r26
  72:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
      tone_pins[i] = _pin;
  76:	da 01       	movw	r26, r20
  78:	c9 01       	movw	r24, r18
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	a1 09       	sbc	r26, r1
  7e:	b1 09       	sbc	r27, r1
  80:	8a 83       	std	Y+2, r24	; 0x02
  82:	9b 83       	std	Y+3, r25	; 0x03
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  84:	ac 83       	std	Y+4, r26	; 0x04
  86:	bd 83       	std	Y+5, r27	; 0x05
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	8a 87       	std	Y+10, r24	; 0x0a
  8c:	8a 81       	ldd	r24, Y+2	; 0x02
  8e:	9b 81       	ldd	r25, Y+3	; 0x03
  90:	ac 81       	ldd	r26, Y+4	; 0x04
  92:	bd 81       	ldd	r27, Y+5	; 0x05
  94:	8f 3f       	cpi	r24, 0xFF	; 255
  96:	91 05       	cpc	r25, r1
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	01 f0       	breq	.+0      	; 0x9e <_Z4tonehjm+0x9e>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  9e:	00 f4       	brcc	.+0      	; 0xa0 <_Z4tonehjm+0xa0>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_Z4tonehjm+0xa2>
  a2:	8c 85       	ldd	r24, Y+12	; 0x0c
  a4:	9d 85       	ldd	r25, Y+13	; 0x0d
  a6:	9c 01       	movw	r18, r24
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	80 e4       	ldi	r24, 0x40	; 64
  ae:	92 e4       	ldi	r25, 0x42	; 66
  b0:	af e0       	ldi	r26, 0x0F	; 15
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      break;
    }
  }
  
  if (_timer != -1)
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	bc 01       	movw	r22, r24
  b6:	cd 01       	movw	r24, r26
  b8:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  bc:	da 01       	movw	r26, r20
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	a1 09       	sbc	r26, r1
  c4:	b1 09       	sbc	r27, r1
  c6:	8a 83       	std	Y+2, r24	; 0x02
  c8:	9b 83       	std	Y+3, r25	; 0x03
  ca:	ac 83       	std	Y+4, r26	; 0x04
  cc:	bd 83       	std	Y+5, r27	; 0x05
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	8a 87       	std	Y+10, r24	; 0x0a
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	82 30       	cpi	r24, 0x02	; 2
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  d6:	01 f4       	brne	.+0      	; 0xd8 <_Z4tonehjm+0xd8>
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	9b 81       	ldd	r25, Y+3	; 0x03
        TCCR0B = 0;
  dc:	ac 81       	ldd	r26, Y+4	; 0x04
  de:	bd 81       	ldd	r27, Y+5	; 0x05
  e0:	8f 3f       	cpi	r24, 0xFF	; 255
        bitWrite(TCCR0A, WGM01, 1);
  e2:	91 05       	cpc	r25, r1
  e4:	a1 05       	cpc	r26, r1
  e6:	b1 05       	cpc	r27, r1
  e8:	01 f0       	breq	.+0      	; 0xea <_Z4tonehjm+0xea>
  ea:	00 f0       	brcs	.+0      	; 0xec <_Z4tonehjm+0xec>
  ec:	8c 85       	ldd	r24, Y+12	; 0x0c
  ee:	9d 85       	ldd	r25, Y+13	; 0x0d
        bitWrite(TCCR0B, CS00, 1);
  f0:	9c 01       	movw	r18, r24
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	80 e9       	ldi	r24, 0x90	; 144
  f8:	90 ed       	ldi	r25, 0xD0	; 208
  fa:	a3 e0       	ldi	r26, 0x03	; 3
  fc:	b0 e0       	ldi	r27, 0x00	; 0
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
  fe:	bc 01       	movw	r22, r24
 100:	cd 01       	movw	r24, r26
 102:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 106:	da 01       	movw	r26, r20
 108:	c9 01       	movw	r24, r18
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	a1 09       	sbc	r26, r1
 10e:	b1 09       	sbc	r27, r1
 110:	8a 83       	std	Y+2, r24	; 0x02
 112:	9b 83       	std	Y+3, r25	; 0x03
 114:	ac 83       	std	Y+4, r26	; 0x04
 116:	bd 83       	std	Y+5, r27	; 0x05
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	8a 87       	std	Y+10, r24	; 0x0a
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	9b 81       	ldd	r25, Y+3	; 0x03
 120:	ac 81       	ldd	r26, Y+4	; 0x04
 122:	bd 81       	ldd	r27, Y+5	; 0x05
 124:	8f 3f       	cpi	r24, 0xFF	; 255
 126:	91 05       	cpc	r25, r1
 128:	a1 05       	cpc	r26, r1
 12a:	b1 05       	cpc	r27, r1
 12c:	01 f0       	breq	.+0      	; 0x12e <_Z4tonehjm+0x12e>
 12e:	00 f4       	brcc	.+0      	; 0x130 <_Z4tonehjm+0x130>
 130:	00 c0       	rjmp	.+0      	; 0x132 <_Z4tonehjm+0x132>
 132:	8c 85       	ldd	r24, Y+12	; 0x0c
 134:	9d 85       	ldd	r25, Y+13	; 0x0d
 136:	9c 01       	movw	r18, r24
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	88 e4       	ldi	r24, 0x48	; 72
 13e:	98 ee       	ldi	r25, 0xE8	; 232
 140:	a1 e0       	ldi	r26, 0x01	; 1
 142:	b0 e0       	ldi	r27, 0x00	; 0
        timer0_pin_mask = digitalPinToBitMask(_pin);
 144:	bc 01       	movw	r22, r24
 146:	cd 01       	movw	r24, r26
 148:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 14c:	da 01       	movw	r26, r20
 14e:	c9 01       	movw	r24, r18
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	a1 09       	sbc	r26, r1
 154:	b1 09       	sbc	r27, r1
 156:	8a 83       	std	Y+2, r24	; 0x02
 158:	9b 83       	std	Y+3, r25	; 0x03
 15a:	ac 83       	std	Y+4, r26	; 0x04
 15c:	bd 83       	std	Y+5, r27	; 0x05
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	88 23       	and	r24, r24
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
 162:	01 f4       	brne	.+0      	; 0x164 <_Z4tonehjm+0x164>
 164:	23 e0       	ldi	r18, 0x03	; 3
 166:	2c 8b       	std	Y+20, r18	; 0x14
        TCCR1B = 0;
 168:	00 c0       	rjmp	.+0      	; 0x16a <_Z4tonehjm+0x16a>
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	8c 8b       	std	Y+20, r24	; 0x14
        bitWrite(TCCR1B, WGM12, 1);
 16e:	2c 89       	ldd	r18, Y+20	; 0x14
 170:	2a 87       	std	Y+10, r18	; 0x0a
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	01 f4       	brne	.+0      	; 0x178 <_Z4tonehjm+0x178>
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	9b 81       	ldd	r25, Y+3	; 0x03
        bitWrite(TCCR1B, CS10, 1);
 17c:	ac 81       	ldd	r26, Y+4	; 0x04
 17e:	bd 81       	ldd	r27, Y+5	; 0x05
 180:	8f 3f       	cpi	r24, 0xFF	; 255
 182:	91 05       	cpc	r25, r1
 184:	a1 05       	cpc	r26, r1
 186:	b1 05       	cpc	r27, r1
 188:	01 f0       	breq	.+0      	; 0x18a <_Z4tonehjm+0x18a>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
 18a:	00 f0       	brcs	.+0      	; 0x18c <_Z4tonehjm+0x18c>
 18c:	8c 85       	ldd	r24, Y+12	; 0x0c
 18e:	9d 85       	ldd	r25, Y+13	; 0x0d
 190:	9c 01       	movw	r18, r24
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	84 e2       	ldi	r24, 0x24	; 36
 198:	94 ef       	ldi	r25, 0xF4	; 244
 19a:	a0 e0       	ldi	r26, 0x00	; 0
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	bc 01       	movw	r22, r24
 1a0:	cd 01       	movw	r24, r26
 1a2:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1a6:	da 01       	movw	r26, r20
 1a8:	c9 01       	movw	r24, r18
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	a1 09       	sbc	r26, r1
 1ae:	b1 09       	sbc	r27, r1
 1b0:	8a 83       	std	Y+2, r24	; 0x02
 1b2:	9b 83       	std	Y+3, r25	; 0x03
 1b4:	ac 83       	std	Y+4, r26	; 0x04
 1b6:	bd 83       	std	Y+5, r27	; 0x05
 1b8:	85 e0       	ldi	r24, 0x05	; 5
 1ba:	8a 87       	std	Y+10, r24	; 0x0a
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	9b 81       	ldd	r25, Y+3	; 0x03
 1c0:	ac 81       	ldd	r26, Y+4	; 0x04
 1c2:	bd 81       	ldd	r27, Y+5	; 0x05
 1c4:	8f 3f       	cpi	r24, 0xFF	; 255
 1c6:	91 05       	cpc	r25, r1
 1c8:	a1 05       	cpc	r26, r1
 1ca:	b1 05       	cpc	r27, r1
 1cc:	01 f0       	breq	.+0      	; 0x1ce <_Z4tonehjm+0x1ce>
 1ce:	00 f4       	brcc	.+0      	; 0x1d0 <_Z4tonehjm+0x1d0>
        timer1_pin_mask = digitalPinToBitMask(_pin);
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_Z4tonehjm+0x1d2>
 1d2:	8c 85       	ldd	r24, Y+12	; 0x0c
 1d4:	9d 85       	ldd	r25, Y+13	; 0x0d
 1d6:	9c 01       	movw	r18, r24
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	82 e1       	ldi	r24, 0x12	; 18
 1de:	9a e7       	ldi	r25, 0x7A	; 122
 1e0:	a0 e0       	ldi	r26, 0x00	; 0
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	bc 01       	movw	r22, r24
 1e6:	cd 01       	movw	r24, r26
 1e8:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1ec:	da 01       	movw	r26, r20
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
 1ee:	c9 01       	movw	r24, r18
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	a1 09       	sbc	r26, r1
        TCCR2B = 0;
 1f4:	b1 09       	sbc	r27, r1
 1f6:	8a 83       	std	Y+2, r24	; 0x02
 1f8:	9b 83       	std	Y+3, r25	; 0x03
        bitWrite(TCCR2A, WGM21, 1);
 1fa:	ac 83       	std	Y+4, r26	; 0x04
 1fc:	bd 83       	std	Y+5, r27	; 0x05
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	88 23       	and	r24, r24
 202:	01 f4       	brne	.+0      	; 0x204 <_Z4tonehjm+0x204>
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	8b 8b       	std	Y+19, r24	; 0x13
        bitWrite(TCCR2B, CS20, 1);
 208:	00 c0       	rjmp	.+0      	; 0x20a <_Z4tonehjm+0x20a>
 20a:	26 e0       	ldi	r18, 0x06	; 6
 20c:	2b 8b       	std	Y+19, r18	; 0x13
 20e:	8b 89       	ldd	r24, Y+19	; 0x13
 210:	8a 87       	std	Y+10, r24	; 0x0a
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	9b 81       	ldd	r25, Y+3	; 0x03
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 216:	ac 81       	ldd	r26, Y+4	; 0x04
 218:	bd 81       	ldd	r27, Y+5	; 0x05
 21a:	8f 3f       	cpi	r24, 0xFF	; 255
 21c:	91 05       	cpc	r25, r1
 21e:	a1 05       	cpc	r26, r1
 220:	b1 05       	cpc	r27, r1
 222:	01 f0       	breq	.+0      	; 0x224 <_Z4tonehjm+0x224>
 224:	00 f0       	brcs	.+0      	; 0x226 <_Z4tonehjm+0x226>
 226:	8c 85       	ldd	r24, Y+12	; 0x0c
 228:	9d 85       	ldd	r25, Y+13	; 0x0d
 22a:	9c 01       	movw	r18, r24
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	92 e1       	ldi	r25, 0x12	; 18
 234:	aa e7       	ldi	r26, 0x7A	; 122
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	bc 01       	movw	r22, r24
 23a:	cd 01       	movw	r24, r26
 23c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 240:	da 01       	movw	r26, r20
 242:	c9 01       	movw	r24, r18
 244:	07 2e       	mov	r0, r23
 246:	7a e0       	ldi	r23, 0x0A	; 10
 248:	b6 95       	lsr	r27
 24a:	a7 95       	ror	r26
 24c:	97 95       	ror	r25
 24e:	87 95       	ror	r24
 250:	7a 95       	dec	r23
 252:	01 f4       	brne	.+0      	; 0x254 <_Z4tonehjm+0x254>
 254:	70 2d       	mov	r23, r0
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	a1 09       	sbc	r26, r1
 25a:	b1 09       	sbc	r27, r1
        timer2_pin_mask = digitalPinToBitMask(_pin);
 25c:	8a 83       	std	Y+2, r24	; 0x02
 25e:	9b 83       	std	Y+3, r25	; 0x03
 260:	ac 83       	std	Y+4, r26	; 0x04
 262:	bd 83       	std	Y+5, r27	; 0x05
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 23       	and	r24, r24
 268:	01 f4       	brne	.+0      	; 0x26a <_Z4tonehjm+0x26a>
 26a:	25 e0       	ldi	r18, 0x05	; 5
 26c:	2a 8b       	std	Y+18, r18	; 0x12
 26e:	00 c0       	rjmp	.+0      	; 0x270 <_Z4tonehjm+0x270>
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	8a 8b       	std	Y+18, r24	; 0x12
 274:	2a 89       	ldd	r18, Y+18	; 0x12
 276:	2a 87       	std	Y+10, r18	; 0x0a
        break;
      #endif
    }
  }

  return _timer;
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	88 23       	and	r24, r24
 27c:	01 f4       	brne	.+0      	; 0x27e <_Z4tonehjm+0x27e>
}
 27e:	e5 e4       	ldi	r30, 0x45	; 69
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	8a 85       	ldd	r24, Y+10	; 0x0a
 284:	80 83       	st	Z, r24
 286:	00 c0       	rjmp	.+0      	; 0x288 <_Z4tonehjm+0x288>
 288:	e1 eb       	ldi	r30, 0xB1	; 177
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	8a 85       	ldd	r24, Y+10	; 0x0a
 28e:	80 83       	st	Z, r24
 290:	00 c0       	rjmp	.+0      	; 0x292 <_Z4tonehjm+0x292>
 292:	8c 85       	ldd	r24, Y+12	; 0x0c
 294:	9d 85       	ldd	r25, Y+13	; 0x0d
 296:	9c 01       	movw	r18, r24
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	92 e1       	ldi	r25, 0x12	; 18
 2a0:	aa e7       	ldi	r26, 0x7A	; 122
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	bc 01       	movw	r22, r24
 2a6:	cd 01       	movw	r24, r26
 2a8:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2ac:	da 01       	movw	r26, r20
 2ae:	c9 01       	movw	r24, r18
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	a1 09       	sbc	r26, r1
 2b4:	b1 09       	sbc	r27, r1
 2b6:	8a 83       	std	Y+2, r24	; 0x02
 2b8:	9b 83       	std	Y+3, r25	; 0x03
 2ba:	ac 83       	std	Y+4, r26	; 0x04
 2bc:	bd 83       	std	Y+5, r27	; 0x05
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	8a 87       	std	Y+10, r24	; 0x0a
 2c2:	8a 81       	ldd	r24, Y+2	; 0x02
 2c4:	9b 81       	ldd	r25, Y+3	; 0x03
 2c6:	ac 81       	ldd	r26, Y+4	; 0x04
 2c8:	bd 81       	ldd	r27, Y+5	; 0x05
 2ca:	80 30       	cpi	r24, 0x00	; 0
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	92 07       	cpc	r25, r18
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	a2 07       	cpc	r26, r18
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	b2 07       	cpc	r27, r18
 2d8:	00 f0       	brcs	.+0      	; 0x2da <_Z4tonehjm+0x2da>
 2da:	8c 85       	ldd	r24, Y+12	; 0x0c
 2dc:	9d 85       	ldd	r25, Y+13	; 0x0d
 2de:	9c 01       	movw	r18, r24
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	88 e4       	ldi	r24, 0x48	; 72
 2e6:	98 ee       	ldi	r25, 0xE8	; 232
 2e8:	a1 e0       	ldi	r26, 0x01	; 1
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	bc 01       	movw	r22, r24
 2ee:	cd 01       	movw	r24, r26
 2f0:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2f4:	da 01       	movw	r26, r20
 2f6:	c9 01       	movw	r24, r18
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	a1 09       	sbc	r26, r1
 2fc:	b1 09       	sbc	r27, r1
 2fe:	8a 83       	std	Y+2, r24	; 0x02
 300:	9b 83       	std	Y+3, r25	; 0x03
 302:	ac 83       	std	Y+4, r26	; 0x04
 304:	bd 83       	std	Y+5, r27	; 0x05
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	8a 87       	std	Y+10, r24	; 0x0a
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	01 f4       	brne	.+0      	; 0x310 <_Z4tonehjm+0x310>
 310:	a1 e8       	ldi	r26, 0x81	; 129
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	e1 e8       	ldi	r30, 0x81	; 129
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	98 2f       	mov	r25, r24
 31c:	98 7f       	andi	r25, 0xF8	; 248
 31e:	8a 85       	ldd	r24, Y+10	; 0x0a
 320:	89 2b       	or	r24, r25
 322:	8c 93       	st	X, r24
 324:	8e 85       	ldd	r24, Y+14	; 0x0e
 326:	9f 85       	ldd	r25, Y+15	; 0x0f
 328:	a8 89       	ldd	r26, Y+16	; 0x10
 32a:	b9 89       	ldd	r27, Y+17	; 0x11
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	a1 05       	cpc	r26, r1
 330:	b1 05       	cpc	r27, r1
 332:	01 f0       	breq	.+0      	; 0x334 <_Z4tonehjm+0x334>
 334:	8c 85       	ldd	r24, Y+12	; 0x0c
 336:	9d 85       	ldd	r25, Y+13	; 0x0d
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	cc 01       	movw	r24, r24
 33e:	a0 e0       	ldi	r26, 0x00	; 0
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	2e 85       	ldd	r18, Y+14	; 0x0e
 344:	3f 85       	ldd	r19, Y+15	; 0x0f
 346:	48 89       	ldd	r20, Y+16	; 0x10
 348:	59 89       	ldd	r21, Y+17	; 0x11
 34a:	bc 01       	movw	r22, r24
 34c:	cd 01       	movw	r24, r26
 34e:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 352:	dc 01       	movw	r26, r24
 354:	cb 01       	movw	r24, r22
 356:	28 ee       	ldi	r18, 0xE8	; 232
 358:	33 e0       	ldi	r19, 0x03	; 3
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	bc 01       	movw	r22, r24
 360:	cd 01       	movw	r24, r26
 362:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 366:	da 01       	movw	r26, r20
 368:	c9 01       	movw	r24, r18
 36a:	8e 83       	std	Y+6, r24	; 0x06
 36c:	9f 83       	std	Y+7, r25	; 0x07
 36e:	a8 87       	std	Y+8, r26	; 0x08
 370:	b9 87       	std	Y+9, r27	; 0x09
 372:	00 c0       	rjmp	.+0      	; 0x374 <_Z4tonehjm+0x374>
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	9f ef       	ldi	r25, 0xFF	; 255
 378:	af ef       	ldi	r26, 0xFF	; 255
 37a:	bf ef       	ldi	r27, 0xFF	; 255
 37c:	8e 83       	std	Y+6, r24	; 0x06
 37e:	9f 83       	std	Y+7, r25	; 0x07
 380:	a8 87       	std	Y+8, r26	; 0x08
 382:	b9 87       	std	Y+9, r27	; 0x09
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	8d 8b       	std	Y+21, r24	; 0x15
 388:	2d 89       	ldd	r18, Y+21	; 0x15
 38a:	21 30       	cpi	r18, 0x01	; 1
 38c:	01 f0       	breq	.+0      	; 0x38e <_Z4tonehjm+0x38e>
 38e:	8d 89       	ldd	r24, Y+21	; 0x15
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	01 f0       	breq	.+0      	; 0x394 <_Z4tonehjm+0x394>
 394:	2d 89       	ldd	r18, Y+21	; 0x15
 396:	22 23       	and	r18, r18
 398:	01 f0       	breq	.+0      	; 0x39a <_Z4tonehjm+0x39a>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <_Z4tonehjm+0x39c>
 39c:	e7 e4       	ldi	r30, 0x47	; 71
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	80 83       	st	Z, r24
 3a4:	8e 81       	ldd	r24, Y+6	; 0x06
 3a6:	9f 81       	ldd	r25, Y+7	; 0x07
 3a8:	a8 85       	ldd	r26, Y+8	; 0x08
 3aa:	b9 85       	ldd	r27, Y+9	; 0x09
 3ac:	80 93 00 00 	sts	0x0000, r24
 3b0:	90 93 00 00 	sts	0x0000, r25
 3b4:	a0 93 00 00 	sts	0x0000, r26
 3b8:	b0 93 00 00 	sts	0x0000, r27
 3bc:	ae e6       	ldi	r26, 0x6E	; 110
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	ee e6       	ldi	r30, 0x6E	; 110
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	8c 93       	st	X, r24
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <_Z4tonehjm+0x3cc>
 3cc:	e8 e8       	ldi	r30, 0x88	; 136
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	9b 81       	ldd	r25, Y+3	; 0x03
 3d4:	91 83       	std	Z+1, r25	; 0x01
 3d6:	80 83       	st	Z, r24
 3d8:	8e 81       	ldd	r24, Y+6	; 0x06
 3da:	9f 81       	ldd	r25, Y+7	; 0x07
 3dc:	a8 85       	ldd	r26, Y+8	; 0x08
 3de:	b9 85       	ldd	r27, Y+9	; 0x09
 3e0:	80 93 00 00 	sts	0x0000, r24
 3e4:	90 93 00 00 	sts	0x0000, r25
 3e8:	a0 93 00 00 	sts	0x0000, r26
 3ec:	b0 93 00 00 	sts	0x0000, r27
 3f0:	af e6       	ldi	r26, 0x6F	; 111
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	ef e6       	ldi	r30, 0x6F	; 111
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	8c 93       	st	X, r24
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <_Z4tonehjm+0x400>
 400:	e3 eb       	ldi	r30, 0xB3	; 179
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	8a 81       	ldd	r24, Y+2	; 0x02
 406:	80 83       	st	Z, r24
 408:	8e 81       	ldd	r24, Y+6	; 0x06
 40a:	9f 81       	ldd	r25, Y+7	; 0x07
 40c:	a8 85       	ldd	r26, Y+8	; 0x08
 40e:	b9 85       	ldd	r27, Y+9	; 0x09
 410:	80 93 00 00 	sts	0x0000, r24
 414:	90 93 00 00 	sts	0x0000, r25
 418:	a0 93 00 00 	sts	0x0000, r26
 41c:	b0 93 00 00 	sts	0x0000, r27
 420:	a0 e7       	ldi	r26, 0x70	; 112
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e0 e7       	ldi	r30, 0x70	; 112
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	82 60       	ori	r24, 0x02	; 2
 42c:	8c 93       	st	X, r24
 42e:	65 96       	adiw	r28, 0x15	; 21
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	cf 91       	pop	r28
 43c:	df 91       	pop	r29
 43e:	08 95       	ret

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000570  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cab  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d2a  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .rodata.SS    00000001  00000000  00000000  0000142a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rodata.MOSI  00000001  00000000  00000000  0000142b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata.MISO  00000001  00000000  00000000  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata.SCK   00000001  00000000  00000000  0000142d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata.SDA   00000001  00000000  00000000  0000142e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rodata.SCL   00000001  00000000  00000000  0000142f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .rodata.LED_BUILTIN 00000001  00000000  00000000  00001430  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .rodata.A0    00000001  00000000  00000000  00001431  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .rodata.A1    00000001  00000000  00000000  00001432  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .rodata.A2    00000001  00000000  00000000  00001433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .rodata.A3    00000001  00000000  00000000  00001434  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .rodata.A4    00000001  00000000  00000000  00001435  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .rodata.A5    00000001  00000000  00000000  00001436  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .rodata.A6    00000001  00000000  00000000  00001437  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .rodata.A7    00000001  00000000  00000000  00001438  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .text.attachInterrupt 000000be  00000000  00000000  00001439  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.detachInterrupt 00000070  00000000  00000000  000014f7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.__vector_1 00000066  00000000  00000000  00001567  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.__vector_2 00000066  00000000  00000000  000015cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .bss.intFunc  00000004  00000000  00000000  00001633  2**0
                  ALLOC

Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:
#include "wiring_private.h"

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	7b 83       	std	Y+3, r23	; 0x03
  18:	6a 83       	std	Y+2, r22	; 0x02
  1a:	5d 83       	std	Y+5, r21	; 0x05
  1c:	4c 83       	std	Y+4, r20	; 0x04
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	82 30       	cpi	r24, 0x02	; 2
  22:	00 f0       	brcs	.+0      	; 0x24 <attachInterrupt+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <attachInterrupt+0x26>
    intFunc[interruptNum] = userFunc;
  26:	89 81       	ldd	r24, Y+1	; 0x01
  28:	88 2f       	mov	r24, r24
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	88 0f       	add	r24, r24
  2e:	99 1f       	adc	r25, r25
  30:	fc 01       	movw	r30, r24
  32:	e0 50       	subi	r30, 0x00	; 0
  34:	f0 40       	sbci	r31, 0x00	; 0
  36:	8a 81       	ldd	r24, Y+2	; 0x02
  38:	9b 81       	ldd	r25, Y+3	; 0x03
  3a:	91 83       	std	Z+1, r25	; 0x01
  3c:	80 83       	st	Z, r24
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	28 2f       	mov	r18, r24
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	3f 83       	std	Y+7, r19	; 0x07
  46:	2e 83       	std	Y+6, r18	; 0x06
  48:	8e 81       	ldd	r24, Y+6	; 0x06
  4a:	9f 81       	ldd	r25, Y+7	; 0x07
  4c:	00 97       	sbiw	r24, 0x00	; 0
  4e:	01 f0       	breq	.+0      	; 0x50 <attachInterrupt+0x50>
  50:	2e 81       	ldd	r18, Y+6	; 0x06
  52:	3f 81       	ldd	r19, Y+7	; 0x07
  54:	21 30       	cpi	r18, 0x01	; 1
  56:	31 05       	cpc	r19, r1
  58:	01 f0       	breq	.+0      	; 0x5a <attachInterrupt+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <attachInterrupt+0x5c>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  5c:	a9 e6       	ldi	r26, 0x69	; 105
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	e9 e6       	ldi	r30, 0x69	; 105
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	98 2f       	mov	r25, r24
  68:	9c 7f       	andi	r25, 0xFC	; 252
  6a:	8c 81       	ldd	r24, Y+4	; 0x04
  6c:	89 2b       	or	r24, r25
  6e:	8c 93       	st	X, r24
      EIMSK |= (1 << INT0);
  70:	ad e3       	ldi	r26, 0x3D	; 61
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ed e3       	ldi	r30, 0x3D	; 61
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 81       	ld	r24, Z
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	8c 93       	st	X, r24
  7e:	00 c0       	rjmp	.+0      	; 0x80 <attachInterrupt+0x80>
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
  80:	a9 e6       	ldi	r26, 0x69	; 105
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e9 e6       	ldi	r30, 0x69	; 105
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	28 2f       	mov	r18, r24
  8c:	23 7f       	andi	r18, 0xF3	; 243
  8e:	8c 81       	ldd	r24, Y+4	; 0x04
  90:	9d 81       	ldd	r25, Y+5	; 0x05
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	82 2b       	or	r24, r18
  9c:	8c 93       	st	X, r24
      EIMSK |= (1 << INT1);
  9e:	ad e3       	ldi	r26, 0x3D	; 61
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	ed e3       	ldi	r30, 0x3D	; 61
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8c 93       	st	X, r24
    #endif
      break;
#endif
    }
  }
}
  ac:	27 96       	adiw	r28, 0x07	; 7
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

Disassembly of section .text.detachInterrupt:

00000000 <detachInterrupt>:
#include "wiring_private.h"

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <detachInterrupt+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	82 30       	cpi	r24, 0x02	; 2
  12:	00 f4       	brcc	.+0      	; 0x14 <detachInterrupt+0x14>
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	28 2f       	mov	r18, r24
  18:	30 e0       	ldi	r19, 0x00	; 0
  1a:	3b 83       	std	Y+3, r19	; 0x03
  1c:	2a 83       	std	Y+2, r18	; 0x02
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  1e:	8a 81       	ldd	r24, Y+2	; 0x02
  20:	9b 81       	ldd	r25, Y+3	; 0x03
  22:	00 97       	sbiw	r24, 0x00	; 0
  24:	01 f0       	breq	.+0      	; 0x26 <detachInterrupt+0x26>
    intFunc[interruptNum] = userFunc;
  26:	2a 81       	ldd	r18, Y+2	; 0x02
  28:	3b 81       	ldd	r19, Y+3	; 0x03
  2a:	21 30       	cpi	r18, 0x01	; 1
  2c:	31 05       	cpc	r19, r1
  2e:	01 f0       	breq	.+0      	; 0x30 <detachInterrupt+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <detachInterrupt+0x32>
  32:	ad e3       	ldi	r26, 0x3D	; 61
  34:	b0 e0       	ldi	r27, 0x00	; 0
  36:	ed e3       	ldi	r30, 0x3D	; 61
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	80 81       	ld	r24, Z
  3c:	8e 7f       	andi	r24, 0xFE	; 254
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  3e:	8c 93       	st	X, r24
  40:	00 c0       	rjmp	.+0      	; 0x42 <detachInterrupt+0x42>
  42:	ad e3       	ldi	r26, 0x3D	; 61
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	ed e3       	ldi	r30, 0x3D	; 61
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	80 81       	ld	r24, Z
  4c:	8d 7f       	andi	r24, 0xFD	; 253
  4e:	8c 93       	st	X, r24
  50:	89 81       	ldd	r24, Y+1	; 0x01
  52:	88 2f       	mov	r24, r24
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	88 0f       	add	r24, r24
  58:	99 1f       	adc	r25, r25
  5a:	fc 01       	movw	r30, r24
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  5c:	e0 50       	subi	r30, 0x00	; 0
  5e:	f0 40       	sbci	r31, 0x00	; 0
  60:	11 82       	std	Z+1, r1	; 0x01
  62:	10 82       	st	Z, r1
  64:	0f 90       	pop	r0
  66:	0f 90       	pop	r0
  68:	0f 90       	pop	r0
  6a:	cf 91       	pop	r28
  6c:	df 91       	pop	r29
  6e:	08 95       	ret

Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
#include "wiring_private.h"

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
    intFunc[interruptNum] = userFunc;
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_1+0x36>
  36:	e0 91 00 00 	lds	r30, 0x0000
  3a:	f0 91 00 00 	lds	r31, 0x0000
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  3e:	09 95       	icall
  40:	cf 91       	pop	r28
  42:	df 91       	pop	r29
  44:	ff 91       	pop	r31
  46:	ef 91       	pop	r30
  48:	bf 91       	pop	r27
  4a:	af 91       	pop	r26
  4c:	9f 91       	pop	r25
  4e:	8f 91       	pop	r24
  50:	7f 91       	pop	r23
  52:	6f 91       	pop	r22
  54:	5f 91       	pop	r21
  56:	4f 91       	pop	r20
  58:	3f 91       	pop	r19
  5a:	2f 91       	pop	r18
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

Disassembly of section .text.__vector_2:

00000000 <__vector_2>:
#include "wiring_private.h"

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
    intFunc[interruptNum] = userFunc;
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_2+0x36>
  36:	e0 91 00 00 	lds	r30, 0x0000
  3a:	f0 91 00 00 	lds	r31, 0x0000
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  3e:	09 95       	icall
  40:	cf 91       	pop	r28
  42:	df 91       	pop	r29
  44:	ff 91       	pop	r31
  46:	ef 91       	pop	r30
  48:	bf 91       	pop	r27
  4a:	af 91       	pop	r26
  4c:	9f 91       	pop	r25
  4e:	8f 91       	pop	r24
  50:	7f 91       	pop	r23
  52:	6f 91       	pop	r22
  54:	5f 91       	pop	r21
  56:	4f 91       	pop	r20
  58:	3f 91       	pop	r19
  5a:	2f 91       	pop	r18
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000003d8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000005c1  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z3maplllll 000000e2  00000000  00000000  000009cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z8makeWordj 0000001c  00000000  00000000  00000aaf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z8makeWordhh 0000002c  00000000  00000000  00000acb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z6randoml 00000078  00000000  00000000  00000af7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z6randomll 000000d6  00000000  00000000  00000b6f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z10randomSeedj 00000032  00000000  00000000  00000c45  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text._Z3maplllll:

00000000 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	df 93       	push	r29
  12:	cf 93       	push	r28
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	60 97       	sbiw	r28, 0x10	; 16
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	de bf       	out	0x3e, r29	; 62
  20:	0f be       	out	0x3f, r0	; 63
  22:	cd bf       	out	0x3d, r28	; 61
  24:	69 83       	std	Y+1, r22	; 0x01
  26:	7a 83       	std	Y+2, r23	; 0x02
  28:	8b 83       	std	Y+3, r24	; 0x03
  2a:	9c 83       	std	Y+4, r25	; 0x04
  2c:	2d 83       	std	Y+5, r18	; 0x05
  2e:	3e 83       	std	Y+6, r19	; 0x06
  30:	4f 83       	std	Y+7, r20	; 0x07
  32:	58 87       	std	Y+8, r21	; 0x08
  34:	e9 86       	std	Y+9, r14	; 0x09
  36:	fa 86       	std	Y+10, r15	; 0x0a
  38:	0b 87       	std	Y+11, r16	; 0x0b
  3a:	1c 87       	std	Y+12, r17	; 0x0c
  3c:	ad 86       	std	Y+13, r10	; 0x0d
  3e:	be 86       	std	Y+14, r11	; 0x0e
  40:	cf 86       	std	Y+15, r12	; 0x0f
  42:	d8 8a       	std	Y+16, r13	; 0x10
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  44:	29 81       	ldd	r18, Y+1	; 0x01
  46:	3a 81       	ldd	r19, Y+2	; 0x02
  48:	4b 81       	ldd	r20, Y+3	; 0x03
  4a:	5c 81       	ldd	r21, Y+4	; 0x04
  4c:	8d 81       	ldd	r24, Y+5	; 0x05
  4e:	9e 81       	ldd	r25, Y+6	; 0x06
  50:	af 81       	ldd	r26, Y+7	; 0x07
  52:	b8 85       	ldd	r27, Y+8	; 0x08
  54:	79 01       	movw	r14, r18
  56:	8a 01       	movw	r16, r20
  58:	e8 1a       	sub	r14, r24
  5a:	f9 0a       	sbc	r15, r25
  5c:	0a 0b       	sbc	r16, r26
  5e:	1b 0b       	sbc	r17, r27
  60:	2d 8d       	ldd	r18, Y+29	; 0x1d
  62:	3e 8d       	ldd	r19, Y+30	; 0x1e
  64:	4f 8d       	ldd	r20, Y+31	; 0x1f
  66:	58 a1       	ldd	r21, Y+32	; 0x20
  68:	8d 85       	ldd	r24, Y+13	; 0x0d
  6a:	9e 85       	ldd	r25, Y+14	; 0x0e
  6c:	af 85       	ldd	r26, Y+15	; 0x0f
  6e:	b8 89       	ldd	r27, Y+16	; 0x10
  70:	28 1b       	sub	r18, r24
  72:	39 0b       	sbc	r19, r25
  74:	4a 0b       	sbc	r20, r26
  76:	5b 0b       	sbc	r21, r27
  78:	c8 01       	movw	r24, r16
  7a:	b7 01       	movw	r22, r14
  7c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  80:	7b 01       	movw	r14, r22
  82:	8c 01       	movw	r16, r24
  84:	29 85       	ldd	r18, Y+9	; 0x09
  86:	3a 85       	ldd	r19, Y+10	; 0x0a
  88:	4b 85       	ldd	r20, Y+11	; 0x0b
  8a:	5c 85       	ldd	r21, Y+12	; 0x0c
  8c:	8d 81       	ldd	r24, Y+5	; 0x05
  8e:	9e 81       	ldd	r25, Y+6	; 0x06
  90:	af 81       	ldd	r26, Y+7	; 0x07
  92:	b8 85       	ldd	r27, Y+8	; 0x08
  94:	28 1b       	sub	r18, r24
  96:	39 0b       	sbc	r19, r25
  98:	4a 0b       	sbc	r20, r26
  9a:	5b 0b       	sbc	r21, r27
  9c:	c8 01       	movw	r24, r16
  9e:	b7 01       	movw	r22, r14
  a0:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  a4:	da 01       	movw	r26, r20
  a6:	c9 01       	movw	r24, r18
  a8:	9c 01       	movw	r18, r24
  aa:	ad 01       	movw	r20, r26
  ac:	8d 85       	ldd	r24, Y+13	; 0x0d
  ae:	9e 85       	ldd	r25, Y+14	; 0x0e
  b0:	af 85       	ldd	r26, Y+15	; 0x0f
  b2:	b8 89       	ldd	r27, Y+16	; 0x10
  b4:	82 0f       	add	r24, r18
  b6:	93 1f       	adc	r25, r19
  b8:	a4 1f       	adc	r26, r20
  ba:	b5 1f       	adc	r27, r21
}
  bc:	bc 01       	movw	r22, r24
  be:	cd 01       	movw	r24, r26
  c0:	60 96       	adiw	r28, 0x10	; 16
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	ff 90       	pop	r15
  d6:	ef 90       	pop	r14
  d8:	df 90       	pop	r13
  da:	cf 90       	pop	r12
  dc:	bf 90       	pop	r11
  de:	af 90       	pop	r10
  e0:	08 95       	ret

Disassembly of section .text._Z8makeWordj:

00000000 <_Z8makeWordj>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z8makeWordj+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	0f 90       	pop	r0
  14:	0f 90       	pop	r0
  16:	cf 91       	pop	r28
  18:	df 91       	pop	r29
  1a:	08 95       	ret

Disassembly of section .text._Z8makeWordhh:

00000000 <_Z8makeWordhh>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z8makeWordhh+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	6a 83       	std	Y+2, r22	; 0x02
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	88 2f       	mov	r24, r24
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	38 2f       	mov	r19, r24
  16:	22 27       	eor	r18, r18
  18:	8a 81       	ldd	r24, Y+2	; 0x02
  1a:	88 2f       	mov	r24, r24
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	82 2b       	or	r24, r18
  20:	93 2b       	or	r25, r19
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

Disassembly of section .text._Z6randoml:

00000000 <_Z6randoml>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	69 83       	std	Y+1, r22	; 0x01
  16:	7a 83       	std	Y+2, r23	; 0x02
  18:	8b 83       	std	Y+3, r24	; 0x03
  1a:	9c 83       	std	Y+4, r25	; 0x04
  1c:	89 81       	ldd	r24, Y+1	; 0x01
  1e:	9a 81       	ldd	r25, Y+2	; 0x02
  20:	ab 81       	ldd	r26, Y+3	; 0x03
  22:	bc 81       	ldd	r27, Y+4	; 0x04
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	a1 05       	cpc	r26, r1
  28:	b1 05       	cpc	r27, r1
  2a:	01 f4       	brne	.+0      	; 0x2c <_Z6randoml+0x2c>
  2c:	1d 82       	std	Y+5, r1	; 0x05
  2e:	1e 82       	std	Y+6, r1	; 0x06
  30:	1f 82       	std	Y+7, r1	; 0x07
  32:	18 86       	std	Y+8, r1	; 0x08
  34:	00 c0       	rjmp	.+0      	; 0x36 <_Z6randoml+0x36>
  36:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  3a:	dc 01       	movw	r26, r24
  3c:	cb 01       	movw	r24, r22
  3e:	29 81       	ldd	r18, Y+1	; 0x01
  40:	3a 81       	ldd	r19, Y+2	; 0x02
  42:	4b 81       	ldd	r20, Y+3	; 0x03
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  44:	5c 81       	ldd	r21, Y+4	; 0x04
  46:	bc 01       	movw	r22, r24
  48:	cd 01       	movw	r24, r26
  4a:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  4e:	dc 01       	movw	r26, r24
  50:	cb 01       	movw	r24, r22
  52:	8d 83       	std	Y+5, r24	; 0x05
  54:	9e 83       	std	Y+6, r25	; 0x06
  56:	af 83       	std	Y+7, r26	; 0x07
  58:	b8 87       	std	Y+8, r27	; 0x08
  5a:	8d 81       	ldd	r24, Y+5	; 0x05
  5c:	9e 81       	ldd	r25, Y+6	; 0x06
  5e:	af 81       	ldd	r26, Y+7	; 0x07
  60:	b8 85       	ldd	r27, Y+8	; 0x08
  62:	bc 01       	movw	r22, r24
  64:	cd 01       	movw	r24, r26
  66:	28 96       	adiw	r28, 0x08	; 8
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
  72:	cf 91       	pop	r28
  74:	df 91       	pop	r29
  76:	08 95       	ret

Disassembly of section .text._Z6randomll:

00000000 <_Z6randomll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	60 97       	sbiw	r28, 0x10	; 16
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	6d 83       	std	Y+5, r22	; 0x05
  1e:	7e 83       	std	Y+6, r23	; 0x06
  20:	8f 83       	std	Y+7, r24	; 0x07
  22:	98 87       	std	Y+8, r25	; 0x08
  24:	29 87       	std	Y+9, r18	; 0x09
  26:	3a 87       	std	Y+10, r19	; 0x0a
  28:	4b 87       	std	Y+11, r20	; 0x0b
  2a:	5c 87       	std	Y+12, r21	; 0x0c
  2c:	2d 81       	ldd	r18, Y+5	; 0x05
  2e:	3e 81       	ldd	r19, Y+6	; 0x06
  30:	4f 81       	ldd	r20, Y+7	; 0x07
  32:	58 85       	ldd	r21, Y+8	; 0x08
  34:	89 85       	ldd	r24, Y+9	; 0x09
  36:	9a 85       	ldd	r25, Y+10	; 0x0a
  38:	ab 85       	ldd	r26, Y+11	; 0x0b
  3a:	bc 85       	ldd	r27, Y+12	; 0x0c
  3c:	28 17       	cp	r18, r24
  3e:	39 07       	cpc	r19, r25
  40:	4a 07       	cpc	r20, r26
  42:	5b 07       	cpc	r21, r27
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  44:	04 f0       	brlt	.+0      	; 0x46 <_Z6randomll+0x46>
  46:	ed 80       	ldd	r14, Y+5	; 0x05
  48:	fe 80       	ldd	r15, Y+6	; 0x06
  4a:	0f 81       	ldd	r16, Y+7	; 0x07
  4c:	18 85       	ldd	r17, Y+8	; 0x08
  4e:	ed 86       	std	Y+13, r14	; 0x0d
  50:	fe 86       	std	Y+14, r15	; 0x0e
  52:	0f 87       	std	Y+15, r16	; 0x0f
  54:	18 8b       	std	Y+16, r17	; 0x10
  56:	00 c0       	rjmp	.+0      	; 0x58 <_Z6randomll+0x58>
  58:	29 85       	ldd	r18, Y+9	; 0x09
  5a:	3a 85       	ldd	r19, Y+10	; 0x0a
  5c:	4b 85       	ldd	r20, Y+11	; 0x0b
  5e:	5c 85       	ldd	r21, Y+12	; 0x0c
  60:	8d 81       	ldd	r24, Y+5	; 0x05
  62:	9e 81       	ldd	r25, Y+6	; 0x06
  64:	af 81       	ldd	r26, Y+7	; 0x07
  66:	b8 85       	ldd	r27, Y+8	; 0x08
  68:	79 01       	movw	r14, r18
  6a:	8a 01       	movw	r16, r20
  6c:	e8 1a       	sub	r14, r24
  6e:	f9 0a       	sbc	r15, r25
  70:	0a 0b       	sbc	r16, r26
  72:	1b 0b       	sbc	r17, r27
  74:	d8 01       	movw	r26, r16
  76:	c7 01       	movw	r24, r14
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	9a 83       	std	Y+2, r25	; 0x02
  7c:	ab 83       	std	Y+3, r26	; 0x03
  7e:	bc 83       	std	Y+4, r27	; 0x04
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	9a 81       	ldd	r25, Y+2	; 0x02
  84:	ab 81       	ldd	r26, Y+3	; 0x03
  86:	bc 81       	ldd	r27, Y+4	; 0x04
  88:	bc 01       	movw	r22, r24
  8a:	cd 01       	movw	r24, r26
  8c:	0e 94 00 00 	call	0	; 0x0 <_Z6randomll>
  90:	9b 01       	movw	r18, r22
  92:	ac 01       	movw	r20, r24
  94:	8d 81       	ldd	r24, Y+5	; 0x05
  96:	9e 81       	ldd	r25, Y+6	; 0x06
  98:	af 81       	ldd	r26, Y+7	; 0x07
  9a:	b8 85       	ldd	r27, Y+8	; 0x08
  9c:	79 01       	movw	r14, r18
  9e:	8a 01       	movw	r16, r20
  a0:	e8 0e       	add	r14, r24
  a2:	f9 1e       	adc	r15, r25
  a4:	0a 1f       	adc	r16, r26
  a6:	1b 1f       	adc	r17, r27
  a8:	ed 86       	std	Y+13, r14	; 0x0d
  aa:	fe 86       	std	Y+14, r15	; 0x0e
  ac:	0f 87       	std	Y+15, r16	; 0x0f
  ae:	18 8b       	std	Y+16, r17	; 0x10
  b0:	8d 85       	ldd	r24, Y+13	; 0x0d
  b2:	9e 85       	ldd	r25, Y+14	; 0x0e
  b4:	af 85       	ldd	r26, Y+15	; 0x0f
  b6:	b8 89       	ldd	r27, Y+16	; 0x10
  b8:	bc 01       	movw	r22, r24
  ba:	cd 01       	movw	r24, r26
}
  bc:	60 96       	adiw	r28, 0x10	; 16
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	cf 91       	pop	r28
  ca:	df 91       	pop	r29
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	ff 90       	pop	r15
  d2:	ef 90       	pop	r14
  d4:	08 95       	ret

Disassembly of section .text._Z10randomSeedj:

00000000 <_Z10randomSeedj>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z10randomSeedj+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_Z10randomSeedj+0x16>
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
  1a:	cc 01       	movw	r24, r24
  1c:	a0 e0       	ldi	r26, 0x00	; 0
  1e:	b0 e0       	ldi	r27, 0x00	; 0
  20:	bc 01       	movw	r22, r24
  22:	cd 01       	movw	r24, r26
  24:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
  28:	0f 90       	pop	r0
  2a:	0f 90       	pop	r0
  2c:	cf 91       	pop	r28
  2e:	df 91       	pop	r29
  30:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .stab         0000294c  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001e67  00000000  00000000  00002984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6String4initEv 00000036  00000000  00000000  000047eb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6String9setCharAtEjc 00000050  00000000  00000000  00004821  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6StringixEj 0000006e  00000000  00000000  00004871  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZNK6StringixEj 00000060  00000000  00000000  000048df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZNK6String6charAtEj 00000030  00000000  00000000  0000493f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6String7replaceEcc 0000006a  00000000  00000000  0000496f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZNK6String5toIntEv 0000005a  00000000  00000000  000049d9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6String4trimEv 00000114  00000000  00000000  00004a33  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6String11toUpperCaseEv 00000062  00000000  00000000  00004b47  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6String11toLowerCaseEv 00000062  00000000  00000000  00004ba9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZNK6String16equalsIgnoreCaseERKS_ 000000f4  00000000  00000000  00004c0b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZNK6String11lastIndexOfERKS_j 00000126  00000000  00000000  00004cff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZNK6String11lastIndexOfERKS_ 00000046  00000000  00000000  00004e25  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZNK6String7indexOfERKS_j 0000009c  00000000  00000000  00004e6b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZNK6String7indexOfERKS_ 00000034  00000000  00000000  00004f07  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZNK6String11lastIndexOfEcj 000000dc  00000000  00000000  00004f3b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZNK6String11lastIndexOfEc 00000038  00000000  00000000  00005017  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZNK6String7indexOfEcj 000000a0  00000000  00000000  0000504f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZNK6String7indexOfEc 0000002c  00000000  00000000  000050ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZNK6String8getBytesEPhjj 000000d0  00000000  00000000  0000511b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZNK6String8endsWithERKS_ 00000096  00000000  00000000  000051eb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZNK6String6equalsEPKc 00000092  00000000  00000000  00005281  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZNK6String9compareToERKS_ 000000c8  00000000  00000000  00005313  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZNK6StringgeERKS_ 00000040  00000000  00000000  000053db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZNK6StringleERKS_ 00000042  00000000  00000000  0000541b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZNK6StringgtERKS_ 00000042  00000000  00000000  0000545d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZNK6StringltERKS_ 00000040  00000000  00000000  0000549f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZNK6String6equalsERKS_ 00000058  00000000  00000000  000054df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZNK6String10startsWithERKS_j 000000a0  00000000  00000000  00005537  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZNK6String10startsWithERKS_ 00000056  00000000  00000000  000055d7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN6String12changeBufferEj 00000076  00000000  00000000  0000562d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN6String7replaceERKS_S1_ 0000036a  00000000  00000000  000056a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN6String7reserveEj 0000008e  00000000  00000000  00005a0d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN6String6concatEPKcj 000000b2  00000000  00000000  00005a9b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN6String6concatEm 00000068  00000000  00000000  00005b4d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZN6String6concatEl 00000068  00000000  00000000  00005bb5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZN6String6concatEj 0000005c  00000000  00000000  00005c1d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZN6String6concatEi 0000005c  00000000  00000000  00005c79  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZN6String6concatEh 0000005c  00000000  00000000  00005cd5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZN6String6concatEc 0000003e  00000000  00000000  00005d31  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZN6String6concatEPKc 0000004e  00000000  00000000  00005d6f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZN6String6concatERKS_ 0000003e  00000000  00000000  00005dbd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZN6String10invalidateEv 00000050  00000000  00000000  00005dfb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZplRK15StringSumHelperm 0000006a  00000000  00000000  00005e4b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZplRK15StringSumHelperl 0000006a  00000000  00000000  00005eb5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZplRK15StringSumHelperj 00000060  00000000  00000000  00005f1f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZplRK15StringSumHelperi 00000060  00000000  00000000  00005f7f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZplRK15StringSumHelperh 00000054  00000000  00000000  00005fdf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZplRK15StringSumHelperc 00000054  00000000  00000000  00006033  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZplRK15StringSumHelperPKc 0000007e  00000000  00000000  00006087  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZplRK15StringSumHelperRK6String 0000006e  00000000  00000000  00006105  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZN6String4copyEPKcj 0000008c  00000000  00000000  00006173  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZN6StringC1EPKc 0000004a  00000000  00000000  000061ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZN6StringC2EPKc 0000004a  00000000  00000000  00006249  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZN6StringaSEPKc 00000050  00000000  00000000  00006293  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZN6StringC1Emh 0000006c  00000000  00000000  000062e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text._ZN6StringC2Emh 0000006c  00000000  00000000  0000634f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text._ZN6StringC1Elh 0000006c  00000000  00000000  000063bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZN6StringC2Elh 0000006c  00000000  00000000  00006427  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZN6StringC1Ejh 0000005e  00000000  00000000  00006493  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZN6StringC2Ejh 0000005e  00000000  00000000  000064f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZN6StringC1Eih 0000005e  00000000  00000000  0000654f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZN6StringC2Eih 0000005e  00000000  00000000  000065ad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZN6StringC1Ehh 00000060  00000000  00000000  0000660b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .text._ZN6StringC2Ehh 00000060  00000000  00000000  0000666b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 70 .text._ZN6StringC1Ec 00000042  00000000  00000000  000066cb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 71 .text._ZN6StringC2Ec 00000042  00000000  00000000  0000670d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 72 .text._ZNK6String9substringEjj 000000fe  00000000  00000000  0000674f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 73 .text._ZNK6String9substringEj 0000004c  00000000  00000000  0000684d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 74 .text._ZN6StringaSERKS_ 0000007e  00000000  00000000  00006899  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 75 .text._ZN6StringC1ERKS_ 00000038  00000000  00000000  00006917  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 76 .text._ZN6StringC2ERKS_ 00000038  00000000  00000000  0000694f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 77 .text._ZN6StringD1Ev 00000024  00000000  00000000  00006987  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 78 .text._ZN6StringD2Ev 00000024  00000000  00000000  000069ab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 79 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  000069cf  2**0
                  ALLOC

Disassembly of section .text._ZN6String4initEv:

00000000 <_ZN6String4initEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String4initEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	11 82       	std	Z+1, r1	; 0x01
  14:	10 82       	st	Z, r1
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
}
  1a:	13 82       	std	Z+3, r1	; 0x03
  1c:	12 82       	std	Z+2, r1	; 0x02
  1e:	e9 81       	ldd	r30, Y+1	; 0x01
  20:	fa 81       	ldd	r31, Y+2	; 0x02
  22:	15 82       	std	Z+5, r1	; 0x05
  24:	14 82       	std	Z+4, r1	; 0x04
  26:	e9 81       	ldd	r30, Y+1	; 0x01
  28:	fa 81       	ldd	r31, Y+2	; 0x02
  2a:	16 82       	std	Z+6, r1	; 0x06
  2c:	0f 90       	pop	r0
  2e:	0f 90       	pop	r0
  30:	cf 91       	pop	r28
  32:	df 91       	pop	r29
  34:	08 95       	ret

Disassembly of section .text._ZN6String9setCharAtEjc:

00000000 <_ZN6String9setCharAtEjc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String9setCharAtEjc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6String9setCharAtEjc+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	4d 83       	std	Y+5, r20	; 0x05
  18:	e9 81       	ldd	r30, Y+1	; 0x01
}
  1a:	fa 81       	ldd	r31, Y+2	; 0x02
  1c:	24 81       	ldd	r18, Z+4	; 0x04
  1e:	35 81       	ldd	r19, Z+5	; 0x05
  20:	8b 81       	ldd	r24, Y+3	; 0x03
  22:	9c 81       	ldd	r25, Y+4	; 0x04
  24:	82 17       	cp	r24, r18
  26:	93 07       	cpc	r25, r19
  28:	00 f4       	brcc	.+0      	; 0x2a <_ZN6String9setCharAtEjc+0x2a>
  2a:	e9 81       	ldd	r30, Y+1	; 0x01
  2c:	fa 81       	ldd	r31, Y+2	; 0x02
  2e:	20 81       	ld	r18, Z
  30:	31 81       	ldd	r19, Z+1	; 0x01
  32:	8b 81       	ldd	r24, Y+3	; 0x03
  34:	9c 81       	ldd	r25, Y+4	; 0x04
  36:	f9 01       	movw	r30, r18
  38:	e8 0f       	add	r30, r24
  3a:	f9 1f       	adc	r31, r25
  3c:	8d 81       	ldd	r24, Y+5	; 0x05
  3e:	80 83       	st	Z, r24
  40:	0f 90       	pop	r0
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	08 95       	ret

Disassembly of section .text._ZN6StringixEj:

00000000 <_ZN6StringixEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringixEj+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringixEj+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6StringixEj+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
}
  1a:	24 81       	ldd	r18, Z+4	; 0x04
  1c:	35 81       	ldd	r19, Z+5	; 0x05
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	9c 81       	ldd	r25, Y+4	; 0x04
  22:	82 17       	cp	r24, r18
  24:	93 07       	cpc	r25, r19
  26:	00 f4       	brcc	.+0      	; 0x28 <_ZN6StringixEj+0x28>
  28:	e9 81       	ldd	r30, Y+1	; 0x01
  2a:	fa 81       	ldd	r31, Y+2	; 0x02
  2c:	80 81       	ld	r24, Z
  2e:	91 81       	ldd	r25, Z+1	; 0x01
  30:	00 97       	sbiw	r24, 0x00	; 0
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN6StringixEj+0x34>
  34:	10 92 00 00 	sts	0x0000, r1
  38:	40 e0       	ldi	r20, 0x00	; 0
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	5e 83       	std	Y+6, r21	; 0x06
  3e:	4d 83       	std	Y+5, r20	; 0x05
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6StringixEj+0x42>
  42:	e9 81       	ldd	r30, Y+1	; 0x01
  44:	fa 81       	ldd	r31, Y+2	; 0x02
  46:	20 81       	ld	r18, Z
  48:	31 81       	ldd	r19, Z+1	; 0x01
  4a:	8b 81       	ldd	r24, Y+3	; 0x03
  4c:	9c 81       	ldd	r25, Y+4	; 0x04
  4e:	a9 01       	movw	r20, r18
  50:	48 0f       	add	r20, r24
  52:	59 1f       	adc	r21, r25
  54:	5e 83       	std	Y+6, r21	; 0x06
  56:	4d 83       	std	Y+5, r20	; 0x05
  58:	8d 81       	ldd	r24, Y+5	; 0x05
  5a:	9e 81       	ldd	r25, Y+6	; 0x06
  5c:	26 96       	adiw	r28, 0x06	; 6
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	f8 94       	cli
  62:	de bf       	out	0x3e, r29	; 62
  64:	0f be       	out	0x3f, r0	; 63
  66:	cd bf       	out	0x3d, r28	; 61
  68:	cf 91       	pop	r28
  6a:	df 91       	pop	r29
  6c:	08 95       	ret

Disassembly of section .text._ZNK6StringixEj:

00000000 <_ZNK6StringixEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6StringixEj+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6StringixEj+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
}
  1a:	24 81       	ldd	r18, Z+4	; 0x04
  1c:	35 81       	ldd	r19, Z+5	; 0x05
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	9c 81       	ldd	r25, Y+4	; 0x04
  22:	82 17       	cp	r24, r18
  24:	93 07       	cpc	r25, r19
  26:	00 f4       	brcc	.+0      	; 0x28 <_ZNK6StringixEj+0x28>
  28:	e9 81       	ldd	r30, Y+1	; 0x01
  2a:	fa 81       	ldd	r31, Y+2	; 0x02
  2c:	80 81       	ld	r24, Z
  2e:	91 81       	ldd	r25, Z+1	; 0x01
  30:	00 97       	sbiw	r24, 0x00	; 0
  32:	01 f4       	brne	.+0      	; 0x34 <_ZNK6StringixEj+0x34>
  34:	1d 82       	std	Y+5, r1	; 0x05
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZNK6StringixEj+0x38>
  38:	e9 81       	ldd	r30, Y+1	; 0x01
  3a:	fa 81       	ldd	r31, Y+2	; 0x02
  3c:	20 81       	ld	r18, Z
  3e:	31 81       	ldd	r19, Z+1	; 0x01
  40:	8b 81       	ldd	r24, Y+3	; 0x03
  42:	9c 81       	ldd	r25, Y+4	; 0x04
  44:	f9 01       	movw	r30, r18
  46:	e8 0f       	add	r30, r24
  48:	f9 1f       	adc	r31, r25
  4a:	80 81       	ld	r24, Z
  4c:	8d 83       	std	Y+5, r24	; 0x05
  4e:	8d 81       	ldd	r24, Y+5	; 0x05
  50:	0f 90       	pop	r0
  52:	0f 90       	pop	r0
  54:	0f 90       	pop	r0
  56:	0f 90       	pop	r0
  58:	0f 90       	pop	r0
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	08 95       	ret

Disassembly of section .text._ZNK6String6charAtEj:

00000000 <_ZNK6String6charAtEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String6charAtEj+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6String6charAtEj+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	2b 81       	ldd	r18, Y+3	; 0x03
}
  1a:	3c 81       	ldd	r19, Y+4	; 0x04
  1c:	b9 01       	movw	r22, r18
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6charAtEj>
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	0f 90       	pop	r0
  28:	0f 90       	pop	r0
  2a:	cf 91       	pop	r28
  2c:	df 91       	pop	r29
  2e:	08 95       	ret

Disassembly of section .text._ZN6String7replaceEcc:

00000000 <_ZN6String7replaceEcc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String7replaceEcc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6String7replaceEcc+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6String7replaceEcc+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	6d 83       	std	Y+5, r22	; 0x05
  14:	4e 83       	std	Y+6, r20	; 0x06
  16:	eb 81       	ldd	r30, Y+3	; 0x03
  18:	fc 81       	ldd	r31, Y+4	; 0x04
}
  1a:	80 81       	ld	r24, Z
  1c:	91 81       	ldd	r25, Z+1	; 0x01
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String7replaceEcc+0x22>
  22:	eb 81       	ldd	r30, Y+3	; 0x03
  24:	fc 81       	ldd	r31, Y+4	; 0x04
  26:	80 81       	ld	r24, Z
  28:	91 81       	ldd	r25, Z+1	; 0x01
  2a:	9a 83       	std	Y+2, r25	; 0x02
  2c:	89 83       	std	Y+1, r24	; 0x01
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN6String7replaceEcc+0x30>
  30:	e9 81       	ldd	r30, Y+1	; 0x01
  32:	fa 81       	ldd	r31, Y+2	; 0x02
  34:	90 81       	ld	r25, Z
  36:	8d 81       	ldd	r24, Y+5	; 0x05
  38:	98 17       	cp	r25, r24
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN6String7replaceEcc+0x3c>
  3c:	e9 81       	ldd	r30, Y+1	; 0x01
  3e:	fa 81       	ldd	r31, Y+2	; 0x02
  40:	8e 81       	ldd	r24, Y+6	; 0x06
  42:	80 83       	st	Z, r24
  44:	89 81       	ldd	r24, Y+1	; 0x01
  46:	9a 81       	ldd	r25, Y+2	; 0x02
  48:	01 96       	adiw	r24, 0x01	; 1
  4a:	9a 83       	std	Y+2, r25	; 0x02
  4c:	89 83       	std	Y+1, r24	; 0x01
  4e:	e9 81       	ldd	r30, Y+1	; 0x01
  50:	fa 81       	ldd	r31, Y+2	; 0x02
  52:	80 81       	ld	r24, Z
  54:	88 23       	and	r24, r24
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN6String7replaceEcc+0x58>
  58:	26 96       	adiw	r28, 0x06	; 6
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	f8 94       	cli
  5e:	de bf       	out	0x3e, r29	; 62
  60:	0f be       	out	0x3f, r0	; 63
  62:	cd bf       	out	0x3d, r28	; 61
  64:	cf 91       	pop	r28
  66:	df 91       	pop	r29
  68:	08 95       	ret

Disassembly of section .text._ZNK6String5toIntEv:

00000000 <_ZNK6String5toIntEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String5toIntEv+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6String5toIntEv+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZNK6String5toIntEv+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	e9 81       	ldd	r30, Y+1	; 0x01
  14:	fa 81       	ldd	r31, Y+2	; 0x02
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
}
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZNK6String5toIntEv+0x1e>
  1e:	e9 81       	ldd	r30, Y+1	; 0x01
  20:	fa 81       	ldd	r31, Y+2	; 0x02
  22:	80 81       	ld	r24, Z
  24:	91 81       	ldd	r25, Z+1	; 0x01
  26:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String5toIntEv>
  2a:	6b 83       	std	Y+3, r22	; 0x03
  2c:	7c 83       	std	Y+4, r23	; 0x04
  2e:	8d 83       	std	Y+5, r24	; 0x05
  30:	9e 83       	std	Y+6, r25	; 0x06
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZNK6String5toIntEv+0x34>
  34:	1b 82       	std	Y+3, r1	; 0x03
  36:	1c 82       	std	Y+4, r1	; 0x04
  38:	1d 82       	std	Y+5, r1	; 0x05
  3a:	1e 82       	std	Y+6, r1	; 0x06
  3c:	8b 81       	ldd	r24, Y+3	; 0x03
  3e:	9c 81       	ldd	r25, Y+4	; 0x04
  40:	ad 81       	ldd	r26, Y+5	; 0x05
  42:	be 81       	ldd	r27, Y+6	; 0x06
  44:	bc 01       	movw	r22, r24
  46:	cd 01       	movw	r24, r26
  48:	26 96       	adiw	r28, 0x06	; 6
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	08 95       	ret

Disassembly of section .text._ZN6String4trimEv:

00000000 <_ZN6String4trimEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String4trimEv+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6String4trimEv+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6String4trimEv+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9e 83       	std	Y+6, r25	; 0x06
  10:	8d 83       	std	Y+5, r24	; 0x05
  12:	ed 81       	ldd	r30, Y+5	; 0x05
  14:	fe 81       	ldd	r31, Y+6	; 0x06
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
}
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN6String4trimEv+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN6String4trimEv+0x20>
  20:	ed 81       	ldd	r30, Y+5	; 0x05
  22:	fe 81       	ldd	r31, Y+6	; 0x06
  24:	84 81       	ldd	r24, Z+4	; 0x04
  26:	95 81       	ldd	r25, Z+5	; 0x05
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN6String4trimEv+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6String4trimEv+0x2e>
  2e:	ed 81       	ldd	r30, Y+5	; 0x05
  30:	fe 81       	ldd	r31, Y+6	; 0x06
  32:	80 81       	ld	r24, Z
  34:	91 81       	ldd	r25, Z+1	; 0x01
  36:	9c 83       	std	Y+4, r25	; 0x04
  38:	8b 83       	std	Y+3, r24	; 0x03
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN6String4trimEv+0x3c>
  3c:	8b 81       	ldd	r24, Y+3	; 0x03
  3e:	9c 81       	ldd	r25, Y+4	; 0x04
  40:	01 96       	adiw	r24, 0x01	; 1
  42:	9c 83       	std	Y+4, r25	; 0x04
  44:	8b 83       	std	Y+3, r24	; 0x03
  46:	eb 81       	ldd	r30, Y+3	; 0x03
  48:	fc 81       	ldd	r31, Y+4	; 0x04
  4a:	80 81       	ld	r24, Z
  4c:	99 27       	eor	r25, r25
  4e:	87 fd       	sbrc	r24, 7
  50:	90 95       	com	r25
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  56:	00 97       	sbiw	r24, 0x00	; 0
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN6String4trimEv+0x5a>
  5a:	ed 81       	ldd	r30, Y+5	; 0x05
  5c:	fe 81       	ldd	r31, Y+6	; 0x06
  5e:	20 81       	ld	r18, Z
  60:	31 81       	ldd	r19, Z+1	; 0x01
  62:	ed 81       	ldd	r30, Y+5	; 0x05
  64:	fe 81       	ldd	r31, Y+6	; 0x06
  66:	84 81       	ldd	r24, Z+4	; 0x04
  68:	95 81       	ldd	r25, Z+5	; 0x05
  6a:	01 97       	sbiw	r24, 0x01	; 1
  6c:	82 0f       	add	r24, r18
  6e:	93 1f       	adc	r25, r19
  70:	9a 83       	std	Y+2, r25	; 0x02
  72:	89 83       	std	Y+1, r24	; 0x01
  74:	00 c0       	rjmp	.+0      	; 0x76 <_ZN6String4trimEv+0x76>
  76:	89 81       	ldd	r24, Y+1	; 0x01
  78:	9a 81       	ldd	r25, Y+2	; 0x02
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	9a 83       	std	Y+2, r25	; 0x02
  7e:	89 83       	std	Y+1, r24	; 0x01
  80:	e9 81       	ldd	r30, Y+1	; 0x01
  82:	fa 81       	ldd	r31, Y+2	; 0x02
  84:	80 81       	ld	r24, Z
  86:	99 27       	eor	r25, r25
  88:	87 fd       	sbrc	r24, 7
  8a:	90 95       	com	r25
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  90:	00 97       	sbiw	r24, 0x00	; 0
  92:	01 f0       	breq	.+0      	; 0x94 <_ZN6String4trimEv+0x94>
  94:	29 81       	ldd	r18, Y+1	; 0x01
  96:	3a 81       	ldd	r19, Y+2	; 0x02
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	9c 81       	ldd	r25, Y+4	; 0x04
  9c:	28 17       	cp	r18, r24
  9e:	39 07       	cpc	r19, r25
  a0:	00 f4       	brcc	.+0      	; 0xa2 <_ZN6String4trimEv+0xa2>
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	9a 81       	ldd	r25, Y+2	; 0x02
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	9c 01       	movw	r18, r24
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	9c 81       	ldd	r25, Y+4	; 0x04
  ae:	a9 01       	movw	r20, r18
  b0:	48 1b       	sub	r20, r24
  b2:	59 0b       	sbc	r21, r25
  b4:	ca 01       	movw	r24, r20
  b6:	ed 81       	ldd	r30, Y+5	; 0x05
  b8:	fe 81       	ldd	r31, Y+6	; 0x06
  ba:	95 83       	std	Z+5, r25	; 0x05
  bc:	84 83       	std	Z+4, r24	; 0x04
  be:	ed 81       	ldd	r30, Y+5	; 0x05
  c0:	fe 81       	ldd	r31, Y+6	; 0x06
  c2:	20 81       	ld	r18, Z
  c4:	31 81       	ldd	r19, Z+1	; 0x01
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	9c 81       	ldd	r25, Y+4	; 0x04
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	00 f4       	brcc	.+0      	; 0xd0 <_ZN6String4trimEv+0xd0>
  d0:	ed 81       	ldd	r30, Y+5	; 0x05
  d2:	fe 81       	ldd	r31, Y+6	; 0x06
  d4:	80 81       	ld	r24, Z
  d6:	91 81       	ldd	r25, Z+1	; 0x01
  d8:	ed 81       	ldd	r30, Y+5	; 0x05
  da:	fe 81       	ldd	r31, Y+6	; 0x06
  dc:	44 81       	ldd	r20, Z+4	; 0x04
  de:	55 81       	ldd	r21, Z+5	; 0x05
  e0:	2b 81       	ldd	r18, Y+3	; 0x03
  e2:	3c 81       	ldd	r19, Y+4	; 0x04
  e4:	b9 01       	movw	r22, r18
  e6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  ea:	ed 81       	ldd	r30, Y+5	; 0x05
  ec:	fe 81       	ldd	r31, Y+6	; 0x06
  ee:	20 81       	ld	r18, Z
  f0:	31 81       	ldd	r19, Z+1	; 0x01
  f2:	ed 81       	ldd	r30, Y+5	; 0x05
  f4:	fe 81       	ldd	r31, Y+6	; 0x06
  f6:	84 81       	ldd	r24, Z+4	; 0x04
  f8:	95 81       	ldd	r25, Z+5	; 0x05
  fa:	f9 01       	movw	r30, r18
  fc:	e8 0f       	add	r30, r24
  fe:	f9 1f       	adc	r31, r25
 100:	10 82       	st	Z, r1
 102:	26 96       	adiw	r28, 0x06	; 6
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

Disassembly of section .text._ZN6String11toUpperCaseEv:

00000000 <_ZN6String11toUpperCaseEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String11toUpperCaseEv+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6String11toUpperCaseEv+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9c 83       	std	Y+4, r25	; 0x04
{
	free(buffer);
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	eb 81       	ldd	r30, Y+3	; 0x03
  12:	fc 81       	ldd	r31, Y+4	; 0x04
  14:	80 81       	ld	r24, Z
  16:	91 81       	ldd	r25, Z+1	; 0x01
  18:	00 97       	sbiw	r24, 0x00	; 0
}
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6String11toUpperCaseEv+0x1c>
  1c:	eb 81       	ldd	r30, Y+3	; 0x03
  1e:	fc 81       	ldd	r31, Y+4	; 0x04
  20:	80 81       	ld	r24, Z
  22:	91 81       	ldd	r25, Z+1	; 0x01
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6String11toUpperCaseEv+0x2a>
  2a:	e9 81       	ldd	r30, Y+1	; 0x01
  2c:	fa 81       	ldd	r31, Y+2	; 0x02
  2e:	80 81       	ld	r24, Z
  30:	99 27       	eor	r25, r25
  32:	87 fd       	sbrc	r24, 7
  34:	90 95       	com	r25
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toUpperCaseEv>
  3a:	e9 81       	ldd	r30, Y+1	; 0x01
  3c:	fa 81       	ldd	r31, Y+2	; 0x02
  3e:	80 83       	st	Z, r24
  40:	89 81       	ldd	r24, Y+1	; 0x01
  42:	9a 81       	ldd	r25, Y+2	; 0x02
  44:	01 96       	adiw	r24, 0x01	; 1
  46:	9a 83       	std	Y+2, r25	; 0x02
  48:	89 83       	std	Y+1, r24	; 0x01
  4a:	e9 81       	ldd	r30, Y+1	; 0x01
  4c:	fa 81       	ldd	r31, Y+2	; 0x02
  4e:	80 81       	ld	r24, Z
  50:	88 23       	and	r24, r24
  52:	01 f4       	brne	.+0      	; 0x54 <_ZN6String11toUpperCaseEv+0x54>
  54:	0f 90       	pop	r0
  56:	0f 90       	pop	r0
  58:	0f 90       	pop	r0
  5a:	0f 90       	pop	r0
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	08 95       	ret

Disassembly of section .text._ZN6String11toLowerCaseEv:

00000000 <_ZN6String11toLowerCaseEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String11toLowerCaseEv+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6String11toLowerCaseEv+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9c 83       	std	Y+4, r25	; 0x04
{
	free(buffer);
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	eb 81       	ldd	r30, Y+3	; 0x03
  12:	fc 81       	ldd	r31, Y+4	; 0x04
  14:	80 81       	ld	r24, Z
  16:	91 81       	ldd	r25, Z+1	; 0x01
  18:	00 97       	sbiw	r24, 0x00	; 0
}
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6String11toLowerCaseEv+0x1c>
  1c:	eb 81       	ldd	r30, Y+3	; 0x03
  1e:	fc 81       	ldd	r31, Y+4	; 0x04
  20:	80 81       	ld	r24, Z
  22:	91 81       	ldd	r25, Z+1	; 0x01
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6String11toLowerCaseEv+0x2a>
  2a:	e9 81       	ldd	r30, Y+1	; 0x01
  2c:	fa 81       	ldd	r31, Y+2	; 0x02
  2e:	80 81       	ld	r24, Z
  30:	99 27       	eor	r25, r25
  32:	87 fd       	sbrc	r24, 7
  34:	90 95       	com	r25
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toLowerCaseEv>
  3a:	e9 81       	ldd	r30, Y+1	; 0x01
  3c:	fa 81       	ldd	r31, Y+2	; 0x02
  3e:	80 83       	st	Z, r24
  40:	89 81       	ldd	r24, Y+1	; 0x01
  42:	9a 81       	ldd	r25, Y+2	; 0x02
  44:	01 96       	adiw	r24, 0x01	; 1
  46:	9a 83       	std	Y+2, r25	; 0x02
  48:	89 83       	std	Y+1, r24	; 0x01
  4a:	e9 81       	ldd	r30, Y+1	; 0x01
  4c:	fa 81       	ldd	r31, Y+2	; 0x02
  4e:	80 81       	ld	r24, Z
  50:	88 23       	and	r24, r24
  52:	01 f4       	brne	.+0      	; 0x54 <_ZN6String11toLowerCaseEv+0x54>
  54:	0f 90       	pop	r0
  56:	0f 90       	pop	r0
  58:	0f 90       	pop	r0
  5a:	0f 90       	pop	r0
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	08 95       	ret

Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

00000000 <_ZNK6String16equalsIgnoreCaseERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	2a 97       	sbiw	r28, 0x0a	; 10
{
	free(buffer);
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	9e 83       	std	Y+6, r25	; 0x06
}
  1a:	8d 83       	std	Y+5, r24	; 0x05
  1c:	78 87       	std	Y+8, r23	; 0x08
  1e:	6f 83       	std	Y+7, r22	; 0x07
  20:	2d 81       	ldd	r18, Y+5	; 0x05
  22:	3e 81       	ldd	r19, Y+6	; 0x06
  24:	8f 81       	ldd	r24, Y+7	; 0x07
  26:	98 85       	ldd	r25, Y+8	; 0x08
  28:	28 17       	cp	r18, r24
  2a:	39 07       	cpc	r19, r25
  2c:	01 f4       	brne	.+0      	; 0x2e <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
  2e:	81 e0       	ldi	r24, 0x01	; 1
  30:	8a 87       	std	Y+10, r24	; 0x0a
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
  34:	ed 81       	ldd	r30, Y+5	; 0x05
  36:	fe 81       	ldd	r31, Y+6	; 0x06
  38:	24 81       	ldd	r18, Z+4	; 0x04
  3a:	35 81       	ldd	r19, Z+5	; 0x05
  3c:	ef 81       	ldd	r30, Y+7	; 0x07
  3e:	f8 85       	ldd	r31, Y+8	; 0x08
  40:	84 81       	ldd	r24, Z+4	; 0x04
  42:	95 81       	ldd	r25, Z+5	; 0x05
  44:	28 17       	cp	r18, r24
  46:	39 07       	cpc	r19, r25
  48:	01 f0       	breq	.+0      	; 0x4a <_ZNK6String16equalsIgnoreCaseERKS_+0x4a>
  4a:	1a 86       	std	Y+10, r1	; 0x0a
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZNK6String16equalsIgnoreCaseERKS_+0x4e>
  4e:	ed 81       	ldd	r30, Y+5	; 0x05
  50:	fe 81       	ldd	r31, Y+6	; 0x06
  52:	84 81       	ldd	r24, Z+4	; 0x04
  54:	95 81       	ldd	r25, Z+5	; 0x05
  56:	00 97       	sbiw	r24, 0x00	; 0
  58:	01 f4       	brne	.+0      	; 0x5a <_ZNK6String16equalsIgnoreCaseERKS_+0x5a>
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	8a 87       	std	Y+10, r24	; 0x0a
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
  60:	ed 81       	ldd	r30, Y+5	; 0x05
  62:	fe 81       	ldd	r31, Y+6	; 0x06
  64:	80 81       	ld	r24, Z
  66:	91 81       	ldd	r25, Z+1	; 0x01
  68:	9c 83       	std	Y+4, r25	; 0x04
  6a:	8b 83       	std	Y+3, r24	; 0x03
  6c:	ef 81       	ldd	r30, Y+7	; 0x07
  6e:	f8 85       	ldd	r31, Y+8	; 0x08
  70:	80 81       	ld	r24, Z
  72:	91 81       	ldd	r25, Z+1	; 0x01
  74:	9a 83       	std	Y+2, r25	; 0x02
  76:	89 83       	std	Y+1, r24	; 0x01
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZNK6String16equalsIgnoreCaseERKS_+0x7a>
  7a:	eb 81       	ldd	r30, Y+3	; 0x03
  7c:	fc 81       	ldd	r31, Y+4	; 0x04
  7e:	80 81       	ld	r24, Z
  80:	28 2f       	mov	r18, r24
  82:	33 27       	eor	r19, r19
  84:	27 fd       	sbrc	r18, 7
  86:	30 95       	com	r19
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	9c 81       	ldd	r25, Y+4	; 0x04
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	9c 83       	std	Y+4, r25	; 0x04
  90:	8b 83       	std	Y+3, r24	; 0x03
  92:	c9 01       	movw	r24, r18
  94:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  98:	8c 01       	movw	r16, r24
  9a:	e9 81       	ldd	r30, Y+1	; 0x01
  9c:	fa 81       	ldd	r31, Y+2	; 0x02
  9e:	80 81       	ld	r24, Z
  a0:	28 2f       	mov	r18, r24
  a2:	33 27       	eor	r19, r19
  a4:	27 fd       	sbrc	r18, 7
  a6:	30 95       	com	r19
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	9a 83       	std	Y+2, r25	; 0x02
  b0:	89 83       	std	Y+1, r24	; 0x01
  b2:	c9 01       	movw	r24, r18
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  b8:	19 86       	std	Y+9, r1	; 0x09
  ba:	08 17       	cp	r16, r24
  bc:	19 07       	cpc	r17, r25
  be:	01 f0       	breq	.+0      	; 0xc0 <_ZNK6String16equalsIgnoreCaseERKS_+0xc0>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 87       	std	Y+9, r24	; 0x09
  c4:	89 85       	ldd	r24, Y+9	; 0x09
  c6:	88 23       	and	r24, r24
  c8:	01 f0       	breq	.+0      	; 0xca <_ZNK6String16equalsIgnoreCaseERKS_+0xca>
  ca:	1a 86       	std	Y+10, r1	; 0x0a
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZNK6String16equalsIgnoreCaseERKS_+0xce>
  ce:	eb 81       	ldd	r30, Y+3	; 0x03
  d0:	fc 81       	ldd	r31, Y+4	; 0x04
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	01 f4       	brne	.+0      	; 0xd8 <_ZNK6String16equalsIgnoreCaseERKS_+0xd8>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	8a 87       	std	Y+10, r24	; 0x0a
  dc:	8a 85       	ldd	r24, Y+10	; 0x0a
  de:	2a 96       	adiw	r28, 0x0a	; 10
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

00000000 <_ZNK6String11lastIndexOfERKS_j>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2c 97       	sbiw	r28, 0x0c	; 12
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9e 83       	std	Y+6, r25	; 0x06
  16:	8d 83       	std	Y+5, r24	; 0x05
  18:	78 87       	std	Y+8, r23	; 0x08
}
  1a:	6f 83       	std	Y+7, r22	; 0x07
  1c:	5a 87       	std	Y+10, r21	; 0x0a
  1e:	49 87       	std	Y+9, r20	; 0x09
  20:	ef 81       	ldd	r30, Y+7	; 0x07
  22:	f8 85       	ldd	r31, Y+8	; 0x08
  24:	84 81       	ldd	r24, Z+4	; 0x04
  26:	95 81       	ldd	r25, Z+5	; 0x05
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String11lastIndexOfERKS_j+0x2c>
  2c:	ed 81       	ldd	r30, Y+5	; 0x05
  2e:	fe 81       	ldd	r31, Y+6	; 0x06
  30:	84 81       	ldd	r24, Z+4	; 0x04
  32:	95 81       	ldd	r25, Z+5	; 0x05
  34:	00 97       	sbiw	r24, 0x00	; 0
  36:	01 f0       	breq	.+0      	; 0x38 <_ZNK6String11lastIndexOfERKS_j+0x38>
  38:	ef 81       	ldd	r30, Y+7	; 0x07
  3a:	f8 85       	ldd	r31, Y+8	; 0x08
  3c:	24 81       	ldd	r18, Z+4	; 0x04
  3e:	35 81       	ldd	r19, Z+5	; 0x05
  40:	ed 81       	ldd	r30, Y+5	; 0x05
  42:	fe 81       	ldd	r31, Y+6	; 0x06
  44:	84 81       	ldd	r24, Z+4	; 0x04
  46:	95 81       	ldd	r25, Z+5	; 0x05
  48:	82 17       	cp	r24, r18
  4a:	93 07       	cpc	r25, r19
  4c:	00 f4       	brcc	.+0      	; 0x4e <_ZNK6String11lastIndexOfERKS_j+0x4e>
  4e:	4f ef       	ldi	r20, 0xFF	; 255
  50:	5f ef       	ldi	r21, 0xFF	; 255
  52:	5c 87       	std	Y+12, r21	; 0x0c
  54:	4b 87       	std	Y+11, r20	; 0x0b
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZNK6String11lastIndexOfERKS_j+0x58>
  58:	ed 81       	ldd	r30, Y+5	; 0x05
  5a:	fe 81       	ldd	r31, Y+6	; 0x06
  5c:	24 81       	ldd	r18, Z+4	; 0x04
  5e:	35 81       	ldd	r19, Z+5	; 0x05
  60:	89 85       	ldd	r24, Y+9	; 0x09
  62:	9a 85       	ldd	r25, Y+10	; 0x0a
  64:	82 17       	cp	r24, r18
  66:	93 07       	cpc	r25, r19
  68:	00 f0       	brcs	.+0      	; 0x6a <_ZNK6String11lastIndexOfERKS_j+0x6a>
  6a:	ed 81       	ldd	r30, Y+5	; 0x05
  6c:	fe 81       	ldd	r31, Y+6	; 0x06
  6e:	84 81       	ldd	r24, Z+4	; 0x04
  70:	95 81       	ldd	r25, Z+5	; 0x05
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	9a 87       	std	Y+10, r25	; 0x0a
  76:	89 87       	std	Y+9, r24	; 0x09
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	9f ef       	ldi	r25, 0xFF	; 255
  7c:	9c 83       	std	Y+4, r25	; 0x04
  7e:	8b 83       	std	Y+3, r24	; 0x03
  80:	ed 81       	ldd	r30, Y+5	; 0x05
  82:	fe 81       	ldd	r31, Y+6	; 0x06
  84:	80 81       	ld	r24, Z
  86:	91 81       	ldd	r25, Z+1	; 0x01
  88:	9a 83       	std	Y+2, r25	; 0x02
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_ZNK6String11lastIndexOfERKS_j+0x8e>
  8e:	ef 81       	ldd	r30, Y+7	; 0x07
  90:	f8 85       	ldd	r31, Y+8	; 0x08
  92:	20 81       	ld	r18, Z
  94:	31 81       	ldd	r19, Z+1	; 0x01
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	9a 81       	ldd	r25, Y+2	; 0x02
  9a:	b9 01       	movw	r22, r18
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_j>
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	01 f0       	breq	.+0      	; 0xac <_ZNK6String11lastIndexOfERKS_j+0xac>
  ac:	29 81       	ldd	r18, Y+1	; 0x01
  ae:	3a 81       	ldd	r19, Y+2	; 0x02
  b0:	ed 81       	ldd	r30, Y+5	; 0x05
  b2:	fe 81       	ldd	r31, Y+6	; 0x06
  b4:	80 81       	ld	r24, Z
  b6:	91 81       	ldd	r25, Z+1	; 0x01
  b8:	a9 01       	movw	r20, r18
  ba:	48 1b       	sub	r20, r24
  bc:	59 0b       	sbc	r21, r25
  be:	ca 01       	movw	r24, r20
  c0:	9c 01       	movw	r18, r24
  c2:	89 85       	ldd	r24, Y+9	; 0x09
  c4:	9a 85       	ldd	r25, Y+10	; 0x0a
  c6:	82 17       	cp	r24, r18
  c8:	93 07       	cpc	r25, r19
  ca:	00 f0       	brcs	.+0      	; 0xcc <_ZNK6String11lastIndexOfERKS_j+0xcc>
  cc:	29 81       	ldd	r18, Y+1	; 0x01
  ce:	3a 81       	ldd	r19, Y+2	; 0x02
  d0:	ed 81       	ldd	r30, Y+5	; 0x05
  d2:	fe 81       	ldd	r31, Y+6	; 0x06
  d4:	80 81       	ld	r24, Z
  d6:	91 81       	ldd	r25, Z+1	; 0x01
  d8:	a9 01       	movw	r20, r18
  da:	48 1b       	sub	r20, r24
  dc:	59 0b       	sbc	r21, r25
  de:	ca 01       	movw	r24, r20
  e0:	9c 83       	std	Y+4, r25	; 0x04
  e2:	8b 83       	std	Y+3, r24	; 0x03
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	9a 81       	ldd	r25, Y+2	; 0x02
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	9a 83       	std	Y+2, r25	; 0x02
  ec:	89 83       	std	Y+1, r24	; 0x01
  ee:	ed 81       	ldd	r30, Y+5	; 0x05
  f0:	fe 81       	ldd	r31, Y+6	; 0x06
  f2:	20 81       	ld	r18, Z
  f4:	31 81       	ldd	r19, Z+1	; 0x01
  f6:	89 85       	ldd	r24, Y+9	; 0x09
  f8:	9a 85       	ldd	r25, Y+10	; 0x0a
  fa:	28 0f       	add	r18, r24
  fc:	39 1f       	adc	r19, r25
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	28 17       	cp	r18, r24
 104:	39 07       	cpc	r19, r25
 106:	00 f4       	brcc	.+0      	; 0x108 <_ZNK6String11lastIndexOfERKS_j+0x108>
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	9c 87       	std	Y+12, r25	; 0x0c
 10e:	8b 87       	std	Y+11, r24	; 0x0b
 110:	8b 85       	ldd	r24, Y+11	; 0x0b
 112:	9c 85       	ldd	r25, Y+12	; 0x0c
 114:	2c 96       	adiw	r28, 0x0c	; 12
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
 120:	cf 91       	pop	r28
 122:	df 91       	pop	r29
 124:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

00000000 <_ZNK6String11lastIndexOfERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String11lastIndexOfERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6String11lastIndexOfERKS_+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	e9 81       	ldd	r30, Y+1	; 0x01
  16:	fa 81       	ldd	r31, Y+2	; 0x02
  18:	24 81       	ldd	r18, Z+4	; 0x04
}
  1a:	35 81       	ldd	r19, Z+5	; 0x05
  1c:	eb 81       	ldd	r30, Y+3	; 0x03
  1e:	fc 81       	ldd	r31, Y+4	; 0x04
  20:	84 81       	ldd	r24, Z+4	; 0x04
  22:	95 81       	ldd	r25, Z+5	; 0x05
  24:	a9 01       	movw	r20, r18
  26:	48 1b       	sub	r20, r24
  28:	59 0b       	sbc	r21, r25
  2a:	89 81       	ldd	r24, Y+1	; 0x01
  2c:	9a 81       	ldd	r25, Y+2	; 0x02
  2e:	2b 81       	ldd	r18, Y+3	; 0x03
  30:	3c 81       	ldd	r19, Y+4	; 0x04
  32:	b9 01       	movw	r22, r18
  34:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_>
  38:	0f 90       	pop	r0
  3a:	0f 90       	pop	r0
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	cf 91       	pop	r28
  42:	df 91       	pop	r29
  44:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_j:

00000000 <_ZNK6String7indexOfERKS_j>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
}
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	58 87       	std	Y+8, r21	; 0x08
  1e:	4f 83       	std	Y+7, r20	; 0x07
  20:	eb 81       	ldd	r30, Y+3	; 0x03
  22:	fc 81       	ldd	r31, Y+4	; 0x04
  24:	24 81       	ldd	r18, Z+4	; 0x04
  26:	35 81       	ldd	r19, Z+5	; 0x05
  28:	8f 81       	ldd	r24, Y+7	; 0x07
  2a:	98 85       	ldd	r25, Y+8	; 0x08
  2c:	82 17       	cp	r24, r18
  2e:	93 07       	cpc	r25, r19
  30:	00 f0       	brcs	.+0      	; 0x32 <_ZNK6String7indexOfERKS_j+0x32>
  32:	4f ef       	ldi	r20, 0xFF	; 255
  34:	5f ef       	ldi	r21, 0xFF	; 255
  36:	5a 87       	std	Y+10, r21	; 0x0a
  38:	49 87       	std	Y+9, r20	; 0x09
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZNK6String7indexOfERKS_j+0x3c>
  3c:	eb 81       	ldd	r30, Y+3	; 0x03
  3e:	fc 81       	ldd	r31, Y+4	; 0x04
  40:	20 81       	ld	r18, Z
  42:	31 81       	ldd	r19, Z+1	; 0x01
  44:	8f 81       	ldd	r24, Y+7	; 0x07
  46:	98 85       	ldd	r25, Y+8	; 0x08
  48:	82 0f       	add	r24, r18
  4a:	93 1f       	adc	r25, r19
  4c:	ed 81       	ldd	r30, Y+5	; 0x05
  4e:	fe 81       	ldd	r31, Y+6	; 0x06
  50:	20 81       	ld	r18, Z
  52:	31 81       	ldd	r19, Z+1	; 0x01
  54:	b9 01       	movw	r22, r18
  56:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_j>
  5a:	9a 83       	std	Y+2, r25	; 0x02
  5c:	89 83       	std	Y+1, r24	; 0x01
  5e:	89 81       	ldd	r24, Y+1	; 0x01
  60:	9a 81       	ldd	r25, Y+2	; 0x02
  62:	00 97       	sbiw	r24, 0x00	; 0
  64:	01 f4       	brne	.+0      	; 0x66 <_ZNK6String7indexOfERKS_j+0x66>
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	9f ef       	ldi	r25, 0xFF	; 255
  6a:	9a 87       	std	Y+10, r25	; 0x0a
  6c:	89 87       	std	Y+9, r24	; 0x09
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZNK6String7indexOfERKS_j+0x70>
  70:	29 81       	ldd	r18, Y+1	; 0x01
  72:	3a 81       	ldd	r19, Y+2	; 0x02
  74:	eb 81       	ldd	r30, Y+3	; 0x03
  76:	fc 81       	ldd	r31, Y+4	; 0x04
  78:	80 81       	ld	r24, Z
  7a:	91 81       	ldd	r25, Z+1	; 0x01
  7c:	a9 01       	movw	r20, r18
  7e:	48 1b       	sub	r20, r24
  80:	59 0b       	sbc	r21, r25
  82:	5a 87       	std	Y+10, r21	; 0x0a
  84:	49 87       	std	Y+9, r20	; 0x09
  86:	89 85       	ldd	r24, Y+9	; 0x09
  88:	9a 85       	ldd	r25, Y+10	; 0x0a
  8a:	2a 96       	adiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	cf 91       	pop	r28
  98:	df 91       	pop	r29
  9a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_:

00000000 <_ZNK6String7indexOfERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String7indexOfERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6String7indexOfERKS_+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	2b 81       	ldd	r18, Y+3	; 0x03
}
  1a:	3c 81       	ldd	r19, Y+4	; 0x04
  1c:	b9 01       	movw	r22, r18
  1e:	40 e0       	ldi	r20, 0x00	; 0
  20:	50 e0       	ldi	r21, 0x00	; 0
  22:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_>
  26:	0f 90       	pop	r0
  28:	0f 90       	pop	r0
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	cf 91       	pop	r28
  30:	df 91       	pop	r29
  32:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEcj:

00000000 <_ZNK6String11lastIndexOfEcj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9d 83       	std	Y+5, r25	; 0x05
  16:	8c 83       	std	Y+4, r24	; 0x04
  18:	6e 83       	std	Y+6, r22	; 0x06
}
  1a:	58 87       	std	Y+8, r21	; 0x08
  1c:	4f 83       	std	Y+7, r20	; 0x07
  1e:	ec 81       	ldd	r30, Y+4	; 0x04
  20:	fd 81       	ldd	r31, Y+5	; 0x05
  22:	24 81       	ldd	r18, Z+4	; 0x04
  24:	35 81       	ldd	r19, Z+5	; 0x05
  26:	8f 81       	ldd	r24, Y+7	; 0x07
  28:	98 85       	ldd	r25, Y+8	; 0x08
  2a:	82 17       	cp	r24, r18
  2c:	93 07       	cpc	r25, r19
  2e:	00 f0       	brcs	.+0      	; 0x30 <_ZNK6String11lastIndexOfEcj+0x30>
  30:	4f ef       	ldi	r20, 0xFF	; 255
  32:	5f ef       	ldi	r21, 0xFF	; 255
  34:	5a 87       	std	Y+10, r21	; 0x0a
  36:	49 87       	std	Y+9, r20	; 0x09
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZNK6String11lastIndexOfEcj+0x3a>
  3a:	ec 81       	ldd	r30, Y+4	; 0x04
  3c:	fd 81       	ldd	r31, Y+5	; 0x05
  3e:	20 81       	ld	r18, Z
  40:	31 81       	ldd	r19, Z+1	; 0x01
  42:	8f 81       	ldd	r24, Y+7	; 0x07
  44:	98 85       	ldd	r25, Y+8	; 0x08
  46:	01 96       	adiw	r24, 0x01	; 1
  48:	f9 01       	movw	r30, r18
  4a:	e8 0f       	add	r30, r24
  4c:	f9 1f       	adc	r31, r25
  4e:	80 81       	ld	r24, Z
  50:	8b 83       	std	Y+3, r24	; 0x03
  52:	ec 81       	ldd	r30, Y+4	; 0x04
  54:	fd 81       	ldd	r31, Y+5	; 0x05
  56:	20 81       	ld	r18, Z
  58:	31 81       	ldd	r19, Z+1	; 0x01
  5a:	8f 81       	ldd	r24, Y+7	; 0x07
  5c:	98 85       	ldd	r25, Y+8	; 0x08
  5e:	01 96       	adiw	r24, 0x01	; 1
  60:	f9 01       	movw	r30, r18
  62:	e8 0f       	add	r30, r24
  64:	f9 1f       	adc	r31, r25
  66:	10 82       	st	Z, r1
  68:	ec 81       	ldd	r30, Y+4	; 0x04
  6a:	fd 81       	ldd	r31, Y+5	; 0x05
  6c:	40 81       	ld	r20, Z
  6e:	51 81       	ldd	r21, Z+1	; 0x01
  70:	8e 81       	ldd	r24, Y+6	; 0x06
  72:	28 2f       	mov	r18, r24
  74:	33 27       	eor	r19, r19
  76:	27 fd       	sbrc	r18, 7
  78:	30 95       	com	r19
  7a:	ca 01       	movw	r24, r20
  7c:	b9 01       	movw	r22, r18
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEcj>
  82:	9a 83       	std	Y+2, r25	; 0x02
  84:	89 83       	std	Y+1, r24	; 0x01
  86:	ec 81       	ldd	r30, Y+4	; 0x04
  88:	fd 81       	ldd	r31, Y+5	; 0x05
  8a:	20 81       	ld	r18, Z
  8c:	31 81       	ldd	r19, Z+1	; 0x01
  8e:	8f 81       	ldd	r24, Y+7	; 0x07
  90:	98 85       	ldd	r25, Y+8	; 0x08
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	f9 01       	movw	r30, r18
  96:	e8 0f       	add	r30, r24
  98:	f9 1f       	adc	r31, r25
  9a:	8b 81       	ldd	r24, Y+3	; 0x03
  9c:	80 83       	st	Z, r24
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	9a 81       	ldd	r25, Y+2	; 0x02
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	01 f4       	brne	.+0      	; 0xa6 <_ZNK6String11lastIndexOfEcj+0xa6>
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	9f ef       	ldi	r25, 0xFF	; 255
  aa:	9a 87       	std	Y+10, r25	; 0x0a
  ac:	89 87       	std	Y+9, r24	; 0x09
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZNK6String11lastIndexOfEcj+0xb0>
  b0:	29 81       	ldd	r18, Y+1	; 0x01
  b2:	3a 81       	ldd	r19, Y+2	; 0x02
  b4:	ec 81       	ldd	r30, Y+4	; 0x04
  b6:	fd 81       	ldd	r31, Y+5	; 0x05
  b8:	80 81       	ld	r24, Z
  ba:	91 81       	ldd	r25, Z+1	; 0x01
  bc:	a9 01       	movw	r20, r18
  be:	48 1b       	sub	r20, r24
  c0:	59 0b       	sbc	r21, r25
  c2:	5a 87       	std	Y+10, r21	; 0x0a
  c4:	49 87       	std	Y+9, r20	; 0x09
  c6:	89 85       	ldd	r24, Y+9	; 0x09
  c8:	9a 85       	ldd	r25, Y+10	; 0x0a
  ca:	2a 96       	adiw	r28, 0x0a	; 10
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEc:

00000000 <_ZNK6String11lastIndexOfEc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String11lastIndexOfEc+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	e9 81       	ldd	r30, Y+1	; 0x01
  14:	fa 81       	ldd	r31, Y+2	; 0x02
  16:	84 81       	ldd	r24, Z+4	; 0x04
  18:	95 81       	ldd	r25, Z+5	; 0x05
}
  1a:	9c 01       	movw	r18, r24
  1c:	21 50       	subi	r18, 0x01	; 1
  1e:	30 40       	sbci	r19, 0x00	; 0
  20:	89 81       	ldd	r24, Y+1	; 0x01
  22:	9a 81       	ldd	r25, Y+2	; 0x02
  24:	6b 81       	ldd	r22, Y+3	; 0x03
  26:	a9 01       	movw	r20, r18
  28:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEc>
  2c:	0f 90       	pop	r0
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	cf 91       	pop	r28
  34:	df 91       	pop	r29
  36:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEcj:

00000000 <_ZNK6String7indexOfEcj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	6d 83       	std	Y+5, r22	; 0x05
}
  1a:	5f 83       	std	Y+7, r21	; 0x07
  1c:	4e 83       	std	Y+6, r20	; 0x06
  1e:	eb 81       	ldd	r30, Y+3	; 0x03
  20:	fc 81       	ldd	r31, Y+4	; 0x04
  22:	24 81       	ldd	r18, Z+4	; 0x04
  24:	35 81       	ldd	r19, Z+5	; 0x05
  26:	8e 81       	ldd	r24, Y+6	; 0x06
  28:	9f 81       	ldd	r25, Y+7	; 0x07
  2a:	82 17       	cp	r24, r18
  2c:	93 07       	cpc	r25, r19
  2e:	00 f0       	brcs	.+0      	; 0x30 <_ZNK6String7indexOfEcj+0x30>
  30:	4f ef       	ldi	r20, 0xFF	; 255
  32:	5f ef       	ldi	r21, 0xFF	; 255
  34:	59 87       	std	Y+9, r21	; 0x09
  36:	48 87       	std	Y+8, r20	; 0x08
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZNK6String7indexOfEcj+0x3a>
  3a:	eb 81       	ldd	r30, Y+3	; 0x03
  3c:	fc 81       	ldd	r31, Y+4	; 0x04
  3e:	20 81       	ld	r18, Z
  40:	31 81       	ldd	r19, Z+1	; 0x01
  42:	8e 81       	ldd	r24, Y+6	; 0x06
  44:	9f 81       	ldd	r25, Y+7	; 0x07
  46:	a9 01       	movw	r20, r18
  48:	48 0f       	add	r20, r24
  4a:	59 1f       	adc	r21, r25
  4c:	8d 81       	ldd	r24, Y+5	; 0x05
  4e:	28 2f       	mov	r18, r24
  50:	33 27       	eor	r19, r19
  52:	27 fd       	sbrc	r18, 7
  54:	30 95       	com	r19
  56:	ca 01       	movw	r24, r20
  58:	b9 01       	movw	r22, r18
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEcj>
  5e:	9a 83       	std	Y+2, r25	; 0x02
  60:	89 83       	std	Y+1, r24	; 0x01
  62:	89 81       	ldd	r24, Y+1	; 0x01
  64:	9a 81       	ldd	r25, Y+2	; 0x02
  66:	00 97       	sbiw	r24, 0x00	; 0
  68:	01 f4       	brne	.+0      	; 0x6a <_ZNK6String7indexOfEcj+0x6a>
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	9f ef       	ldi	r25, 0xFF	; 255
  6e:	99 87       	std	Y+9, r25	; 0x09
  70:	88 87       	std	Y+8, r24	; 0x08
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZNK6String7indexOfEcj+0x74>
  74:	29 81       	ldd	r18, Y+1	; 0x01
  76:	3a 81       	ldd	r19, Y+2	; 0x02
  78:	eb 81       	ldd	r30, Y+3	; 0x03
  7a:	fc 81       	ldd	r31, Y+4	; 0x04
  7c:	80 81       	ld	r24, Z
  7e:	91 81       	ldd	r25, Z+1	; 0x01
  80:	a9 01       	movw	r20, r18
  82:	48 1b       	sub	r20, r24
  84:	59 0b       	sbc	r21, r25
  86:	59 87       	std	Y+9, r21	; 0x09
  88:	48 87       	std	Y+8, r20	; 0x08
  8a:	88 85       	ldd	r24, Y+8	; 0x08
  8c:	99 85       	ldd	r25, Y+9	; 0x09
  8e:	29 96       	adiw	r28, 0x09	; 9
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEc:

00000000 <_ZNK6String7indexOfEc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String7indexOfEc+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	89 81       	ldd	r24, Y+1	; 0x01
  14:	9a 81       	ldd	r25, Y+2	; 0x02
  16:	6b 81       	ldd	r22, Y+3	; 0x03
  18:	40 e0       	ldi	r20, 0x00	; 0
}
  1a:	50 e0       	ldi	r21, 0x00	; 0
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEc>
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

Disassembly of section .text._ZNK6String8getBytesEPhjj:

00000000 <_ZNK6String8getBytesEPhjj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
}
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	58 87       	std	Y+8, r21	; 0x08
  1e:	4f 83       	std	Y+7, r20	; 0x07
  20:	3a 87       	std	Y+10, r19	; 0x0a
  22:	29 87       	std	Y+9, r18	; 0x09
  24:	8f 81       	ldd	r24, Y+7	; 0x07
  26:	98 85       	ldd	r25, Y+8	; 0x08
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZNK6String8getBytesEPhjj+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZNK6String8getBytesEPhjj+0x2e>
  2e:	8d 81       	ldd	r24, Y+5	; 0x05
  30:	9e 81       	ldd	r25, Y+6	; 0x06
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <_ZNK6String8getBytesEPhjj+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZNK6String8getBytesEPhjj+0x38>
  38:	eb 81       	ldd	r30, Y+3	; 0x03
  3a:	fc 81       	ldd	r31, Y+4	; 0x04
  3c:	24 81       	ldd	r18, Z+4	; 0x04
  3e:	35 81       	ldd	r19, Z+5	; 0x05
  40:	89 85       	ldd	r24, Y+9	; 0x09
  42:	9a 85       	ldd	r25, Y+10	; 0x0a
  44:	82 17       	cp	r24, r18
  46:	93 07       	cpc	r25, r19
  48:	00 f0       	brcs	.+0      	; 0x4a <_ZNK6String8getBytesEPhjj+0x4a>
  4a:	ed 81       	ldd	r30, Y+5	; 0x05
  4c:	fe 81       	ldd	r31, Y+6	; 0x06
  4e:	10 82       	st	Z, r1
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZNK6String8getBytesEPhjj+0x52>
  52:	8f 81       	ldd	r24, Y+7	; 0x07
  54:	98 85       	ldd	r25, Y+8	; 0x08
  56:	01 97       	sbiw	r24, 0x01	; 1
  58:	9a 83       	std	Y+2, r25	; 0x02
  5a:	89 83       	std	Y+1, r24	; 0x01
  5c:	eb 81       	ldd	r30, Y+3	; 0x03
  5e:	fc 81       	ldd	r31, Y+4	; 0x04
  60:	24 81       	ldd	r18, Z+4	; 0x04
  62:	35 81       	ldd	r19, Z+5	; 0x05
  64:	89 85       	ldd	r24, Y+9	; 0x09
  66:	9a 85       	ldd	r25, Y+10	; 0x0a
  68:	28 1b       	sub	r18, r24
  6a:	39 0b       	sbc	r19, r25
  6c:	89 81       	ldd	r24, Y+1	; 0x01
  6e:	9a 81       	ldd	r25, Y+2	; 0x02
  70:	28 17       	cp	r18, r24
  72:	39 07       	cpc	r19, r25
  74:	00 f4       	brcc	.+0      	; 0x76 <_ZNK6String8getBytesEPhjj+0x76>
  76:	eb 81       	ldd	r30, Y+3	; 0x03
  78:	fc 81       	ldd	r31, Y+4	; 0x04
  7a:	24 81       	ldd	r18, Z+4	; 0x04
  7c:	35 81       	ldd	r19, Z+5	; 0x05
  7e:	89 85       	ldd	r24, Y+9	; 0x09
  80:	9a 85       	ldd	r25, Y+10	; 0x0a
  82:	a9 01       	movw	r20, r18
  84:	48 1b       	sub	r20, r24
  86:	59 0b       	sbc	r21, r25
  88:	ca 01       	movw	r24, r20
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	6d 81       	ldd	r22, Y+5	; 0x05
  90:	7e 81       	ldd	r23, Y+6	; 0x06
  92:	eb 81       	ldd	r30, Y+3	; 0x03
  94:	fc 81       	ldd	r31, Y+4	; 0x04
  96:	20 81       	ld	r18, Z
  98:	31 81       	ldd	r19, Z+1	; 0x01
  9a:	89 85       	ldd	r24, Y+9	; 0x09
  9c:	9a 85       	ldd	r25, Y+10	; 0x0a
  9e:	28 0f       	add	r18, r24
  a0:	39 1f       	adc	r19, r25
  a2:	49 81       	ldd	r20, Y+1	; 0x01
  a4:	5a 81       	ldd	r21, Y+2	; 0x02
  a6:	cb 01       	movw	r24, r22
  a8:	b9 01       	movw	r22, r18
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8getBytesEPhjj>
  ae:	2d 81       	ldd	r18, Y+5	; 0x05
  b0:	3e 81       	ldd	r19, Y+6	; 0x06
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	9a 81       	ldd	r25, Y+2	; 0x02
  b6:	f9 01       	movw	r30, r18
  b8:	e8 0f       	add	r30, r24
  ba:	f9 1f       	adc	r31, r25
  bc:	10 82       	st	Z, r1
  be:	2a 96       	adiw	r28, 0x0a	; 10
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	cd bf       	out	0x3d, r28	; 61
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	08 95       	ret

Disassembly of section .text._ZNK6String8endsWithERKS_:

00000000 <_ZNK6String8endsWithERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String8endsWithERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6String8endsWithERKS_+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
}
  1a:	24 81       	ldd	r18, Z+4	; 0x04
  1c:	35 81       	ldd	r19, Z+5	; 0x05
  1e:	eb 81       	ldd	r30, Y+3	; 0x03
  20:	fc 81       	ldd	r31, Y+4	; 0x04
  22:	84 81       	ldd	r24, Z+4	; 0x04
  24:	95 81       	ldd	r25, Z+5	; 0x05
  26:	28 17       	cp	r18, r24
  28:	39 07       	cpc	r19, r25
  2a:	00 f0       	brcs	.+0      	; 0x2c <_ZNK6String8endsWithERKS_+0x2c>
  2c:	e9 81       	ldd	r30, Y+1	; 0x01
  2e:	fa 81       	ldd	r31, Y+2	; 0x02
  30:	80 81       	ld	r24, Z
  32:	91 81       	ldd	r25, Z+1	; 0x01
  34:	00 97       	sbiw	r24, 0x00	; 0
  36:	01 f0       	breq	.+0      	; 0x38 <_ZNK6String8endsWithERKS_+0x38>
  38:	eb 81       	ldd	r30, Y+3	; 0x03
  3a:	fc 81       	ldd	r31, Y+4	; 0x04
  3c:	80 81       	ld	r24, Z
  3e:	91 81       	ldd	r25, Z+1	; 0x01
  40:	00 97       	sbiw	r24, 0x00	; 0
  42:	01 f4       	brne	.+0      	; 0x44 <_ZNK6String8endsWithERKS_+0x44>
  44:	1d 82       	std	Y+5, r1	; 0x05
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZNK6String8endsWithERKS_+0x48>
  48:	e9 81       	ldd	r30, Y+1	; 0x01
  4a:	fa 81       	ldd	r31, Y+2	; 0x02
  4c:	40 81       	ld	r20, Z
  4e:	51 81       	ldd	r21, Z+1	; 0x01
  50:	e9 81       	ldd	r30, Y+1	; 0x01
  52:	fa 81       	ldd	r31, Y+2	; 0x02
  54:	24 81       	ldd	r18, Z+4	; 0x04
  56:	35 81       	ldd	r19, Z+5	; 0x05
  58:	eb 81       	ldd	r30, Y+3	; 0x03
  5a:	fc 81       	ldd	r31, Y+4	; 0x04
  5c:	84 81       	ldd	r24, Z+4	; 0x04
  5e:	95 81       	ldd	r25, Z+5	; 0x05
  60:	b9 01       	movw	r22, r18
  62:	68 1b       	sub	r22, r24
  64:	79 0b       	sbc	r23, r25
  66:	cb 01       	movw	r24, r22
  68:	84 0f       	add	r24, r20
  6a:	95 1f       	adc	r25, r21
  6c:	eb 81       	ldd	r30, Y+3	; 0x03
  6e:	fc 81       	ldd	r31, Y+4	; 0x04
  70:	20 81       	ld	r18, Z
  72:	31 81       	ldd	r19, Z+1	; 0x01
  74:	b9 01       	movw	r22, r18
  76:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8endsWithERKS_>
  7a:	1d 82       	std	Y+5, r1	; 0x05
  7c:	00 97       	sbiw	r24, 0x00	; 0
  7e:	01 f4       	brne	.+0      	; 0x80 <_ZNK6String8endsWithERKS_+0x80>
  80:	71 e0       	ldi	r23, 0x01	; 1
  82:	7d 83       	std	Y+5, r23	; 0x05
  84:	8d 81       	ldd	r24, Y+5	; 0x05
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	0f 90       	pop	r0
  8c:	0f 90       	pop	r0
  8e:	0f 90       	pop	r0
  90:	cf 91       	pop	r28
  92:	df 91       	pop	r29
  94:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsEPKc:

00000000 <_ZNK6String6equalsEPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String6equalsEPKc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6String6equalsEPKc+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZNK6String6equalsEPKc+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
}
  1a:	84 81       	ldd	r24, Z+4	; 0x04
  1c:	95 81       	ldd	r25, Z+5	; 0x05
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f4       	brne	.+0      	; 0x22 <_ZNK6String6equalsEPKc+0x22>
  22:	8b 81       	ldd	r24, Y+3	; 0x03
  24:	9c 81       	ldd	r25, Y+4	; 0x04
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f0       	breq	.+0      	; 0x2a <_ZNK6String6equalsEPKc+0x2a>
  2a:	eb 81       	ldd	r30, Y+3	; 0x03
  2c:	fc 81       	ldd	r31, Y+4	; 0x04
  2e:	80 81       	ld	r24, Z
  30:	88 23       	and	r24, r24
  32:	01 f4       	brne	.+0      	; 0x34 <_ZNK6String6equalsEPKc+0x34>
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	8d 83       	std	Y+5, r24	; 0x05
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZNK6String6equalsEPKc+0x3a>
  3a:	1d 82       	std	Y+5, r1	; 0x05
  3c:	8d 81       	ldd	r24, Y+5	; 0x05
  3e:	8e 83       	std	Y+6, r24	; 0x06
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZNK6String6equalsEPKc+0x42>
  42:	8b 81       	ldd	r24, Y+3	; 0x03
  44:	9c 81       	ldd	r25, Y+4	; 0x04
  46:	00 97       	sbiw	r24, 0x00	; 0
  48:	01 f4       	brne	.+0      	; 0x4a <_ZNK6String6equalsEPKc+0x4a>
  4a:	e9 81       	ldd	r30, Y+1	; 0x01
  4c:	fa 81       	ldd	r31, Y+2	; 0x02
  4e:	01 90       	ld	r0, Z+
  50:	f0 81       	ld	r31, Z
  52:	e0 2d       	mov	r30, r0
  54:	80 81       	ld	r24, Z
  56:	1e 82       	std	Y+6, r1	; 0x06
  58:	88 23       	and	r24, r24
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZNK6String6equalsEPKc+0x5c>
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	8e 83       	std	Y+6, r24	; 0x06
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZNK6String6equalsEPKc+0x62>
  62:	e9 81       	ldd	r30, Y+1	; 0x01
  64:	fa 81       	ldd	r31, Y+2	; 0x02
  66:	80 81       	ld	r24, Z
  68:	91 81       	ldd	r25, Z+1	; 0x01
  6a:	2b 81       	ldd	r18, Y+3	; 0x03
  6c:	3c 81       	ldd	r19, Y+4	; 0x04
  6e:	b9 01       	movw	r22, r18
  70:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsEPKc>
  74:	1e 82       	std	Y+6, r1	; 0x06
  76:	00 97       	sbiw	r24, 0x00	; 0
  78:	01 f4       	brne	.+0      	; 0x7a <_ZNK6String6equalsEPKc+0x7a>
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	8e 83       	std	Y+6, r24	; 0x06
  7e:	8e 81       	ldd	r24, Y+6	; 0x06
  80:	26 96       	adiw	r28, 0x06	; 6
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	f8 94       	cli
  86:	de bf       	out	0x3e, r29	; 62
  88:	0f be       	out	0x3f, r0	; 63
  8a:	cd bf       	out	0x3d, r28	; 61
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	08 95       	ret

Disassembly of section .text._ZNK6String9compareToERKS_:

00000000 <_ZNK6String9compareToERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String9compareToERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6String9compareToERKS_+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZNK6String9compareToERKS_+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
}
  1a:	80 81       	ld	r24, Z
  1c:	91 81       	ldd	r25, Z+1	; 0x01
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZNK6String9compareToERKS_+0x22>
  22:	eb 81       	ldd	r30, Y+3	; 0x03
  24:	fc 81       	ldd	r31, Y+4	; 0x04
  26:	80 81       	ld	r24, Z
  28:	91 81       	ldd	r25, Z+1	; 0x01
  2a:	00 97       	sbiw	r24, 0x00	; 0
  2c:	01 f4       	brne	.+0      	; 0x2e <_ZNK6String9compareToERKS_+0x2e>
  2e:	eb 81       	ldd	r30, Y+3	; 0x03
  30:	fc 81       	ldd	r31, Y+4	; 0x04
  32:	80 81       	ld	r24, Z
  34:	91 81       	ldd	r25, Z+1	; 0x01
  36:	00 97       	sbiw	r24, 0x00	; 0
  38:	01 f0       	breq	.+0      	; 0x3a <_ZNK6String9compareToERKS_+0x3a>
  3a:	eb 81       	ldd	r30, Y+3	; 0x03
  3c:	fc 81       	ldd	r31, Y+4	; 0x04
  3e:	84 81       	ldd	r24, Z+4	; 0x04
  40:	95 81       	ldd	r25, Z+5	; 0x05
  42:	00 97       	sbiw	r24, 0x00	; 0
  44:	01 f0       	breq	.+0      	; 0x46 <_ZNK6String9compareToERKS_+0x46>
  46:	eb 81       	ldd	r30, Y+3	; 0x03
  48:	fc 81       	ldd	r31, Y+4	; 0x04
  4a:	80 81       	ld	r24, Z
  4c:	91 81       	ldd	r25, Z+1	; 0x01
  4e:	fc 01       	movw	r30, r24
  50:	80 81       	ld	r24, Z
  52:	88 2f       	mov	r24, r24
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	22 27       	eor	r18, r18
  58:	33 27       	eor	r19, r19
  5a:	28 1b       	sub	r18, r24
  5c:	39 0b       	sbc	r19, r25
  5e:	3e 83       	std	Y+6, r19	; 0x06
  60:	2d 83       	std	Y+5, r18	; 0x05
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZNK6String9compareToERKS_+0x64>
  64:	e9 81       	ldd	r30, Y+1	; 0x01
  66:	fa 81       	ldd	r31, Y+2	; 0x02
  68:	80 81       	ld	r24, Z
  6a:	91 81       	ldd	r25, Z+1	; 0x01
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	01 f0       	breq	.+0      	; 0x70 <_ZNK6String9compareToERKS_+0x70>
  70:	e9 81       	ldd	r30, Y+1	; 0x01
  72:	fa 81       	ldd	r31, Y+2	; 0x02
  74:	84 81       	ldd	r24, Z+4	; 0x04
  76:	95 81       	ldd	r25, Z+5	; 0x05
  78:	00 97       	sbiw	r24, 0x00	; 0
  7a:	01 f0       	breq	.+0      	; 0x7c <_ZNK6String9compareToERKS_+0x7c>
  7c:	e9 81       	ldd	r30, Y+1	; 0x01
  7e:	fa 81       	ldd	r31, Y+2	; 0x02
  80:	80 81       	ld	r24, Z
  82:	91 81       	ldd	r25, Z+1	; 0x01
  84:	fc 01       	movw	r30, r24
  86:	80 81       	ld	r24, Z
  88:	28 2f       	mov	r18, r24
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	3e 83       	std	Y+6, r19	; 0x06
  8e:	2d 83       	std	Y+5, r18	; 0x05
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZNK6String9compareToERKS_+0x92>
  92:	1e 82       	std	Y+6, r1	; 0x06
  94:	1d 82       	std	Y+5, r1	; 0x05
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZNK6String9compareToERKS_+0x98>
  98:	e9 81       	ldd	r30, Y+1	; 0x01
  9a:	fa 81       	ldd	r31, Y+2	; 0x02
  9c:	80 81       	ld	r24, Z
  9e:	91 81       	ldd	r25, Z+1	; 0x01
  a0:	eb 81       	ldd	r30, Y+3	; 0x03
  a2:	fc 81       	ldd	r31, Y+4	; 0x04
  a4:	20 81       	ld	r18, Z
  a6:	31 81       	ldd	r19, Z+1	; 0x01
  a8:	b9 01       	movw	r22, r18
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9compareToERKS_>
  ae:	9e 83       	std	Y+6, r25	; 0x06
  b0:	8d 83       	std	Y+5, r24	; 0x05
  b2:	8d 81       	ldd	r24, Y+5	; 0x05
  b4:	9e 81       	ldd	r25, Y+6	; 0x06
  b6:	26 96       	adiw	r28, 0x06	; 6
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

Disassembly of section .text._ZNK6StringgeERKS_:

00000000 <_ZNK6StringgeERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6StringgeERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6StringgeERKS_+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
}
  1a:	2b 81       	ldd	r18, Y+3	; 0x03
  1c:	3c 81       	ldd	r19, Y+4	; 0x04
  1e:	b9 01       	movw	r22, r18
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgeERKS_>
  24:	1d 82       	std	Y+5, r1	; 0x05
  26:	99 23       	and	r25, r25
  28:	04 f0       	brlt	.+0      	; 0x2a <_ZNK6StringgeERKS_+0x2a>
  2a:	81 e0       	ldi	r24, 0x01	; 1
  2c:	8d 83       	std	Y+5, r24	; 0x05
  2e:	8d 81       	ldd	r24, Y+5	; 0x05
  30:	0f 90       	pop	r0
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	cf 91       	pop	r28
  3c:	df 91       	pop	r29
  3e:	08 95       	ret

Disassembly of section .text._ZNK6StringleERKS_:

00000000 <_ZNK6StringleERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6StringleERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6StringleERKS_+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
}
  1a:	2b 81       	ldd	r18, Y+3	; 0x03
  1c:	3c 81       	ldd	r19, Y+4	; 0x04
  1e:	b9 01       	movw	r22, r18
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringleERKS_>
  24:	1d 82       	std	Y+5, r1	; 0x05
  26:	18 16       	cp	r1, r24
  28:	19 06       	cpc	r1, r25
  2a:	04 f0       	brlt	.+0      	; 0x2c <_ZNK6StringleERKS_+0x2c>
  2c:	81 e0       	ldi	r24, 0x01	; 1
  2e:	8d 83       	std	Y+5, r24	; 0x05
  30:	8d 81       	ldd	r24, Y+5	; 0x05
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	0f 90       	pop	r0
  3c:	cf 91       	pop	r28
  3e:	df 91       	pop	r29
  40:	08 95       	ret

Disassembly of section .text._ZNK6StringgtERKS_:

00000000 <_ZNK6StringgtERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6StringgtERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6StringgtERKS_+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
}
  1a:	2b 81       	ldd	r18, Y+3	; 0x03
  1c:	3c 81       	ldd	r19, Y+4	; 0x04
  1e:	b9 01       	movw	r22, r18
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgtERKS_>
  24:	1d 82       	std	Y+5, r1	; 0x05
  26:	18 16       	cp	r1, r24
  28:	19 06       	cpc	r1, r25
  2a:	04 f4       	brge	.+0      	; 0x2c <_ZNK6StringgtERKS_+0x2c>
  2c:	81 e0       	ldi	r24, 0x01	; 1
  2e:	8d 83       	std	Y+5, r24	; 0x05
  30:	8d 81       	ldd	r24, Y+5	; 0x05
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	0f 90       	pop	r0
  3c:	cf 91       	pop	r28
  3e:	df 91       	pop	r29
  40:	08 95       	ret

Disassembly of section .text._ZNK6StringltERKS_:

00000000 <_ZNK6StringltERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6StringltERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6StringltERKS_+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
}
  1a:	2b 81       	ldd	r18, Y+3	; 0x03
  1c:	3c 81       	ldd	r19, Y+4	; 0x04
  1e:	b9 01       	movw	r22, r18
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringltERKS_>
  24:	1d 82       	std	Y+5, r1	; 0x05
  26:	99 23       	and	r25, r25
  28:	04 f4       	brge	.+0      	; 0x2a <_ZNK6StringltERKS_+0x2a>
  2a:	81 e0       	ldi	r24, 0x01	; 1
  2c:	8d 83       	std	Y+5, r24	; 0x05
  2e:	8d 81       	ldd	r24, Y+5	; 0x05
  30:	0f 90       	pop	r0
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	cf 91       	pop	r28
  3c:	df 91       	pop	r29
  3e:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsERKS_:

00000000 <_ZNK6String6equalsERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String6equalsERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6String6equalsERKS_+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
}
  1a:	24 81       	ldd	r18, Z+4	; 0x04
  1c:	35 81       	ldd	r19, Z+5	; 0x05
  1e:	eb 81       	ldd	r30, Y+3	; 0x03
  20:	fc 81       	ldd	r31, Y+4	; 0x04
  22:	84 81       	ldd	r24, Z+4	; 0x04
  24:	95 81       	ldd	r25, Z+5	; 0x05
  26:	28 17       	cp	r18, r24
  28:	39 07       	cpc	r19, r25
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZNK6String6equalsERKS_+0x2c>
  2c:	89 81       	ldd	r24, Y+1	; 0x01
  2e:	9a 81       	ldd	r25, Y+2	; 0x02
  30:	2b 81       	ldd	r18, Y+3	; 0x03
  32:	3c 81       	ldd	r19, Y+4	; 0x04
  34:	b9 01       	movw	r22, r18
  36:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsERKS_>
  3a:	00 97       	sbiw	r24, 0x00	; 0
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZNK6String6equalsERKS_+0x3e>
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	8d 83       	std	Y+5, r24	; 0x05
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZNK6String6equalsERKS_+0x44>
  44:	1d 82       	std	Y+5, r1	; 0x05
  46:	8d 81       	ldd	r24, Y+5	; 0x05
  48:	0f 90       	pop	r0
  4a:	0f 90       	pop	r0
  4c:	0f 90       	pop	r0
  4e:	0f 90       	pop	r0
  50:	0f 90       	pop	r0
  52:	cf 91       	pop	r28
  54:	df 91       	pop	r29
  56:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_j:

00000000 <_ZNK6String10startsWithERKS_j>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9a 83       	std	Y+2, r25	; 0x02
  16:	89 83       	std	Y+1, r24	; 0x01
  18:	7c 83       	std	Y+4, r23	; 0x04
}
  1a:	6b 83       	std	Y+3, r22	; 0x03
  1c:	5e 83       	std	Y+6, r21	; 0x06
  1e:	4d 83       	std	Y+5, r20	; 0x05
  20:	e9 81       	ldd	r30, Y+1	; 0x01
  22:	fa 81       	ldd	r31, Y+2	; 0x02
  24:	24 81       	ldd	r18, Z+4	; 0x04
  26:	35 81       	ldd	r19, Z+5	; 0x05
  28:	eb 81       	ldd	r30, Y+3	; 0x03
  2a:	fc 81       	ldd	r31, Y+4	; 0x04
  2c:	84 81       	ldd	r24, Z+4	; 0x04
  2e:	95 81       	ldd	r25, Z+5	; 0x05
  30:	28 1b       	sub	r18, r24
  32:	39 0b       	sbc	r19, r25
  34:	8d 81       	ldd	r24, Y+5	; 0x05
  36:	9e 81       	ldd	r25, Y+6	; 0x06
  38:	28 17       	cp	r18, r24
  3a:	39 07       	cpc	r19, r25
  3c:	00 f0       	brcs	.+0      	; 0x3e <_ZNK6String10startsWithERKS_j+0x3e>
  3e:	e9 81       	ldd	r30, Y+1	; 0x01
  40:	fa 81       	ldd	r31, Y+2	; 0x02
  42:	80 81       	ld	r24, Z
  44:	91 81       	ldd	r25, Z+1	; 0x01
  46:	00 97       	sbiw	r24, 0x00	; 0
  48:	01 f0       	breq	.+0      	; 0x4a <_ZNK6String10startsWithERKS_j+0x4a>
  4a:	eb 81       	ldd	r30, Y+3	; 0x03
  4c:	fc 81       	ldd	r31, Y+4	; 0x04
  4e:	80 81       	ld	r24, Z
  50:	91 81       	ldd	r25, Z+1	; 0x01
  52:	00 97       	sbiw	r24, 0x00	; 0
  54:	01 f4       	brne	.+0      	; 0x56 <_ZNK6String10startsWithERKS_j+0x56>
  56:	1f 82       	std	Y+7, r1	; 0x07
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZNK6String10startsWithERKS_j+0x5a>
  5a:	e9 81       	ldd	r30, Y+1	; 0x01
  5c:	fa 81       	ldd	r31, Y+2	; 0x02
  5e:	20 81       	ld	r18, Z
  60:	31 81       	ldd	r19, Z+1	; 0x01
  62:	8d 81       	ldd	r24, Y+5	; 0x05
  64:	9e 81       	ldd	r25, Y+6	; 0x06
  66:	82 0f       	add	r24, r18
  68:	93 1f       	adc	r25, r19
  6a:	eb 81       	ldd	r30, Y+3	; 0x03
  6c:	fc 81       	ldd	r31, Y+4	; 0x04
  6e:	40 81       	ld	r20, Z
  70:	51 81       	ldd	r21, Z+1	; 0x01
  72:	eb 81       	ldd	r30, Y+3	; 0x03
  74:	fc 81       	ldd	r31, Y+4	; 0x04
  76:	24 81       	ldd	r18, Z+4	; 0x04
  78:	35 81       	ldd	r19, Z+5	; 0x05
  7a:	ba 01       	movw	r22, r20
  7c:	a9 01       	movw	r20, r18
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_j>
  82:	1f 82       	std	Y+7, r1	; 0x07
  84:	00 97       	sbiw	r24, 0x00	; 0
  86:	01 f4       	brne	.+0      	; 0x88 <_ZNK6String10startsWithERKS_j+0x88>
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	8f 83       	std	Y+7, r24	; 0x07
  8c:	8f 81       	ldd	r24, Y+7	; 0x07
  8e:	27 96       	adiw	r28, 0x07	; 7
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_:

00000000 <_ZNK6String10startsWithERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String10startsWithERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZNK6String10startsWithERKS_+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
}
  1a:	24 81       	ldd	r18, Z+4	; 0x04
  1c:	35 81       	ldd	r19, Z+5	; 0x05
  1e:	eb 81       	ldd	r30, Y+3	; 0x03
  20:	fc 81       	ldd	r31, Y+4	; 0x04
  22:	84 81       	ldd	r24, Z+4	; 0x04
  24:	95 81       	ldd	r25, Z+5	; 0x05
  26:	28 17       	cp	r18, r24
  28:	39 07       	cpc	r19, r25
  2a:	00 f4       	brcc	.+0      	; 0x2c <_ZNK6String10startsWithERKS_+0x2c>
  2c:	1d 82       	std	Y+5, r1	; 0x05
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String10startsWithERKS_+0x30>
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	9a 81       	ldd	r25, Y+2	; 0x02
  34:	2b 81       	ldd	r18, Y+3	; 0x03
  36:	3c 81       	ldd	r19, Y+4	; 0x04
  38:	b9 01       	movw	r22, r18
  3a:	40 e0       	ldi	r20, 0x00	; 0
  3c:	50 e0       	ldi	r21, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_>
  42:	8d 83       	std	Y+5, r24	; 0x05
  44:	8d 81       	ldd	r24, Y+5	; 0x05
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	0f 90       	pop	r0
  4c:	0f 90       	pop	r0
  4e:	0f 90       	pop	r0
  50:	cf 91       	pop	r28
  52:	df 91       	pop	r29
  54:	08 95       	ret

Disassembly of section .text._ZN6String12changeBufferEj:

00000000 <_ZN6String12changeBufferEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
}
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	eb 81       	ldd	r30, Y+3	; 0x03
  1e:	fc 81       	ldd	r31, Y+4	; 0x04
  20:	40 81       	ld	r20, Z
  22:	51 81       	ldd	r21, Z+1	; 0x01
  24:	8d 81       	ldd	r24, Y+5	; 0x05
  26:	9e 81       	ldd	r25, Y+6	; 0x06
  28:	9c 01       	movw	r18, r24
  2a:	2f 5f       	subi	r18, 0xFF	; 255
  2c:	3f 4f       	sbci	r19, 0xFF	; 255
  2e:	ca 01       	movw	r24, r20
  30:	b9 01       	movw	r22, r18
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN6String12changeBufferEj>
  36:	9a 83       	std	Y+2, r25	; 0x02
  38:	89 83       	std	Y+1, r24	; 0x01
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	9a 81       	ldd	r25, Y+2	; 0x02
  3e:	00 97       	sbiw	r24, 0x00	; 0
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN6String12changeBufferEj+0x42>
  42:	eb 81       	ldd	r30, Y+3	; 0x03
  44:	fc 81       	ldd	r31, Y+4	; 0x04
  46:	89 81       	ldd	r24, Y+1	; 0x01
  48:	9a 81       	ldd	r25, Y+2	; 0x02
  4a:	91 83       	std	Z+1, r25	; 0x01
  4c:	80 83       	st	Z, r24
  4e:	eb 81       	ldd	r30, Y+3	; 0x03
  50:	fc 81       	ldd	r31, Y+4	; 0x04
  52:	8d 81       	ldd	r24, Y+5	; 0x05
  54:	9e 81       	ldd	r25, Y+6	; 0x06
  56:	93 83       	std	Z+3, r25	; 0x03
  58:	82 83       	std	Z+2, r24	; 0x02
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	8f 83       	std	Y+7, r24	; 0x07
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZN6String12changeBufferEj+0x60>
  60:	1f 82       	std	Y+7, r1	; 0x07
  62:	8f 81       	ldd	r24, Y+7	; 0x07
  64:	27 96       	adiw	r28, 0x07	; 7
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	f8 94       	cli
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

Disassembly of section .text._ZN6String7replaceERKS_S1_:

00000000 <_ZN6String7replaceERKS_S1_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	69 97       	sbiw	r28, 0x19	; 25
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	98 8b       	std	Y+16, r25	; 0x10
  16:	8f 87       	std	Y+15, r24	; 0x0f
  18:	7a 8b       	std	Y+18, r23	; 0x12
}
  1a:	69 8b       	std	Y+17, r22	; 0x11
  1c:	5c 8b       	std	Y+20, r21	; 0x14
  1e:	4b 8b       	std	Y+19, r20	; 0x13
  20:	ef 85       	ldd	r30, Y+15	; 0x0f
  22:	f8 89       	ldd	r31, Y+16	; 0x10
  24:	84 81       	ldd	r24, Z+4	; 0x04
  26:	95 81       	ldd	r25, Z+5	; 0x05
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN6String7replaceERKS_S1_+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6String7replaceERKS_S1_+0x2e>
  2e:	e9 89       	ldd	r30, Y+17	; 0x11
  30:	fa 89       	ldd	r31, Y+18	; 0x12
  32:	84 81       	ldd	r24, Z+4	; 0x04
  34:	95 81       	ldd	r25, Z+5	; 0x05
  36:	00 97       	sbiw	r24, 0x00	; 0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String7replaceERKS_S1_+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN6String7replaceERKS_S1_+0x3c>
  3c:	eb 89       	ldd	r30, Y+19	; 0x13
  3e:	fc 89       	ldd	r31, Y+20	; 0x14
  40:	24 81       	ldd	r18, Z+4	; 0x04
  42:	35 81       	ldd	r19, Z+5	; 0x05
  44:	e9 89       	ldd	r30, Y+17	; 0x11
  46:	fa 89       	ldd	r31, Y+18	; 0x12
  48:	84 81       	ldd	r24, Z+4	; 0x04
  4a:	95 81       	ldd	r25, Z+5	; 0x05
  4c:	a9 01       	movw	r20, r18
  4e:	48 1b       	sub	r20, r24
  50:	59 0b       	sbc	r21, r25
  52:	ca 01       	movw	r24, r20
  54:	9e 87       	std	Y+14, r25	; 0x0e
  56:	8d 87       	std	Y+13, r24	; 0x0d
  58:	ef 85       	ldd	r30, Y+15	; 0x0f
  5a:	f8 89       	ldd	r31, Y+16	; 0x10
  5c:	80 81       	ld	r24, Z
  5e:	91 81       	ldd	r25, Z+1	; 0x01
  60:	9c 87       	std	Y+12, r25	; 0x0c
  62:	8b 87       	std	Y+11, r24	; 0x0b
  64:	8d 85       	ldd	r24, Y+13	; 0x0d
  66:	9e 85       	ldd	r25, Y+14	; 0x0e
  68:	00 97       	sbiw	r24, 0x00	; 0
  6a:	01 f4       	brne	.+0      	; 0x6c <_ZN6String7replaceERKS_S1_+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6String7replaceERKS_S1_+0x6e>
  6e:	eb 89       	ldd	r30, Y+19	; 0x13
  70:	fc 89       	ldd	r31, Y+20	; 0x14
  72:	40 81       	ld	r20, Z
  74:	51 81       	ldd	r21, Z+1	; 0x01
  76:	eb 89       	ldd	r30, Y+19	; 0x13
  78:	fc 89       	ldd	r31, Y+20	; 0x14
  7a:	24 81       	ldd	r18, Z+4	; 0x04
  7c:	35 81       	ldd	r19, Z+5	; 0x05
  7e:	89 85       	ldd	r24, Y+9	; 0x09
  80:	9a 85       	ldd	r25, Y+10	; 0x0a
  82:	ba 01       	movw	r22, r20
  84:	a9 01       	movw	r20, r18
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  8a:	eb 89       	ldd	r30, Y+19	; 0x13
  8c:	fc 89       	ldd	r31, Y+20	; 0x14
  8e:	24 81       	ldd	r18, Z+4	; 0x04
  90:	35 81       	ldd	r19, Z+5	; 0x05
  92:	89 85       	ldd	r24, Y+9	; 0x09
  94:	9a 85       	ldd	r25, Y+10	; 0x0a
  96:	82 0f       	add	r24, r18
  98:	93 1f       	adc	r25, r19
  9a:	9c 87       	std	Y+12, r25	; 0x0c
  9c:	8b 87       	std	Y+11, r24	; 0x0b
  9e:	e9 89       	ldd	r30, Y+17	; 0x11
  a0:	fa 89       	ldd	r31, Y+18	; 0x12
  a2:	20 81       	ld	r18, Z
  a4:	31 81       	ldd	r19, Z+1	; 0x01
  a6:	8b 85       	ldd	r24, Y+11	; 0x0b
  a8:	9c 85       	ldd	r25, Y+12	; 0x0c
  aa:	b9 01       	movw	r22, r18
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  b0:	9a 87       	std	Y+10, r25	; 0x0a
  b2:	89 87       	std	Y+9, r24	; 0x09
  b4:	19 8e       	std	Y+25, r1	; 0x19
  b6:	89 85       	ldd	r24, Y+9	; 0x09
  b8:	9a 85       	ldd	r25, Y+10	; 0x0a
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	01 f0       	breq	.+0      	; 0xbe <_ZN6String7replaceERKS_S1_+0xbe>
  be:	51 e0       	ldi	r21, 0x01	; 1
  c0:	59 8f       	std	Y+25, r21	; 0x19
  c2:	89 8d       	ldd	r24, Y+25	; 0x19
  c4:	88 23       	and	r24, r24
  c6:	01 f4       	brne	.+0      	; 0xc8 <_ZN6String7replaceERKS_S1_+0xc8>
  c8:	00 c0       	rjmp	.+0      	; 0xca <_ZN6String7replaceERKS_S1_+0xca>
  ca:	8d 85       	ldd	r24, Y+13	; 0x0d
  cc:	9e 85       	ldd	r25, Y+14	; 0x0e
  ce:	99 23       	and	r25, r25
  d0:	04 f0       	brlt	.+0      	; 0xd2 <_ZN6String7replaceERKS_S1_+0xd2>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZN6String7replaceERKS_S1_+0xd4>
  d4:	ef 85       	ldd	r30, Y+15	; 0x0f
  d6:	f8 89       	ldd	r31, Y+16	; 0x10
  d8:	80 81       	ld	r24, Z
  da:	91 81       	ldd	r25, Z+1	; 0x01
  dc:	98 87       	std	Y+8, r25	; 0x08
  de:	8f 83       	std	Y+7, r24	; 0x07
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <_ZN6String7replaceERKS_S1_+0xe2>
  e2:	29 85       	ldd	r18, Y+9	; 0x09
  e4:	3a 85       	ldd	r19, Y+10	; 0x0a
  e6:	8b 85       	ldd	r24, Y+11	; 0x0b
  e8:	9c 85       	ldd	r25, Y+12	; 0x0c
  ea:	f9 01       	movw	r30, r18
  ec:	e8 1b       	sub	r30, r24
  ee:	f9 0b       	sbc	r31, r25
  f0:	cf 01       	movw	r24, r30
  f2:	9e 83       	std	Y+6, r25	; 0x06
  f4:	8d 83       	std	Y+5, r24	; 0x05
  f6:	8f 81       	ldd	r24, Y+7	; 0x07
  f8:	98 85       	ldd	r25, Y+8	; 0x08
  fa:	2b 85       	ldd	r18, Y+11	; 0x0b
  fc:	3c 85       	ldd	r19, Y+12	; 0x0c
  fe:	4d 81       	ldd	r20, Y+5	; 0x05
 100:	5e 81       	ldd	r21, Y+6	; 0x06
 102:	b9 01       	movw	r22, r18
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 108:	2f 81       	ldd	r18, Y+7	; 0x07
 10a:	38 85       	ldd	r19, Y+8	; 0x08
 10c:	8d 81       	ldd	r24, Y+5	; 0x05
 10e:	9e 81       	ldd	r25, Y+6	; 0x06
 110:	82 0f       	add	r24, r18
 112:	93 1f       	adc	r25, r19
 114:	98 87       	std	Y+8, r25	; 0x08
 116:	8f 83       	std	Y+7, r24	; 0x07
 118:	eb 89       	ldd	r30, Y+19	; 0x13
 11a:	fc 89       	ldd	r31, Y+20	; 0x14
 11c:	40 81       	ld	r20, Z
 11e:	51 81       	ldd	r21, Z+1	; 0x01
 120:	eb 89       	ldd	r30, Y+19	; 0x13
 122:	fc 89       	ldd	r31, Y+20	; 0x14
 124:	24 81       	ldd	r18, Z+4	; 0x04
 126:	35 81       	ldd	r19, Z+5	; 0x05
 128:	8f 81       	ldd	r24, Y+7	; 0x07
 12a:	98 85       	ldd	r25, Y+8	; 0x08
 12c:	ba 01       	movw	r22, r20
 12e:	a9 01       	movw	r20, r18
 130:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 134:	eb 89       	ldd	r30, Y+19	; 0x13
 136:	fc 89       	ldd	r31, Y+20	; 0x14
 138:	24 81       	ldd	r18, Z+4	; 0x04
 13a:	35 81       	ldd	r19, Z+5	; 0x05
 13c:	8f 81       	ldd	r24, Y+7	; 0x07
 13e:	98 85       	ldd	r25, Y+8	; 0x08
 140:	82 0f       	add	r24, r18
 142:	93 1f       	adc	r25, r19
 144:	98 87       	std	Y+8, r25	; 0x08
 146:	8f 83       	std	Y+7, r24	; 0x07
 148:	e9 89       	ldd	r30, Y+17	; 0x11
 14a:	fa 89       	ldd	r31, Y+18	; 0x12
 14c:	24 81       	ldd	r18, Z+4	; 0x04
 14e:	35 81       	ldd	r19, Z+5	; 0x05
 150:	89 85       	ldd	r24, Y+9	; 0x09
 152:	9a 85       	ldd	r25, Y+10	; 0x0a
 154:	82 0f       	add	r24, r18
 156:	93 1f       	adc	r25, r19
 158:	9c 87       	std	Y+12, r25	; 0x0c
 15a:	8b 87       	std	Y+11, r24	; 0x0b
 15c:	ef 85       	ldd	r30, Y+15	; 0x0f
 15e:	f8 89       	ldd	r31, Y+16	; 0x10
 160:	24 81       	ldd	r18, Z+4	; 0x04
 162:	35 81       	ldd	r19, Z+5	; 0x05
 164:	8d 85       	ldd	r24, Y+13	; 0x0d
 166:	9e 85       	ldd	r25, Y+14	; 0x0e
 168:	82 0f       	add	r24, r18
 16a:	93 1f       	adc	r25, r19
 16c:	ef 85       	ldd	r30, Y+15	; 0x0f
 16e:	f8 89       	ldd	r31, Y+16	; 0x10
 170:	95 83       	std	Z+5, r25	; 0x05
 172:	84 83       	std	Z+4, r24	; 0x04
 174:	e9 89       	ldd	r30, Y+17	; 0x11
 176:	fa 89       	ldd	r31, Y+18	; 0x12
 178:	20 81       	ld	r18, Z
 17a:	31 81       	ldd	r19, Z+1	; 0x01
 17c:	8b 85       	ldd	r24, Y+11	; 0x0b
 17e:	9c 85       	ldd	r25, Y+12	; 0x0c
 180:	b9 01       	movw	r22, r18
 182:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 186:	9a 87       	std	Y+10, r25	; 0x0a
 188:	89 87       	std	Y+9, r24	; 0x09
 18a:	18 8e       	std	Y+24, r1	; 0x18
 18c:	89 85       	ldd	r24, Y+9	; 0x09
 18e:	9a 85       	ldd	r25, Y+10	; 0x0a
 190:	00 97       	sbiw	r24, 0x00	; 0
 192:	01 f0       	breq	.+0      	; 0x194 <_ZN6String7replaceERKS_S1_+0x194>
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	f8 8f       	std	Y+24, r31	; 0x18
 198:	48 8d       	ldd	r20, Y+24	; 0x18
 19a:	44 23       	and	r20, r20
 19c:	01 f0       	breq	.+0      	; 0x19e <_ZN6String7replaceERKS_S1_+0x19e>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_ZN6String7replaceERKS_S1_+0x1a0>
 1a0:	8f 81       	ldd	r24, Y+7	; 0x07
 1a2:	98 85       	ldd	r25, Y+8	; 0x08
 1a4:	2b 85       	ldd	r18, Y+11	; 0x0b
 1a6:	3c 85       	ldd	r19, Y+12	; 0x0c
 1a8:	b9 01       	movw	r22, r18
 1aa:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_ZN6String7replaceERKS_S1_+0x1b0>
 1b0:	ef 85       	ldd	r30, Y+15	; 0x0f
 1b2:	f8 89       	ldd	r31, Y+16	; 0x10
 1b4:	84 81       	ldd	r24, Z+4	; 0x04
 1b6:	95 81       	ldd	r25, Z+5	; 0x05
 1b8:	9c 83       	std	Y+4, r25	; 0x04
 1ba:	8b 83       	std	Y+3, r24	; 0x03
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <_ZN6String7replaceERKS_S1_+0x1be>
 1be:	e9 89       	ldd	r30, Y+17	; 0x11
 1c0:	fa 89       	ldd	r31, Y+18	; 0x12
 1c2:	24 81       	ldd	r18, Z+4	; 0x04
 1c4:	35 81       	ldd	r19, Z+5	; 0x05
 1c6:	89 85       	ldd	r24, Y+9	; 0x09
 1c8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ca:	82 0f       	add	r24, r18
 1cc:	93 1f       	adc	r25, r19
 1ce:	9c 87       	std	Y+12, r25	; 0x0c
 1d0:	8b 87       	std	Y+11, r24	; 0x0b
 1d2:	2d 85       	ldd	r18, Y+13	; 0x0d
 1d4:	3e 85       	ldd	r19, Y+14	; 0x0e
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	9c 81       	ldd	r25, Y+4	; 0x04
 1da:	82 0f       	add	r24, r18
 1dc:	93 1f       	adc	r25, r19
 1de:	9c 83       	std	Y+4, r25	; 0x04
 1e0:	8b 83       	std	Y+3, r24	; 0x03
 1e2:	e9 89       	ldd	r30, Y+17	; 0x11
 1e4:	fa 89       	ldd	r31, Y+18	; 0x12
 1e6:	20 81       	ld	r18, Z
 1e8:	31 81       	ldd	r19, Z+1	; 0x01
 1ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ec:	9c 85       	ldd	r25, Y+12	; 0x0c
 1ee:	b9 01       	movw	r22, r18
 1f0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 1f4:	9a 87       	std	Y+10, r25	; 0x0a
 1f6:	89 87       	std	Y+9, r24	; 0x09
 1f8:	1f 8a       	std	Y+23, r1	; 0x17
 1fa:	89 85       	ldd	r24, Y+9	; 0x09
 1fc:	9a 85       	ldd	r25, Y+10	; 0x0a
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	01 f0       	breq	.+0      	; 0x202 <_ZN6String7replaceERKS_S1_+0x202>
 202:	51 e0       	ldi	r21, 0x01	; 1
 204:	5f 8b       	std	Y+23, r21	; 0x17
 206:	8f 89       	ldd	r24, Y+23	; 0x17
 208:	88 23       	and	r24, r24
 20a:	01 f4       	brne	.+0      	; 0x20c <_ZN6String7replaceERKS_S1_+0x20c>
 20c:	ef 85       	ldd	r30, Y+15	; 0x0f
 20e:	f8 89       	ldd	r31, Y+16	; 0x10
 210:	24 81       	ldd	r18, Z+4	; 0x04
 212:	35 81       	ldd	r19, Z+5	; 0x05
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	9c 81       	ldd	r25, Y+4	; 0x04
 218:	28 17       	cp	r18, r24
 21a:	39 07       	cpc	r19, r25
 21c:	01 f4       	brne	.+0      	; 0x21e <_ZN6String7replaceERKS_S1_+0x21e>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <_ZN6String7replaceERKS_S1_+0x220>
 220:	ef 85       	ldd	r30, Y+15	; 0x0f
 222:	f8 89       	ldd	r31, Y+16	; 0x10
 224:	22 81       	ldd	r18, Z+2	; 0x02
 226:	33 81       	ldd	r19, Z+3	; 0x03
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	9c 81       	ldd	r25, Y+4	; 0x04
 22c:	28 17       	cp	r18, r24
 22e:	39 07       	cpc	r19, r25
 230:	00 f4       	brcc	.+0      	; 0x232 <_ZN6String7replaceERKS_S1_+0x232>
 232:	8f 85       	ldd	r24, Y+15	; 0x0f
 234:	98 89       	ldd	r25, Y+16	; 0x10
 236:	2b 81       	ldd	r18, Y+3	; 0x03
 238:	3c 81       	ldd	r19, Y+4	; 0x04
 23a:	b9 01       	movw	r22, r18
 23c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 240:	88 23       	and	r24, r24
 242:	01 f4       	brne	.+0      	; 0x244 <_ZN6String7replaceERKS_S1_+0x244>
 244:	e1 e0       	ldi	r30, 0x01	; 1
 246:	ee 8b       	std	Y+22, r30	; 0x16
 248:	00 c0       	rjmp	.+0      	; 0x24a <_ZN6String7replaceERKS_S1_+0x24a>
 24a:	1e 8a       	std	Y+22, r1	; 0x16
 24c:	8e 89       	ldd	r24, Y+22	; 0x16
 24e:	88 23       	and	r24, r24
 250:	01 f0       	breq	.+0      	; 0x252 <_ZN6String7replaceERKS_S1_+0x252>
 252:	00 c0       	rjmp	.+0      	; 0x254 <_ZN6String7replaceERKS_S1_+0x254>
 254:	ef 85       	ldd	r30, Y+15	; 0x0f
 256:	f8 89       	ldd	r31, Y+16	; 0x10
 258:	84 81       	ldd	r24, Z+4	; 0x04
 25a:	95 81       	ldd	r25, Z+5	; 0x05
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	9a 83       	std	Y+2, r25	; 0x02
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	00 c0       	rjmp	.+0      	; 0x264 <_ZN6String7replaceERKS_S1_+0x264>
 264:	ef 85       	ldd	r30, Y+15	; 0x0f
 266:	f8 89       	ldd	r31, Y+16	; 0x10
 268:	40 81       	ld	r20, Z
 26a:	51 81       	ldd	r21, Z+1	; 0x01
 26c:	e9 89       	ldd	r30, Y+17	; 0x11
 26e:	fa 89       	ldd	r31, Y+18	; 0x12
 270:	24 81       	ldd	r18, Z+4	; 0x04
 272:	35 81       	ldd	r19, Z+5	; 0x05
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	9a 81       	ldd	r25, Y+2	; 0x02
 278:	82 0f       	add	r24, r18
 27a:	93 1f       	adc	r25, r19
 27c:	84 0f       	add	r24, r20
 27e:	95 1f       	adc	r25, r21
 280:	9c 87       	std	Y+12, r25	; 0x0c
 282:	8b 87       	std	Y+11, r24	; 0x0b
 284:	2d 85       	ldd	r18, Y+13	; 0x0d
 286:	3e 85       	ldd	r19, Y+14	; 0x0e
 288:	8b 85       	ldd	r24, Y+11	; 0x0b
 28a:	9c 85       	ldd	r25, Y+12	; 0x0c
 28c:	bc 01       	movw	r22, r24
 28e:	62 0f       	add	r22, r18
 290:	73 1f       	adc	r23, r19
 292:	ef 85       	ldd	r30, Y+15	; 0x0f
 294:	f8 89       	ldd	r31, Y+16	; 0x10
 296:	44 81       	ldd	r20, Z+4	; 0x04
 298:	55 81       	ldd	r21, Z+5	; 0x05
 29a:	ef 85       	ldd	r30, Y+15	; 0x0f
 29c:	f8 89       	ldd	r31, Y+16	; 0x10
 29e:	80 81       	ld	r24, Z
 2a0:	91 81       	ldd	r25, Z+1	; 0x01
 2a2:	9c 01       	movw	r18, r24
 2a4:	8b 85       	ldd	r24, Y+11	; 0x0b
 2a6:	9c 85       	ldd	r25, Y+12	; 0x0c
 2a8:	f9 01       	movw	r30, r18
 2aa:	e8 1b       	sub	r30, r24
 2ac:	f9 0b       	sbc	r31, r25
 2ae:	cf 01       	movw	r24, r30
 2b0:	48 0f       	add	r20, r24
 2b2:	59 1f       	adc	r21, r25
 2b4:	2b 85       	ldd	r18, Y+11	; 0x0b
 2b6:	3c 85       	ldd	r19, Y+12	; 0x0c
 2b8:	cb 01       	movw	r24, r22
 2ba:	b9 01       	movw	r22, r18
 2bc:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 2c0:	ef 85       	ldd	r30, Y+15	; 0x0f
 2c2:	f8 89       	ldd	r31, Y+16	; 0x10
 2c4:	24 81       	ldd	r18, Z+4	; 0x04
 2c6:	35 81       	ldd	r19, Z+5	; 0x05
 2c8:	8d 85       	ldd	r24, Y+13	; 0x0d
 2ca:	9e 85       	ldd	r25, Y+14	; 0x0e
 2cc:	82 0f       	add	r24, r18
 2ce:	93 1f       	adc	r25, r19
 2d0:	ef 85       	ldd	r30, Y+15	; 0x0f
 2d2:	f8 89       	ldd	r31, Y+16	; 0x10
 2d4:	95 83       	std	Z+5, r25	; 0x05
 2d6:	84 83       	std	Z+4, r24	; 0x04
 2d8:	ef 85       	ldd	r30, Y+15	; 0x0f
 2da:	f8 89       	ldd	r31, Y+16	; 0x10
 2dc:	20 81       	ld	r18, Z
 2de:	31 81       	ldd	r19, Z+1	; 0x01
 2e0:	ef 85       	ldd	r30, Y+15	; 0x0f
 2e2:	f8 89       	ldd	r31, Y+16	; 0x10
 2e4:	84 81       	ldd	r24, Z+4	; 0x04
 2e6:	95 81       	ldd	r25, Z+5	; 0x05
 2e8:	f9 01       	movw	r30, r18
 2ea:	e8 0f       	add	r30, r24
 2ec:	f9 1f       	adc	r31, r25
 2ee:	10 82       	st	Z, r1
 2f0:	ef 85       	ldd	r30, Y+15	; 0x0f
 2f2:	f8 89       	ldd	r31, Y+16	; 0x10
 2f4:	20 81       	ld	r18, Z
 2f6:	31 81       	ldd	r19, Z+1	; 0x01
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	9a 81       	ldd	r25, Y+2	; 0x02
 2fc:	82 0f       	add	r24, r18
 2fe:	93 1f       	adc	r25, r19
 300:	eb 89       	ldd	r30, Y+19	; 0x13
 302:	fc 89       	ldd	r31, Y+20	; 0x14
 304:	40 81       	ld	r20, Z
 306:	51 81       	ldd	r21, Z+1	; 0x01
 308:	eb 89       	ldd	r30, Y+19	; 0x13
 30a:	fc 89       	ldd	r31, Y+20	; 0x14
 30c:	24 81       	ldd	r18, Z+4	; 0x04
 30e:	35 81       	ldd	r19, Z+5	; 0x05
 310:	ba 01       	movw	r22, r20
 312:	a9 01       	movw	r20, r18
 314:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	9a 83       	std	Y+2, r25	; 0x02
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	9a 81       	ldd	r25, Y+2	; 0x02
 326:	99 23       	and	r25, r25
 328:	04 f0       	brlt	.+0      	; 0x32a <_ZN6String7replaceERKS_S1_+0x32a>
 32a:	49 81       	ldd	r20, Y+1	; 0x01
 32c:	5a 81       	ldd	r21, Y+2	; 0x02
 32e:	8f 85       	ldd	r24, Y+15	; 0x0f
 330:	98 89       	ldd	r25, Y+16	; 0x10
 332:	29 89       	ldd	r18, Y+17	; 0x11
 334:	3a 89       	ldd	r19, Y+18	; 0x12
 336:	b9 01       	movw	r22, r18
 338:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 33c:	9a 83       	std	Y+2, r25	; 0x02
 33e:	89 83       	std	Y+1, r24	; 0x01
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	9a 81       	ldd	r25, Y+2	; 0x02
 344:	99 23       	and	r25, r25
 346:	04 f0       	brlt	.+0      	; 0x348 <_ZN6String7replaceERKS_S1_+0x348>
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	fd 8b       	std	Y+21, r31	; 0x15
 34c:	00 c0       	rjmp	.+0      	; 0x34e <_ZN6String7replaceERKS_S1_+0x34e>
 34e:	1d 8a       	std	Y+21, r1	; 0x15
 350:	8d 89       	ldd	r24, Y+21	; 0x15
 352:	88 23       	and	r24, r24
 354:	01 f0       	breq	.+0      	; 0x356 <_ZN6String7replaceERKS_S1_+0x356>
 356:	00 c0       	rjmp	.+0      	; 0x358 <_ZN6String7replaceERKS_S1_+0x358>
 358:	69 96       	adiw	r28, 0x19	; 25
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	cf 91       	pop	r28
 366:	df 91       	pop	r29
 368:	08 95       	ret

Disassembly of section .text._ZN6String7reserveEj:

00000000 <_ZN6String7reserveEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String7reserveEj+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6String7reserveEj+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6String7reserveEj+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	e9 81       	ldd	r30, Y+1	; 0x01
  18:	fa 81       	ldd	r31, Y+2	; 0x02
}
  1a:	80 81       	ld	r24, Z
  1c:	91 81       	ldd	r25, Z+1	; 0x01
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String7reserveEj+0x22>
  22:	e9 81       	ldd	r30, Y+1	; 0x01
  24:	fa 81       	ldd	r31, Y+2	; 0x02
  26:	22 81       	ldd	r18, Z+2	; 0x02
  28:	33 81       	ldd	r19, Z+3	; 0x03
  2a:	8b 81       	ldd	r24, Y+3	; 0x03
  2c:	9c 81       	ldd	r25, Y+4	; 0x04
  2e:	28 17       	cp	r18, r24
  30:	39 07       	cpc	r19, r25
  32:	00 f0       	brcs	.+0      	; 0x34 <_ZN6String7reserveEj+0x34>
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	8d 83       	std	Y+5, r24	; 0x05
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN6String7reserveEj+0x3a>
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	9a 81       	ldd	r25, Y+2	; 0x02
  3e:	2b 81       	ldd	r18, Y+3	; 0x03
  40:	3c 81       	ldd	r19, Y+4	; 0x04
  42:	b9 01       	movw	r22, r18
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7reserveEj>
  48:	8e 83       	std	Y+6, r24	; 0x06
  4a:	8e 81       	ldd	r24, Y+6	; 0x06
  4c:	88 23       	and	r24, r24
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZN6String7reserveEj+0x50>
  50:	81 e0       	ldi	r24, 0x01	; 1
  52:	8e 83       	std	Y+6, r24	; 0x06
  54:	8e 81       	ldd	r24, Y+6	; 0x06
  56:	88 23       	and	r24, r24
  58:	01 f0       	breq	.+0      	; 0x5a <_ZN6String7reserveEj+0x5a>
  5a:	e9 81       	ldd	r30, Y+1	; 0x01
  5c:	fa 81       	ldd	r31, Y+2	; 0x02
  5e:	84 81       	ldd	r24, Z+4	; 0x04
  60:	95 81       	ldd	r25, Z+5	; 0x05
  62:	00 97       	sbiw	r24, 0x00	; 0
  64:	01 f4       	brne	.+0      	; 0x66 <_ZN6String7reserveEj+0x66>
  66:	e9 81       	ldd	r30, Y+1	; 0x01
  68:	fa 81       	ldd	r31, Y+2	; 0x02
  6a:	01 90       	ld	r0, Z+
  6c:	f0 81       	ld	r31, Z
  6e:	e0 2d       	mov	r30, r0
  70:	10 82       	st	Z, r1
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	8d 83       	std	Y+5, r24	; 0x05
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN6String7reserveEj+0x78>
  78:	1d 82       	std	Y+5, r1	; 0x05
  7a:	8d 81       	ldd	r24, Y+5	; 0x05
  7c:	26 96       	adiw	r28, 0x06	; 6
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	f8 94       	cli
  82:	de bf       	out	0x3e, r29	; 62
  84:	0f be       	out	0x3f, r0	; 63
  86:	cd bf       	out	0x3d, r28	; 61
  88:	cf 91       	pop	r28
  8a:	df 91       	pop	r29
  8c:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKcj:

00000000 <_ZN6String6concatEPKcj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
}
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	58 87       	std	Y+8, r21	; 0x08
  1e:	4f 83       	std	Y+7, r20	; 0x07
  20:	eb 81       	ldd	r30, Y+3	; 0x03
  22:	fc 81       	ldd	r31, Y+4	; 0x04
  24:	24 81       	ldd	r18, Z+4	; 0x04
  26:	35 81       	ldd	r19, Z+5	; 0x05
  28:	8f 81       	ldd	r24, Y+7	; 0x07
  2a:	98 85       	ldd	r25, Y+8	; 0x08
  2c:	82 0f       	add	r24, r18
  2e:	93 1f       	adc	r25, r19
  30:	9a 83       	std	Y+2, r25	; 0x02
  32:	89 83       	std	Y+1, r24	; 0x01
  34:	8d 81       	ldd	r24, Y+5	; 0x05
  36:	9e 81       	ldd	r25, Y+6	; 0x06
  38:	00 97       	sbiw	r24, 0x00	; 0
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN6String6concatEPKcj+0x3c>
  3c:	1a 86       	std	Y+10, r1	; 0x0a
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN6String6concatEPKcj+0x40>
  40:	8f 81       	ldd	r24, Y+7	; 0x07
  42:	98 85       	ldd	r25, Y+8	; 0x08
  44:	00 97       	sbiw	r24, 0x00	; 0
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6String6concatEPKcj+0x48>
  48:	81 e0       	ldi	r24, 0x01	; 1
  4a:	8a 87       	std	Y+10, r24	; 0x0a
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6String6concatEPKcj+0x4e>
  4e:	8b 81       	ldd	r24, Y+3	; 0x03
  50:	9c 81       	ldd	r25, Y+4	; 0x04
  52:	29 81       	ldd	r18, Y+1	; 0x01
  54:	3a 81       	ldd	r19, Y+2	; 0x02
  56:	b9 01       	movw	r22, r18
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  5c:	19 86       	std	Y+9, r1	; 0x09
  5e:	88 23       	and	r24, r24
  60:	01 f4       	brne	.+0      	; 0x62 <_ZN6String6concatEPKcj+0x62>
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	89 87       	std	Y+9, r24	; 0x09
  66:	89 85       	ldd	r24, Y+9	; 0x09
  68:	88 23       	and	r24, r24
  6a:	01 f0       	breq	.+0      	; 0x6c <_ZN6String6concatEPKcj+0x6c>
  6c:	1a 86       	std	Y+10, r1	; 0x0a
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN6String6concatEPKcj+0x70>
  70:	eb 81       	ldd	r30, Y+3	; 0x03
  72:	fc 81       	ldd	r31, Y+4	; 0x04
  74:	20 81       	ld	r18, Z
  76:	31 81       	ldd	r19, Z+1	; 0x01
  78:	eb 81       	ldd	r30, Y+3	; 0x03
  7a:	fc 81       	ldd	r31, Y+4	; 0x04
  7c:	84 81       	ldd	r24, Z+4	; 0x04
  7e:	95 81       	ldd	r25, Z+5	; 0x05
  80:	82 0f       	add	r24, r18
  82:	93 1f       	adc	r25, r19
  84:	2d 81       	ldd	r18, Y+5	; 0x05
  86:	3e 81       	ldd	r19, Y+6	; 0x06
  88:	b9 01       	movw	r22, r18
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  8e:	eb 81       	ldd	r30, Y+3	; 0x03
  90:	fc 81       	ldd	r31, Y+4	; 0x04
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	95 83       	std	Z+5, r25	; 0x05
  98:	84 83       	std	Z+4, r24	; 0x04
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	8a 87       	std	Y+10, r24	; 0x0a
  9e:	8a 85       	ldd	r24, Y+10	; 0x0a
  a0:	2a 96       	adiw	r28, 0x0a	; 10
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

Disassembly of section .text._ZN6String6concatEm:

00000000 <_ZN6String6concatEm>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	61 97       	sbiw	r28, 0x11	; 17
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9d 87       	std	Y+13, r25	; 0x0d
  16:	8c 87       	std	Y+12, r24	; 0x0c
  18:	4e 87       	std	Y+14, r20	; 0x0e
}
  1a:	5f 87       	std	Y+15, r21	; 0x0f
  1c:	68 8b       	std	Y+16, r22	; 0x10
  1e:	79 8b       	std	Y+17, r23	; 0x11
  20:	8e 85       	ldd	r24, Y+14	; 0x0e
  22:	9f 85       	ldd	r25, Y+15	; 0x0f
  24:	a8 89       	ldd	r26, Y+16	; 0x10
  26:	b9 89       	ldd	r27, Y+17	; 0x11
  28:	bc 01       	movw	r22, r24
  2a:	cd 01       	movw	r24, r26
  2c:	9e 01       	movw	r18, r28
  2e:	2f 5f       	subi	r18, 0xFF	; 255
  30:	3f 4f       	sbci	r19, 0xFF	; 255
  32:	a9 01       	movw	r20, r18
  34:	2a e0       	ldi	r18, 0x0A	; 10
  36:	30 e0       	ldi	r19, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  3c:	ce 01       	movw	r24, r28
  3e:	01 96       	adiw	r24, 0x01	; 1
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  44:	ac 01       	movw	r20, r24
  46:	8c 85       	ldd	r24, Y+12	; 0x0c
  48:	9d 85       	ldd	r25, Y+13	; 0x0d
  4a:	9e 01       	movw	r18, r28
  4c:	2f 5f       	subi	r18, 0xFF	; 255
  4e:	3f 4f       	sbci	r19, 0xFF	; 255
  50:	b9 01       	movw	r22, r18
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  56:	61 96       	adiw	r28, 0x11	; 17
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	f8 94       	cli
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	0f be       	out	0x3f, r0	; 63
  60:	cd bf       	out	0x3d, r28	; 61
  62:	cf 91       	pop	r28
  64:	df 91       	pop	r29
  66:	08 95       	ret

Disassembly of section .text._ZN6String6concatEl:

00000000 <_ZN6String6concatEl>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	62 97       	sbiw	r28, 0x12	; 18
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9e 87       	std	Y+14, r25	; 0x0e
  16:	8d 87       	std	Y+13, r24	; 0x0d
  18:	4f 87       	std	Y+15, r20	; 0x0f
}
  1a:	58 8b       	std	Y+16, r21	; 0x10
  1c:	69 8b       	std	Y+17, r22	; 0x11
  1e:	7a 8b       	std	Y+18, r23	; 0x12
  20:	8f 85       	ldd	r24, Y+15	; 0x0f
  22:	98 89       	ldd	r25, Y+16	; 0x10
  24:	a9 89       	ldd	r26, Y+17	; 0x11
  26:	ba 89       	ldd	r27, Y+18	; 0x12
  28:	bc 01       	movw	r22, r24
  2a:	cd 01       	movw	r24, r26
  2c:	9e 01       	movw	r18, r28
  2e:	2f 5f       	subi	r18, 0xFF	; 255
  30:	3f 4f       	sbci	r19, 0xFF	; 255
  32:	a9 01       	movw	r20, r18
  34:	2a e0       	ldi	r18, 0x0A	; 10
  36:	30 e0       	ldi	r19, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  3c:	ce 01       	movw	r24, r28
  3e:	01 96       	adiw	r24, 0x01	; 1
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  44:	ac 01       	movw	r20, r24
  46:	8d 85       	ldd	r24, Y+13	; 0x0d
  48:	9e 85       	ldd	r25, Y+14	; 0x0e
  4a:	9e 01       	movw	r18, r28
  4c:	2f 5f       	subi	r18, 0xFF	; 255
  4e:	3f 4f       	sbci	r19, 0xFF	; 255
  50:	b9 01       	movw	r22, r18
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  56:	62 96       	adiw	r28, 0x12	; 18
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	f8 94       	cli
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	0f be       	out	0x3f, r0	; 63
  60:	cd bf       	out	0x3d, r28	; 61
  62:	cf 91       	pop	r28
  64:	df 91       	pop	r29
  66:	08 95       	ret

Disassembly of section .text._ZN6String6concatEj:

00000000 <_ZN6String6concatEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	98 87       	std	Y+8, r25	; 0x08
  16:	8f 83       	std	Y+7, r24	; 0x07
  18:	7a 87       	std	Y+10, r23	; 0x0a
}
  1a:	69 87       	std	Y+9, r22	; 0x09
  1c:	89 85       	ldd	r24, Y+9	; 0x09
  1e:	9a 85       	ldd	r25, Y+10	; 0x0a
  20:	9e 01       	movw	r18, r28
  22:	2f 5f       	subi	r18, 0xFF	; 255
  24:	3f 4f       	sbci	r19, 0xFF	; 255
  26:	b9 01       	movw	r22, r18
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  30:	ce 01       	movw	r24, r28
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  38:	ac 01       	movw	r20, r24
  3a:	8f 81       	ldd	r24, Y+7	; 0x07
  3c:	98 85       	ldd	r25, Y+8	; 0x08
  3e:	9e 01       	movw	r18, r28
  40:	2f 5f       	subi	r18, 0xFF	; 255
  42:	3f 4f       	sbci	r19, 0xFF	; 255
  44:	b9 01       	movw	r22, r18
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  4a:	2a 96       	adiw	r28, 0x0a	; 10
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	08 95       	ret

Disassembly of section .text._ZN6String6concatEi:

00000000 <_ZN6String6concatEi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2b 97       	sbiw	r28, 0x0b	; 11
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	99 87       	std	Y+9, r25	; 0x09
  16:	88 87       	std	Y+8, r24	; 0x08
  18:	7b 87       	std	Y+11, r23	; 0x0b
}
  1a:	6a 87       	std	Y+10, r22	; 0x0a
  1c:	8a 85       	ldd	r24, Y+10	; 0x0a
  1e:	9b 85       	ldd	r25, Y+11	; 0x0b
  20:	9e 01       	movw	r18, r28
  22:	2f 5f       	subi	r18, 0xFF	; 255
  24:	3f 4f       	sbci	r19, 0xFF	; 255
  26:	b9 01       	movw	r22, r18
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  30:	ce 01       	movw	r24, r28
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  38:	ac 01       	movw	r20, r24
  3a:	88 85       	ldd	r24, Y+8	; 0x08
  3c:	99 85       	ldd	r25, Y+9	; 0x09
  3e:	9e 01       	movw	r18, r28
  40:	2f 5f       	subi	r18, 0xFF	; 255
  42:	3f 4f       	sbci	r19, 0xFF	; 255
  44:	b9 01       	movw	r22, r18
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  4a:	2b 96       	adiw	r28, 0x0b	; 11
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	08 95       	ret

Disassembly of section .text._ZN6String6concatEh:

00000000 <_ZN6String6concatEh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9e 83       	std	Y+6, r25	; 0x06
  16:	8d 83       	std	Y+5, r24	; 0x05
  18:	6f 83       	std	Y+7, r22	; 0x07
}
  1a:	8f 81       	ldd	r24, Y+7	; 0x07
  1c:	88 2f       	mov	r24, r24
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	9e 01       	movw	r18, r28
  22:	2f 5f       	subi	r18, 0xFF	; 255
  24:	3f 4f       	sbci	r19, 0xFF	; 255
  26:	b9 01       	movw	r22, r18
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  30:	ce 01       	movw	r24, r28
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  38:	ac 01       	movw	r20, r24
  3a:	8d 81       	ldd	r24, Y+5	; 0x05
  3c:	9e 81       	ldd	r25, Y+6	; 0x06
  3e:	9e 01       	movw	r18, r28
  40:	2f 5f       	subi	r18, 0xFF	; 255
  42:	3f 4f       	sbci	r19, 0xFF	; 255
  44:	b9 01       	movw	r22, r18
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  4a:	27 96       	adiw	r28, 0x07	; 7
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	08 95       	ret

Disassembly of section .text._ZN6String6concatEc:

00000000 <_ZN6String6concatEc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String6concatEc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6String6concatEc+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	6d 83       	std	Y+5, r22	; 0x05
  14:	8d 81       	ldd	r24, Y+5	; 0x05
  16:	89 83       	std	Y+1, r24	; 0x01
  18:	1a 82       	std	Y+2, r1	; 0x02
}
  1a:	8b 81       	ldd	r24, Y+3	; 0x03
  1c:	9c 81       	ldd	r25, Y+4	; 0x04
  1e:	9e 01       	movw	r18, r28
  20:	2f 5f       	subi	r18, 0xFF	; 255
  22:	3f 4f       	sbci	r19, 0xFF	; 255
  24:	b9 01       	movw	r22, r18
  26:	41 e0       	ldi	r20, 0x01	; 1
  28:	50 e0       	ldi	r21, 0x00	; 0
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEc>
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	cf 91       	pop	r28
  3a:	df 91       	pop	r29
  3c:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKc:

00000000 <_ZN6String6concatEPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String6concatEPKc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6String6concatEPKc+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	8b 81       	ldd	r24, Y+3	; 0x03
  18:	9c 81       	ldd	r25, Y+4	; 0x04
}
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN6String6concatEPKc+0x1e>
  1e:	1d 82       	std	Y+5, r1	; 0x05
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6String6concatEPKc+0x22>
  22:	8b 81       	ldd	r24, Y+3	; 0x03
  24:	9c 81       	ldd	r25, Y+4	; 0x04
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKc>
  2a:	ac 01       	movw	r20, r24
  2c:	89 81       	ldd	r24, Y+1	; 0x01
  2e:	9a 81       	ldd	r25, Y+2	; 0x02
  30:	2b 81       	ldd	r18, Y+3	; 0x03
  32:	3c 81       	ldd	r19, Y+4	; 0x04
  34:	b9 01       	movw	r22, r18
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKc>
  3a:	8d 83       	std	Y+5, r24	; 0x05
  3c:	8d 81       	ldd	r24, Y+5	; 0x05
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	cf 91       	pop	r28
  4a:	df 91       	pop	r29
  4c:	08 95       	ret

Disassembly of section .text._ZN6String6concatERKS_:

00000000 <_ZN6String6concatERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String6concatERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6String6concatERKS_+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	eb 81       	ldd	r30, Y+3	; 0x03
  16:	fc 81       	ldd	r31, Y+4	; 0x04
  18:	40 81       	ld	r20, Z
}
  1a:	51 81       	ldd	r21, Z+1	; 0x01
  1c:	eb 81       	ldd	r30, Y+3	; 0x03
  1e:	fc 81       	ldd	r31, Y+4	; 0x04
  20:	24 81       	ldd	r18, Z+4	; 0x04
  22:	35 81       	ldd	r19, Z+5	; 0x05
  24:	89 81       	ldd	r24, Y+1	; 0x01
  26:	9a 81       	ldd	r25, Y+2	; 0x02
  28:	ba 01       	movw	r22, r20
  2a:	a9 01       	movw	r20, r18
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatERKS_>
  30:	0f 90       	pop	r0
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	cf 91       	pop	r28
  3a:	df 91       	pop	r29
  3c:	08 95       	ret

Disassembly of section .text._ZN6String10invalidateEv:

00000000 <_ZN6String10invalidateEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String10invalidateEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	80 81       	ld	r24, Z
  14:	91 81       	ldd	r25, Z+1	; 0x01
  16:	00 97       	sbiw	r24, 0x00	; 0
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6String10invalidateEv+0x1a>
}
  1a:	e9 81       	ldd	r30, Y+1	; 0x01
  1c:	fa 81       	ldd	r31, Y+2	; 0x02
  1e:	80 81       	ld	r24, Z
  20:	91 81       	ldd	r25, Z+1	; 0x01
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6String10invalidateEv>
  26:	e9 81       	ldd	r30, Y+1	; 0x01
  28:	fa 81       	ldd	r31, Y+2	; 0x02
  2a:	11 82       	std	Z+1, r1	; 0x01
  2c:	10 82       	st	Z, r1
  2e:	e9 81       	ldd	r30, Y+1	; 0x01
  30:	fa 81       	ldd	r31, Y+2	; 0x02
  32:	15 82       	std	Z+5, r1	; 0x05
  34:	14 82       	std	Z+4, r1	; 0x04
  36:	e9 81       	ldd	r30, Y+1	; 0x01
  38:	fa 81       	ldd	r31, Y+2	; 0x02
  3a:	84 81       	ldd	r24, Z+4	; 0x04
  3c:	95 81       	ldd	r25, Z+5	; 0x05
  3e:	e9 81       	ldd	r30, Y+1	; 0x01
  40:	fa 81       	ldd	r31, Y+2	; 0x02
  42:	93 83       	std	Z+3, r25	; 0x03
  44:	82 83       	std	Z+2, r24	; 0x02
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperm:

00000000 <_ZplRK15StringSumHelperm>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	4d 83       	std	Y+5, r20	; 0x05
}
  1a:	5e 83       	std	Y+6, r21	; 0x06
  1c:	6f 83       	std	Y+7, r22	; 0x07
  1e:	78 87       	std	Y+8, r23	; 0x08
  20:	8b 81       	ldd	r24, Y+3	; 0x03
  22:	9c 81       	ldd	r25, Y+4	; 0x04
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  28:	89 81       	ldd	r24, Y+1	; 0x01
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
  2c:	2d 81       	ldd	r18, Y+5	; 0x05
  2e:	3e 81       	ldd	r19, Y+6	; 0x06
  30:	4f 81       	ldd	r20, Y+7	; 0x07
  32:	58 85       	ldd	r21, Y+8	; 0x08
  34:	ba 01       	movw	r22, r20
  36:	a9 01       	movw	r20, r18
  38:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
  3c:	19 86       	std	Y+9, r1	; 0x09
  3e:	88 23       	and	r24, r24
  40:	01 f4       	brne	.+0      	; 0x42 <_ZplRK15StringSumHelperm+0x42>
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	89 87       	std	Y+9, r24	; 0x09
  46:	89 85       	ldd	r24, Y+9	; 0x09
  48:	88 23       	and	r24, r24
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZplRK15StringSumHelperm+0x4c>
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	9a 81       	ldd	r25, Y+2	; 0x02
  58:	29 96       	adiw	r28, 0x09	; 9
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	f8 94       	cli
  5e:	de bf       	out	0x3e, r29	; 62
  60:	0f be       	out	0x3f, r0	; 63
  62:	cd bf       	out	0x3d, r28	; 61
  64:	cf 91       	pop	r28
  66:	df 91       	pop	r29
  68:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperl:

00000000 <_ZplRK15StringSumHelperl>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	4d 83       	std	Y+5, r20	; 0x05
}
  1a:	5e 83       	std	Y+6, r21	; 0x06
  1c:	6f 83       	std	Y+7, r22	; 0x07
  1e:	78 87       	std	Y+8, r23	; 0x08
  20:	8b 81       	ldd	r24, Y+3	; 0x03
  22:	9c 81       	ldd	r25, Y+4	; 0x04
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  28:	89 81       	ldd	r24, Y+1	; 0x01
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
  2c:	2d 81       	ldd	r18, Y+5	; 0x05
  2e:	3e 81       	ldd	r19, Y+6	; 0x06
  30:	4f 81       	ldd	r20, Y+7	; 0x07
  32:	58 85       	ldd	r21, Y+8	; 0x08
  34:	ba 01       	movw	r22, r20
  36:	a9 01       	movw	r20, r18
  38:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
  3c:	19 86       	std	Y+9, r1	; 0x09
  3e:	88 23       	and	r24, r24
  40:	01 f4       	brne	.+0      	; 0x42 <_ZplRK15StringSumHelperl+0x42>
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	89 87       	std	Y+9, r24	; 0x09
  46:	89 85       	ldd	r24, Y+9	; 0x09
  48:	88 23       	and	r24, r24
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZplRK15StringSumHelperl+0x4c>
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	9a 81       	ldd	r25, Y+2	; 0x02
  58:	29 96       	adiw	r28, 0x09	; 9
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	f8 94       	cli
  5e:	de bf       	out	0x3e, r29	; 62
  60:	0f be       	out	0x3f, r0	; 63
  62:	cd bf       	out	0x3d, r28	; 61
  64:	cf 91       	pop	r28
  66:	df 91       	pop	r29
  68:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperj:

00000000 <_ZplRK15StringSumHelperj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
}
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	9c 81       	ldd	r25, Y+4	; 0x04
  20:	9a 83       	std	Y+2, r25	; 0x02
  22:	89 83       	std	Y+1, r24	; 0x01
  24:	89 81       	ldd	r24, Y+1	; 0x01
  26:	9a 81       	ldd	r25, Y+2	; 0x02
  28:	2d 81       	ldd	r18, Y+5	; 0x05
  2a:	3e 81       	ldd	r19, Y+6	; 0x06
  2c:	b9 01       	movw	r22, r18
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
  32:	1f 82       	std	Y+7, r1	; 0x07
  34:	88 23       	and	r24, r24
  36:	01 f4       	brne	.+0      	; 0x38 <_ZplRK15StringSumHelperj+0x38>
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	8f 83       	std	Y+7, r24	; 0x07
  3c:	8f 81       	ldd	r24, Y+7	; 0x07
  3e:	88 23       	and	r24, r24
  40:	01 f0       	breq	.+0      	; 0x42 <_ZplRK15StringSumHelperj+0x42>
  42:	89 81       	ldd	r24, Y+1	; 0x01
  44:	9a 81       	ldd	r25, Y+2	; 0x02
  46:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
  4a:	89 81       	ldd	r24, Y+1	; 0x01
  4c:	9a 81       	ldd	r25, Y+2	; 0x02
  4e:	27 96       	adiw	r28, 0x07	; 7
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	f8 94       	cli
  54:	de bf       	out	0x3e, r29	; 62
  56:	0f be       	out	0x3f, r0	; 63
  58:	cd bf       	out	0x3d, r28	; 61
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperi:

00000000 <_ZplRK15StringSumHelperi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
}
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	9c 81       	ldd	r25, Y+4	; 0x04
  20:	9a 83       	std	Y+2, r25	; 0x02
  22:	89 83       	std	Y+1, r24	; 0x01
  24:	89 81       	ldd	r24, Y+1	; 0x01
  26:	9a 81       	ldd	r25, Y+2	; 0x02
  28:	2d 81       	ldd	r18, Y+5	; 0x05
  2a:	3e 81       	ldd	r19, Y+6	; 0x06
  2c:	b9 01       	movw	r22, r18
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
  32:	1f 82       	std	Y+7, r1	; 0x07
  34:	88 23       	and	r24, r24
  36:	01 f4       	brne	.+0      	; 0x38 <_ZplRK15StringSumHelperi+0x38>
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	8f 83       	std	Y+7, r24	; 0x07
  3c:	8f 81       	ldd	r24, Y+7	; 0x07
  3e:	88 23       	and	r24, r24
  40:	01 f0       	breq	.+0      	; 0x42 <_ZplRK15StringSumHelperi+0x42>
  42:	89 81       	ldd	r24, Y+1	; 0x01
  44:	9a 81       	ldd	r25, Y+2	; 0x02
  46:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
  4a:	89 81       	ldd	r24, Y+1	; 0x01
  4c:	9a 81       	ldd	r25, Y+2	; 0x02
  4e:	27 96       	adiw	r28, 0x07	; 7
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	f8 94       	cli
  54:	de bf       	out	0x3e, r29	; 62
  56:	0f be       	out	0x3f, r0	; 63
  58:	cd bf       	out	0x3d, r28	; 61
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperh:

00000000 <_ZplRK15StringSumHelperh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZplRK15StringSumHelperh+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZplRK15StringSumHelperh+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZplRK15StringSumHelperh+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	6d 83       	std	Y+5, r22	; 0x05
  14:	8b 81       	ldd	r24, Y+3	; 0x03
  16:	9c 81       	ldd	r25, Y+4	; 0x04
  18:	9a 83       	std	Y+2, r25	; 0x02
}
  1a:	89 83       	std	Y+1, r24	; 0x01
  1c:	89 81       	ldd	r24, Y+1	; 0x01
  1e:	9a 81       	ldd	r25, Y+2	; 0x02
  20:	6d 81       	ldd	r22, Y+5	; 0x05
  22:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
  26:	1e 82       	std	Y+6, r1	; 0x06
  28:	88 23       	and	r24, r24
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZplRK15StringSumHelperh+0x2c>
  2c:	81 e0       	ldi	r24, 0x01	; 1
  2e:	8e 83       	std	Y+6, r24	; 0x06
  30:	8e 81       	ldd	r24, Y+6	; 0x06
  32:	88 23       	and	r24, r24
  34:	01 f0       	breq	.+0      	; 0x36 <_ZplRK15StringSumHelperh+0x36>
  36:	89 81       	ldd	r24, Y+1	; 0x01
  38:	9a 81       	ldd	r25, Y+2	; 0x02
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperc:

00000000 <_ZplRK15StringSumHelperc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZplRK15StringSumHelperc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZplRK15StringSumHelperc+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZplRK15StringSumHelperc+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	6d 83       	std	Y+5, r22	; 0x05
  14:	8b 81       	ldd	r24, Y+3	; 0x03
  16:	9c 81       	ldd	r25, Y+4	; 0x04
  18:	9a 83       	std	Y+2, r25	; 0x02
}
  1a:	89 83       	std	Y+1, r24	; 0x01
  1c:	89 81       	ldd	r24, Y+1	; 0x01
  1e:	9a 81       	ldd	r25, Y+2	; 0x02
  20:	6d 81       	ldd	r22, Y+5	; 0x05
  22:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
  26:	1e 82       	std	Y+6, r1	; 0x06
  28:	88 23       	and	r24, r24
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZplRK15StringSumHelperc+0x2c>
  2c:	81 e0       	ldi	r24, 0x01	; 1
  2e:	8e 83       	std	Y+6, r24	; 0x06
  30:	8e 81       	ldd	r24, Y+6	; 0x06
  32:	88 23       	and	r24, r24
  34:	01 f0       	breq	.+0      	; 0x36 <_ZplRK15StringSumHelperc+0x36>
  36:	89 81       	ldd	r24, Y+1	; 0x01
  38:	9a 81       	ldd	r25, Y+2	; 0x02
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPKc:

00000000 <_ZplRK15StringSumHelperPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	27 97       	sbiw	r28, 0x07	; 7
{
	free(buffer);
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	9c 83       	std	Y+4, r25	; 0x04
}
  1a:	8b 83       	std	Y+3, r24	; 0x03
  1c:	7e 83       	std	Y+6, r23	; 0x06
  1e:	6d 83       	std	Y+5, r22	; 0x05
  20:	8b 81       	ldd	r24, Y+3	; 0x03
  22:	9c 81       	ldd	r25, Y+4	; 0x04
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  28:	8d 81       	ldd	r24, Y+5	; 0x05
  2a:	9e 81       	ldd	r25, Y+6	; 0x06
  2c:	00 97       	sbiw	r24, 0x00	; 0
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZplRK15StringSumHelperPKc+0x30>
  30:	09 81       	ldd	r16, Y+1	; 0x01
  32:	1a 81       	ldd	r17, Y+2	; 0x02
  34:	8d 81       	ldd	r24, Y+5	; 0x05
  36:	9e 81       	ldd	r25, Y+6	; 0x06
  38:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  3c:	ac 01       	movw	r20, r24
  3e:	2d 81       	ldd	r18, Y+5	; 0x05
  40:	3e 81       	ldd	r19, Y+6	; 0x06
  42:	c8 01       	movw	r24, r16
  44:	b9 01       	movw	r22, r18
  46:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  4a:	88 23       	and	r24, r24
  4c:	01 f4       	brne	.+0      	; 0x4e <_ZplRK15StringSumHelperPKc+0x4e>
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	8f 83       	std	Y+7, r24	; 0x07
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZplRK15StringSumHelperPKc+0x54>
  54:	1f 82       	std	Y+7, r1	; 0x07
  56:	8f 81       	ldd	r24, Y+7	; 0x07
  58:	88 23       	and	r24, r24
  5a:	01 f0       	breq	.+0      	; 0x5c <_ZplRK15StringSumHelperPKc+0x5c>
  5c:	89 81       	ldd	r24, Y+1	; 0x01
  5e:	9a 81       	ldd	r25, Y+2	; 0x02
  60:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  64:	89 81       	ldd	r24, Y+1	; 0x01
  66:	9a 81       	ldd	r25, Y+2	; 0x02
  68:	27 96       	adiw	r28, 0x07	; 7
  6a:	0f b6       	in	r0, 0x3f	; 63
  6c:	f8 94       	cli
  6e:	de bf       	out	0x3e, r29	; 62
  70:	0f be       	out	0x3f, r0	; 63
  72:	cd bf       	out	0x3d, r28	; 61
  74:	cf 91       	pop	r28
  76:	df 91       	pop	r29
  78:	1f 91       	pop	r17
  7a:	0f 91       	pop	r16
  7c:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperRK6String:

00000000 <_ZplRK15StringSumHelperRK6String>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 83       	std	Y+4, r25	; 0x04
  16:	8b 83       	std	Y+3, r24	; 0x03
  18:	7e 83       	std	Y+6, r23	; 0x06
}
  1a:	6d 83       	std	Y+5, r22	; 0x05
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	9c 81       	ldd	r25, Y+4	; 0x04
  20:	9a 83       	std	Y+2, r25	; 0x02
  22:	89 83       	std	Y+1, r24	; 0x01
  24:	89 81       	ldd	r24, Y+1	; 0x01
  26:	9a 81       	ldd	r25, Y+2	; 0x02
  28:	ed 81       	ldd	r30, Y+5	; 0x05
  2a:	fe 81       	ldd	r31, Y+6	; 0x06
  2c:	40 81       	ld	r20, Z
  2e:	51 81       	ldd	r21, Z+1	; 0x01
  30:	ed 81       	ldd	r30, Y+5	; 0x05
  32:	fe 81       	ldd	r31, Y+6	; 0x06
  34:	24 81       	ldd	r18, Z+4	; 0x04
  36:	35 81       	ldd	r19, Z+5	; 0x05
  38:	ba 01       	movw	r22, r20
  3a:	a9 01       	movw	r20, r18
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  40:	1f 82       	std	Y+7, r1	; 0x07
  42:	88 23       	and	r24, r24
  44:	01 f4       	brne	.+0      	; 0x46 <_ZplRK15StringSumHelperRK6String+0x46>
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	8f 83       	std	Y+7, r24	; 0x07
  4a:	8f 81       	ldd	r24, Y+7	; 0x07
  4c:	88 23       	and	r24, r24
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZplRK15StringSumHelperRK6String+0x50>
  50:	89 81       	ldd	r24, Y+1	; 0x01
  52:	9a 81       	ldd	r25, Y+2	; 0x02
  54:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  58:	89 81       	ldd	r24, Y+1	; 0x01
  5a:	9a 81       	ldd	r25, Y+2	; 0x02
  5c:	27 96       	adiw	r28, 0x07	; 7
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	f8 94       	cli
  62:	de bf       	out	0x3e, r29	; 62
  64:	0f be       	out	0x3f, r0	; 63
  66:	cd bf       	out	0x3d, r28	; 61
  68:	cf 91       	pop	r28
  6a:	df 91       	pop	r29
  6c:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPKcj:

00000000 <_ZN6String4copyEPKcj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9a 83       	std	Y+2, r25	; 0x02
  16:	89 83       	std	Y+1, r24	; 0x01
  18:	7c 83       	std	Y+4, r23	; 0x04
}
  1a:	6b 83       	std	Y+3, r22	; 0x03
  1c:	5e 83       	std	Y+6, r21	; 0x06
  1e:	4d 83       	std	Y+5, r20	; 0x05
  20:	89 81       	ldd	r24, Y+1	; 0x01
  22:	9a 81       	ldd	r25, Y+2	; 0x02
  24:	2d 81       	ldd	r18, Y+5	; 0x05
  26:	3e 81       	ldd	r19, Y+6	; 0x06
  28:	b9 01       	movw	r22, r18
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  2e:	19 86       	std	Y+9, r1	; 0x09
  30:	88 23       	and	r24, r24
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN6String4copyEPKcj+0x34>
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	89 87       	std	Y+9, r24	; 0x09
  38:	99 85       	ldd	r25, Y+9	; 0x09
  3a:	99 23       	and	r25, r25
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6String4copyEPKcj+0x3e>
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  46:	89 81       	ldd	r24, Y+1	; 0x01
  48:	9a 81       	ldd	r25, Y+2	; 0x02
  4a:	98 87       	std	Y+8, r25	; 0x08
  4c:	8f 83       	std	Y+7, r24	; 0x07
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN6String4copyEPKcj+0x50>
  50:	e9 81       	ldd	r30, Y+1	; 0x01
  52:	fa 81       	ldd	r31, Y+2	; 0x02
  54:	8d 81       	ldd	r24, Y+5	; 0x05
  56:	9e 81       	ldd	r25, Y+6	; 0x06
  58:	95 83       	std	Z+5, r25	; 0x05
  5a:	84 83       	std	Z+4, r24	; 0x04
  5c:	e9 81       	ldd	r30, Y+1	; 0x01
  5e:	fa 81       	ldd	r31, Y+2	; 0x02
  60:	80 81       	ld	r24, Z
  62:	91 81       	ldd	r25, Z+1	; 0x01
  64:	2b 81       	ldd	r18, Y+3	; 0x03
  66:	3c 81       	ldd	r19, Y+4	; 0x04
  68:	b9 01       	movw	r22, r18
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  6e:	89 81       	ldd	r24, Y+1	; 0x01
  70:	9a 81       	ldd	r25, Y+2	; 0x02
  72:	98 87       	std	Y+8, r25	; 0x08
  74:	8f 83       	std	Y+7, r24	; 0x07
  76:	8f 81       	ldd	r24, Y+7	; 0x07
  78:	98 85       	ldd	r25, Y+8	; 0x08
  7a:	29 96       	adiw	r28, 0x09	; 9
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	f8 94       	cli
  80:	de bf       	out	0x3e, r29	; 62
  82:	0f be       	out	0x3f, r0	; 63
  84:	cd bf       	out	0x3d, r28	; 61
  86:	cf 91       	pop	r28
  88:	df 91       	pop	r29
  8a:	08 95       	ret

Disassembly of section .text._ZN6StringC1EPKc:

00000000 <_ZN6StringC1EPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC1EPKc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringC1EPKc+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	9c 81       	ldd	r25, Y+4	; 0x04
  20:	00 97       	sbiw	r24, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN6StringC1EPKc+0x24>
  24:	8b 81       	ldd	r24, Y+3	; 0x03
  26:	9c 81       	ldd	r25, Y+4	; 0x04
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
  2c:	ac 01       	movw	r20, r24
  2e:	89 81       	ldd	r24, Y+1	; 0x01
  30:	9a 81       	ldd	r25, Y+2	; 0x02
  32:	2b 81       	ldd	r18, Y+3	; 0x03
  34:	3c 81       	ldd	r19, Y+4	; 0x04
  36:	b9 01       	movw	r22, r18
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	0f 90       	pop	r0
  44:	cf 91       	pop	r28
  46:	df 91       	pop	r29
  48:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPKc:

00000000 <_ZN6StringC2EPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC2EPKc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringC2EPKc+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2EPKc>
}
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	9c 81       	ldd	r25, Y+4	; 0x04
  20:	00 97       	sbiw	r24, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN6StringC2EPKc+0x24>
  24:	8b 81       	ldd	r24, Y+3	; 0x03
  26:	9c 81       	ldd	r25, Y+4	; 0x04
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2EPKc>
  2c:	ac 01       	movw	r20, r24
  2e:	89 81       	ldd	r24, Y+1	; 0x01
  30:	9a 81       	ldd	r25, Y+2	; 0x02
  32:	2b 81       	ldd	r18, Y+3	; 0x03
  34:	3c 81       	ldd	r19, Y+4	; 0x04
  36:	b9 01       	movw	r22, r18
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2EPKc>
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	0f 90       	pop	r0
  44:	cf 91       	pop	r28
  46:	df 91       	pop	r29
  48:	08 95       	ret

Disassembly of section .text._ZN6StringaSEPKc:

00000000 <_ZN6StringaSEPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringaSEPKc+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringaSEPKc+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	8b 81       	ldd	r24, Y+3	; 0x03
  16:	9c 81       	ldd	r25, Y+4	; 0x04
  18:	00 97       	sbiw	r24, 0x00	; 0
}
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6StringaSEPKc+0x1c>
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	9c 81       	ldd	r25, Y+4	; 0x04
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  24:	ac 01       	movw	r20, r24
  26:	89 81       	ldd	r24, Y+1	; 0x01
  28:	9a 81       	ldd	r25, Y+2	; 0x02
  2a:	2b 81       	ldd	r18, Y+3	; 0x03
  2c:	3c 81       	ldd	r19, Y+4	; 0x04
  2e:	b9 01       	movw	r22, r18
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6StringaSEPKc+0x36>
  36:	89 81       	ldd	r24, Y+1	; 0x01
  38:	9a 81       	ldd	r25, Y+2	; 0x02
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	08 95       	ret

Disassembly of section .text._ZN6StringC1Emh:

00000000 <_ZN6StringC1Emh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	a8 97       	sbiw	r28, 0x28	; 40
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9b a3       	std	Y+35, r25	; 0x23
  16:	8a a3       	std	Y+34, r24	; 0x22
  18:	4c a3       	std	Y+36, r20	; 0x24
}
  1a:	5d a3       	std	Y+37, r21	; 0x25
  1c:	6e a3       	std	Y+38, r22	; 0x26
  1e:	7f a3       	std	Y+39, r23	; 0x27
  20:	28 a7       	std	Y+40, r18	; 0x28
  22:	8a a1       	ldd	r24, Y+34	; 0x22
  24:	9b a1       	ldd	r25, Y+35	; 0x23
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  2a:	88 a5       	ldd	r24, Y+40	; 0x28
  2c:	e8 2f       	mov	r30, r24
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	8c a1       	ldd	r24, Y+36	; 0x24
  32:	9d a1       	ldd	r25, Y+37	; 0x25
  34:	ae a1       	ldd	r26, Y+38	; 0x26
  36:	bf a1       	ldd	r27, Y+39	; 0x27
  38:	bc 01       	movw	r22, r24
  3a:	cd 01       	movw	r24, r26
  3c:	9e 01       	movw	r18, r28
  3e:	2f 5f       	subi	r18, 0xFF	; 255
  40:	3f 4f       	sbci	r19, 0xFF	; 255
  42:	a9 01       	movw	r20, r18
  44:	9f 01       	movw	r18, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  4a:	8a a1       	ldd	r24, Y+34	; 0x22
  4c:	9b a1       	ldd	r25, Y+35	; 0x23
  4e:	9e 01       	movw	r18, r28
  50:	2f 5f       	subi	r18, 0xFF	; 255
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	b9 01       	movw	r22, r18
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  5a:	a8 96       	adiw	r28, 0x28	; 40
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	f8 94       	cli
  60:	de bf       	out	0x3e, r29	; 62
  62:	0f be       	out	0x3f, r0	; 63
  64:	cd bf       	out	0x3d, r28	; 61
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret

Disassembly of section .text._ZN6StringC2Emh:

00000000 <_ZN6StringC2Emh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	a8 97       	sbiw	r28, 0x28	; 40
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9b a3       	std	Y+35, r25	; 0x23
  16:	8a a3       	std	Y+34, r24	; 0x22
  18:	4c a3       	std	Y+36, r20	; 0x24
}
  1a:	5d a3       	std	Y+37, r21	; 0x25
  1c:	6e a3       	std	Y+38, r22	; 0x26
  1e:	7f a3       	std	Y+39, r23	; 0x27
  20:	28 a7       	std	Y+40, r18	; 0x28
  22:	8a a1       	ldd	r24, Y+34	; 0x22
  24:	9b a1       	ldd	r25, Y+35	; 0x23
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Emh>
  2a:	88 a5       	ldd	r24, Y+40	; 0x28
  2c:	e8 2f       	mov	r30, r24
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	8c a1       	ldd	r24, Y+36	; 0x24
  32:	9d a1       	ldd	r25, Y+37	; 0x25
  34:	ae a1       	ldd	r26, Y+38	; 0x26
  36:	bf a1       	ldd	r27, Y+39	; 0x27
  38:	bc 01       	movw	r22, r24
  3a:	cd 01       	movw	r24, r26
  3c:	9e 01       	movw	r18, r28
  3e:	2f 5f       	subi	r18, 0xFF	; 255
  40:	3f 4f       	sbci	r19, 0xFF	; 255
  42:	a9 01       	movw	r20, r18
  44:	9f 01       	movw	r18, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Emh>
  4a:	8a a1       	ldd	r24, Y+34	; 0x22
  4c:	9b a1       	ldd	r25, Y+35	; 0x23
  4e:	9e 01       	movw	r18, r28
  50:	2f 5f       	subi	r18, 0xFF	; 255
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	b9 01       	movw	r22, r18
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Emh>
  5a:	a8 96       	adiw	r28, 0x28	; 40
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	f8 94       	cli
  60:	de bf       	out	0x3e, r29	; 62
  62:	0f be       	out	0x3f, r0	; 63
  64:	cd bf       	out	0x3d, r28	; 61
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret

Disassembly of section .text._ZN6StringC1Elh:

00000000 <_ZN6StringC1Elh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	a9 97       	sbiw	r28, 0x29	; 41
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c a3       	std	Y+36, r25	; 0x24
  16:	8b a3       	std	Y+35, r24	; 0x23
  18:	4d a3       	std	Y+37, r20	; 0x25
}
  1a:	5e a3       	std	Y+38, r21	; 0x26
  1c:	6f a3       	std	Y+39, r22	; 0x27
  1e:	78 a7       	std	Y+40, r23	; 0x28
  20:	29 a7       	std	Y+41, r18	; 0x29
  22:	8b a1       	ldd	r24, Y+35	; 0x23
  24:	9c a1       	ldd	r25, Y+36	; 0x24
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  2a:	89 a5       	ldd	r24, Y+41	; 0x29
  2c:	e8 2f       	mov	r30, r24
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	8d a1       	ldd	r24, Y+37	; 0x25
  32:	9e a1       	ldd	r25, Y+38	; 0x26
  34:	af a1       	ldd	r26, Y+39	; 0x27
  36:	b8 a5       	ldd	r27, Y+40	; 0x28
  38:	bc 01       	movw	r22, r24
  3a:	cd 01       	movw	r24, r26
  3c:	9e 01       	movw	r18, r28
  3e:	2f 5f       	subi	r18, 0xFF	; 255
  40:	3f 4f       	sbci	r19, 0xFF	; 255
  42:	a9 01       	movw	r20, r18
  44:	9f 01       	movw	r18, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  4a:	8b a1       	ldd	r24, Y+35	; 0x23
  4c:	9c a1       	ldd	r25, Y+36	; 0x24
  4e:	9e 01       	movw	r18, r28
  50:	2f 5f       	subi	r18, 0xFF	; 255
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	b9 01       	movw	r22, r18
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  5a:	a9 96       	adiw	r28, 0x29	; 41
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	f8 94       	cli
  60:	de bf       	out	0x3e, r29	; 62
  62:	0f be       	out	0x3f, r0	; 63
  64:	cd bf       	out	0x3d, r28	; 61
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret

Disassembly of section .text._ZN6StringC2Elh:

00000000 <_ZN6StringC2Elh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	a9 97       	sbiw	r28, 0x29	; 41
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c a3       	std	Y+36, r25	; 0x24
  16:	8b a3       	std	Y+35, r24	; 0x23
  18:	4d a3       	std	Y+37, r20	; 0x25
}
  1a:	5e a3       	std	Y+38, r21	; 0x26
  1c:	6f a3       	std	Y+39, r22	; 0x27
  1e:	78 a7       	std	Y+40, r23	; 0x28
  20:	29 a7       	std	Y+41, r18	; 0x29
  22:	8b a1       	ldd	r24, Y+35	; 0x23
  24:	9c a1       	ldd	r25, Y+36	; 0x24
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Elh>
  2a:	89 a5       	ldd	r24, Y+41	; 0x29
  2c:	e8 2f       	mov	r30, r24
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	8d a1       	ldd	r24, Y+37	; 0x25
  32:	9e a1       	ldd	r25, Y+38	; 0x26
  34:	af a1       	ldd	r26, Y+39	; 0x27
  36:	b8 a5       	ldd	r27, Y+40	; 0x28
  38:	bc 01       	movw	r22, r24
  3a:	cd 01       	movw	r24, r26
  3c:	9e 01       	movw	r18, r28
  3e:	2f 5f       	subi	r18, 0xFF	; 255
  40:	3f 4f       	sbci	r19, 0xFF	; 255
  42:	a9 01       	movw	r20, r18
  44:	9f 01       	movw	r18, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Elh>
  4a:	8b a1       	ldd	r24, Y+35	; 0x23
  4c:	9c a1       	ldd	r25, Y+36	; 0x24
  4e:	9e 01       	movw	r18, r28
  50:	2f 5f       	subi	r18, 0xFF	; 255
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	b9 01       	movw	r22, r18
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Elh>
  5a:	a9 96       	adiw	r28, 0x29	; 41
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	f8 94       	cli
  60:	de bf       	out	0x3e, r29	; 62
  62:	0f be       	out	0x3f, r0	; 63
  64:	cd bf       	out	0x3d, r28	; 61
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret

Disassembly of section .text._ZN6StringC1Ejh:

00000000 <_ZN6StringC1Ejh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	66 97       	sbiw	r28, 0x16	; 22
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9b 8b       	std	Y+19, r25	; 0x13
  16:	8a 8b       	std	Y+18, r24	; 0x12
  18:	7d 8b       	std	Y+21, r23	; 0x15
}
  1a:	6c 8b       	std	Y+20, r22	; 0x14
  1c:	4e 8b       	std	Y+22, r20	; 0x16
  1e:	8a 89       	ldd	r24, Y+18	; 0x12
  20:	9b 89       	ldd	r25, Y+19	; 0x13
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  26:	8e 89       	ldd	r24, Y+22	; 0x16
  28:	48 2f       	mov	r20, r24
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	8c 89       	ldd	r24, Y+20	; 0x14
  2e:	9d 89       	ldd	r25, Y+21	; 0x15
  30:	9e 01       	movw	r18, r28
  32:	2f 5f       	subi	r18, 0xFF	; 255
  34:	3f 4f       	sbci	r19, 0xFF	; 255
  36:	b9 01       	movw	r22, r18
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  3c:	8a 89       	ldd	r24, Y+18	; 0x12
  3e:	9b 89       	ldd	r25, Y+19	; 0x13
  40:	9e 01       	movw	r18, r28
  42:	2f 5f       	subi	r18, 0xFF	; 255
  44:	3f 4f       	sbci	r19, 0xFF	; 255
  46:	b9 01       	movw	r22, r18
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  4c:	66 96       	adiw	r28, 0x16	; 22
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ejh:

00000000 <_ZN6StringC2Ejh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	66 97       	sbiw	r28, 0x16	; 22
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9b 8b       	std	Y+19, r25	; 0x13
  16:	8a 8b       	std	Y+18, r24	; 0x12
  18:	7d 8b       	std	Y+21, r23	; 0x15
}
  1a:	6c 8b       	std	Y+20, r22	; 0x14
  1c:	4e 8b       	std	Y+22, r20	; 0x16
  1e:	8a 89       	ldd	r24, Y+18	; 0x12
  20:	9b 89       	ldd	r25, Y+19	; 0x13
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ejh>
  26:	8e 89       	ldd	r24, Y+22	; 0x16
  28:	48 2f       	mov	r20, r24
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	8c 89       	ldd	r24, Y+20	; 0x14
  2e:	9d 89       	ldd	r25, Y+21	; 0x15
  30:	9e 01       	movw	r18, r28
  32:	2f 5f       	subi	r18, 0xFF	; 255
  34:	3f 4f       	sbci	r19, 0xFF	; 255
  36:	b9 01       	movw	r22, r18
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ejh>
  3c:	8a 89       	ldd	r24, Y+18	; 0x12
  3e:	9b 89       	ldd	r25, Y+19	; 0x13
  40:	9e 01       	movw	r18, r28
  42:	2f 5f       	subi	r18, 0xFF	; 255
  44:	3f 4f       	sbci	r19, 0xFF	; 255
  46:	b9 01       	movw	r22, r18
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ejh>
  4c:	66 96       	adiw	r28, 0x16	; 22
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	08 95       	ret

Disassembly of section .text._ZN6StringC1Eih:

00000000 <_ZN6StringC1Eih>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	67 97       	sbiw	r28, 0x17	; 23
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 8b       	std	Y+20, r25	; 0x14
  16:	8b 8b       	std	Y+19, r24	; 0x13
  18:	7e 8b       	std	Y+22, r23	; 0x16
}
  1a:	6d 8b       	std	Y+21, r22	; 0x15
  1c:	4f 8b       	std	Y+23, r20	; 0x17
  1e:	8b 89       	ldd	r24, Y+19	; 0x13
  20:	9c 89       	ldd	r25, Y+20	; 0x14
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  26:	8f 89       	ldd	r24, Y+23	; 0x17
  28:	48 2f       	mov	r20, r24
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	8d 89       	ldd	r24, Y+21	; 0x15
  2e:	9e 89       	ldd	r25, Y+22	; 0x16
  30:	9e 01       	movw	r18, r28
  32:	2f 5f       	subi	r18, 0xFF	; 255
  34:	3f 4f       	sbci	r19, 0xFF	; 255
  36:	b9 01       	movw	r22, r18
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  3c:	8b 89       	ldd	r24, Y+19	; 0x13
  3e:	9c 89       	ldd	r25, Y+20	; 0x14
  40:	9e 01       	movw	r18, r28
  42:	2f 5f       	subi	r18, 0xFF	; 255
  44:	3f 4f       	sbci	r19, 0xFF	; 255
  46:	b9 01       	movw	r22, r18
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  4c:	67 96       	adiw	r28, 0x17	; 23
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	08 95       	ret

Disassembly of section .text._ZN6StringC2Eih:

00000000 <_ZN6StringC2Eih>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	67 97       	sbiw	r28, 0x17	; 23
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 8b       	std	Y+20, r25	; 0x14
  16:	8b 8b       	std	Y+19, r24	; 0x13
  18:	7e 8b       	std	Y+22, r23	; 0x16
}
  1a:	6d 8b       	std	Y+21, r22	; 0x15
  1c:	4f 8b       	std	Y+23, r20	; 0x17
  1e:	8b 89       	ldd	r24, Y+19	; 0x13
  20:	9c 89       	ldd	r25, Y+20	; 0x14
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Eih>
  26:	8f 89       	ldd	r24, Y+23	; 0x17
  28:	48 2f       	mov	r20, r24
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	8d 89       	ldd	r24, Y+21	; 0x15
  2e:	9e 89       	ldd	r25, Y+22	; 0x16
  30:	9e 01       	movw	r18, r28
  32:	2f 5f       	subi	r18, 0xFF	; 255
  34:	3f 4f       	sbci	r19, 0xFF	; 255
  36:	b9 01       	movw	r22, r18
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Eih>
  3c:	8b 89       	ldd	r24, Y+19	; 0x13
  3e:	9c 89       	ldd	r25, Y+20	; 0x14
  40:	9e 01       	movw	r18, r28
  42:	2f 5f       	subi	r18, 0xFF	; 255
  44:	3f 4f       	sbci	r19, 0xFF	; 255
  46:	b9 01       	movw	r22, r18
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Eih>
  4c:	67 96       	adiw	r28, 0x17	; 23
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	08 95       	ret

Disassembly of section .text._ZN6StringC1Ehh:

00000000 <_ZN6StringC1Ehh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9b 87       	std	Y+11, r25	; 0x0b
  16:	8a 87       	std	Y+10, r24	; 0x0a
  18:	6c 87       	std	Y+12, r22	; 0x0c
}
  1a:	4d 87       	std	Y+13, r20	; 0x0d
  1c:	8a 85       	ldd	r24, Y+10	; 0x0a
  1e:	9b 85       	ldd	r25, Y+11	; 0x0b
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  24:	8c 85       	ldd	r24, Y+12	; 0x0c
  26:	28 2f       	mov	r18, r24
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	8d 85       	ldd	r24, Y+13	; 0x0d
  2c:	48 2f       	mov	r20, r24
  2e:	50 e0       	ldi	r21, 0x00	; 0
  30:	c9 01       	movw	r24, r18
  32:	9e 01       	movw	r18, r28
  34:	2f 5f       	subi	r18, 0xFF	; 255
  36:	3f 4f       	sbci	r19, 0xFF	; 255
  38:	b9 01       	movw	r22, r18
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  3e:	8a 85       	ldd	r24, Y+10	; 0x0a
  40:	9b 85       	ldd	r25, Y+11	; 0x0b
  42:	9e 01       	movw	r18, r28
  44:	2f 5f       	subi	r18, 0xFF	; 255
  46:	3f 4f       	sbci	r19, 0xFF	; 255
  48:	b9 01       	movw	r22, r18
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  4e:	2d 96       	adiw	r28, 0x0d	; 13
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	f8 94       	cli
  54:	de bf       	out	0x3e, r29	; 62
  56:	0f be       	out	0x3f, r0	; 63
  58:	cd bf       	out	0x3d, r28	; 61
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ehh:

00000000 <_ZN6StringC2Ehh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9b 87       	std	Y+11, r25	; 0x0b
  16:	8a 87       	std	Y+10, r24	; 0x0a
  18:	6c 87       	std	Y+12, r22	; 0x0c
}
  1a:	4d 87       	std	Y+13, r20	; 0x0d
  1c:	8a 85       	ldd	r24, Y+10	; 0x0a
  1e:	9b 85       	ldd	r25, Y+11	; 0x0b
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ehh>
  24:	8c 85       	ldd	r24, Y+12	; 0x0c
  26:	28 2f       	mov	r18, r24
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	8d 85       	ldd	r24, Y+13	; 0x0d
  2c:	48 2f       	mov	r20, r24
  2e:	50 e0       	ldi	r21, 0x00	; 0
  30:	c9 01       	movw	r24, r18
  32:	9e 01       	movw	r18, r28
  34:	2f 5f       	subi	r18, 0xFF	; 255
  36:	3f 4f       	sbci	r19, 0xFF	; 255
  38:	b9 01       	movw	r22, r18
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ehh>
  3e:	8a 85       	ldd	r24, Y+10	; 0x0a
  40:	9b 85       	ldd	r25, Y+11	; 0x0b
  42:	9e 01       	movw	r18, r28
  44:	2f 5f       	subi	r18, 0xFF	; 255
  46:	3f 4f       	sbci	r19, 0xFF	; 255
  48:	b9 01       	movw	r22, r18
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ehh>
  4e:	2d 96       	adiw	r28, 0x0d	; 13
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	f8 94       	cli
  54:	de bf       	out	0x3e, r29	; 62
  56:	0f be       	out	0x3f, r0	; 63
  58:	cd bf       	out	0x3d, r28	; 61
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	08 95       	ret

Disassembly of section .text._ZN6StringC1Ec:

00000000 <_ZN6StringC1Ec>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC1Ec+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringC1Ec+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	6d 83       	std	Y+5, r22	; 0x05
  14:	8b 81       	ldd	r24, Y+3	; 0x03
  16:	9c 81       	ldd	r25, Y+4	; 0x04
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ec>
}
  1c:	8d 81       	ldd	r24, Y+5	; 0x05
  1e:	89 83       	std	Y+1, r24	; 0x01
  20:	1a 82       	std	Y+2, r1	; 0x02
  22:	8b 81       	ldd	r24, Y+3	; 0x03
  24:	9c 81       	ldd	r25, Y+4	; 0x04
  26:	9e 01       	movw	r18, r28
  28:	2f 5f       	subi	r18, 0xFF	; 255
  2a:	3f 4f       	sbci	r19, 0xFF	; 255
  2c:	b9 01       	movw	r22, r18
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ec>
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	0f 90       	pop	r0
  3c:	cf 91       	pop	r28
  3e:	df 91       	pop	r29
  40:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ec:

00000000 <_ZN6StringC2Ec>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC2Ec+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringC2Ec+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
  12:	6d 83       	std	Y+5, r22	; 0x05
  14:	8b 81       	ldd	r24, Y+3	; 0x03
  16:	9c 81       	ldd	r25, Y+4	; 0x04
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ec>
}
  1c:	8d 81       	ldd	r24, Y+5	; 0x05
  1e:	89 83       	std	Y+1, r24	; 0x01
  20:	1a 82       	std	Y+2, r1	; 0x02
  22:	8b 81       	ldd	r24, Y+3	; 0x03
  24:	9c 81       	ldd	r25, Y+4	; 0x04
  26:	9e 01       	movw	r18, r28
  28:	2f 5f       	subi	r18, 0xFF	; 255
  2a:	3f 4f       	sbci	r19, 0xFF	; 255
  2c:	b9 01       	movw	r22, r18
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ec>
  32:	0f 90       	pop	r0
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	0f 90       	pop	r0
  3c:	cf 91       	pop	r28
  3e:	df 91       	pop	r29
  40:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEjj:

00000000 <_ZNK6String9substringEjj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	62 97       	sbiw	r28, 0x12	; 18
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
{
	free(buffer);
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9a 8b       	std	Y+18, r25	; 0x12
  16:	89 8b       	std	Y+17, r24	; 0x11
  18:	7c 87       	std	Y+12, r23	; 0x0c
}
  1a:	6b 87       	std	Y+11, r22	; 0x0b
  1c:	5e 87       	std	Y+14, r21	; 0x0e
  1e:	4d 87       	std	Y+13, r20	; 0x0d
  20:	38 8b       	std	Y+16, r19	; 0x10
  22:	2f 87       	std	Y+15, r18	; 0x0f
  24:	2d 85       	ldd	r18, Y+13	; 0x0d
  26:	3e 85       	ldd	r19, Y+14	; 0x0e
  28:	8f 85       	ldd	r24, Y+15	; 0x0f
  2a:	98 89       	ldd	r25, Y+16	; 0x10
  2c:	82 17       	cp	r24, r18
  2e:	93 07       	cpc	r25, r19
  30:	00 f4       	brcc	.+0      	; 0x32 <_ZNK6String9substringEjj+0x32>
  32:	8f 85       	ldd	r24, Y+15	; 0x0f
  34:	98 89       	ldd	r25, Y+16	; 0x10
  36:	9a 83       	std	Y+2, r25	; 0x02
  38:	89 83       	std	Y+1, r24	; 0x01
  3a:	8d 85       	ldd	r24, Y+13	; 0x0d
  3c:	9e 85       	ldd	r25, Y+14	; 0x0e
  3e:	98 8b       	std	Y+16, r25	; 0x10
  40:	8f 87       	std	Y+15, r24	; 0x0f
  42:	89 81       	ldd	r24, Y+1	; 0x01
  44:	9a 81       	ldd	r25, Y+2	; 0x02
  46:	9e 87       	std	Y+14, r25	; 0x0e
  48:	8d 87       	std	Y+13, r24	; 0x0d
  4a:	89 89       	ldd	r24, Y+17	; 0x11
  4c:	9a 89       	ldd	r25, Y+18	; 0x12
  4e:	20 e0       	ldi	r18, 0x00	; 0
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	b9 01       	movw	r22, r18
  54:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  58:	eb 85       	ldd	r30, Y+11	; 0x0b
  5a:	fc 85       	ldd	r31, Y+12	; 0x0c
  5c:	24 81       	ldd	r18, Z+4	; 0x04
  5e:	35 81       	ldd	r19, Z+5	; 0x05
  60:	8d 85       	ldd	r24, Y+13	; 0x0d
  62:	9e 85       	ldd	r25, Y+14	; 0x0e
  64:	28 17       	cp	r18, r24
  66:	39 07       	cpc	r19, r25
  68:	00 f0       	brcs	.+0      	; 0x6a <_ZNK6String9substringEjj+0x6a>
  6a:	eb 85       	ldd	r30, Y+11	; 0x0b
  6c:	fc 85       	ldd	r31, Y+12	; 0x0c
  6e:	24 81       	ldd	r18, Z+4	; 0x04
  70:	35 81       	ldd	r19, Z+5	; 0x05
  72:	8f 85       	ldd	r24, Y+15	; 0x0f
  74:	98 89       	ldd	r25, Y+16	; 0x10
  76:	28 17       	cp	r18, r24
  78:	39 07       	cpc	r19, r25
  7a:	00 f4       	brcc	.+0      	; 0x7c <_ZNK6String9substringEjj+0x7c>
  7c:	eb 85       	ldd	r30, Y+11	; 0x0b
  7e:	fc 85       	ldd	r31, Y+12	; 0x0c
  80:	84 81       	ldd	r24, Z+4	; 0x04
  82:	95 81       	ldd	r25, Z+5	; 0x05
  84:	98 8b       	std	Y+16, r25	; 0x10
  86:	8f 87       	std	Y+15, r24	; 0x0f
  88:	eb 85       	ldd	r30, Y+11	; 0x0b
  8a:	fc 85       	ldd	r31, Y+12	; 0x0c
  8c:	20 81       	ld	r18, Z
  8e:	31 81       	ldd	r19, Z+1	; 0x01
  90:	8f 85       	ldd	r24, Y+15	; 0x0f
  92:	98 89       	ldd	r25, Y+16	; 0x10
  94:	f9 01       	movw	r30, r18
  96:	e8 0f       	add	r30, r24
  98:	f9 1f       	adc	r31, r25
  9a:	80 81       	ld	r24, Z
  9c:	8b 83       	std	Y+3, r24	; 0x03
  9e:	eb 85       	ldd	r30, Y+11	; 0x0b
  a0:	fc 85       	ldd	r31, Y+12	; 0x0c
  a2:	20 81       	ld	r18, Z
  a4:	31 81       	ldd	r19, Z+1	; 0x01
  a6:	8f 85       	ldd	r24, Y+15	; 0x0f
  a8:	98 89       	ldd	r25, Y+16	; 0x10
  aa:	f9 01       	movw	r30, r18
  ac:	e8 0f       	add	r30, r24
  ae:	f9 1f       	adc	r31, r25
  b0:	10 82       	st	Z, r1
  b2:	49 89       	ldd	r20, Y+17	; 0x11
  b4:	5a 89       	ldd	r21, Y+18	; 0x12
  b6:	eb 85       	ldd	r30, Y+11	; 0x0b
  b8:	fc 85       	ldd	r31, Y+12	; 0x0c
  ba:	20 81       	ld	r18, Z
  bc:	31 81       	ldd	r19, Z+1	; 0x01
  be:	8d 85       	ldd	r24, Y+13	; 0x0d
  c0:	9e 85       	ldd	r25, Y+14	; 0x0e
  c2:	28 0f       	add	r18, r24
  c4:	39 1f       	adc	r19, r25
  c6:	ca 01       	movw	r24, r20
  c8:	b9 01       	movw	r22, r18
  ca:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  ce:	eb 85       	ldd	r30, Y+11	; 0x0b
  d0:	fc 85       	ldd	r31, Y+12	; 0x0c
  d2:	20 81       	ld	r18, Z
  d4:	31 81       	ldd	r19, Z+1	; 0x01
  d6:	8f 85       	ldd	r24, Y+15	; 0x0f
  d8:	98 89       	ldd	r25, Y+16	; 0x10
  da:	f9 01       	movw	r30, r18
  dc:	e8 0f       	add	r30, r24
  de:	f9 1f       	adc	r31, r25
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	80 83       	st	Z, r24
  e4:	89 89       	ldd	r24, Y+17	; 0x11
  e6:	9a 89       	ldd	r25, Y+18	; 0x12
  e8:	89 89       	ldd	r24, Y+17	; 0x11
  ea:	9a 89       	ldd	r25, Y+18	; 0x12
  ec:	62 96       	adiw	r28, 0x12	; 18
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	cd bf       	out	0x3d, r28	; 61
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEj:

00000000 <_ZNK6String9substringEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	00 d0       	rcall	.+0      	; 0xa <_ZNK6String9substringEj+0xa>
   a:	00 d0       	rcall	.+0      	; 0xc <_ZNK6String9substringEj+0xc>
   c:	cd b7       	in	r28, 0x3d	; 61
{
	free(buffer);
   e:	de b7       	in	r29, 0x3e	; 62
  10:	8c 01       	movw	r16, r24
  12:	7a 83       	std	Y+2, r23	; 0x02
  14:	69 83       	std	Y+1, r22	; 0x01
  16:	5c 83       	std	Y+4, r21	; 0x04
  18:	4b 83       	std	Y+3, r20	; 0x03
}
  1a:	c8 01       	movw	r24, r16
  1c:	e9 81       	ldd	r30, Y+1	; 0x01
  1e:	fa 81       	ldd	r31, Y+2	; 0x02
  20:	04 80       	ldd	r0, Z+4	; 0x04
  22:	f5 81       	ldd	r31, Z+5	; 0x05
  24:	e0 2d       	mov	r30, r0
  26:	29 81       	ldd	r18, Y+1	; 0x01
  28:	3a 81       	ldd	r19, Y+2	; 0x02
  2a:	4b 81       	ldd	r20, Y+3	; 0x03
  2c:	5c 81       	ldd	r21, Y+4	; 0x04
  2e:	b9 01       	movw	r22, r18
  30:	9f 01       	movw	r18, r30
  32:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEj>
  36:	c8 01       	movw	r24, r16
  38:	c8 01       	movw	r24, r16
  3a:	0f 90       	pop	r0
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	cf 91       	pop	r28
  44:	df 91       	pop	r29
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	08 95       	ret

Disassembly of section .text._ZN6StringaSERKS_:

00000000 <_ZN6StringaSERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringaSERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringaSERKS_+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6StringaSERKS_+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
{
	free(buffer);
   e:	9a 83       	std	Y+2, r25	; 0x02
  10:	89 83       	std	Y+1, r24	; 0x01
  12:	7c 83       	std	Y+4, r23	; 0x04
  14:	6b 83       	std	Y+3, r22	; 0x03
  16:	29 81       	ldd	r18, Y+1	; 0x01
  18:	3a 81       	ldd	r19, Y+2	; 0x02
}
  1a:	8b 81       	ldd	r24, Y+3	; 0x03
  1c:	9c 81       	ldd	r25, Y+4	; 0x04
  1e:	28 17       	cp	r18, r24
  20:	39 07       	cpc	r19, r25
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN6StringaSERKS_+0x24>
  24:	89 81       	ldd	r24, Y+1	; 0x01
  26:	9a 81       	ldd	r25, Y+2	; 0x02
  28:	9e 83       	std	Y+6, r25	; 0x06
  2a:	8d 83       	std	Y+5, r24	; 0x05
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6StringaSERKS_+0x2e>
  2e:	eb 81       	ldd	r30, Y+3	; 0x03
  30:	fc 81       	ldd	r31, Y+4	; 0x04
  32:	80 81       	ld	r24, Z
  34:	91 81       	ldd	r25, Z+1	; 0x01
  36:	00 97       	sbiw	r24, 0x00	; 0
  38:	01 f0       	breq	.+0      	; 0x3a <_ZN6StringaSERKS_+0x3a>
  3a:	eb 81       	ldd	r30, Y+3	; 0x03
  3c:	fc 81       	ldd	r31, Y+4	; 0x04
  3e:	40 81       	ld	r20, Z
  40:	51 81       	ldd	r21, Z+1	; 0x01
  42:	eb 81       	ldd	r30, Y+3	; 0x03
  44:	fc 81       	ldd	r31, Y+4	; 0x04
  46:	24 81       	ldd	r18, Z+4	; 0x04
  48:	35 81       	ldd	r19, Z+5	; 0x05
  4a:	89 81       	ldd	r24, Y+1	; 0x01
  4c:	9a 81       	ldd	r25, Y+2	; 0x02
  4e:	ba 01       	movw	r22, r20
  50:	a9 01       	movw	r20, r18
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN6StringaSERKS_+0x58>
  58:	89 81       	ldd	r24, Y+1	; 0x01
  5a:	9a 81       	ldd	r25, Y+2	; 0x02
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	9a 81       	ldd	r25, Y+2	; 0x02
  64:	9e 83       	std	Y+6, r25	; 0x06
  66:	8d 83       	std	Y+5, r24	; 0x05
  68:	8d 81       	ldd	r24, Y+5	; 0x05
  6a:	9e 81       	ldd	r25, Y+6	; 0x06
  6c:	26 96       	adiw	r28, 0x06	; 6
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	f8 94       	cli
  72:	de bf       	out	0x3e, r29	; 62
  74:	0f be       	out	0x3f, r0	; 63
  76:	cd bf       	out	0x3d, r28	; 61
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	08 95       	ret

Disassembly of section .text._ZN6StringC1ERKS_:

00000000 <_ZN6StringC1ERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC1ERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringC1ERKS_+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1ERKS_>
}
  1c:	89 81       	ldd	r24, Y+1	; 0x01
  1e:	9a 81       	ldd	r25, Y+2	; 0x02
  20:	2b 81       	ldd	r18, Y+3	; 0x03
  22:	3c 81       	ldd	r19, Y+4	; 0x04
  24:	b9 01       	movw	r22, r18
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1ERKS_>
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	cf 91       	pop	r28
  34:	df 91       	pop	r29
  36:	08 95       	ret

Disassembly of section .text._ZN6StringC2ERKS_:

00000000 <_ZN6StringC2ERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC2ERKS_+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringC2ERKS_+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
	free(buffer);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9a 81       	ldd	r25, Y+2	; 0x02
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2ERKS_>
}
  1c:	89 81       	ldd	r24, Y+1	; 0x01
  1e:	9a 81       	ldd	r25, Y+2	; 0x02
  20:	2b 81       	ldd	r18, Y+3	; 0x03
  22:	3c 81       	ldd	r19, Y+4	; 0x04
  24:	b9 01       	movw	r22, r18
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2ERKS_>
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	cf 91       	pop	r28
  34:	df 91       	pop	r29
  36:	08 95       	ret

Disassembly of section .text._ZN6StringD1Ev:

00000000 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringD1Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	80 81       	ld	r24, Z
  14:	91 81       	ldd	r25, Z+1	; 0x01
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD1Ev>
}
  1a:	0f 90       	pop	r0
  1c:	0f 90       	pop	r0
  1e:	cf 91       	pop	r28
  20:	df 91       	pop	r29
  22:	08 95       	ret

Disassembly of section .text._ZN6StringD2Ev:

00000000 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringD2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	80 81       	ld	r24, Z
  14:	91 81       	ldd	r25, Z+1	; 0x01
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD2Ev>
}
  1a:	0f 90       	pop	r0
  1c:	0f 90       	pop	r0
  1e:	cf 91       	pop	r28
  20:	df 91       	pop	r29
  22:	08 95       	ret

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000594  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__cxa_guard_acquire 00000038  00000000  00000000  00000940  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.__cxa_guard_release 00000020  00000000  00000000  00000978  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__cxa_guard_abort 00000018  00000000  00000000  00000998  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__cxa_pure_virtual 0000000e  00000000  00000000  000009b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZdaPv  00000020  00000000  00000000  000009be  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZdlPv  00000020  00000000  00000000  000009de  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._Znaj   00000020  00000000  00000000  000009fe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._Znwj   00000020  00000000  00000000  00000a1e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.__cxa_guard_acquire:

00000000 <__cxa_guard_acquire>:
#include <new.h>

void * operator new(size_t size)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <__cxa_guard_acquire+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <__cxa_guard_acquire+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
{
  return malloc(size);
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	e9 81       	ldd	r30, Y+1	; 0x01
  12:	fa 81       	ldd	r31, Y+2	; 0x02
  14:	80 81       	ld	r24, Z
}
  16:	1c 82       	std	Y+4, r1	; 0x04
  18:	1b 82       	std	Y+3, r1	; 0x03
  1a:	88 23       	and	r24, r24
  1c:	01 f4       	brne	.+0      	; 0x1e <__cxa_guard_acquire+0x1e>
  1e:	81 e0       	ldi	r24, 0x01	; 1
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	9c 83       	std	Y+4, r25	; 0x04
  24:	8b 83       	std	Y+3, r24	; 0x03
  26:	8b 81       	ldd	r24, Y+3	; 0x03
  28:	9c 81       	ldd	r25, Y+4	; 0x04
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	cf 91       	pop	r28
  34:	df 91       	pop	r29
  36:	08 95       	ret

Disassembly of section .text.__cxa_guard_release:

00000000 <__cxa_guard_release>:
#include <new.h>

void * operator new(size_t size)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <__cxa_guard_release+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
  return malloc(size);
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	81 e0       	ldi	r24, 0x01	; 1
  14:	80 83       	st	Z, r24
}
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	cf 91       	pop	r28
  1c:	df 91       	pop	r29
  1e:	08 95       	ret

Disassembly of section .text.__cxa_guard_abort:

00000000 <__cxa_guard_abort>:
#include <new.h>

void * operator new(size_t size)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <__cxa_guard_abort+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
  return malloc(size);
   e:	0f 90       	pop	r0
  10:	0f 90       	pop	r0
  12:	cf 91       	pop	r28
  14:	df 91       	pop	r29
}
  16:	08 95       	ret

Disassembly of section .text.__cxa_pure_virtual:

00000000 <__cxa_pure_virtual>:
#include <new.h>

void * operator new(size_t size)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	cf 91       	pop	r28
   a:	df 91       	pop	r29
   c:	08 95       	ret

Disassembly of section .text._ZdaPv:

00000000 <_ZdaPv>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZdaPv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
  return malloc(size);
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	0e 94 00 00 	call	0	; 0x0 <_ZdaPv>
}
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	cf 91       	pop	r28
  1c:	df 91       	pop	r29
  1e:	08 95       	ret

Disassembly of section .text._ZdlPv:

00000000 <_ZdlPv>:
#include <new.h>

void * operator new(size_t size)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZdlPv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
  return malloc(size);
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	0e 94 00 00 	call	0	; 0x0 <_ZdlPv>
}
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	cf 91       	pop	r28
  1c:	df 91       	pop	r29
  1e:	08 95       	ret

Disassembly of section .text._Znaj:

00000000 <_Znaj>:
#include <new.h>

void * operator new(size_t size)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Znaj+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
  return malloc(size);
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	0e 94 00 00 	call	0	; 0x0 <_Znaj>
}
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	cf 91       	pop	r28
  1c:	df 91       	pop	r29
  1e:	08 95       	ret

Disassembly of section .text._Znwj:

00000000 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Znwj+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
  return malloc(size);
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	0e 94 00 00 	call	0	; 0x0 <_Znwj>
}
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	cf 91       	pop	r28
  1c:	df 91       	pop	r29
  1e:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000978  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000db8  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .rodata.SS    00000001  00000000  00000000  00001764  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rodata.MOSI  00000001  00000000  00000000  00001765  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata.MISO  00000001  00000000  00000000  00001766  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata.SCK   00000001  00000000  00000000  00001767  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata.SDA   00000001  00000000  00000000  00001768  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rodata.SCL   00000001  00000000  00000000  00001769  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .rodata.LED_BUILTIN 00000001  00000000  00000000  0000176a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .rodata.A0    00000001  00000000  00000000  0000176b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .rodata.A1    00000001  00000000  00000000  0000176c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .rodata.A2    00000001  00000000  00000000  0000176d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .rodata.A3    00000001  00000000  00000000  0000176e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .rodata.A4    00000001  00000000  00000000  0000176f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .rodata.A5    00000001  00000000  00000000  00001770  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .rodata.A6    00000001  00000000  00000000  00001771  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .rodata.A7    00000001  00000000  00000000  00001772  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .bss.timer0_overflow_count 00000004  00000000  00000000  00001773  2**0
                  ALLOC
 21 .bss.timer0_millis 00000004  00000000  00000000  00001773  2**0
                  ALLOC
 22 .bss.timer0_fract 00000001  00000000  00000000  00001773  2**0
                  ALLOC
 23 .text.__vector_16 000000e0  00000000  00000000  00001773  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text.millis  00000054  00000000  00000000  00001853  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text.micros  000000b6  00000000  00000000  000018a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text.delay   00000086  00000000  00000000  0000195d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text.delayMicroseconds 00000050  00000000  00000000  000019e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text.init    000000e0  00000000  00000000  00001a33  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text.__vector_16:

00000000 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	8f 93       	push	r24
   c:	9f 93       	push	r25
   e:	af 93       	push	r26
  10:	bf 93       	push	r27
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	00 d0       	rcall	.+0      	; 0x18 <__vector_16+0x18>
  18:	00 d0       	rcall	.+0      	; 0x1a <__vector_16+0x1a>
  1a:	0f 92       	push	r0
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	80 91 00 00 	lds	r24, 0x0000
  24:	90 91 00 00 	lds	r25, 0x0000
  28:	a0 91 00 00 	lds	r26, 0x0000
  2c:	b0 91 00 00 	lds	r27, 0x0000
  30:	8a 83       	std	Y+2, r24	; 0x02
  32:	9b 83       	std	Y+3, r25	; 0x03
  34:	ac 83       	std	Y+4, r26	; 0x04
  36:	bd 83       	std	Y+5, r27	; 0x05
	unsigned char f = timer0_fract;
  38:	80 91 00 00 	lds	r24, 0x0000
  3c:	89 83       	std	Y+1, r24	; 0x01

	m += MILLIS_INC;
  3e:	8a 81       	ldd	r24, Y+2	; 0x02
  40:	9b 81       	ldd	r25, Y+3	; 0x03
  42:	ac 81       	ldd	r26, Y+4	; 0x04
  44:	bd 81       	ldd	r27, Y+5	; 0x05
  46:	01 96       	adiw	r24, 0x01	; 1
  48:	a1 1d       	adc	r26, r1
  4a:	b1 1d       	adc	r27, r1
  4c:	8a 83       	std	Y+2, r24	; 0x02
  4e:	9b 83       	std	Y+3, r25	; 0x03
  50:	ac 83       	std	Y+4, r26	; 0x04
  52:	bd 83       	std	Y+5, r27	; 0x05
	f += FRACT_INC;
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	8d 5f       	subi	r24, 0xFD	; 253
  58:	89 83       	std	Y+1, r24	; 0x01
	if (f >= FRACT_MAX) {
  5a:	89 81       	ldd	r24, Y+1	; 0x01
  5c:	8d 37       	cpi	r24, 0x7D	; 125
  5e:	00 f0       	brcs	.+0      	; 0x60 <__vector_16+0x60>
		f -= FRACT_MAX;
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	8d 57       	subi	r24, 0x7D	; 125
  64:	89 83       	std	Y+1, r24	; 0x01
		m += 1;
  66:	8a 81       	ldd	r24, Y+2	; 0x02
  68:	9b 81       	ldd	r25, Y+3	; 0x03
  6a:	ac 81       	ldd	r26, Y+4	; 0x04
  6c:	bd 81       	ldd	r27, Y+5	; 0x05
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	a1 1d       	adc	r26, r1
  72:	b1 1d       	adc	r27, r1
  74:	8a 83       	std	Y+2, r24	; 0x02
  76:	9b 83       	std	Y+3, r25	; 0x03
  78:	ac 83       	std	Y+4, r26	; 0x04
  7a:	bd 83       	std	Y+5, r27	; 0x05
	}

	timer0_fract = f;
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	80 93 00 00 	sts	0x0000, r24
	timer0_millis = m;
  82:	8a 81       	ldd	r24, Y+2	; 0x02
  84:	9b 81       	ldd	r25, Y+3	; 0x03
  86:	ac 81       	ldd	r26, Y+4	; 0x04
  88:	bd 81       	ldd	r27, Y+5	; 0x05
  8a:	80 93 00 00 	sts	0x0000, r24
  8e:	90 93 00 00 	sts	0x0000, r25
  92:	a0 93 00 00 	sts	0x0000, r26
  96:	b0 93 00 00 	sts	0x0000, r27
	timer0_overflow_count++;
  9a:	80 91 00 00 	lds	r24, 0x0000
  9e:	90 91 00 00 	lds	r25, 0x0000
  a2:	a0 91 00 00 	lds	r26, 0x0000
  a6:	b0 91 00 00 	lds	r27, 0x0000
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	a1 1d       	adc	r26, r1
  ae:	b1 1d       	adc	r27, r1
  b0:	80 93 00 00 	sts	0x0000, r24
  b4:	90 93 00 00 	sts	0x0000, r25
  b8:	a0 93 00 00 	sts	0x0000, r26
  bc:	b0 93 00 00 	sts	0x0000, r27
}
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

Disassembly of section .text.millis:

00000000 <millis>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <millis+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <millis+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	ef e5       	ldi	r30, 0x5F	; 95
  10:	f0 e0       	ldi	r31, 0x00	; 0
  12:	80 81       	ld	r24, Z
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	f8 94       	cli
  18:	80 91 00 00 	lds	r24, 0x0000
  1c:	90 91 00 00 	lds	r25, 0x0000
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	a0 91 00 00 	lds	r26, 0x0000
  24:	b0 91 00 00 	lds	r27, 0x0000
  28:	8a 83       	std	Y+2, r24	; 0x02
  2a:	9b 83       	std	Y+3, r25	; 0x03
  2c:	ac 83       	std	Y+4, r26	; 0x04
  2e:	bd 83       	std	Y+5, r27	; 0x05
  30:	ef e5       	ldi	r30, 0x5F	; 95
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	89 81       	ldd	r24, Y+1	; 0x01
  36:	80 83       	st	Z, r24
	unsigned char f = timer0_fract;
  38:	8a 81       	ldd	r24, Y+2	; 0x02
  3a:	9b 81       	ldd	r25, Y+3	; 0x03
  3c:	ac 81       	ldd	r26, Y+4	; 0x04

	m += MILLIS_INC;
  3e:	bd 81       	ldd	r27, Y+5	; 0x05
  40:	bc 01       	movw	r22, r24
  42:	cd 01       	movw	r24, r26
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	0f 90       	pop	r0
  4c:	0f 90       	pop	r0
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	08 95       	ret

Disassembly of section .text.micros:

00000000 <micros>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <micros+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <micros+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <micros+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	ef e5       	ldi	r30, 0x5F	; 95
  10:	f0 e0       	ldi	r31, 0x00	; 0
  12:	80 81       	ld	r24, Z
  14:	8a 83       	std	Y+2, r24	; 0x02
  16:	f8 94       	cli
  18:	80 91 00 00 	lds	r24, 0x0000
  1c:	90 91 00 00 	lds	r25, 0x0000
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	a0 91 00 00 	lds	r26, 0x0000
  24:	b0 91 00 00 	lds	r27, 0x0000
  28:	8b 83       	std	Y+3, r24	; 0x03
  2a:	9c 83       	std	Y+4, r25	; 0x04
  2c:	ad 83       	std	Y+5, r26	; 0x05
  2e:	be 83       	std	Y+6, r27	; 0x06
  30:	e6 e4       	ldi	r30, 0x46	; 70
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	80 81       	ld	r24, Z
  36:	89 83       	std	Y+1, r24	; 0x01
	unsigned char f = timer0_fract;
  38:	e5 e3       	ldi	r30, 0x35	; 53
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	80 81       	ld	r24, Z

	m += MILLIS_INC;
  3e:	88 2f       	mov	r24, r24
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	81 70       	andi	r24, 0x01	; 1
  44:	90 70       	andi	r25, 0x00	; 0
  46:	88 23       	and	r24, r24
  48:	01 f0       	breq	.+0      	; 0x4a <micros+0x4a>
  4a:	89 81       	ldd	r24, Y+1	; 0x01
  4c:	8f 3f       	cpi	r24, 0xFF	; 255
  4e:	01 f0       	breq	.+0      	; 0x50 <micros+0x50>
  50:	8b 81       	ldd	r24, Y+3	; 0x03
  52:	9c 81       	ldd	r25, Y+4	; 0x04
	f += FRACT_INC;
  54:	ad 81       	ldd	r26, Y+5	; 0x05
  56:	be 81       	ldd	r27, Y+6	; 0x06
  58:	01 96       	adiw	r24, 0x01	; 1
	if (f >= FRACT_MAX) {
  5a:	a1 1d       	adc	r26, r1
  5c:	b1 1d       	adc	r27, r1
  5e:	8b 83       	std	Y+3, r24	; 0x03
		f -= FRACT_MAX;
  60:	9c 83       	std	Y+4, r25	; 0x04
  62:	ad 83       	std	Y+5, r26	; 0x05
  64:	be 83       	std	Y+6, r27	; 0x06
		m += 1;
  66:	ef e5       	ldi	r30, 0x5F	; 95
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	8a 81       	ldd	r24, Y+2	; 0x02
  6c:	80 83       	st	Z, r24
  6e:	8b 81       	ldd	r24, Y+3	; 0x03
  70:	9c 81       	ldd	r25, Y+4	; 0x04
  72:	ad 81       	ldd	r26, Y+5	; 0x05
  74:	be 81       	ldd	r27, Y+6	; 0x06
  76:	22 27       	eor	r18, r18
  78:	38 2f       	mov	r19, r24
  7a:	49 2f       	mov	r20, r25
	}

	timer0_fract = f;
  7c:	5a 2f       	mov	r21, r26
  7e:	89 81       	ldd	r24, Y+1	; 0x01
  80:	88 2f       	mov	r24, r24
	timer0_millis = m;
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	82 0f       	add	r24, r18
  8a:	93 1f       	adc	r25, r19
  8c:	a4 1f       	adc	r26, r20
  8e:	b5 1f       	adc	r27, r21
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	aa 1f       	adc	r26, r26
  96:	bb 1f       	adc	r27, r27
  98:	88 0f       	add	r24, r24
	timer0_overflow_count++;
  9a:	99 1f       	adc	r25, r25
  9c:	aa 1f       	adc	r26, r26
  9e:	bb 1f       	adc	r27, r27
  a0:	bc 01       	movw	r22, r24
  a2:	cd 01       	movw	r24, r26
  a4:	26 96       	adiw	r28, 0x06	; 6
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

Disassembly of section .text.delay:

00000000 <delay>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <delay+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <delay+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <delay+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	6b 83       	std	Y+3, r22	; 0x03
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	8d 83       	std	Y+5, r24	; 0x05
  14:	9e 83       	std	Y+6, r25	; 0x06
  16:	0e 94 00 00 	call	0	; 0x0 <delay>
  1a:	dc 01       	movw	r26, r24
  1c:	cb 01       	movw	r24, r22
  1e:	9a 83       	std	Y+2, r25	; 0x02
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	89 83       	std	Y+1, r24	; 0x01
  22:	00 c0       	rjmp	.+0      	; 0x24 <delay+0x24>
  24:	0e 94 00 00 	call	0	; 0x0 <delay>
  28:	dc 01       	movw	r26, r24
  2a:	cb 01       	movw	r24, r22
  2c:	9c 01       	movw	r18, r24
  2e:	89 81       	ldd	r24, Y+1	; 0x01
  30:	9a 81       	ldd	r25, Y+2	; 0x02
  32:	a9 01       	movw	r20, r18
  34:	48 1b       	sub	r20, r24
  36:	59 0b       	sbc	r21, r25
	unsigned char f = timer0_fract;
  38:	ca 01       	movw	r24, r20
  3a:	53 e0       	ldi	r21, 0x03	; 3
  3c:	88 3e       	cpi	r24, 0xE8	; 232

	m += MILLIS_INC;
  3e:	95 07       	cpc	r25, r21
  40:	00 f0       	brcs	.+0      	; 0x42 <delay+0x42>
  42:	8b 81       	ldd	r24, Y+3	; 0x03
  44:	9c 81       	ldd	r25, Y+4	; 0x04
  46:	ad 81       	ldd	r26, Y+5	; 0x05
  48:	be 81       	ldd	r27, Y+6	; 0x06
  4a:	01 97       	sbiw	r24, 0x01	; 1
  4c:	a1 09       	sbc	r26, r1
  4e:	b1 09       	sbc	r27, r1
  50:	8b 83       	std	Y+3, r24	; 0x03
  52:	9c 83       	std	Y+4, r25	; 0x04
	f += FRACT_INC;
  54:	ad 83       	std	Y+5, r26	; 0x05
  56:	be 83       	std	Y+6, r27	; 0x06
  58:	89 81       	ldd	r24, Y+1	; 0x01
	if (f >= FRACT_MAX) {
  5a:	9a 81       	ldd	r25, Y+2	; 0x02
  5c:	88 51       	subi	r24, 0x18	; 24
  5e:	9c 4f       	sbci	r25, 0xFC	; 252
		f -= FRACT_MAX;
  60:	9a 83       	std	Y+2, r25	; 0x02
  62:	89 83       	std	Y+1, r24	; 0x01
  64:	8b 81       	ldd	r24, Y+3	; 0x03
		m += 1;
  66:	9c 81       	ldd	r25, Y+4	; 0x04
  68:	ad 81       	ldd	r26, Y+5	; 0x05
  6a:	be 81       	ldd	r27, Y+6	; 0x06
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	a1 05       	cpc	r26, r1
  70:	b1 05       	cpc	r27, r1
  72:	01 f4       	brne	.+0      	; 0x74 <delay+0x74>
  74:	26 96       	adiw	r28, 0x06	; 6
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
	}

	timer0_fract = f;
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	cf 91       	pop	r28
	timer0_millis = m;
  82:	df 91       	pop	r29
  84:	08 95       	ret

Disassembly of section .text.delayMicroseconds:

00000000 <delayMicroseconds>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <delayMicroseconds+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	01 97       	sbiw	r24, 0x01	; 1
  14:	9a 83       	std	Y+2, r25	; 0x02
  16:	89 83       	std	Y+1, r24	; 0x01
  18:	89 81       	ldd	r24, Y+1	; 0x01
  1a:	9a 81       	ldd	r25, Y+2	; 0x02
  1c:	00 97       	sbiw	r24, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <delayMicroseconds+0x20>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	89 81       	ldd	r24, Y+1	; 0x01
  22:	9a 81       	ldd	r25, Y+2	; 0x02
  24:	88 0f       	add	r24, r24
  26:	99 1f       	adc	r25, r25
  28:	88 0f       	add	r24, r24
  2a:	99 1f       	adc	r25, r25
  2c:	9a 83       	std	Y+2, r25	; 0x02
  2e:	89 83       	std	Y+1, r24	; 0x01
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	9a 81       	ldd	r25, Y+2	; 0x02
  34:	02 97       	sbiw	r24, 0x02	; 2
  36:	9a 83       	std	Y+2, r25	; 0x02
	unsigned char f = timer0_fract;
  38:	89 83       	std	Y+1, r24	; 0x01
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	9a 81       	ldd	r25, Y+2	; 0x02

	m += MILLIS_INC;
  3e:	01 97       	sbiw	r24, 0x01	; 1
  40:	01 f4       	brne	.+0      	; 0x42 <delayMicroseconds+0x42>
  42:	9a 83       	std	Y+2, r25	; 0x02
  44:	89 83       	std	Y+1, r24	; 0x01
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	08 95       	ret

Disassembly of section .text.init:

00000000 <init>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	78 94       	sei
   a:	a4 e4       	ldi	r26, 0x44	; 68
   c:	b0 e0       	ldi	r27, 0x00	; 0
   e:	e4 e4       	ldi	r30, 0x44	; 68
  10:	f0 e0       	ldi	r31, 0x00	; 0
  12:	80 81       	ld	r24, Z
  14:	82 60       	ori	r24, 0x02	; 2
  16:	8c 93       	st	X, r24
  18:	a4 e4       	ldi	r26, 0x44	; 68
  1a:	b0 e0       	ldi	r27, 0x00	; 0
  1c:	e4 e4       	ldi	r30, 0x44	; 68
  1e:	f0 e0       	ldi	r31, 0x00	; 0
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	80 81       	ld	r24, Z
  22:	81 60       	ori	r24, 0x01	; 1
  24:	8c 93       	st	X, r24
  26:	a5 e4       	ldi	r26, 0x45	; 69
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	e5 e4       	ldi	r30, 0x45	; 69
  2c:	f0 e0       	ldi	r31, 0x00	; 0
  2e:	80 81       	ld	r24, Z
  30:	82 60       	ori	r24, 0x02	; 2
  32:	8c 93       	st	X, r24
  34:	a5 e4       	ldi	r26, 0x45	; 69
  36:	b0 e0       	ldi	r27, 0x00	; 0
	unsigned char f = timer0_fract;
  38:	e5 e4       	ldi	r30, 0x45	; 69
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	80 81       	ld	r24, Z

	m += MILLIS_INC;
  3e:	81 60       	ori	r24, 0x01	; 1
  40:	8c 93       	st	X, r24
  42:	ae e6       	ldi	r26, 0x6E	; 110
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	ee e6       	ldi	r30, 0x6E	; 110
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	80 81       	ld	r24, Z
  4c:	81 60       	ori	r24, 0x01	; 1
  4e:	8c 93       	st	X, r24
  50:	e1 e8       	ldi	r30, 0x81	; 129
  52:	f0 e0       	ldi	r31, 0x00	; 0
	f += FRACT_INC;
  54:	10 82       	st	Z, r1
  56:	a1 e8       	ldi	r26, 0x81	; 129
  58:	b0 e0       	ldi	r27, 0x00	; 0
	if (f >= FRACT_MAX) {
  5a:	e1 e8       	ldi	r30, 0x81	; 129
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	80 81       	ld	r24, Z
		f -= FRACT_MAX;
  60:	82 60       	ori	r24, 0x02	; 2
  62:	8c 93       	st	X, r24
  64:	a1 e8       	ldi	r26, 0x81	; 129
		m += 1;
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e1 e8       	ldi	r30, 0x81	; 129
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	80 81       	ld	r24, Z
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	8c 93       	st	X, r24
  72:	a0 e8       	ldi	r26, 0x80	; 128
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e0 e8       	ldi	r30, 0x80	; 128
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
	}

	timer0_fract = f;
  7c:	81 60       	ori	r24, 0x01	; 1
  7e:	8c 93       	st	X, r24
  80:	a1 eb       	ldi	r26, 0xB1	; 177
	timer0_millis = m;
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e1 eb       	ldi	r30, 0xB1	; 177
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	84 60       	ori	r24, 0x04	; 4
  8c:	8c 93       	st	X, r24
  8e:	a0 eb       	ldi	r26, 0xB0	; 176
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	e0 eb       	ldi	r30, 0xB0	; 176
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
	timer0_overflow_count++;
  9a:	8c 93       	st	X, r24
  9c:	aa e7       	ldi	r26, 0x7A	; 122
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8c 93       	st	X, r24
  aa:	aa e7       	ldi	r26, 0x7A	; 122
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	8c 93       	st	X, r24
  b8:	aa e7       	ldi	r26, 0x7A	; 122
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
}
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	8c 93       	st	X, r24
  c6:	aa e7       	ldi	r26, 0x7A	; 122
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	8c 93       	st	X, r24
  d4:	e1 ec       	ldi	r30, 0xC1	; 193
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
  da:	cf 91       	pop	r28
  dc:	df 91       	pop	r29
  de:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007bc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d6b  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .rodata.SS    00000001  00000000  00000000  0000155b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rodata.MOSI  00000001  00000000  00000000  0000155c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata.MISO  00000001  00000000  00000000  0000155d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata.SCK   00000001  00000000  00000000  0000155e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata.SDA   00000001  00000000  00000000  0000155f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rodata.SCL   00000001  00000000  00000000  00001560  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .rodata.LED_BUILTIN 00000001  00000000  00000000  00001561  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .rodata.A0    00000001  00000000  00000000  00001562  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .rodata.A1    00000001  00000000  00000000  00001563  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .rodata.A2    00000001  00000000  00000000  00001564  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .rodata.A3    00000001  00000000  00000000  00001565  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .rodata.A4    00000001  00000000  00000000  00001566  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .rodata.A5    00000001  00000000  00000000  00001567  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .rodata.A6    00000001  00000000  00000000  00001568  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .rodata.A7    00000001  00000000  00000000  00001569  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .data.analog_reference 00000001  00000000  00000000  0000156a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.analogReference 0000001a  00000000  00000000  0000156b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.analogRead 00000092  00000000  00000000  00001585  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.analogWrite 0000017c  00000000  00000000  00001617  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.analogReference:

00000000 <analogReference>:
#include "pins_arduino.h"

uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	80 93 00 00 	sts	0x0000, r24
}
  12:	0f 90       	pop	r0
  14:	cf 91       	pop	r28
  16:	df 91       	pop	r29
  18:	08 95       	ret

Disassembly of section .text.analogRead:

00000000 <analogRead>:
#include "pins_arduino.h"

uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <analogRead+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   c:	8b 83       	std	Y+3, r24	; 0x03
   e:	8b 81       	ldd	r24, Y+3	; 0x03
  10:	8e 30       	cpi	r24, 0x0E	; 14
}
  12:	00 f0       	brcs	.+0      	; 0x14 <analogRead+0x14>
  14:	8b 81       	ldd	r24, Y+3	; 0x03
  16:	8e 50       	subi	r24, 0x0E	; 14
  18:	8b 83       	std	Y+3, r24	; 0x03
  1a:	ec e7       	ldi	r30, 0x7C	; 124
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	80 91 00 00 	lds	r24, 0x0000
  22:	88 2f       	mov	r24, r24
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	00 24       	eor	r0, r0
  28:	96 95       	lsr	r25
  2a:	87 95       	ror	r24
  2c:	07 94       	ror	r0
  2e:	96 95       	lsr	r25
  30:	87 95       	ror	r24
  32:	07 94       	ror	r0
  34:	98 2f       	mov	r25, r24
  36:	80 2d       	mov	r24, r0
  38:	98 2f       	mov	r25, r24
  3a:	8b 81       	ldd	r24, Y+3	; 0x03
  3c:	87 70       	andi	r24, 0x07	; 7
  3e:	89 2b       	or	r24, r25
  40:	80 83       	st	Z, r24
  42:	aa e7       	ldi	r26, 0x7A	; 122
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	ea e7       	ldi	r30, 0x7A	; 122
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	80 81       	ld	r24, Z
  4c:	80 64       	ori	r24, 0x40	; 64
  4e:	8c 93       	st	X, r24
  50:	ea e7       	ldi	r30, 0x7A	; 122
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	80 81       	ld	r24, Z
  56:	88 2f       	mov	r24, r24
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	80 74       	andi	r24, 0x40	; 64
  5c:	90 70       	andi	r25, 0x00	; 0
  5e:	00 97       	sbiw	r24, 0x00	; 0
  60:	01 f4       	brne	.+0      	; 0x62 <analogRead+0x62>
  62:	e8 e7       	ldi	r30, 0x78	; 120
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	80 81       	ld	r24, Z
  68:	8a 83       	std	Y+2, r24	; 0x02
  6a:	e9 e7       	ldi	r30, 0x79	; 121
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	80 81       	ld	r24, Z
  70:	89 83       	std	Y+1, r24	; 0x01
  72:	89 81       	ldd	r24, Y+1	; 0x01
  74:	88 2f       	mov	r24, r24
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	38 2f       	mov	r19, r24
  7a:	22 27       	eor	r18, r18
  7c:	8a 81       	ldd	r24, Y+2	; 0x02
  7e:	88 2f       	mov	r24, r24
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	82 2b       	or	r24, r18
  84:	93 2b       	or	r25, r19
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	0f 90       	pop	r0
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	08 95       	ret

Disassembly of section .text.analogWrite:

00000000 <analogWrite>:
#include "pins_arduino.h"

uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	28 97       	sbiw	r28, 0x08	; 8
   a:	0f b6       	in	r0, 0x3f	; 63
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
}
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8c 83       	std	Y+4, r24	; 0x04
  16:	7e 83       	std	Y+6, r23	; 0x06
  18:	6d 83       	std	Y+5, r22	; 0x05
  1a:	8c 81       	ldd	r24, Y+4	; 0x04
  1c:	61 e0       	ldi	r22, 0x01	; 1
  1e:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
  22:	8d 81       	ldd	r24, Y+5	; 0x05
  24:	9e 81       	ldd	r25, Y+6	; 0x06
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <analogWrite+0x2a>
  2a:	8c 81       	ldd	r24, Y+4	; 0x04
  2c:	60 e0       	ldi	r22, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
  32:	00 c0       	rjmp	.+0      	; 0x34 <analogWrite+0x34>
  34:	8d 81       	ldd	r24, Y+5	; 0x05
  36:	9e 81       	ldd	r25, Y+6	; 0x06
  38:	8f 3f       	cpi	r24, 0xFF	; 255
  3a:	91 05       	cpc	r25, r1
  3c:	01 f4       	brne	.+0      	; 0x3e <analogWrite+0x3e>
  3e:	8c 81       	ldd	r24, Y+4	; 0x04
  40:	61 e0       	ldi	r22, 0x01	; 1
  42:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
  46:	00 c0       	rjmp	.+0      	; 0x48 <analogWrite+0x48>
  48:	8c 81       	ldd	r24, Y+4	; 0x04
  4a:	88 2f       	mov	r24, r24
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	80 50       	subi	r24, 0x00	; 0
  50:	90 40       	sbci	r25, 0x00	; 0
  52:	9b 83       	std	Y+3, r25	; 0x03
  54:	8a 83       	std	Y+2, r24	; 0x02
  56:	ea 81       	ldd	r30, Y+2	; 0x02
  58:	fb 81       	ldd	r31, Y+3	; 0x03
  5a:	84 91       	lpm	r24, Z+
  5c:	89 83       	std	Y+1, r24	; 0x01
  5e:	89 81       	ldd	r24, Y+1	; 0x01
  60:	28 2f       	mov	r18, r24
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	38 87       	std	Y+8, r19	; 0x08
  66:	2f 83       	std	Y+7, r18	; 0x07
  68:	8f 81       	ldd	r24, Y+7	; 0x07
  6a:	98 85       	ldd	r25, Y+8	; 0x08
  6c:	83 30       	cpi	r24, 0x03	; 3
  6e:	91 05       	cpc	r25, r1
  70:	01 f0       	breq	.+0      	; 0x72 <analogWrite+0x72>
  72:	2f 81       	ldd	r18, Y+7	; 0x07
  74:	38 85       	ldd	r19, Y+8	; 0x08
  76:	24 30       	cpi	r18, 0x04	; 4
  78:	31 05       	cpc	r19, r1
  7a:	04 f4       	brge	.+0      	; 0x7c <analogWrite+0x7c>
  7c:	8f 81       	ldd	r24, Y+7	; 0x07
  7e:	98 85       	ldd	r25, Y+8	; 0x08
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	91 05       	cpc	r25, r1
  84:	01 f0       	breq	.+0      	; 0x86 <analogWrite+0x86>
  86:	2f 81       	ldd	r18, Y+7	; 0x07
  88:	38 85       	ldd	r19, Y+8	; 0x08
  8a:	22 30       	cpi	r18, 0x02	; 2
  8c:	31 05       	cpc	r19, r1
  8e:	01 f0       	breq	.+0      	; 0x90 <analogWrite+0x90>
  90:	00 c0       	rjmp	.+0      	; 0x92 <analogWrite+0x92>
  92:	8f 81       	ldd	r24, Y+7	; 0x07
  94:	98 85       	ldd	r25, Y+8	; 0x08
  96:	86 30       	cpi	r24, 0x06	; 6
  98:	91 05       	cpc	r25, r1
  9a:	01 f4       	brne	.+0      	; 0x9c <analogWrite+0x9c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <analogWrite+0x9e>
  9e:	2f 81       	ldd	r18, Y+7	; 0x07
  a0:	38 85       	ldd	r19, Y+8	; 0x08
  a2:	27 30       	cpi	r18, 0x07	; 7
  a4:	31 05       	cpc	r19, r1
  a6:	01 f4       	brne	.+0      	; 0xa8 <analogWrite+0xa8>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <analogWrite+0xaa>
  aa:	8f 81       	ldd	r24, Y+7	; 0x07
  ac:	98 85       	ldd	r25, Y+8	; 0x08
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	91 05       	cpc	r25, r1
  b2:	01 f0       	breq	.+0      	; 0xb4 <analogWrite+0xb4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <analogWrite+0xb6>
  b6:	a4 e4       	ldi	r26, 0x44	; 68
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e4 e4       	ldi	r30, 0x44	; 68
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	8c 93       	st	X, r24
  c4:	e7 e4       	ldi	r30, 0x47	; 71
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	8d 81       	ldd	r24, Y+5	; 0x05
  ca:	80 83       	st	Z, r24
  cc:	00 c0       	rjmp	.+0      	; 0xce <analogWrite+0xce>
  ce:	a4 e4       	ldi	r26, 0x44	; 68
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e4 e4       	ldi	r30, 0x44	; 68
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	8c 93       	st	X, r24
  dc:	e8 e4       	ldi	r30, 0x48	; 72
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8d 81       	ldd	r24, Y+5	; 0x05
  e2:	80 83       	st	Z, r24
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <analogWrite+0xe6>
  e6:	a0 e8       	ldi	r26, 0x80	; 128
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	e0 e8       	ldi	r30, 0x80	; 128
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	8c 93       	st	X, r24
  f4:	e8 e8       	ldi	r30, 0x88	; 136
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8d 81       	ldd	r24, Y+5	; 0x05
  fa:	9e 81       	ldd	r25, Y+6	; 0x06
  fc:	91 83       	std	Z+1, r25	; 0x01
  fe:	80 83       	st	Z, r24
 100:	00 c0       	rjmp	.+0      	; 0x102 <analogWrite+0x102>
 102:	a0 e8       	ldi	r26, 0x80	; 128
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e0 e8       	ldi	r30, 0x80	; 128
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	8c 93       	st	X, r24
 110:	ea e8       	ldi	r30, 0x8A	; 138
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	8d 81       	ldd	r24, Y+5	; 0x05
 116:	9e 81       	ldd	r25, Y+6	; 0x06
 118:	91 83       	std	Z+1, r25	; 0x01
 11a:	80 83       	st	Z, r24
 11c:	00 c0       	rjmp	.+0      	; 0x11e <analogWrite+0x11e>
 11e:	a0 eb       	ldi	r26, 0xB0	; 176
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e0 eb       	ldi	r30, 0xB0	; 176
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8c 93       	st	X, r24
 12c:	e3 eb       	ldi	r30, 0xB3	; 179
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	8d 81       	ldd	r24, Y+5	; 0x05
 132:	80 83       	st	Z, r24
 134:	00 c0       	rjmp	.+0      	; 0x136 <analogWrite+0x136>
 136:	a0 eb       	ldi	r26, 0xB0	; 176
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e0 eb       	ldi	r30, 0xB0	; 176
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 62       	ori	r24, 0x20	; 32
 142:	8c 93       	st	X, r24
 144:	e4 eb       	ldi	r30, 0xB4	; 180
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8d 81       	ldd	r24, Y+5	; 0x05
 14a:	80 83       	st	Z, r24
 14c:	00 c0       	rjmp	.+0      	; 0x14e <analogWrite+0x14e>
 14e:	8d 81       	ldd	r24, Y+5	; 0x05
 150:	9e 81       	ldd	r25, Y+6	; 0x06
 152:	80 38       	cpi	r24, 0x80	; 128
 154:	91 05       	cpc	r25, r1
 156:	04 f4       	brge	.+0      	; 0x158 <analogWrite+0x158>
 158:	8c 81       	ldd	r24, Y+4	; 0x04
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
 160:	00 c0       	rjmp	.+0      	; 0x162 <analogWrite+0x162>
 162:	8c 81       	ldd	r24, Y+4	; 0x04
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
 16a:	28 96       	adiw	r28, 0x08	; 8
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
 176:	cf 91       	pop	r28
 178:	df 91       	pop	r29
 17a:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000c30  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000104e  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .rodata.SS    00000001  00000000  00000000  00001cb2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rodata.MOSI  00000001  00000000  00000000  00001cb3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata.MISO  00000001  00000000  00000000  00001cb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata.SCK   00000001  00000000  00000000  00001cb5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata.SDA   00000001  00000000  00000000  00001cb6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rodata.SCL   00000001  00000000  00000000  00001cb7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .rodata.LED_BUILTIN 00000001  00000000  00000000  00001cb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .rodata.A0    00000001  00000000  00000000  00001cb9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .rodata.A1    00000001  00000000  00000000  00001cba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .rodata.A2    00000001  00000000  00000000  00001cbb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .rodata.A3    00000001  00000000  00000000  00001cbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .rodata.A4    00000001  00000000  00000000  00001cbd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .rodata.A5    00000001  00000000  00000000  00001cbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .rodata.A6    00000001  00000000  00000000  00001cbf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .rodata.A7    00000001  00000000  00000000  00001cc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.data 0000005a  00000000  00000000  00001cc1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .text.pinMode 00000160  00000000  00000000  00001d1b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.turnOffPWM 000000cc  00000000  00000000  00001e7b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.digitalWrite 000000f6  00000000  00000000  00001f47  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text.digitalRead 000000d4  00000000  00000000  0000203d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.pinMode:

00000000 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	69 97       	sbiw	r28, 0x19	; 25
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	88 8f       	std	Y+24, r24	; 0x18
  16:	69 8f       	std	Y+25, r22	; 0x19
	uint8_t bit = digitalPinToBitMask(pin);
  18:	88 8d       	ldd	r24, Y+24	; 0x18
  1a:	88 2f       	mov	r24, r24
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	80 50       	subi	r24, 0x00	; 0
  20:	90 40       	sbci	r25, 0x00	; 0
  22:	99 8b       	std	Y+17, r25	; 0x11
  24:	88 8b       	std	Y+16, r24	; 0x10
  26:	e8 89       	ldd	r30, Y+16	; 0x10
  28:	f9 89       	ldd	r31, Y+17	; 0x11
  2a:	84 91       	lpm	r24, Z+
  2c:	8f 87       	std	Y+15, r24	; 0x0f
  2e:	8f 85       	ldd	r24, Y+15	; 0x0f
  30:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t port = digitalPinToPort(pin);
  32:	88 8d       	ldd	r24, Y+24	; 0x18
  34:	88 2f       	mov	r24, r24
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	80 50       	subi	r24, 0x00	; 0
  3a:	90 40       	sbci	r25, 0x00	; 0
  3c:	9e 87       	std	Y+14, r25	; 0x0e
  3e:	8d 87       	std	Y+13, r24	; 0x0d
  40:	ed 85       	ldd	r30, Y+13	; 0x0d
  42:	fe 85       	ldd	r31, Y+14	; 0x0e
  44:	84 91       	lpm	r24, Z+
  46:	8c 87       	std	Y+12, r24	; 0x0c
  48:	8c 85       	ldd	r24, Y+12	; 0x0c
  4a:	8e 8b       	std	Y+22, r24	; 0x16
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
  4c:	8e 89       	ldd	r24, Y+22	; 0x16
  4e:	88 23       	and	r24, r24
  50:	01 f4       	brne	.+0      	; 0x52 <pinMode+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <pinMode+0x54>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  54:	8e 89       	ldd	r24, Y+22	; 0x16
  56:	88 2f       	mov	r24, r24
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	88 0f       	add	r24, r24
  5c:	99 1f       	adc	r25, r25
  5e:	80 50       	subi	r24, 0x00	; 0
  60:	90 40       	sbci	r25, 0x00	; 0
  62:	9b 87       	std	Y+11, r25	; 0x0b
  64:	8a 87       	std	Y+10, r24	; 0x0a
  66:	8a 85       	ldd	r24, Y+10	; 0x0a
  68:	9b 85       	ldd	r25, Y+11	; 0x0b
  6a:	fc 01       	movw	r30, r24
  6c:	85 91       	lpm	r24, Z+
  6e:	94 91       	lpm	r25, Z+
  70:	99 87       	std	Y+9, r25	; 0x09
  72:	88 87       	std	Y+8, r24	; 0x08
  74:	fb 87       	std	Y+11, r31	; 0x0b
  76:	ea 87       	std	Y+10, r30	; 0x0a
  78:	88 85       	ldd	r24, Y+8	; 0x08
  7a:	99 85       	ldd	r25, Y+9	; 0x09
  7c:	9d 8b       	std	Y+21, r25	; 0x15
  7e:	8c 8b       	std	Y+20, r24	; 0x14
	out = portOutputRegister(port);
  80:	8e 89       	ldd	r24, Y+22	; 0x16
  82:	88 2f       	mov	r24, r24
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	80 50       	subi	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	9f 83       	std	Y+7, r25	; 0x07
  90:	8e 83       	std	Y+6, r24	; 0x06
  92:	8e 81       	ldd	r24, Y+6	; 0x06
  94:	9f 81       	ldd	r25, Y+7	; 0x07
  96:	fc 01       	movw	r30, r24
  98:	85 91       	lpm	r24, Z+
  9a:	94 91       	lpm	r25, Z+
  9c:	9d 83       	std	Y+5, r25	; 0x05
  9e:	8c 83       	std	Y+4, r24	; 0x04
  a0:	ff 83       	std	Y+7, r31	; 0x07
  a2:	ee 83       	std	Y+6, r30	; 0x06
  a4:	8c 81       	ldd	r24, Y+4	; 0x04
  a6:	9d 81       	ldd	r25, Y+5	; 0x05
  a8:	9b 8b       	std	Y+19, r25	; 0x13
  aa:	8a 8b       	std	Y+18, r24	; 0x12

	if (mode == INPUT) { 
  ac:	89 8d       	ldd	r24, Y+25	; 0x19
  ae:	88 23       	and	r24, r24
  b0:	01 f4       	brne	.+0      	; 0xb2 <pinMode+0xb2>
		uint8_t oldSREG = SREG;
  b2:	ef e5       	ldi	r30, 0x5F	; 95
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8b 83       	std	Y+3, r24	; 0x03
                cli();
  ba:	f8 94       	cli
		*reg &= ~bit;
  bc:	ec 89       	ldd	r30, Y+20	; 0x14
  be:	fd 89       	ldd	r31, Y+21	; 0x15
  c0:	80 81       	ld	r24, Z
  c2:	98 2f       	mov	r25, r24
  c4:	8f 89       	ldd	r24, Y+23	; 0x17
  c6:	80 95       	com	r24
  c8:	89 23       	and	r24, r25
  ca:	ec 89       	ldd	r30, Y+20	; 0x14
  cc:	fd 89       	ldd	r31, Y+21	; 0x15
  ce:	80 83       	st	Z, r24
		*out &= ~bit;
  d0:	ea 89       	ldd	r30, Y+18	; 0x12
  d2:	fb 89       	ldd	r31, Y+19	; 0x13
  d4:	80 81       	ld	r24, Z
  d6:	98 2f       	mov	r25, r24
  d8:	8f 89       	ldd	r24, Y+23	; 0x17
  da:	80 95       	com	r24
  dc:	89 23       	and	r24, r25
  de:	ea 89       	ldd	r30, Y+18	; 0x12
  e0:	fb 89       	ldd	r31, Y+19	; 0x13
  e2:	80 83       	st	Z, r24
		SREG = oldSREG;
  e4:	ef e5       	ldi	r30, 0x5F	; 95
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	80 83       	st	Z, r24
  ec:	00 c0       	rjmp	.+0      	; 0xee <pinMode+0xee>
	} else if (mode == INPUT_PULLUP) {
  ee:	89 8d       	ldd	r24, Y+25	; 0x19
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	01 f4       	brne	.+0      	; 0xf4 <pinMode+0xf4>
		uint8_t oldSREG = SREG;
  f4:	ef e5       	ldi	r30, 0x5F	; 95
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8a 83       	std	Y+2, r24	; 0x02
                cli();
  fc:	f8 94       	cli
		*reg &= ~bit;
  fe:	ec 89       	ldd	r30, Y+20	; 0x14
 100:	fd 89       	ldd	r31, Y+21	; 0x15
 102:	80 81       	ld	r24, Z
 104:	98 2f       	mov	r25, r24
 106:	8f 89       	ldd	r24, Y+23	; 0x17
 108:	80 95       	com	r24
 10a:	89 23       	and	r24, r25
 10c:	ec 89       	ldd	r30, Y+20	; 0x14
 10e:	fd 89       	ldd	r31, Y+21	; 0x15
 110:	80 83       	st	Z, r24
		*out |= bit;
 112:	ea 89       	ldd	r30, Y+18	; 0x12
 114:	fb 89       	ldd	r31, Y+19	; 0x13
 116:	90 81       	ld	r25, Z
 118:	8f 89       	ldd	r24, Y+23	; 0x17
 11a:	89 2b       	or	r24, r25
 11c:	ea 89       	ldd	r30, Y+18	; 0x12
 11e:	fb 89       	ldd	r31, Y+19	; 0x13
 120:	80 83       	st	Z, r24
		SREG = oldSREG;
 122:	ef e5       	ldi	r30, 0x5F	; 95
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	80 83       	st	Z, r24
 12a:	00 c0       	rjmp	.+0      	; 0x12c <pinMode+0x12c>
	} else {
		uint8_t oldSREG = SREG;
 12c:	ef e5       	ldi	r30, 0x5F	; 95
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	89 83       	std	Y+1, r24	; 0x01
                cli();
 134:	f8 94       	cli
		*reg |= bit;
 136:	ec 89       	ldd	r30, Y+20	; 0x14
 138:	fd 89       	ldd	r31, Y+21	; 0x15
 13a:	90 81       	ld	r25, Z
 13c:	8f 89       	ldd	r24, Y+23	; 0x17
 13e:	89 2b       	or	r24, r25
 140:	ec 89       	ldd	r30, Y+20	; 0x14
 142:	fd 89       	ldd	r31, Y+21	; 0x15
 144:	80 83       	st	Z, r24
		SREG = oldSREG;
 146:	ef e5       	ldi	r30, 0x5F	; 95
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	80 83       	st	Z, r24
	}
}
 14e:	69 96       	adiw	r28, 0x19	; 25
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	cf 91       	pop	r28
 15c:	df 91       	pop	r29
 15e:	08 95       	ret

Disassembly of section .text.turnOffPWM:

00000000 <turnOffPWM>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <turnOffPWM+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	28 2f       	mov	r18, r24
  12:	30 e0       	ldi	r19, 0x00	; 0
  14:	3b 83       	std	Y+3, r19	; 0x03
  16:	2a 83       	std	Y+2, r18	; 0x02
	uint8_t bit = digitalPinToBitMask(pin);
  18:	8a 81       	ldd	r24, Y+2	; 0x02
  1a:	9b 81       	ldd	r25, Y+3	; 0x03
  1c:	83 30       	cpi	r24, 0x03	; 3
  1e:	91 05       	cpc	r25, r1
  20:	01 f0       	breq	.+0      	; 0x22 <turnOffPWM+0x22>
  22:	2a 81       	ldd	r18, Y+2	; 0x02
  24:	3b 81       	ldd	r19, Y+3	; 0x03
  26:	24 30       	cpi	r18, 0x04	; 4
  28:	31 05       	cpc	r19, r1
  2a:	04 f4       	brge	.+0      	; 0x2c <turnOffPWM+0x2c>
  2c:	8a 81       	ldd	r24, Y+2	; 0x02
  2e:	9b 81       	ldd	r25, Y+3	; 0x03
  30:	81 30       	cpi	r24, 0x01	; 1
	uint8_t port = digitalPinToPort(pin);
  32:	91 05       	cpc	r25, r1
  34:	01 f0       	breq	.+0      	; 0x36 <turnOffPWM+0x36>
  36:	2a 81       	ldd	r18, Y+2	; 0x02
  38:	3b 81       	ldd	r19, Y+3	; 0x03
  3a:	22 30       	cpi	r18, 0x02	; 2
  3c:	31 05       	cpc	r19, r1
  3e:	01 f0       	breq	.+0      	; 0x40 <turnOffPWM+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <turnOffPWM+0x42>
  42:	8a 81       	ldd	r24, Y+2	; 0x02
  44:	9b 81       	ldd	r25, Y+3	; 0x03
  46:	86 30       	cpi	r24, 0x06	; 6
  48:	91 05       	cpc	r25, r1
  4a:	01 f0       	breq	.+0      	; 0x4c <turnOffPWM+0x4c>
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
  4c:	2a 81       	ldd	r18, Y+2	; 0x02
  4e:	3b 81       	ldd	r19, Y+3	; 0x03
  50:	27 30       	cpi	r18, 0x07	; 7
  52:	31 05       	cpc	r19, r1

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  54:	01 f0       	breq	.+0      	; 0x56 <turnOffPWM+0x56>
  56:	8a 81       	ldd	r24, Y+2	; 0x02
  58:	9b 81       	ldd	r25, Y+3	; 0x03
  5a:	84 30       	cpi	r24, 0x04	; 4
  5c:	91 05       	cpc	r25, r1
  5e:	01 f0       	breq	.+0      	; 0x60 <turnOffPWM+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <turnOffPWM+0x62>
  62:	a0 e8       	ldi	r26, 0x80	; 128
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	8f 77       	andi	r24, 0x7F	; 127
  6e:	8c 93       	st	X, r24
  70:	00 c0       	rjmp	.+0      	; 0x72 <turnOffPWM+0x72>
  72:	a0 e8       	ldi	r26, 0x80	; 128
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e0 e8       	ldi	r30, 0x80	; 128
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	8f 7d       	andi	r24, 0xDF	; 223
  7e:	8c 93       	st	X, r24
	out = portOutputRegister(port);
  80:	00 c0       	rjmp	.+0      	; 0x82 <turnOffPWM+0x82>
  82:	a4 e4       	ldi	r26, 0x44	; 68
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e4       	ldi	r30, 0x44	; 68
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	8c 93       	st	X, r24
  90:	00 c0       	rjmp	.+0      	; 0x92 <turnOffPWM+0x92>
  92:	a4 e4       	ldi	r26, 0x44	; 68
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e4 e4       	ldi	r30, 0x44	; 68
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 7d       	andi	r24, 0xDF	; 223
  9e:	8c 93       	st	X, r24
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <turnOffPWM+0xa2>
  a2:	a0 eb       	ldi	r26, 0xB0	; 176
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e0 eb       	ldi	r30, 0xB0	; 176
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z

	if (mode == INPUT) { 
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	8c 93       	st	X, r24
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <turnOffPWM+0xb2>
		uint8_t oldSREG = SREG;
  b2:	a0 eb       	ldi	r26, 0xB0	; 176
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e0 eb       	ldi	r30, 0xB0	; 176
  b8:	f0 e0       	ldi	r31, 0x00	; 0
                cli();
  ba:	80 81       	ld	r24, Z
		*reg &= ~bit;
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	8c 93       	st	X, r24
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000000 <digitalWrite>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	65 97       	sbiw	r28, 0x15	; 21
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8c 8b       	std	Y+20, r24	; 0x14
  16:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t bit = digitalPinToBitMask(pin);
  18:	8c 89       	ldd	r24, Y+20	; 0x14
  1a:	88 2f       	mov	r24, r24
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	80 50       	subi	r24, 0x00	; 0
  20:	90 40       	sbci	r25, 0x00	; 0
  22:	9d 87       	std	Y+13, r25	; 0x0d
  24:	8c 87       	std	Y+12, r24	; 0x0c
  26:	ec 85       	ldd	r30, Y+12	; 0x0c
  28:	fd 85       	ldd	r31, Y+13	; 0x0d
  2a:	84 91       	lpm	r24, Z+
  2c:	8b 87       	std	Y+11, r24	; 0x0b
  2e:	8b 85       	ldd	r24, Y+11	; 0x0b
  30:	8b 8b       	std	Y+19, r24	; 0x13
	uint8_t port = digitalPinToPort(pin);
  32:	8c 89       	ldd	r24, Y+20	; 0x14
  34:	88 2f       	mov	r24, r24
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	80 50       	subi	r24, 0x00	; 0
  3a:	90 40       	sbci	r25, 0x00	; 0
  3c:	9a 87       	std	Y+10, r25	; 0x0a
  3e:	89 87       	std	Y+9, r24	; 0x09
  40:	e9 85       	ldd	r30, Y+9	; 0x09
  42:	fa 85       	ldd	r31, Y+10	; 0x0a
  44:	84 91       	lpm	r24, Z+
  46:	88 87       	std	Y+8, r24	; 0x08
  48:	88 85       	ldd	r24, Y+8	; 0x08
  4a:	8a 8b       	std	Y+18, r24	; 0x12
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
  4c:	8c 89       	ldd	r24, Y+20	; 0x14
  4e:	88 2f       	mov	r24, r24
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	80 50       	subi	r24, 0x00	; 0

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  54:	90 40       	sbci	r25, 0x00	; 0
  56:	9f 83       	std	Y+7, r25	; 0x07
  58:	8e 83       	std	Y+6, r24	; 0x06
  5a:	ee 81       	ldd	r30, Y+6	; 0x06
  5c:	ff 81       	ldd	r31, Y+7	; 0x07
  5e:	84 91       	lpm	r24, Z+
  60:	8d 83       	std	Y+5, r24	; 0x05
  62:	8d 81       	ldd	r24, Y+5	; 0x05
  64:	89 8b       	std	Y+17, r24	; 0x11
  66:	89 89       	ldd	r24, Y+17	; 0x11
  68:	88 23       	and	r24, r24
  6a:	01 f4       	brne	.+0      	; 0x6c <digitalWrite+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <digitalWrite+0x6e>
  6e:	8b 89       	ldd	r24, Y+19	; 0x13
  70:	88 23       	and	r24, r24
  72:	01 f0       	breq	.+0      	; 0x74 <digitalWrite+0x74>
  74:	8b 89       	ldd	r24, Y+19	; 0x13
  76:	0e 94 00 00 	call	0	; 0x0 <digitalWrite>
  7a:	89 89       	ldd	r24, Y+17	; 0x11
  7c:	88 2f       	mov	r24, r24
  7e:	90 e0       	ldi	r25, 0x00	; 0
	out = portOutputRegister(port);
  80:	88 0f       	add	r24, r24
  82:	99 1f       	adc	r25, r25
  84:	80 50       	subi	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	9c 83       	std	Y+4, r25	; 0x04
  8a:	8b 83       	std	Y+3, r24	; 0x03
  8c:	8b 81       	ldd	r24, Y+3	; 0x03
  8e:	9c 81       	ldd	r25, Y+4	; 0x04
  90:	fc 01       	movw	r30, r24
  92:	85 91       	lpm	r24, Z+
  94:	94 91       	lpm	r25, Z+
  96:	9a 83       	std	Y+2, r25	; 0x02
  98:	89 83       	std	Y+1, r24	; 0x01
  9a:	fc 83       	std	Y+4, r31	; 0x04
  9c:	eb 83       	std	Y+3, r30	; 0x03
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	9a 81       	ldd	r25, Y+2	; 0x02
  a2:	98 8b       	std	Y+16, r25	; 0x10
  a4:	8f 87       	std	Y+15, r24	; 0x0f
  a6:	ef e5       	ldi	r30, 0x5F	; 95
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z

	if (mode == INPUT) { 
  ac:	8e 87       	std	Y+14, r24	; 0x0e
  ae:	f8 94       	cli
  b0:	8d 89       	ldd	r24, Y+21	; 0x15
		uint8_t oldSREG = SREG;
  b2:	88 23       	and	r24, r24
  b4:	01 f4       	brne	.+0      	; 0xb6 <digitalWrite+0xb6>
  b6:	ef 85       	ldd	r30, Y+15	; 0x0f
  b8:	f8 89       	ldd	r31, Y+16	; 0x10
                cli();
  ba:	80 81       	ld	r24, Z
		*reg &= ~bit;
  bc:	98 2f       	mov	r25, r24
  be:	8a 89       	ldd	r24, Y+18	; 0x12
  c0:	80 95       	com	r24
  c2:	89 23       	and	r24, r25
  c4:	ef 85       	ldd	r30, Y+15	; 0x0f
  c6:	f8 89       	ldd	r31, Y+16	; 0x10
  c8:	80 83       	st	Z, r24
  ca:	00 c0       	rjmp	.+0      	; 0xcc <digitalWrite+0xcc>
  cc:	ef 85       	ldd	r30, Y+15	; 0x0f
  ce:	f8 89       	ldd	r31, Y+16	; 0x10
		*out &= ~bit;
  d0:	90 81       	ld	r25, Z
  d2:	8a 89       	ldd	r24, Y+18	; 0x12
  d4:	89 2b       	or	r24, r25
  d6:	ef 85       	ldd	r30, Y+15	; 0x0f
  d8:	f8 89       	ldd	r31, Y+16	; 0x10
  da:	80 83       	st	Z, r24
  dc:	ef e5       	ldi	r30, 0x5F	; 95
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8e 85       	ldd	r24, Y+14	; 0x0e
  e2:	80 83       	st	Z, r24
		SREG = oldSREG;
  e4:	65 96       	adiw	r28, 0x15	; 21
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
	} else if (mode == INPUT_PULLUP) {
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
		uint8_t oldSREG = SREG;
  f4:	08 95       	ret

Disassembly of section .text.digitalRead:

00000000 <digitalRead>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	63 97       	sbiw	r28, 0x13	; 19
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	89 8b       	std	Y+17, r24	; 0x11
  16:	89 89       	ldd	r24, Y+17	; 0x11
	uint8_t bit = digitalPinToBitMask(pin);
  18:	88 2f       	mov	r24, r24
  1a:	90 e0       	ldi	r25, 0x00	; 0
  1c:	80 50       	subi	r24, 0x00	; 0
  1e:	90 40       	sbci	r25, 0x00	; 0
  20:	9d 87       	std	Y+13, r25	; 0x0d
  22:	8c 87       	std	Y+12, r24	; 0x0c
  24:	ec 85       	ldd	r30, Y+12	; 0x0c
  26:	fd 85       	ldd	r31, Y+13	; 0x0d
  28:	84 91       	lpm	r24, Z+
  2a:	8b 87       	std	Y+11, r24	; 0x0b
  2c:	8b 85       	ldd	r24, Y+11	; 0x0b
  2e:	88 8b       	std	Y+16, r24	; 0x10
  30:	89 89       	ldd	r24, Y+17	; 0x11
	uint8_t port = digitalPinToPort(pin);
  32:	88 2f       	mov	r24, r24
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	80 50       	subi	r24, 0x00	; 0
  38:	90 40       	sbci	r25, 0x00	; 0
  3a:	9a 87       	std	Y+10, r25	; 0x0a
  3c:	89 87       	std	Y+9, r24	; 0x09
  3e:	e9 85       	ldd	r30, Y+9	; 0x09
  40:	fa 85       	ldd	r31, Y+10	; 0x0a
  42:	84 91       	lpm	r24, Z+
  44:	88 87       	std	Y+8, r24	; 0x08
  46:	88 85       	ldd	r24, Y+8	; 0x08
  48:	8f 87       	std	Y+15, r24	; 0x0f
  4a:	89 89       	ldd	r24, Y+17	; 0x11
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
  4c:	88 2f       	mov	r24, r24
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	80 50       	subi	r24, 0x00	; 0
  52:	90 40       	sbci	r25, 0x00	; 0

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  54:	9f 83       	std	Y+7, r25	; 0x07
  56:	8e 83       	std	Y+6, r24	; 0x06
  58:	ee 81       	ldd	r30, Y+6	; 0x06
  5a:	ff 81       	ldd	r31, Y+7	; 0x07
  5c:	84 91       	lpm	r24, Z+
  5e:	8d 83       	std	Y+5, r24	; 0x05
  60:	8d 81       	ldd	r24, Y+5	; 0x05
  62:	8e 87       	std	Y+14, r24	; 0x0e
  64:	8e 85       	ldd	r24, Y+14	; 0x0e
  66:	88 23       	and	r24, r24
  68:	01 f4       	brne	.+0      	; 0x6a <digitalRead+0x6a>
  6a:	1b 8a       	std	Y+19, r1	; 0x13
  6c:	1a 8a       	std	Y+18, r1	; 0x12
  6e:	00 c0       	rjmp	.+0      	; 0x70 <digitalRead+0x70>
  70:	88 89       	ldd	r24, Y+16	; 0x10
  72:	88 23       	and	r24, r24
  74:	01 f0       	breq	.+0      	; 0x76 <digitalRead+0x76>
  76:	88 89       	ldd	r24, Y+16	; 0x10
  78:	0e 94 00 00 	call	0	; 0x0 <digitalRead>
  7c:	8e 85       	ldd	r24, Y+14	; 0x0e
  7e:	88 2f       	mov	r24, r24
	out = portOutputRegister(port);
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	80 50       	subi	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	9c 83       	std	Y+4, r25	; 0x04
  8c:	8b 83       	std	Y+3, r24	; 0x03
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	9c 81       	ldd	r25, Y+4	; 0x04
  92:	fc 01       	movw	r30, r24
  94:	85 91       	lpm	r24, Z+
  96:	94 91       	lpm	r25, Z+
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	fc 83       	std	Y+4, r31	; 0x04
  9e:	eb 83       	std	Y+3, r30	; 0x03
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	fc 01       	movw	r30, r24
  a6:	90 81       	ld	r25, Z
  a8:	8f 85       	ldd	r24, Y+15	; 0x0f
  aa:	89 23       	and	r24, r25

	if (mode == INPUT) { 
  ac:	88 23       	and	r24, r24
  ae:	01 f0       	breq	.+0      	; 0xb0 <digitalRead+0xb0>
  b0:	81 e0       	ldi	r24, 0x01	; 1
		uint8_t oldSREG = SREG;
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	9b 8b       	std	Y+19, r25	; 0x13
  b6:	8a 8b       	std	Y+18, r24	; 0x12
  b8:	00 c0       	rjmp	.+0      	; 0xba <digitalRead+0xba>
                cli();
  ba:	1b 8a       	std	Y+19, r1	; 0x13
		*reg &= ~bit;
  bc:	1a 8a       	std	Y+18, r1	; 0x12
  be:	8a 89       	ldd	r24, Y+18	; 0x12
  c0:	9b 89       	ldd	r25, Y+19	; 0x13
  c2:	63 96       	adiw	r28, 0x13	; 19
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	cf 91       	pop	r28
		*out &= ~bit;
  d0:	df 91       	pop	r29
  d2:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007bc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000dce  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .rodata.SS    00000001  00000000  00000000  000015be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rodata.MOSI  00000001  00000000  00000000  000015bf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata.MISO  00000001  00000000  00000000  000015c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata.SCK   00000001  00000000  00000000  000015c1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata.SDA   00000001  00000000  00000000  000015c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rodata.SCL   00000001  00000000  00000000  000015c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .rodata.LED_BUILTIN 00000001  00000000  00000000  000015c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .rodata.A0    00000001  00000000  00000000  000015c5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .rodata.A1    00000001  00000000  00000000  000015c6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .rodata.A2    00000001  00000000  00000000  000015c7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .rodata.A3    00000001  00000000  00000000  000015c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .rodata.A4    00000001  00000000  00000000  000015c9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .rodata.A5    00000001  00000000  00000000  000015ca  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .rodata.A6    00000001  00000000  00000000  000015cb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .rodata.A7    00000001  00000000  00000000  000015cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .text.pulseIn 000002a8  00000000  00000000  000015cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	af 97       	sbiw	r28, 0x2f	; 47
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a a3       	std	Y+34, r24	; 0x22
  16:	6b a3       	std	Y+35, r22	; 0x23
  18:	2c a3       	std	Y+36, r18	; 0x24
  1a:	3d a3       	std	Y+37, r19	; 0x25
  1c:	4e a3       	std	Y+38, r20	; 0x26
  1e:	5f a3       	std	Y+39, r21	; 0x27
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  20:	8a a1       	ldd	r24, Y+34	; 0x22
  22:	88 2f       	mov	r24, r24
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	80 50       	subi	r24, 0x00	; 0
  28:	90 40       	sbci	r25, 0x00	; 0
  2a:	9a 8b       	std	Y+18, r25	; 0x12
  2c:	89 8b       	std	Y+17, r24	; 0x11
  2e:	e9 89       	ldd	r30, Y+17	; 0x11
  30:	fa 89       	ldd	r31, Y+18	; 0x12
  32:	84 91       	lpm	r24, Z+
  34:	88 8b       	std	Y+16, r24	; 0x10
  36:	88 89       	ldd	r24, Y+16	; 0x10
  38:	89 a3       	std	Y+33, r24	; 0x21
	uint8_t port = digitalPinToPort(pin);
  3a:	8a a1       	ldd	r24, Y+34	; 0x22
  3c:	88 2f       	mov	r24, r24
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	80 50       	subi	r24, 0x00	; 0
  42:	90 40       	sbci	r25, 0x00	; 0
  44:	9f 87       	std	Y+15, r25	; 0x0f
  46:	8e 87       	std	Y+14, r24	; 0x0e
  48:	ee 85       	ldd	r30, Y+14	; 0x0e
  4a:	ff 85       	ldd	r31, Y+15	; 0x0f
  4c:	84 91       	lpm	r24, Z+
  4e:	8d 87       	std	Y+13, r24	; 0x0d
  50:	8d 85       	ldd	r24, Y+13	; 0x0d
  52:	88 a3       	std	Y+32, r24	; 0x20
	uint8_t stateMask = (state ? bit : 0);
  54:	8b a1       	ldd	r24, Y+35	; 0x23
  56:	88 23       	and	r24, r24
  58:	01 f0       	breq	.+0      	; 0x5a <pulseIn+0x5a>
  5a:	29 a1       	ldd	r18, Y+33	; 0x21
  5c:	2f a7       	std	Y+47, r18	; 0x2f
  5e:	00 c0       	rjmp	.+0      	; 0x60 <pulseIn+0x60>
  60:	1f a6       	std	Y+47, r1	; 0x2f
  62:	3f a5       	ldd	r19, Y+47	; 0x2f
  64:	3f 8f       	std	Y+31, r19	; 0x1f
	unsigned long width = 0; // keep initialization out of time critical area
  66:	1b 8e       	std	Y+27, r1	; 0x1b
  68:	1c 8e       	std	Y+28, r1	; 0x1c
  6a:	1d 8e       	std	Y+29, r1	; 0x1d
  6c:	1e 8e       	std	Y+30, r1	; 0x1e
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  6e:	1f 8a       	std	Y+23, r1	; 0x17
  70:	18 8e       	std	Y+24, r1	; 0x18
  72:	19 8e       	std	Y+25, r1	; 0x19
  74:	1a 8e       	std	Y+26, r1	; 0x1a
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  76:	8c a1       	ldd	r24, Y+36	; 0x24
  78:	9d a1       	ldd	r25, Y+37	; 0x25
  7a:	ae a1       	ldd	r26, Y+38	; 0x26
  7c:	bf a1       	ldd	r27, Y+39	; 0x27
  7e:	88 0f       	add	r24, r24
  80:	99 1f       	adc	r25, r25
  82:	aa 1f       	adc	r26, r26
  84:	bb 1f       	adc	r27, r27
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	aa 1f       	adc	r26, r26
  8c:	bb 1f       	adc	r27, r27
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	aa 1f       	adc	r26, r26
  94:	bb 1f       	adc	r27, r27
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	aa 1f       	adc	r26, r26
  9c:	bb 1f       	adc	r27, r27
  9e:	68 94       	set
  a0:	13 f8       	bld	r1, 3
  a2:	b6 95       	lsr	r27
  a4:	a7 95       	ror	r26
  a6:	97 95       	ror	r25
  a8:	87 95       	ror	r24
  aa:	16 94       	lsr	r1
  ac:	01 f4       	brne	.+0      	; 0xae <pulseIn+0xae>
  ae:	8b 8b       	std	Y+19, r24	; 0x13
  b0:	9c 8b       	std	Y+20, r25	; 0x14
  b2:	ad 8b       	std	Y+21, r26	; 0x15
  b4:	be 8b       	std	Y+22, r27	; 0x16
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <pulseIn+0xb8>
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
  b8:	1e a6       	std	Y+46, r1	; 0x2e
  ba:	2f 89       	ldd	r18, Y+23	; 0x17
  bc:	38 8d       	ldd	r19, Y+24	; 0x18
  be:	49 8d       	ldd	r20, Y+25	; 0x19
  c0:	5a 8d       	ldd	r21, Y+26	; 0x1a
  c2:	8b 89       	ldd	r24, Y+19	; 0x13
  c4:	9c 89       	ldd	r25, Y+20	; 0x14
  c6:	ad 89       	ldd	r26, Y+21	; 0x15
  c8:	be 89       	ldd	r27, Y+22	; 0x16
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	4a 07       	cpc	r20, r26
  d0:	5b 07       	cpc	r21, r27
  d2:	01 f4       	brne	.+0      	; 0xd4 <pulseIn+0xd4>
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	4e a7       	std	Y+46, r20	; 0x2e
  d8:	8f 89       	ldd	r24, Y+23	; 0x17
  da:	98 8d       	ldd	r25, Y+24	; 0x18
  dc:	a9 8d       	ldd	r26, Y+25	; 0x19
  de:	ba 8d       	ldd	r27, Y+26	; 0x1a
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	a1 1d       	adc	r26, r1
  e4:	b1 1d       	adc	r27, r1
  e6:	8f 8b       	std	Y+23, r24	; 0x17
  e8:	98 8f       	std	Y+24, r25	; 0x18
  ea:	a9 8f       	std	Y+25, r26	; 0x19
  ec:	ba 8f       	std	Y+26, r27	; 0x1a
  ee:	5e a5       	ldd	r21, Y+46	; 0x2e
  f0:	55 23       	and	r21, r21
  f2:	01 f0       	breq	.+0      	; 0xf4 <pulseIn+0xf4>
			return 0;
  f4:	1a a6       	std	Y+42, r1	; 0x2a
  f6:	1b a6       	std	Y+43, r1	; 0x2b
  f8:	1c a6       	std	Y+44, r1	; 0x2c
  fa:	1d a6       	std	Y+45, r1	; 0x2d
  fc:	00 c0       	rjmp	.+0      	; 0xfe <pulseIn+0xfe>
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  fe:	88 a1       	ldd	r24, Y+32	; 0x20
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	80 50       	subi	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	9c 87       	std	Y+12, r25	; 0x0c
 10e:	8b 87       	std	Y+11, r24	; 0x0b
 110:	8b 85       	ldd	r24, Y+11	; 0x0b
 112:	9c 85       	ldd	r25, Y+12	; 0x0c
 114:	fc 01       	movw	r30, r24
 116:	85 91       	lpm	r24, Z+
 118:	94 91       	lpm	r25, Z+
 11a:	9a 87       	std	Y+10, r25	; 0x0a
 11c:	89 87       	std	Y+9, r24	; 0x09
 11e:	fc 87       	std	Y+12, r31	; 0x0c
 120:	eb 87       	std	Y+11, r30	; 0x0b
 122:	89 85       	ldd	r24, Y+9	; 0x09
 124:	9a 85       	ldd	r25, Y+10	; 0x0a
 126:	fc 01       	movw	r30, r24
 128:	90 81       	ld	r25, Z
 12a:	89 a1       	ldd	r24, Y+33	; 0x21
 12c:	98 23       	and	r25, r24
 12e:	8f 8d       	ldd	r24, Y+31	; 0x1f
 130:	98 17       	cp	r25, r24
 132:	01 f4       	brne	.+0      	; 0x134 <pulseIn+0x134>
 134:	00 c0       	rjmp	.+0      	; 0x136 <pulseIn+0x136>
 136:	00 c0       	rjmp	.+0      	; 0x138 <pulseIn+0x138>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
 138:	19 a6       	std	Y+41, r1	; 0x29
 13a:	2f 89       	ldd	r18, Y+23	; 0x17
 13c:	38 8d       	ldd	r19, Y+24	; 0x18
 13e:	49 8d       	ldd	r20, Y+25	; 0x19
 140:	5a 8d       	ldd	r21, Y+26	; 0x1a
 142:	8b 89       	ldd	r24, Y+19	; 0x13
 144:	9c 89       	ldd	r25, Y+20	; 0x14
 146:	ad 89       	ldd	r26, Y+21	; 0x15
 148:	be 89       	ldd	r27, Y+22	; 0x16
 14a:	28 17       	cp	r18, r24
 14c:	39 07       	cpc	r19, r25
 14e:	4a 07       	cpc	r20, r26
 150:	5b 07       	cpc	r21, r27
 152:	01 f4       	brne	.+0      	; 0x154 <pulseIn+0x154>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	89 a7       	std	Y+41, r24	; 0x29
 158:	8f 89       	ldd	r24, Y+23	; 0x17
 15a:	98 8d       	ldd	r25, Y+24	; 0x18
 15c:	a9 8d       	ldd	r26, Y+25	; 0x19
 15e:	ba 8d       	ldd	r27, Y+26	; 0x1a
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	a1 1d       	adc	r26, r1
 164:	b1 1d       	adc	r27, r1
 166:	8f 8b       	std	Y+23, r24	; 0x17
 168:	98 8f       	std	Y+24, r25	; 0x18
 16a:	a9 8f       	std	Y+25, r26	; 0x19
 16c:	ba 8f       	std	Y+26, r27	; 0x1a
 16e:	29 a5       	ldd	r18, Y+41	; 0x29
 170:	22 23       	and	r18, r18
 172:	01 f0       	breq	.+0      	; 0x174 <pulseIn+0x174>
			return 0;
 174:	1a a6       	std	Y+42, r1	; 0x2a
 176:	1b a6       	std	Y+43, r1	; 0x2b
 178:	1c a6       	std	Y+44, r1	; 0x2c
 17a:	1d a6       	std	Y+45, r1	; 0x2d
 17c:	00 c0       	rjmp	.+0      	; 0x17e <pulseIn+0x17e>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
 17e:	88 a1       	ldd	r24, Y+32	; 0x20
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	80 50       	subi	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	98 87       	std	Y+8, r25	; 0x08
 18e:	8f 83       	std	Y+7, r24	; 0x07
 190:	8f 81       	ldd	r24, Y+7	; 0x07
 192:	98 85       	ldd	r25, Y+8	; 0x08
 194:	fc 01       	movw	r30, r24
 196:	85 91       	lpm	r24, Z+
 198:	94 91       	lpm	r25, Z+
 19a:	9e 83       	std	Y+6, r25	; 0x06
 19c:	8d 83       	std	Y+5, r24	; 0x05
 19e:	f8 87       	std	Y+8, r31	; 0x08
 1a0:	ef 83       	std	Y+7, r30	; 0x07
 1a2:	8d 81       	ldd	r24, Y+5	; 0x05
 1a4:	9e 81       	ldd	r25, Y+6	; 0x06
 1a6:	fc 01       	movw	r30, r24
 1a8:	90 81       	ld	r25, Z
 1aa:	89 a1       	ldd	r24, Y+33	; 0x21
 1ac:	98 23       	and	r25, r24
 1ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1b0:	98 17       	cp	r25, r24
 1b2:	01 f0       	breq	.+0      	; 0x1b4 <pulseIn+0x1b4>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <pulseIn+0x1b6>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <pulseIn+0x1b8>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
 1b8:	18 a6       	std	Y+40, r1	; 0x28
 1ba:	2f 89       	ldd	r18, Y+23	; 0x17
 1bc:	38 8d       	ldd	r19, Y+24	; 0x18
 1be:	49 8d       	ldd	r20, Y+25	; 0x19
 1c0:	5a 8d       	ldd	r21, Y+26	; 0x1a
 1c2:	8b 89       	ldd	r24, Y+19	; 0x13
 1c4:	9c 89       	ldd	r25, Y+20	; 0x14
 1c6:	ad 89       	ldd	r26, Y+21	; 0x15
 1c8:	be 89       	ldd	r27, Y+22	; 0x16
 1ca:	28 17       	cp	r18, r24
 1cc:	39 07       	cpc	r19, r25
 1ce:	4a 07       	cpc	r20, r26
 1d0:	5b 07       	cpc	r21, r27
 1d2:	01 f4       	brne	.+0      	; 0x1d4 <pulseIn+0x1d4>
 1d4:	31 e0       	ldi	r19, 0x01	; 1
 1d6:	38 a7       	std	Y+40, r19	; 0x28
 1d8:	8f 89       	ldd	r24, Y+23	; 0x17
 1da:	98 8d       	ldd	r25, Y+24	; 0x18
 1dc:	a9 8d       	ldd	r26, Y+25	; 0x19
 1de:	ba 8d       	ldd	r27, Y+26	; 0x1a
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	a1 1d       	adc	r26, r1
 1e4:	b1 1d       	adc	r27, r1
 1e6:	8f 8b       	std	Y+23, r24	; 0x17
 1e8:	98 8f       	std	Y+24, r25	; 0x18
 1ea:	a9 8f       	std	Y+25, r26	; 0x19
 1ec:	ba 8f       	std	Y+26, r27	; 0x1a
 1ee:	48 a5       	ldd	r20, Y+40	; 0x28
 1f0:	44 23       	and	r20, r20
 1f2:	01 f0       	breq	.+0      	; 0x1f4 <pulseIn+0x1f4>
			return 0;
 1f4:	1a a6       	std	Y+42, r1	; 0x2a
 1f6:	1b a6       	std	Y+43, r1	; 0x2b
 1f8:	1c a6       	std	Y+44, r1	; 0x2c
 1fa:	1d a6       	std	Y+45, r1	; 0x2d
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <pulseIn+0x1fe>
		width++;
 1fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
 200:	9c 8d       	ldd	r25, Y+28	; 0x1c
 202:	ad 8d       	ldd	r26, Y+29	; 0x1d
 204:	be 8d       	ldd	r27, Y+30	; 0x1e
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	a1 1d       	adc	r26, r1
 20a:	b1 1d       	adc	r27, r1
 20c:	8b 8f       	std	Y+27, r24	; 0x1b
 20e:	9c 8f       	std	Y+28, r25	; 0x1c
 210:	ad 8f       	std	Y+29, r26	; 0x1d
 212:	be 8f       	std	Y+30, r27	; 0x1e
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
 214:	88 a1       	ldd	r24, Y+32	; 0x20
 216:	88 2f       	mov	r24, r24
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	80 50       	subi	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	9c 83       	std	Y+4, r25	; 0x04
 224:	8b 83       	std	Y+3, r24	; 0x03
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	fc 01       	movw	r30, r24
 22c:	85 91       	lpm	r24, Z+
 22e:	94 91       	lpm	r25, Z+
 230:	9a 83       	std	Y+2, r25	; 0x02
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	fc 83       	std	Y+4, r31	; 0x04
 236:	eb 83       	std	Y+3, r30	; 0x03
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	9a 81       	ldd	r25, Y+2	; 0x02
 23c:	fc 01       	movw	r30, r24
 23e:	90 81       	ld	r25, Z
 240:	89 a1       	ldd	r24, Y+33	; 0x21
 242:	98 23       	and	r25, r24
 244:	8f 8d       	ldd	r24, Y+31	; 0x1f
 246:	98 17       	cp	r25, r24
 248:	01 f4       	brne	.+0      	; 0x24a <pulseIn+0x24a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <pulseIn+0x24c>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
 24c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 24e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 250:	ad 8d       	ldd	r26, Y+29	; 0x1d
 252:	be 8d       	ldd	r27, Y+30	; 0x1e
 254:	25 e1       	ldi	r18, 0x15	; 21
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 264:	dc 01       	movw	r26, r24
 266:	cb 01       	movw	r24, r22
 268:	40 96       	adiw	r24, 0x10	; 16
 26a:	a1 1d       	adc	r26, r1
 26c:	b1 1d       	adc	r27, r1
 26e:	9c 01       	movw	r18, r24
 270:	ad 01       	movw	r20, r26
 272:	68 94       	set
 274:	13 f8       	bld	r1, 3
 276:	56 95       	lsr	r21
 278:	47 95       	ror	r20
 27a:	37 95       	ror	r19
 27c:	27 95       	ror	r18
 27e:	16 94       	lsr	r1
 280:	01 f4       	brne	.+0      	; 0x282 <pulseIn+0x282>
 282:	2a a7       	std	Y+42, r18	; 0x2a
 284:	3b a7       	std	Y+43, r19	; 0x2b
 286:	4c a7       	std	Y+44, r20	; 0x2c
 288:	5d a7       	std	Y+45, r21	; 0x2d
 28a:	8a a5       	ldd	r24, Y+42	; 0x2a
 28c:	9b a5       	ldd	r25, Y+43	; 0x2b
 28e:	ac a5       	ldd	r26, Y+44	; 0x2c
 290:	bd a5       	ldd	r27, Y+45	; 0x2d
}
 292:	bc 01       	movw	r22, r24
 294:	cd 01       	movw	r24, r26
 296:	af 96       	adiw	r28, 0x2f	; 47
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000708  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d58  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .rodata.SS    00000001  00000000  00000000  00001494  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rodata.MOSI  00000001  00000000  00000000  00001495  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata.MISO  00000001  00000000  00000000  00001496  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata.SCK   00000001  00000000  00000000  00001497  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata.SDA   00000001  00000000  00000000  00001498  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rodata.SCL   00000001  00000000  00000000  00001499  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .rodata.LED_BUILTIN 00000001  00000000  00000000  0000149a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .rodata.A0    00000001  00000000  00000000  0000149b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .rodata.A1    00000001  00000000  00000000  0000149c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .rodata.A2    00000001  00000000  00000000  0000149d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .rodata.A3    00000001  00000000  00000000  0000149e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .rodata.A4    00000001  00000000  00000000  0000149f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .rodata.A5    00000001  00000000  00000000  000014a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .rodata.A6    00000001  00000000  00000000  000014a1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .rodata.A7    00000001  00000000  00000000  000014a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .text.shiftIn 000000a0  00000000  00000000  000014a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.shiftOut 000000a2  00000000  00000000  00001543  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <shiftIn+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <shiftIn+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	6c 83       	std	Y+4, r22	; 0x04
  12:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t value = 0;
  14:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  16:	19 82       	std	Y+1, r1	; 0x01
  18:	00 c0       	rjmp	.+0      	; 0x1a <shiftIn+0x1a>
		digitalWrite(clockPin, HIGH);
  1a:	8c 81       	ldd	r24, Y+4	; 0x04
  1c:	61 e0       	ldi	r22, 0x01	; 1
  1e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		if (bitOrder == LSBFIRST)
  22:	8d 81       	ldd	r24, Y+5	; 0x05
  24:	88 23       	and	r24, r24
  26:	01 f4       	brne	.+0      	; 0x28 <shiftIn+0x28>
			value |= digitalRead(dataPin) << i;
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  2e:	9c 01       	movw	r18, r24
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	88 2f       	mov	r24, r24
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	a9 01       	movw	r20, r18
  38:	00 c0       	rjmp	.+0      	; 0x3a <shiftIn+0x3a>
  3a:	44 0f       	add	r20, r20
  3c:	55 1f       	adc	r21, r21
  3e:	8a 95       	dec	r24
  40:	02 f4       	brpl	.+0      	; 0x42 <shiftIn+0x42>
  42:	ca 01       	movw	r24, r20
  44:	98 2f       	mov	r25, r24
  46:	8a 81       	ldd	r24, Y+2	; 0x02
  48:	89 2b       	or	r24, r25
  4a:	8a 83       	std	Y+2, r24	; 0x02
  4c:	00 c0       	rjmp	.+0      	; 0x4e <shiftIn+0x4e>
		else
			value |= digitalRead(dataPin) << (7 - i);
  4e:	8b 81       	ldd	r24, Y+3	; 0x03
  50:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  54:	ac 01       	movw	r20, r24
  56:	89 81       	ldd	r24, Y+1	; 0x01
  58:	28 2f       	mov	r18, r24
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	87 e0       	ldi	r24, 0x07	; 7
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	82 1b       	sub	r24, r18
  62:	93 0b       	sbc	r25, r19
  64:	9a 01       	movw	r18, r20
  66:	00 c0       	rjmp	.+0      	; 0x68 <shiftIn+0x68>
  68:	22 0f       	add	r18, r18
  6a:	33 1f       	adc	r19, r19
  6c:	8a 95       	dec	r24
  6e:	02 f4       	brpl	.+0      	; 0x70 <shiftIn+0x70>
  70:	c9 01       	movw	r24, r18
  72:	98 2f       	mov	r25, r24
  74:	8a 81       	ldd	r24, Y+2	; 0x02
  76:	89 2b       	or	r24, r25
  78:	8a 83       	std	Y+2, r24	; 0x02
		digitalWrite(clockPin, LOW);
  7a:	8c 81       	ldd	r24, Y+4	; 0x04
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	8f 5f       	subi	r24, 0xFF	; 255
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	00 f0       	brcs	.+0      	; 0x8e <shiftIn+0x8e>
			value |= digitalRead(dataPin) << i;
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	0f 90       	pop	r0
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

Disassembly of section .text.shiftOut:

00000000 <shiftOut>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <shiftOut+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <shiftOut+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t value = 0;
  14:	2d 83       	std	Y+5, r18	; 0x05
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  16:	19 82       	std	Y+1, r1	; 0x01
  18:	00 c0       	rjmp	.+0      	; 0x1a <shiftOut+0x1a>
		digitalWrite(clockPin, HIGH);
  1a:	8c 81       	ldd	r24, Y+4	; 0x04
  1c:	88 23       	and	r24, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <shiftOut+0x20>
  20:	8d 81       	ldd	r24, Y+5	; 0x05
		if (bitOrder == LSBFIRST)
  22:	28 2f       	mov	r18, r24
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	89 81       	ldd	r24, Y+1	; 0x01
			value |= digitalRead(dataPin) << i;
  28:	88 2f       	mov	r24, r24
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	a9 01       	movw	r20, r18
  2e:	00 c0       	rjmp	.+0      	; 0x30 <shiftOut+0x30>
  30:	55 95       	asr	r21
  32:	47 95       	ror	r20
  34:	8a 95       	dec	r24
  36:	02 f4       	brpl	.+0      	; 0x38 <shiftOut+0x38>
  38:	ca 01       	movw	r24, r20
  3a:	98 2f       	mov	r25, r24
  3c:	91 70       	andi	r25, 0x01	; 1
  3e:	8a 81       	ldd	r24, Y+2	; 0x02
  40:	69 2f       	mov	r22, r25
  42:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  46:	00 c0       	rjmp	.+0      	; 0x48 <shiftOut+0x48>
  48:	8d 81       	ldd	r24, Y+5	; 0x05
  4a:	48 2f       	mov	r20, r24
  4c:	50 e0       	ldi	r21, 0x00	; 0
		else
			value |= digitalRead(dataPin) << (7 - i);
  4e:	89 81       	ldd	r24, Y+1	; 0x01
  50:	28 2f       	mov	r18, r24
  52:	30 e0       	ldi	r19, 0x00	; 0
  54:	87 e0       	ldi	r24, 0x07	; 7
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	82 1b       	sub	r24, r18
  5a:	93 0b       	sbc	r25, r19
  5c:	9a 01       	movw	r18, r20
  5e:	00 c0       	rjmp	.+0      	; 0x60 <shiftOut+0x60>
  60:	35 95       	asr	r19
  62:	27 95       	ror	r18
  64:	8a 95       	dec	r24
  66:	02 f4       	brpl	.+0      	; 0x68 <shiftOut+0x68>
  68:	c9 01       	movw	r24, r18
  6a:	98 2f       	mov	r25, r24
  6c:	91 70       	andi	r25, 0x01	; 1
  6e:	8a 81       	ldd	r24, Y+2	; 0x02
  70:	69 2f       	mov	r22, r25
  72:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  76:	8b 81       	ldd	r24, Y+3	; 0x03
  78:	61 e0       	ldi	r22, 0x01	; 1
		digitalWrite(clockPin, LOW);
  7a:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  7e:	8b 81       	ldd	r24, Y+3	; 0x03
  80:	60 e0       	ldi	r22, 0x00	; 0

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  82:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	89 81       	ldd	r24, Y+1	; 0x01
			value |= digitalRead(dataPin) << i;
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
  8e:	88 30       	cpi	r24, 0x08	; 8
}
  90:	00 f0       	brcs	.+0      	; 0x92 <shiftOut+0x92>
  92:	0f 90       	pop	r0
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	0f 90       	pop	r0
  9a:	0f 90       	pop	r0
  9c:	cf 91       	pop	r28
  9e:	df 91       	pop	r29
  a0:	08 95       	ret
